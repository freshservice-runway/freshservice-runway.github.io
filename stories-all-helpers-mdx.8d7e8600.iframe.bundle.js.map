{"version":3,"file":"stories-all-helpers-mdx.8d7e8600.iframe.bundle.js","mappings":";;AAuCA;;;;;;AAWA;;AAaA;;;;;;AAWA;;;AAsBA;;;;;;AAWA;;AAWA;;AAWA;;;;;;AAWA;;;AAYA;;;;;;;;;AAcA;;AAWA;;;AAQA;;AAWA;;;AAQA;;AAWA;;;;;;AAWA;;AAWA;;AAWA;;;;;;AAWA;;;;;;;;AAoBA","sources":["webpack://freshservice/./app/helpers/stories/all-helpers.mdx"],"sourcesContent":["\nimport React from 'react';\n\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/runner/_work/itildesk/itildesk/frontend/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim.mjs\";\nimport {Meta, Source} from '@storybook/addon-docs';\nimport dedent from 'ts-dedent';\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"This Doc contains documentation for all helpers in the product\"\n      })\n    }), \"\\n\", \"\\n\", _jsx(Meta, {\n      title: \"Helpers/all-helpers\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Helper functions are JavaScript functions that you can call from your template. Below is the list of helpers available in our product\"\n    }), \"\\n\", _jsx(\"div\", {\n      className: \"subheading\",\n      children: \"Helpers\"\n    }), \"\\n\", _jsxs(\"ol\", {\n      class: \"api-list\",\n      children: [_jsxs(\"li\", {\n        children: [_jsx(\"code\", {\n          children: \"add-default-dash\"\n        }), \" - Adds a default dash in case of empty values, else returns the original value passed\"]\n      }), _jsx(\"br\", {}), _jsx(Source, {\n        language: \"html\",\n        dark: true,\n        format: false,\n        code: dedent`\n    {{add-default-dash data}}\n  `\n      }), _jsx(Source, {\n        language: \"js\",\n        light: true,\n        format: false,\n        code: dedent`\n  // data = 'test'\n  output = 'test'\n  \n  // data = ''\n  output = '-'\n  `\n      }), _jsxs(\"li\", {\n        children: [_jsx(\"code\", {\n          children: \"add-default-double-dash\"\n        }), \" - Adds a \", _jsx(\"b\", {\n          children: \"double\"\n        }), \" dash in case of empty values, else returns the original value passed\"]\n      }), _jsx(Source, {\n        language: \"html\",\n        dark: true,\n        format: false,\n        code: dedent`\n    {{add-default-double-dash data}}\n  `\n      }), _jsx(Source, {\n        language: \"js\",\n        light: true,\n        format: false,\n        code: dedent`\n  // data = 'test'\n  output = 'test'\n  \n  // data = ''\n  output = '--'\n  `\n      }), _jsxs(\"li\", {\n        children: [_jsxs(_components.p, {\n          children: [_jsx(\"code\", {\n            children: \"enumerable-to-string\"\n          }), \" -\"]\n        }), _jsxs(\"ul\", {\n          children: [_jsx(\"li\", {\n            children: \"Returns concatenated string, if plain array\"\n          }), _jsx(\"li\", {\n            children: \"Returns concatenated string of values based on given attribute, if array of objects\"\n          }), _jsx(\"li\", {\n            children: \"Returns empty string, otherwise\"\n          })]\n        })]\n      }), _jsx(Source, {\n        language: \"html\",\n        dark: true,\n        format: false,\n        code: dedent`\n    {{enumerable-to-string params}}\n    {{enumerable-to-string params 'name'}}\n  `\n      }), _jsx(Source, {\n        language: \"js\",\n        light: true,\n        format: false,\n        code: dedent`\n  // {{enumerable-to-string params}} - params = ['foo', 'bar']\n  output = 'foo, bar'\n  \n  // {{enumerable-to-string params 'name'}} - params = [{id: 1, name: 'foo', }, {id: 2, name: 'bar'}]\n  output = 'foo, bar'\n  `\n      }), _jsxs(\"li\", {\n        children: [_jsx(\"code\", {\n          children: \"has-temp-feature\"\n        }), \" - temp feature check in the hbs\"]\n      }), _jsx(Source, {\n        language: \"html\",\n        dark: true,\n        format: false,\n        code: dedent`\n    {{#if (has-temp-feature \"onboarding_v2\") }}\n  `\n      }), _jsxs(\"li\", {\n        children: [_jsx(\"code\", {\n          children: \"incremented\"\n        }), \" - increases 1 with current value \"]\n      }), _jsx(Source, {\n        language: \"html\",\n        dark: true,\n        format: false,\n        code: dedent`\n    {{incremented index}}\n  `\n      }), _jsx(Source, {\n        language: \"js\",\n        light: true,\n        format: false,\n        code: dedent`\n  // {{incremented index}} index = 1\n  output = 2\n  \n  // {{incremented index}} index = 5\n  output = 6\n  `\n      }), _jsxs(\"li\", {\n        children: [_jsx(\"code\", {\n          children: \"if-exist\"\n        }), \" - Returns custom default string incase of empty value\"]\n      }), _jsx(Source, {\n        language: \"html\",\n        dark: true,\n        format: false,\n        code: dedent`\n    {{if-exist data}}\n    {{if-exist data 'defaultValue'}}\n  `\n      }), _jsx(Source, {\n        language: \"js\",\n        light: true,\n        format: false,\n        code: dedent`\n  // {{if-exist data}} - data = \"\"\n  output = \"\"\n  \n  // {{if-exist data \"NA\"}} - data = \"\"\n  output = \"NA\"\n  \n  // {{if-exist data \"NA\"}} - data = \"Select Group\"\n  output = \"Select Group\"\n  `\n      }), _jsxs(\"li\", {\n        children: [_jsx(\"code\", {\n          children: \"debug\"\n        }), \" - logs the params passed and pause the execution of code\"]\n      }), _jsx(Source, {\n        language: \"html\",\n        dark: true,\n        format: false,\n        code: dedent`\n    {{debug 'test'}}\n  `\n      }), _jsx(Source, {\n        language: \"js\",\n        light: true,\n        format: false,\n        code: dedent`\n  //logs in console\n  'test'\n  `\n      }), _jsxs(\"li\", {\n        children: [_jsx(\"code\", {\n          children: \"to-fixed\"\n        }), \" - rounding off the float value to 2\"]\n      }), _jsx(Source, {\n        language: \"html\",\n        dark: true,\n        format: false,\n        code: dedent`\n    {{to-fixed number}}\n  `\n      }), _jsx(Source, {\n        language: \"js\",\n        light: true,\n        format: false,\n        code: dedent`\n  //{{to-fixed number}} number = 234.4677\n  output = '235.47'\n  `\n      }), _jsxs(\"li\", {\n        children: [_jsx(\"code\", {\n          children: \"format-currency\"\n        }), \" - rounding off the float value to 2 and replaces dot to comma\"]\n      }), _jsx(Source, {\n        language: \"html\",\n        dark: true,\n        format: false,\n        code: dedent`\n    {{format-currency number separator}}\n  `\n      }), _jsx(Source, {\n        language: \"js\",\n        light: true,\n        format: false,\n        code: dedent`\n  //{{format-currency number separator}} number = 235.465 separator = ','\n  output = '235,47'\n  \n  //{{format-currency number separator}} number = 235.465 separator = ''\n  output = '235.47'\n  `\n      }), _jsxs(\"li\", {\n        children: [_jsx(\"code\", {\n          children: \"hasfeature\"\n        }), \" - feature check in the hbs\"]\n      }), _jsx(Source, {\n        language: \"html\",\n        dark: true,\n        format: false,\n        code: dedent`\n    {{#if (hasfeature \"service_awareness\")}}\n  `\n      }), _jsxs(\"li\", {\n        children: [_jsx(\"code\", {\n          children: \"is-date-after\"\n        }), \" - compares the 2 dates using moment.js and return true if date1 is after the date2\"]\n      }), _jsx(Source, {\n        language: \"html\",\n        dark: true,\n        format: false,\n        code: dedent`\n     {{is-date-after date1 date2}}\n  `\n      }), _jsx(Source, {\n        language: \"js\",\n        light: true,\n        format: false,\n        code: dedent`\n  // {{is-date-after date1 date2}} date1 = '2010-10-20' date2 = '2010-10-19'\n  output = true\n  \n  // {{is-date-after date1 date2}} date1 = '2010-10-19' date2 = '2010-10-19'\n  output = false\n  `\n      }), _jsxs(\"li\", {\n        children: [_jsx(\"code\", {\n          children: \"hasabilities\"\n        }), \" - returns true or false based on the user privilege\"]\n      }), _jsx(Source, {\n        language: \"html\",\n        dark: true,\n        format: false,\n        code: dedent`\n    {{hasabilities privilege modelId checkOwnsObject }}\n  \n    privilege = privilege which needs to be checked\n    modelId = workspace id/user id\n    checkOwnsObject = value is boolean\n     //if checkOwnsObject is true, it checks modelId is user privileged workspace id if esm enabled, if not checks whether the given privilege is user privileged.\n     //if checkOwnsObject is false or undefined, it checks above one or checks modelId is equal to current user id. \n  `\n      })]\n    })]\n  });\n}\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n"],"names":[],"sourceRoot":""}