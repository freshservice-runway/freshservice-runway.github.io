{"version":3,"file":"ui-components-tree-view-tree-view-mdx.61727054.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAqFA","sources":["webpack://freshservice/./app/components/ui-components/tree-view/tree-view.mdx"],"sourcesContent":["\nimport React from 'react';\n\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/runner/_work/itildesk/itildesk/frontend/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim.mjs\";\nimport {Meta, Controls, Canvas, Source, Story} from \"@storybook/blocks\";\nimport dedent from \"ts-dedent\";\nimport * as TreeViewStories from \"./tree-view.stories\";\nexport const hierarchyData = [{\n  id: 1,\n  label: \"Root Node\",\n  parentId: null\n}, {\n  id: 2,\n  label: \"Disk\",\n  parentId: 1\n}, {\n  id: 3,\n  label: \"AWS Disk\",\n  parentId: 2\n}, {\n  id: 4,\n  label: \"Volume\",\n  parentId: 3\n}, {\n  id: 5,\n  label: \"Azure Disk\",\n  parentId: 2\n}, {\n  id: 6,\n  label: \"Host\",\n  parentId: 1\n}, {\n  id: 7,\n  label: \"VM Ware\",\n  parentId: 6\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(Meta, {\n      of: TreeViewStories\n    }), \"\\n\", _jsx(_components.h1, {\n      id: \"tree-view\",\n      children: \"Tree View\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This component is used when hierarchical dataset needs to be displayed.\"\n    }), \"\\n\", \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        of: TreeViewStories.Default\n      })\n    }), \"\\n\", _jsx(Source, {\n      language: \"html\",\n      dark: true,\n      format: false,\n      code: dedent`\n        <div class=\"tree-view-select-field\">\n            <UiComponents::FormFields::TreeViewSelectField\n                @schema  = {{this.treeViewSelectField}}\n                @model = {{this.treeViewSelectField.model}}\n                @onFieldChange = {{fn this.onFieldChange this}} />\n        </div>\n        <UiComponents::TreeView\n            @data =  {{this.data}}\n            @onNodeClick = {{fn this.onNodeClick this}}\n            @selectedNodeId = {{this.selectedNodeId}}\n            @displayHierarchicalView = {{this.displayHierarchicalView}}\n            @recordIdPath = {{this.recordIdPath}}\n            @parentIdPath = {{this.parentIdPath}}\n            @labelPath = {{this.labelPath}}>\n            <h3 id=\"treeLabel\" class=\"bold title-normal pt24 pl24 pb12\">\n                <span class=\"back-btn\" tabindex=\"-1\" role=\"button\" {{on 'click' (fn (mut this.displayHierarchicalView) false) }}>\n                    {{svg-jar \"arrow-left\" class=\"ember-svg size-16\"}}\n                </span>\n                Hierarchy view\n            </h3>\n        </UiComponents::TreeView>\n    `\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"note\",\n      children: \"NOTE\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If the \", _jsx(_components.code, {\n        children: \"UiComponents::FormFields::TreeViewSelectField\"\n      }), \" component is invoked via DynamicFormFor,\\nmake use of the callback \", _jsx(_components.code, {\n        children: \"tree-view-select-field\"\n      }), \" in \", _jsx(\"strong\", {\n        children: \"fields-builder.js\"\n      }), \" to generate field config.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"supported-arguments\",\n      children: \"Supported Arguments\"\n    }), \"\\n\", _jsx(Controls, {})]\n  });\n}\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n"],"names":[],"sourceRoot":""}