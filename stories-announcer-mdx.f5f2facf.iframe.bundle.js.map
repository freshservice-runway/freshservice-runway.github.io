{"version":3,"file":"stories-announcer-mdx.f5f2facf.iframe.bundle.js","mappings":";;;;;;;;;;;AA2CA;;;AAoCA","sources":["webpack://freshservice/./app/services/stories/announcer.mdx"],"sourcesContent":["\nimport React from 'react';\n\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/runner/_work/itildesk/itildesk/frontend/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim.mjs\";\nimport {Meta, Source} from '@storybook/addon-docs';\nimport dedent from 'ts-dedent';\nfunction _createMdxContent(props) {\n  const _components = {\n    h2: \"h2\",\n    h3: \"h3\",\n    h4: \"h4\",\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(Meta, {\n      title: \"Services/announcer\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"announcer\",\n      children: \"Announcer\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This Ember service provides a way to announce messages to screen readers.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"usage\",\n      children: \"Usage\"\n    }), \"\\n\", _jsx(Source, {\n      language: \"js\",\n      dark: true,\n      format: false,\n      code: dedent`export default class Component {\\n\n      @service announcer;\\n\n      success() {\n        // Can be used by simply passing the message to announce function or 'a' function\n        this.announcer.announce('success message');\n        this.announcer.a('this is alias function to annonce');\n      }\\n\n      failed() {\n        this.announcer.immediate('failed');\n      }\n    }\n  `\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"methods\",\n      children: \"Methods\"\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"announce--a\",\n      children: \"announce / a\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Params\"\n    }), \"\\n\", _jsxs(\"ol\", {\n      children: [_jsx(\"li\", {\n        children: _jsxs(_components.p, {\n          children: [_jsx(\"b\", {\n            children: \"message\"\n          }), _jsx(\"br\", {}), \"\\nMessage to announce\"]\n        })\n      }), _jsx(\"li\", {\n        children: _jsxs(_components.p, {\n          children: [_jsx(\"b\", {\n            children: \"tone\"\n          }), \" \", _jsx(\"br\", {}), \"\\nTone of the message \", _jsx(\"br\", {}), \"\\nAvailable tones - \", _jsx(\"code\", {\n            children: \"assertive\"\n          }), \", \", _jsx(\"code\", {\n            children: \"polite\"\n          }), _jsx(\"br\", {}), \"\\nDefault tone is \", _jsx(\"code\", {\n            children: \"polite\"\n          })]\n        })\n      })]\n    }), \"\\n\", _jsx(Source, {\n      language: \"js\",\n      dark: true,\n      format: false,\n      code: dedent`// Reads the message once the currently read item is complete\n  announcer.a('announce a normal message');\\n\n  // Stops whatever the screen reader is reading and reads this\n  announcer.announce('announce an important message', 'assertive');`\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"immediate\",\n      children: \"immediate\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Params - \", _jsx(\"code\", {\n        children: \"message\"\n      }), \"\\nAlternative function to announce in asservive tone.\"]\n    }), \"\\n\", _jsx(Source, {\n      language: \"js\",\n      dark: true,\n      format: false,\n      code: dedent`announcer.immediate('announce an important message')`\n    })]\n  });\n}\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n"],"names":[],"sourceRoot":""}