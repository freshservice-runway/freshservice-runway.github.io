{"version":3,"file":"stories-construct-nested-field-choices-mdx.6eb05de9.iframe.bundle.js","mappings":";;;;AAyCA;;;;;;;;;;;;;;;;;;;;;;AA2BA;;;;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+EA","sources":["webpack://freshservice/./app/utils/stories/construct-nested-field-choices.mdx"],"sourcesContent":["\nimport React from 'react';\n\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/runner/_work/itildesk/itildesk/frontend/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim.mjs\";\nimport {Meta, Source} from \"@storybook/blocks\";\nimport dedent from \"ts-dedent\";\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(Meta, {\n      title: \"Utils/construct-nested-field-choices\"\n    }), \"\\n\", _jsx(\"div\", {\n      className: \"subheading\",\n      children: \"Construct Nested field choice\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"Used to construct nested field choices based on the input passed in the argument\"\n      })\n    }), \"\\n\", _jsxs(\"ol\", {\n      class: \"api-list\",\n      children: [_jsx(\"li\", {\n        children: _jsxs(_components.p, {\n          children: [_jsx(\"code\", {\n            children: \"constructNestedFieldChoices\"\n          }), \" - this function takes in an array\\nwith nested objects and returns an object with 3 arrays representing 3 levels of nesting\"]\n        })\n      }), _jsx(\"br\", {}), _jsx(Source, {\n        language: \"js\",\n        dark: true,\n        format: false,\n        code: dedent`\n    import { constructNestedFieldChoices } from 'freshservice/utils/construct-nested-field-choices'\n    \n    constructNestedFieldChoices(input, output)\n  `\n      }), _jsx(Source, {\n        language: \"js\",\n        light: true,\n        format: false,\n        code: dedent`\n\t// sample Input\n\tinput = [{\n    id: 1,\n    value: 'Hardware',\n    nested_options: [{\n      id: 2,\n      value: \"Computer\",\n      nested_options: [{\n        id: 3,\n        value: \"Mac\"\n      }]\n    }]\n\t}], output = { level1: [], level2: [], level3: [] };\n\t\n\t//sample output --> output post processing\n  output = {\n    level1: [{id: 1, value: \"Hardware\", dependentIds: {choice: [2]}}],\n    level2: [{id: 2, value: \"Computer\", dependentIds: {choice: [3]}}],\n    level3: [{id: 3, value: \"Mac\"]\n\t}\n        \n  `\n      }), _jsx(\"li\", {\n        children: _jsxs(_components.p, {\n          children: [_jsx(\"code\", {\n            children: \"constructNestedFieldComponentInput\"\n          }), \" - this function constructs an\\nobject which is supported by Ember Dynamic Form - Dependent Field Component\"]\n        })\n      }), _jsx(Source, {\n        language: \"js\",\n        dark: true,\n        format: false,\n        code: dedent`\n    import { constructNestedFieldComponentInput } from 'freshservice/utils/construct-nested-field-choices'\n    \n    constructNestedFieldComponentInput(input, field)\n`\n      }), _jsx(Source, {\n        language: \"js\",\n        light: true,\n        format: false,\n        code: dedent`\n\t// sample Input\n\tinput = { \n\t\tlevel1: [test1, [{id: 1, value: \"Hardware\", dependentIds: {choice: [1]}}]],\n    \tlevel2: [test2, [{id: 2, value: \"Computer\", dependentIds: {choice: [2]}}]],\n    \tlevel3: [test3, [{id: 3, value: \"Mac\", dependentIds: {choice: [3]}}]]\n\t}, field = {\n\t\t\"choices\":  [{\"id\": 19, \"nested_options\": [],\"value\": \"Other\"}],\n\t\t\"errors\": \"\",\n\t\t\"fields\": [{\"id\":\"c227c\",\n\t\t\t\t\"name\":\"test\",\n\t\t\t\t\"label\":\"test\",\n\t\t\t\t\"type\":\"AUTO_COMPLETE\",\n\t\t\t\t\"position\":1,\n\t\t\t\t\"required\":false,\n\t\t\t\t\"editable\":true,\n\t\t\t\t\"visible\":true,\n\t\t\t\t\"deleted\":false,\n\t\t\t\t\"link\":null,\n\t\t\t\t\"placeholder\":null,\n\t\t\t\t\"hint\":null,\n\t\t\t\t\"field_options\":{},\n\t\t\t\t\"filterable\":true,\n\t\t\t\t\"searchable\":true,\n\t\t\t\t\"parent_id\":\"3ea4\",\n\t\t\t\t\"choices\":\"[]\"}],\n\t\t\"isUneditable\": false,\n\t\t\"label\": \"test\",\n\t\t\"required\": true,\n\t\t\"selectedChoice\": null,\n\t\t\"sourceID\": \"0\",\n\t\t\"sourceName\": \"ticket\",\n\t\t\"type\": \"dependent\"\n\t}\n\t\n\t//sample output --> output post processing\n  \toutput = {\n    \t\"name\":\"test\",\n    \t\"getChoices\": [{\"id\": \"1\", \"value\": \"Hardware\", \"dependentIds\": {\"choice\": [1]}}],\n    \t\"inputType\":\"power-select-dependent-field\",\n    \t\"fieldOptions\":{\"dependent\":true},\n    \t\"disableCamelize\":true,\n    \t\"editable\":true,\n    \t\"isNested\":true,\n    \t\"fields\":[{\"name\": \"test2\", \n\t\t\t\"editable\": true, \n\t\t\t\"getChoices\": [\n\t\t\t\t{ \n\t\t\t\t\"id\": \"2\", \n\t\t\t\t\"value\": \"Computer\",  \n\t\t\t\t\"dependentIds\": {\"choice\": [\"2\"]}\n\t\t\t}], \n\t\t\t\"inputType\": \"power-select-dependent-field\", \n\t\t\t\"fieldOptions\": {\"dependent\": true}, \n\t\t\t\"renderInPlace\": true, \n\t\t\t\"optionLabelPath\": \"value\", \n\t\t\t\"disableCamelize\": true, \n\t\t\t\"isNested\": true, \n\t\t\t\"fields\": [{\"name\": \"test3\", \n\t\t\t\t\"editable\": true, \n\t\t\t\t\"getChoices\": [{\"id\": \"3\", \"value\": \"Mac\"}], \n\t\t\t\t\"inputType\": \"power-select-dependent-field\", \n\t\t\t\t\"fieldOptions\": {\"dependent\": true}, \n\t\t\t\t\"optionLabelPath\": \"value\", \n\t\t\t\t\"renderInPlace\": true, \n\t\t\t\t\"fields\": [], \n\t\t\t\t\"disableCamelize\": true, \n\t\t\t\t\"isNested\": true\n\t\t\t\t}]\n\t\t\t}]\n\t\t}\n  `\n      })]\n    })]\n  });\n}\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n"],"names":[],"sourceRoot":""}