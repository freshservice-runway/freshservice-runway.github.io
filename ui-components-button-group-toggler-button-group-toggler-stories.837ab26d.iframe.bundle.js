"use strict";(globalThis.webpackChunkfreshservice=globalThis.webpackChunkfreshservice||[]).push([[8146],{"./node_modules/@storybook/addon-actions/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{XI:()=>action});var external_STORYBOOK_MODULE_PREVIEW_API_=__webpack_require__("storybook/internal/preview-api"),external_STORYBOOK_MODULE_CORE_EVENTS_PREVIEW_ERRORS_=__webpack_require__("storybook/internal/preview-errors"),external_STORYBOOK_MODULE_GLOBAL_=__webpack_require__("@storybook/global"),v4=__webpack_require__("./node_modules/@storybook/addon-actions/node_modules/uuid/dist/esm-browser/v4.js"),ADDON_ID="storybook/actions",EVENT_ID=`${ADDON_ID}/action-event`,config={depth:10,clearOnStoryChange:!0,limit:50},findProto=(obj,callback)=>{let proto=Object.getPrototypeOf(obj);return!proto||callback(proto)?proto:findProto(proto,callback)},serializeArg=a=>{if("object"==typeof(e=a)&&e&&findProto(e,(proto=>/^Synthetic(?:Base)?Event$/.test(proto.constructor.name)))&&"function"==typeof e.persist){let e=Object.create(a.constructor.prototype,Object.getOwnPropertyDescriptors(a));e.persist();let viewDescriptor=Object.getOwnPropertyDescriptor(e,"view"),view=viewDescriptor?.value;return"object"==typeof view&&"Window"===view?.constructor.name&&Object.defineProperty(e,"view",{...viewDescriptor,value:Object.create(view.constructor.prototype)}),e}var e;return a},generateId=()=>"object"==typeof crypto&&"function"==typeof crypto.getRandomValues?(0,v4.A)():Date.now().toString(36)+Math.random().toString(36).substring(2);function action(name,options={}){let actionOptions={...config,...options},handler=function(...args){if(options.implicit){let storyRenderer=("__STORYBOOK_PREVIEW__"in external_STORYBOOK_MODULE_GLOBAL_.global?external_STORYBOOK_MODULE_GLOBAL_.global.__STORYBOOK_PREVIEW__:void 0)?.storyRenders.find((render=>"playing"===render.phase||"rendering"===render.phase));if(storyRenderer){let deprecated=!window?.FEATURES?.disallowImplicitActionsInRenderV8,error=new external_STORYBOOK_MODULE_CORE_EVENTS_PREVIEW_ERRORS_.ImplicitActionsDuringRendering({phase:storyRenderer.phase,name,deprecated});if(!deprecated)throw error;console.warn(error)}}let channel=external_STORYBOOK_MODULE_PREVIEW_API_.addons.getChannel(),id=generateId(),serializedArgs=args.map(serializeArg),normalizedArgs=args.length>1?serializedArgs:serializedArgs[0],actionDisplayToEmit={id,count:0,data:{name,args:normalizedArgs},options:{...actionOptions,maxDepth:5+(actionOptions.depth||3),allowFunction:actionOptions.allowFunction||!1}};channel.emit(EVENT_ID,actionDisplayToEmit)};return handler.isAction=!0,handler.implicit=options.implicit,handler}},"./app/components/ui-components/button-group-toggler/button-group-toggler.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _storybook_addon_actions__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@storybook/addon-actions/dist/index.mjs");const __WEBPACK_DEFAULT_EXPORT__={title:"ui-components/button-group-toggler",component:"UiComponentsButtonGroupToggler",parameters:{docs:{description:{component:"The Button Group Toggler component is used to render a group of toggle buttons. It allows for toggling between different states or views, controlled by the parent component or internally. It accepts an array of button objects, a default active button ID, and a callback for button toggle events."}}}},Default={render:(args,{globals:{loadTranslations}})=>({template:Ember.HTMLBars.template({id:"JDdxpaGh",block:'[[[1,"\\n"],[41,[30,0,["translationsLoaded"]],[[[1,"          "],[8,[39,1],null,[["@buttonsArray","@defaultBtnId","@onButtonToggle","@parentHasButtonToggleControl","@containerId","@onFilterTypeButtonsInsert"],[[30,0,["buttonsArray"]],[30,0,["defaultBtnId"]],[30,0,["onButtonToggle"]],[30,0,["parentHasButtonToggleControl"]],[30,0,["containerId"]],[30,0,["onFilterTypeButtonsInsert"]]]],null],[1,"\\n"]],[]],null],[1,"      "]],[],false,["if","ui-components/button-group-toggler"]]',moduleName:"(unknown template module)",isStrictMode:!1}),context:{...args,loadTranslations:loadTranslations()}}),name:"Default",argTypes:{buttonsArray:{type:"array",description:"Array of button objects with id, text, and optional icon properties."},defaultBtnId:{type:"string",description:"The ID of the default active button.",options:["basic-filter","advanced-filter"],control:{type:"select"}},onButtonToggle:{type:"function",description:"Callback function triggered when a button is toggled."},parentHasButtonToggleControl:{type:"boolean",description:"Determines if the parent component controls the active button."},containerId:{type:"string",description:"The ID of the container element."},onFilterTypeButtonsInsert:{type:"function",description:"Callback function triggered when the buttons are inserted into the DOM."}},args:{buttonsArray:Ember.A([{id:"basic-filter",text:"Basic Filter"},{id:"advanced-filter",text:"Advanced Filter"}]),defaultBtnId:"basic-filter",onButtonToggle:()=>(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_0__.XI)("Button toggled")(),parentHasButtonToggleControl:!1,containerId:"basic-advanced-filter-toggler",onFilterTypeButtonsInsert:()=>(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_0__.XI)("Buttons inserted")()}},__namedExportsOrder=["Default"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  render: (args, {\n    globals: {\n      loadTranslations\n    }\n  }) => {\n    return {\n      template: hbs`\n        {{#if this.translationsLoaded }}\n          <UiComponents::ButtonGroupToggler\n            @buttonsArray={{this.buttonsArray}}\n            @defaultBtnId={{this.defaultBtnId}}\n            @onButtonToggle={{this.onButtonToggle}}\n            @parentHasButtonToggleControl={{this.parentHasButtonToggleControl}}\n            @containerId={{this.containerId}}\n            @onFilterTypeButtonsInsert={{this.onFilterTypeButtonsInsert}}\n          />\n        {{/if}}\n      `,\n      context: {\n        ...args,\n        loadTranslations: loadTranslations()\n      }\n    };\n  },\n  name: 'Default',\n  argTypes: {\n    buttonsArray: {\n      type: 'array',\n      description: 'Array of button objects with id, text, and optional icon properties.'\n    },\n    defaultBtnId: {\n      type: 'string',\n      description: 'The ID of the default active button.',\n      options: ['basic-filter', 'advanced-filter'],\n      control: {\n        type: 'select'\n      }\n    },\n    onButtonToggle: {\n      type: 'function',\n      description: 'Callback function triggered when a button is toggled.'\n    },\n    parentHasButtonToggleControl: {\n      type: 'boolean',\n      description: 'Determines if the parent component controls the active button.'\n    },\n    containerId: {\n      type: 'string',\n      description: 'The ID of the container element.'\n    },\n    onFilterTypeButtonsInsert: {\n      type: 'function',\n      description: 'Callback function triggered when the buttons are inserted into the DOM.'\n    }\n  },\n  args: {\n    buttonsArray: A([{\n      id: 'basic-filter',\n      text: 'Basic Filter'\n    }, {\n      id: 'advanced-filter',\n      text: 'Advanced Filter'\n    }]),\n    defaultBtnId: 'basic-filter',\n    onButtonToggle: () => action('Button toggled')(),\n    parentHasButtonToggleControl: false,\n    containerId: 'basic-advanced-filter-toggler',\n    onFilterTypeButtonsInsert: () => action('Buttons inserted')()\n  }\n}",...Default.parameters?.docs?.source}}}}}]);