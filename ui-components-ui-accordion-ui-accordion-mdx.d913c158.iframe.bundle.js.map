{"version":3,"file":"ui-components-ui-accordion-ui-accordion-mdx.d913c158.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AA6DA","sources":["webpack://freshservice/./app/components/ui-components/ui-accordion/ui-accordion.mdx"],"sourcesContent":["\nimport React from 'react';\n\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/runner/_work/itildesk/itildesk/frontend/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim.mjs\";\nimport {Meta, Controls, Canvas, Source, Story} from '@storybook/blocks';\nimport dedent from 'ts-dedent';\nimport * as UiAccordionStories from './ui-accordion.stories';\nfunction _createMdxContent(props) {\n  const _components = {\n    h1: \"h1\",\n    h2: \"h2\",\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(Meta, {\n      of: UiAccordionStories\n    }), \"\\n\", _jsx(_components.h1, {\n      id: \"ui-accordion\",\n      children: \"UI Accordion\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This component can be used where expand/collapse functionality is needed.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Note: This component works as a placeholder with core functionality, user has to provide styles for header and panel area accordingly. We used CannedResponse UI Accordion component styles to demonstrate this.\"\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        of: UiAccordionStories.Default\n      })\n    }), \"\\n\", _jsx(Source, {\n      language: \"html\",\n      dark: true,\n      format: false,\n      code: dedent`\n        <div class=\"modal-canned-response-carousel-container\">\n            <UiComponents::UiAccordion\n                @onShow={{this.onShow}}\n                @onAfterShow={{this.onAfterShow}}\n                @animation={{this.animation}}\n                as |accordion|>\n                    <accordion.item\n                        @expandOnInit={{this.expandOnInit}}\n                        @isDisabled={{this.isDisabled}}\n                        @name={{this.name}}\n                        as |item|>\n                            <item.header>\n                                <div class=\"accordion-header\">\n                                    <span class=\"pull-left {{if item.isExpanded \"is-expanded\"}}\"> {{svg-jar (if item.isExpanded \"chevron-up\" \"chevron-right\") class=\"chevron-icon ember-svg size-16\" role=\"presentation\"}} </span>\n                                    <span class=\"item-title ellipsis\">This is ui-accordion header</span>\n                                </div>\n                            </item.header>\n                            <div class=\"accordion-panel\">\n                                <item.panel>\n                                    <p>This is ui-accordion panel description</p>\n                                </item.panel>\n                            </div>\n                    </accordion.item>\n            </UiComponents::UiAccordion>\n        </div>\n    `\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"supported-arguments\",\n      children: \"Supported Arguments\"\n    }), \"\\n\", _jsx(Controls, {})]\n  });\n}\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n"],"names":[],"sourceRoot":""}