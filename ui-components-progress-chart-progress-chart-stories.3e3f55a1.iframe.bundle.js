"use strict";(globalThis.webpackChunkfreshservice=globalThis.webpackChunkfreshservice||[]).push([[3736],{"./node_modules/@storybook/addon-actions/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{XI:()=>action});var external_STORYBOOK_MODULE_PREVIEW_API_=__webpack_require__("storybook/internal/preview-api"),external_STORYBOOK_MODULE_CORE_EVENTS_PREVIEW_ERRORS_=__webpack_require__("storybook/internal/preview-errors"),external_STORYBOOK_MODULE_GLOBAL_=__webpack_require__("@storybook/global"),v4=__webpack_require__("./node_modules/@storybook/addon-actions/node_modules/uuid/dist/esm-browser/v4.js"),ADDON_ID="storybook/actions",EVENT_ID=`${ADDON_ID}/action-event`,config={depth:10,clearOnStoryChange:!0,limit:50},findProto=(obj,callback)=>{let proto=Object.getPrototypeOf(obj);return!proto||callback(proto)?proto:findProto(proto,callback)},serializeArg=a=>{if("object"==typeof(e=a)&&e&&findProto(e,(proto=>/^Synthetic(?:Base)?Event$/.test(proto.constructor.name)))&&"function"==typeof e.persist){let e=Object.create(a.constructor.prototype,Object.getOwnPropertyDescriptors(a));e.persist();let viewDescriptor=Object.getOwnPropertyDescriptor(e,"view"),view=viewDescriptor?.value;return"object"==typeof view&&"Window"===view?.constructor.name&&Object.defineProperty(e,"view",{...viewDescriptor,value:Object.create(view.constructor.prototype)}),e}var e;return a},generateId=()=>"object"==typeof crypto&&"function"==typeof crypto.getRandomValues?(0,v4.A)():Date.now().toString(36)+Math.random().toString(36).substring(2);function action(name,options={}){let actionOptions={...config,...options},handler=function(...args){if(options.implicit){let storyRenderer=("__STORYBOOK_PREVIEW__"in external_STORYBOOK_MODULE_GLOBAL_.global?external_STORYBOOK_MODULE_GLOBAL_.global.__STORYBOOK_PREVIEW__:void 0)?.storyRenders.find((render=>"playing"===render.phase||"rendering"===render.phase));if(storyRenderer){let deprecated=!window?.FEATURES?.disallowImplicitActionsInRenderV8,error=new external_STORYBOOK_MODULE_CORE_EVENTS_PREVIEW_ERRORS_.ImplicitActionsDuringRendering({phase:storyRenderer.phase,name,deprecated});if(!deprecated)throw error;console.warn(error)}}let channel=external_STORYBOOK_MODULE_PREVIEW_API_.addons.getChannel(),id=generateId(),serializedArgs=args.map(serializeArg),normalizedArgs=args.length>1?serializedArgs:serializedArgs[0],actionDisplayToEmit={id,count:0,data:{name,args:normalizedArgs},options:{...actionOptions,maxDepth:5+(actionOptions.depth||3),allowFunction:actionOptions.allowFunction||!1}};channel.emit(EVENT_ID,actionDisplayToEmit)};return handler.isAction=!0,handler.implicit=options.implicit,handler}},"./app/components/ui-components/progress-chart/progress-chart.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _storybook_addon_actions__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@storybook/addon-actions/dist/index.mjs");const __WEBPACK_DEFAULT_EXPORT__={title:"ui-components/progress-chart",component:"UiComponentsProgressChart",parameters:{docs:{description:{component:"The ProgressChart component is used to display a series of progress bars, each representing a data item with a title, badge content, progress value, and total text. It supports customizable options for appearance and behavior, and allows interaction through click events."}}}},Default={render:(args,{globals:{loadTranslations}})=>({template:Ember.HTMLBars.template({id:"uX1gy/7k",block:'[[[1,"\\n"],[41,[30,0,["translationsLoaded"]],[[[1,"          "],[8,[39,1],null,[["@chartData","@options","@onChartClick"],[[30,0,["chartData"]],[30,0,["options"]],[30,0,["onChartClick"]]]],null],[1,"\\n"]],[]],null],[1,"      "]],[],false,["if","ui-components/progress-chart"]]',moduleName:"(unknown template module)",isStrictMode:!1}),context:{...args,loadTranslations:loadTranslations()}}),name:"Default",argTypes:{chartData:{type:"array",description:"An array of data objects to be displayed as progress bars. Each object should contain title, badgeContent, progress, total and totalText properties."},options:{type:"object",description:"An object containing configuration options for the progress chart, such as strokeWidth, animation, backgroundColor, progressColour, and overflowColour."},onChartClick:{type:"function",description:"Callback function triggered when a progress bar is clicked. Receives the data object of the clicked bar as an argument."}},args:{chartData:Ember.A([{title:"Task 1",badgeContent:"High",progress:70,total:100,totalText:"100%"},{title:"Task 2",badgeContent:"Medium",progress:50,total:100,totalText:"100%"}]),options:{strokeWidth:6,animation:!0,backgroundColor:"#EBEFF3",progressColour:"#039BE5",overflowColour:"#EF263C"},onChartClick:()=>(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_0__.XI)("Chart item clicked")()}},__namedExportsOrder=["Default"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  render: (args, {\n    globals: {\n      loadTranslations\n    }\n  }) => {\n    return {\n      template: hbs`\n        {{#if this.translationsLoaded }}\n          <UiComponents::ProgressChart\n            @chartData={{this.chartData}}\n            @options={{this.options}}\n            @onChartClick={{this.onChartClick}}\n          />\n        {{/if}}\n      `,\n      context: {\n        ...args,\n        loadTranslations: loadTranslations()\n      }\n    };\n  },\n  name: 'Default',\n  argTypes: {\n    chartData: {\n      type: 'array',\n      description: 'An array of data objects to be displayed as progress bars. Each object should contain title, badgeContent, progress, total and totalText properties.'\n    },\n    options: {\n      type: 'object',\n      description: 'An object containing configuration options for the progress chart, such as strokeWidth, animation, backgroundColor, progressColour, and overflowColour.'\n    },\n    onChartClick: {\n      type: 'function',\n      description: 'Callback function triggered when a progress bar is clicked. Receives the data object of the clicked bar as an argument.'\n    }\n  },\n  args: {\n    chartData: A([{\n      title: 'Task 1',\n      badgeContent: 'High',\n      progress: 70,\n      total: 100,\n      totalText: '100%'\n    }, {\n      title: 'Task 2',\n      badgeContent: 'Medium',\n      progress: 50,\n      total: 100,\n      totalText: '100%'\n    }]),\n    options: {\n      strokeWidth: 6,\n      animation: true,\n      backgroundColor: '#EBEFF3',\n      progressColour: '#039BE5',\n      overflowColour: '#EF263C'\n    },\n    onChartClick: () => action('Chart item clicked')()\n  }\n}",...Default.parameters?.docs?.source}}}}}]);