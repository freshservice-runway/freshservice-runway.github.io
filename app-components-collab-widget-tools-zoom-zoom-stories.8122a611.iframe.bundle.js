"use strict";(globalThis.webpackChunkfreshservice=globalThis.webpackChunkfreshservice||[]).push([[1968],{"./app/components/app-components/collab-widget/tools/zoom/zoom.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});const __WEBPACK_DEFAULT_EXPORT__={title:"app-components/collab-widget/tools/zoom",component:"AppComponentsCollabWidgetToolsZoom",parameters:{docs:{description:{component:"This component is designed to create, list, and delete Zoom meetings in widget and model. It includes logic for validation and displays notifications for updates."}}}},mockCurrentUser=()=>Ember.on("init",(async function(){const currentUser=Ember.getOwner(this).lookup("service:current-user");Ember.setProperties(currentUser,{hasScopedAbilities:()=>!0})})),mockAutoRefreshRTS=()=>Ember.on("init",(function(){const context=Ember.getOwner(this),mockService={zoomUpdateDetails:{visible:!0,updatesCount:3},resetZoomNotification(){this.zoomUpdateDetails.visible=!1}};context.register("service:sockets.ticket-details-auto-refresh-rts",mockService,{instantiate:!1})})),Default={render:(args,{globals:{loadTranslations}})=>({template:Ember.HTMLBars.template({id:"EerkFC/b",block:'[[[1,"\\n"],[41,[30,0,["translationsLoaded"]],[[[1,"\\t\\t\\t\\t\\t"],[10,0],[14,5,"width: 400px;"],[12],[1,"\\n\\t\\t\\t\\t\\t\\t"],[8,[39,1],null,[["@source"],[[30,0,["source"]]]],null],[1,"\\n\\t\\t\\t\\t\\t"],[13],[1,"\\n"]],[]],null],[1,"      "]],[],false,["if","app-components/collab-widget/tools/zoom"]]',moduleName:"(unknown template module)",isStrictMode:!1}),context:{...args,loadTranslations:loadTranslations(),mockCurrentUser:mockCurrentUser(),mockRTS:mockAutoRefreshRTS()}}),name:"Default",argTypes:{source:{type:"object",description:"The source object containing ticket details."}},args:{source:Ember.Object.create({id:1,constructor:{modelName:"ticket"}})}},__namedExportsOrder=["Default"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  render: (args, {\n    globals: {\n      loadTranslations\n    }\n  }) => {\n    return {\n      template: hbs`\n        {{#if this.translationsLoaded }}\n                    <div style=\"width: 400px;\">\n                        <AppComponents::CollabWidget::Tools::Zoom\n                        @source={{this.source}} />\n                    </div>\n        {{/if}}\n      `,\n      context: {\n        ...args,\n        loadTranslations: loadTranslations(),\n        mockCurrentUser: mockCurrentUser(),\n        mockRTS: mockAutoRefreshRTS()\n      }\n    };\n  },\n  name: 'Default',\n  argTypes: {\n    source: {\n      type: 'object',\n      description: 'The source object containing ticket details.'\n    }\n  },\n  args: {\n    source: EmberObject.create({\n      id: 1,\n      constructor: {\n        modelName: 'ticket'\n      }\n    })\n  }\n}",...Default.parameters?.docs?.source}}}}}]);