{"version":3,"file":"app-components-freddy-translate-freddy-translate-mdx.c142b09a.iframe.bundle.js","mappings":";;;;;;;AA0DA;;;;;;;AAgBA","sources":["webpack://freshservice/./app/components/app-components/freddy/translate/freddy-translate.mdx"],"sourcesContent":["\nimport React from 'react';\n\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/runner/_work/itildesk/itildesk/frontend/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim.mjs\";\nimport {Meta, Source} from '@storybook/blocks';\nimport dedent from 'ts-dedent';\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    h2: \"h2\",\n    h3: \"h3\",\n    h4: \"h4\",\n    hr: \"hr\",\n    p: \"p\",\n    strong: \"strong\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(Meta, {\n      title: \"app-components/freddy/translate\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"-freddy-translate\",\n      children: \"â½€ Freddy Translate\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For user generated content like Ticket Description, Conversations, resolution notes the content needs to be translated to the user's language. This component is used to translate the content to the user's language.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To enable AI Powered Translation on the user's content. Instead of rendering the \", _jsx(_components.code, {\n        children: \"{{html-safe}}\"\n      }), \" content, this component has to be called.\\nThis component will take care of the detection, translation of the content, privilege checks, and rendering the content.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"before\",\n      children: \"Before\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"~~\", _jsx(_components.code, {\n        children: \"{{html-safe this.descriptionContent}}\"\n      }), \"~~\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h3, {\n      id: \"new-changes\",\n      children: \"New Changes\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Ticket Conversation\"\n      }), _jsx(\"br\", {}), \"\\nDetect and display translate button. Translate component have control over detection and translation\"]\n    }), \"\\n\", _jsx(Source, {\n      name: \"Sample From Ticket Conversation\",\n      language: \"html\",\n      dark: true,\n      format: false,\n      code: dedent`\n    <AppComponents::Freddy::Translate\n      @isRichText = {{true}}\n      @model = {{this.model}}\n      @attributeName = \"htmlBody\"\n      @detectedLanguage = {{this.model.detectedLanguage}}\n      @entityName = \"ticket_note\"\n      @renderBtnTo = {{concat \"translate-btn-container-\" this.model.id}} />`\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Ticket Description\"\n      }), _jsx(\"br\", {}), \"\\nSkip Detection and Don't display translate button. All controls are if available only in parent component\"]\n    }), \"\\n\", _jsx(Source, {\n      language: \"html\",\n      dark: true,\n      format: false,\n      code: dedent`\n    <AppComponents::Freddy::Translate\n      @isRichText = {{true}}\n      @model = {{this.model}}\n      @attributeName = \"description\"\n      @detectedLanguage = {{this.model.ticketLang}}\n      @skipDetection = {{true}}\n      @skipTranlateBtn = {{true}} />`\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(_components.h2, {\n      id: \"properties\",\n      children: \"Properties\"\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"isrichtext\",\n      children: \"isRichText\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Used to identify if this content is Rich Text or a simple text field values\"\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"model\",\n      children: \"model\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The model object which contains the content to be translated.\"\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"attributename\",\n      children: \"attributeName\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The attribute name of the model object which contains the content to be translated. Since the content can be in different attributes of the model object, this attribute is used to identify the content.\"\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"detectedlanguage\",\n      children: \"detectedLanguage\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If the language of the content is already detected, it can be passed to this component. This will skip the detection process.\"\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"skipdetection\",\n      children: \"skipDetection\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If the language detection is part of the parent component, this flag can be used to skip the detection process.\"\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"skiptranlatebtn\",\n      children: \"skipTranlateBtn\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If the translation is not triggered from this component level, pass this as true to skip rendering the translate button\"\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"renderbtnto\",\n      children: \"renderBtnTo\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If the translation button has to be rendered in a different container, pass the container id here.\"\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"entityname\",\n      children: \"entityName\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"entityName is used to set the context of the content when detecting the language via API, where the FS Backend can identify the entity and store the detected language in that entity.\\nWhen the same model is referred again, the FS API can provide the detected language on the find record API of the respective model itself\"\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(_components.h2, {\n      id: \"functionality\",\n      children: \"Functionality\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"detection\",\n      children: \"Detection\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The component when initiated, tries to detect the language of the content. If the detected language is not the current user's language, the translate button will be displayed\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"live-translation\",\n      children: \"Live Translation\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Translation can be triggered from the component's button or from the freddy/translation service / route component.\\nThis is captured by an event attached to the document. And when the event is triggered, live translation will be enabled for all the child freddy/translate (this) component available\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"translate-only-when-visible\",\n      children: \"Translate only when visible\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The translation will happen only when the component element is inside or near the view port of the window.\\nWhen the user scrolls the page and when the translation content is visible in the viewport, the translation is triggered\"\n    })]\n  });\n}\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n"],"names":[],"sourceRoot":""}