"use strict";(globalThis.webpackChunkfreshservice=globalThis.webpackChunkfreshservice||[]).push([[1508],{"./node_modules/@storybook/addon-actions/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{XI:()=>action});var external_STORYBOOK_MODULE_PREVIEW_API_=__webpack_require__("storybook/internal/preview-api"),external_STORYBOOK_MODULE_CORE_EVENTS_PREVIEW_ERRORS_=__webpack_require__("storybook/internal/preview-errors"),external_STORYBOOK_MODULE_GLOBAL_=__webpack_require__("@storybook/global"),v4=__webpack_require__("./node_modules/@storybook/addon-actions/node_modules/uuid/dist/esm-browser/v4.js"),ADDON_ID="storybook/actions",EVENT_ID=`${ADDON_ID}/action-event`,config={depth:10,clearOnStoryChange:!0,limit:50},findProto=(obj,callback)=>{let proto=Object.getPrototypeOf(obj);return!proto||callback(proto)?proto:findProto(proto,callback)},serializeArg=a=>{if("object"==typeof(e=a)&&e&&findProto(e,(proto=>/^Synthetic(?:Base)?Event$/.test(proto.constructor.name)))&&"function"==typeof e.persist){let e=Object.create(a.constructor.prototype,Object.getOwnPropertyDescriptors(a));e.persist();let viewDescriptor=Object.getOwnPropertyDescriptor(e,"view"),view=viewDescriptor?.value;return"object"==typeof view&&"Window"===view?.constructor.name&&Object.defineProperty(e,"view",{...viewDescriptor,value:Object.create(view.constructor.prototype)}),e}var e;return a},generateId=()=>"object"==typeof crypto&&"function"==typeof crypto.getRandomValues?(0,v4.A)():Date.now().toString(36)+Math.random().toString(36).substring(2);function action(name,options={}){let actionOptions={...config,...options},handler=function(...args){if(options.implicit){let storyRenderer=("__STORYBOOK_PREVIEW__"in external_STORYBOOK_MODULE_GLOBAL_.global?external_STORYBOOK_MODULE_GLOBAL_.global.__STORYBOOK_PREVIEW__:void 0)?.storyRenders.find((render=>"playing"===render.phase||"rendering"===render.phase));if(storyRenderer){let deprecated=!window?.FEATURES?.disallowImplicitActionsInRenderV8,error=new external_STORYBOOK_MODULE_CORE_EVENTS_PREVIEW_ERRORS_.ImplicitActionsDuringRendering({phase:storyRenderer.phase,name,deprecated});if(!deprecated)throw error;console.warn(error)}}let channel=external_STORYBOOK_MODULE_PREVIEW_API_.addons.getChannel(),id=generateId(),serializedArgs=args.map(serializeArg),normalizedArgs=args.length>1?serializedArgs:serializedArgs[0],actionDisplayToEmit={id,count:0,data:{name,args:normalizedArgs},options:{...actionOptions,maxDepth:5+(actionOptions.depth||3),allowFunction:actionOptions.allowFunction||!1}};channel.emit(EVENT_ID,actionDisplayToEmit)};return handler.isAction=!0,handler.implicit=options.implicit,handler}},"./app/components/app-components/collab-widget/communication-import/communication-import.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _storybook_addon_actions__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@storybook/addon-actions/dist/index.mjs");const __WEBPACK_DEFAULT_EXPORT__={title:"app-components/collab-widget/communication-import",component:"AppComponentsCollabWidgetCommunicationImport",parameters:{docs:{description:{component:"This component is responsible for importing communication transcripts. It allows users to add notes to a communication, select note types, and manage the visibility of the note (private/public). It also handles the loading state and displays success or error messages based on the outcome of the import operation."}}}},mockCurrentUser=()=>Ember.on("init",(async function(){const currentUser=Ember.getOwner(this).lookup("service:current-user");Ember.setProperties(currentUser,{hasAbility:()=>!0,hasAbilities:()=>!0,hasScopedAbilities:()=>!0})})),mockCurrentAccount=()=>Ember.on("init",(async function(){const currentAccount=Ember.getOwner(this).lookup("service:current-account");Ember.setProperties(currentAccount,{hasAllFeatures:()=>!0,hasTempFeature:()=>!0,hasFeature:()=>!0,hasAnyFeature:()=>!0})})),mockStore=()=>Ember.on("init",(async function(){Ember.getOwner(this).lookup("service:store").createRecord("conversation",{id:1})})),Default={render:(args,{globals:{loadTranslations}})=>({template:Ember.HTMLBars.template({id:"jKvx2XrW",block:'[[[1,"\\n"],[41,[30,0,["translationsLoaded"]],[[[1,"          "],[8,[39,1],null,[["@appKey","@communication","@source","@toggleModal","@onImport","@closeImportCommunicationsModel"],[[30,0,["appKey"]],[30,0,["communication"]],[30,0,["source"]],[30,0,["toggleModal"]],[30,0,["onImport"]],[30,0,["closeImportCommunicationsModel"]]]],[["default"],[[[[1,"\\n            "],[10,0],[12],[1,"Sample content for yield block"],[13],[1,"\\n          "]],[]]]]],[1,"\\n"]],[]],null],[1,"      "]],[],false,["if","app-components/collab-widget/communication-import"]]',moduleName:"(unknown template module)",isStrictMode:!1}),context:{...args,loadTranslations:loadTranslations(),mockCurrentAccount:mockCurrentAccount(),mockCurrentUser:mockCurrentUser(),mockStore:mockStore()}}),name:"Default",argTypes:{appKey:{type:"string",description:"The key of the app for which communication is being imported"},communication:{type:"object",description:"The communication object containing details of the communication to be imported"},source:{type:"object",description:"The source object from which the communication is being imported"},toggleModal:{type:"boolean",description:"Boolean flag to toggle the visibility of the modal"},onImport:{type:"function",description:"Callback function to handle the import of communication"},closeImportCommunicationsModel:{type:"function",description:"Callback function to close the import communications modal"}},args:{appKey:"zoom",communication:Ember.Object.create({id:1,zoomMeetingInfo:{meetingId:"12345"}}),source:Ember.Object.create({id:1,constructor:{modelName:"ticket"}}),toggleModal:!0,onImport:()=>(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_0__.XI)("Import function was called")(),closeImportCommunicationsModel:()=>(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_0__.XI)("Close import communications model function was called")()}},__namedExportsOrder=["Default"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  render: (args, {\n    globals: {\n      loadTranslations\n    }\n  }) => {\n    return {\n      template: hbs`\n        {{#if this.translationsLoaded }}\n          <AppComponents::CollabWidget::CommunicationImport\n            @appKey={{this.appKey}}\n            @communication={{this.communication}}\n            @source={{this.source}}\n            @toggleModal={{this.toggleModal}}\n            @onImport={{this.onImport}}\n            @closeImportCommunicationsModel={{this.closeImportCommunicationsModel}}\n          >\n            <div>Sample content for yield block</div>\n          </AppComponents::CollabWidget::CommunicationImport>\n        {{/if}}\n      `,\n      context: {\n        ...args,\n        loadTranslations: loadTranslations(),\n        mockCurrentAccount: mockCurrentAccount(),\n        mockCurrentUser: mockCurrentUser(),\n        mockStore: mockStore()\n      }\n    };\n  },\n  name: 'Default',\n  argTypes: {\n    appKey: {\n      type: 'string',\n      description: 'The key of the app for which communication is being imported'\n    },\n    communication: {\n      type: 'object',\n      description: 'The communication object containing details of the communication to be imported'\n    },\n    source: {\n      type: 'object',\n      description: 'The source object from which the communication is being imported'\n    },\n    toggleModal: {\n      type: 'boolean',\n      description: 'Boolean flag to toggle the visibility of the modal'\n    },\n    onImport: {\n      type: 'function',\n      description: 'Callback function to handle the import of communication'\n    },\n    closeImportCommunicationsModel: {\n      type: 'function',\n      description: 'Callback function to close the import communications modal'\n    }\n  },\n  args: {\n    appKey: 'zoom',\n    communication: EmberObject.create({\n      id: 1,\n      zoomMeetingInfo: {\n        meetingId: '12345'\n      }\n    }),\n    source: EmberObject.create({\n      id: 1,\n      constructor: {\n        modelName: 'ticket'\n      }\n    }),\n    toggleModal: true,\n    onImport: () => action('Import function was called')(),\n    closeImportCommunicationsModel: () => action('Close import communications model function was called')()\n  }\n}",...Default.parameters?.docs?.source}}}}}]);