"use strict";(globalThis.webpackChunkfreshservice=globalThis.webpackChunkfreshservice||[]).push([[9672],{"./node_modules/@storybook/addon-actions/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{XI:()=>action});var external_STORYBOOK_MODULE_PREVIEW_API_=__webpack_require__("storybook/internal/preview-api"),external_STORYBOOK_MODULE_CORE_EVENTS_PREVIEW_ERRORS_=__webpack_require__("storybook/internal/preview-errors"),external_STORYBOOK_MODULE_GLOBAL_=__webpack_require__("@storybook/global"),v4=__webpack_require__("./node_modules/@storybook/addon-actions/node_modules/uuid/dist/esm-browser/v4.js"),ADDON_ID="storybook/actions",EVENT_ID=`${ADDON_ID}/action-event`,config={depth:10,clearOnStoryChange:!0,limit:50},findProto=(obj,callback)=>{let proto=Object.getPrototypeOf(obj);return!proto||callback(proto)?proto:findProto(proto,callback)},serializeArg=a=>{if("object"==typeof(e=a)&&e&&findProto(e,(proto=>/^Synthetic(?:Base)?Event$/.test(proto.constructor.name)))&&"function"==typeof e.persist){let e=Object.create(a.constructor.prototype,Object.getOwnPropertyDescriptors(a));e.persist();let viewDescriptor=Object.getOwnPropertyDescriptor(e,"view"),view=viewDescriptor?.value;return"object"==typeof view&&"Window"===view?.constructor.name&&Object.defineProperty(e,"view",{...viewDescriptor,value:Object.create(view.constructor.prototype)}),e}var e;return a},generateId=()=>"object"==typeof crypto&&"function"==typeof crypto.getRandomValues?(0,v4.A)():Date.now().toString(36)+Math.random().toString(36).substring(2);function action(name,options={}){let actionOptions={...config,...options},handler=function(...args){if(options.implicit){let storyRenderer=("__STORYBOOK_PREVIEW__"in external_STORYBOOK_MODULE_GLOBAL_.global?external_STORYBOOK_MODULE_GLOBAL_.global.__STORYBOOK_PREVIEW__:void 0)?.storyRenders.find((render=>"playing"===render.phase||"rendering"===render.phase));if(storyRenderer){let deprecated=!window?.FEATURES?.disallowImplicitActionsInRenderV8,error=new external_STORYBOOK_MODULE_CORE_EVENTS_PREVIEW_ERRORS_.ImplicitActionsDuringRendering({phase:storyRenderer.phase,name,deprecated});if(!deprecated)throw error;console.warn(error)}}let channel=external_STORYBOOK_MODULE_PREVIEW_API_.addons.getChannel(),id=generateId(),serializedArgs=args.map(serializeArg),normalizedArgs=args.length>1?serializedArgs:serializedArgs[0],actionDisplayToEmit={id,count:0,data:{name,args:normalizedArgs},options:{...actionOptions,maxDepth:5+(actionOptions.depth||3),allowFunction:actionOptions.allowFunction||!1}};channel.emit(EVENT_ID,actionDisplayToEmit)};return handler.isAction=!0,handler.implicit=options.implicit,handler}},"./app/components/app-components/collab-widget/tools/zoom/communication-preview/communication-preview.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _storybook_addon_actions__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@storybook/addon-actions/dist/index.mjs");const __WEBPACK_DEFAULT_EXPORT__={title:"app-components/collab-widget/tools/zoom/communication-preview",component:"CommunicationPreview",parameters:{docs:{description:{component:"The CommunicationPreview component is designed to display a preview of communication transcripts from Zoom meetings. It fetches and displays the largest available transcript file and provides options to download the transcripts. The component handles errors gracefully and displays appropriate messages to the user."}}}},mockCurrentUser=()=>Ember.on("init",(async function(){const currentUser=Ember.getOwner(this).lookup("service:current-user");Ember.setProperties(currentUser,{hasAbility:()=>!0,hasAbilities:()=>!0,hasScopedAbilities:()=>!0})})),mockCurrentAccount=()=>Ember.on("init",(async function(){const currentAccount=Ember.getOwner(this).lookup("service:current-account");Ember.setProperties(currentAccount,{hasAllFeatures:()=>!0,hasTempFeature:()=>!0,hasFeature:()=>!0,hasAnyFeature:()=>!0})})),Default={render:(args,{globals:{loadTranslations}})=>({template:Ember.HTMLBars.template({id:"ZH0yGvLC",block:'[[[1,"\\n"],[41,[30,0,["translationsLoaded"]],[[[1,"          "],[8,[39,1],null,[["@source","@communication","@communicationImportDetails","@noteTypes","@selectedNoteType","@onNoteTypeChange"],[[30,0,["source"]],[30,0,["communication"]],[30,0,["communicationImportDetails"]],[30,0,["noteTypes"]],[30,0,["selectedNoteType"]],[30,0,["onNoteTypeChange"]]]],null],[1,"\\n"]],[]],null],[1,"      "]],[],false,["if","app-components/collab-widget/tools/zoom/communication-preview"]]',moduleName:"(unknown template module)",isStrictMode:!1}),context:{...args,loadTranslations:loadTranslations(),mockCurrentAccount:mockCurrentAccount(),mockCurrentUser:mockCurrentUser()}}),name:"Default",argTypes:{source:{type:"object",description:"The source model containing the ID and model name for constructing API URLs."},communication:{type:"object",description:"The communication model containing details about the Zoom meeting."},communicationImportDetails:{type:"object",description:"Details related to the communication import process, including error messages."},noteTypes:{type:"array",description:"Array of note types available for selection."},selectedNoteType:{type:"object",description:"The currently selected note type."},onNoteTypeChange:{type:"function",description:"Callback function triggered when the note type is changed."}},args:{source:Ember.Object.create({id:1,constructor:{modelName:"ticket"}}),communication:Ember.Object.create({id:1,zoomMeetingInfo:{meetingId:"123-456-789"}}),communicationImportDetails:Ember.Object.create({communicationDetailsFailed:"fs.errors.communication_details_failed",communicationPreviewFailed:"fs.errors.communication_preview_failed"}),noteTypes:[{id:"private",value:"Private note",label:"Add private note",optionLabel:"Private note",icon:"lock-white",dropdown_icon:"lock",icon_class:"private-note",description:"Hidden to the customer"},{id:"public",value:"Public note",label:"Add public note",optionLabel:"Public note",icon:"globe-white",dropdown_icon:"globe",icon_class:"public-note",description:"Visible to the customer"}],selectedNoteType:Ember.Object.create({id:"private",value:"Private note",label:"Add private note",optionLabel:"Private note",icon:"lock-white",dropdown_icon:"lock",icon_class:"private-note",description:"Hidden to the customer"}),onNoteTypeChange:(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_0__.XI)("Note type changed")}},__namedExportsOrder=["Default"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  render: (args, {\n    globals: {\n      loadTranslations\n    }\n  }) => {\n    return {\n      template: hbs`\n        {{#if this.translationsLoaded }}\n          <AppComponents::CollabWidget::Tools::Zoom::CommunicationPreview\n            @source={{this.source}}\n            @communication={{this.communication}}\n            @communicationImportDetails={{this.communicationImportDetails}}\n            @noteTypes={{this.noteTypes}}\n            @selectedNoteType={{this.selectedNoteType}}\n            @onNoteTypeChange={{this.onNoteTypeChange}}\n          />\n        {{/if}}\n      `,\n      context: {\n        ...args,\n        loadTranslations: loadTranslations(),\n        mockCurrentAccount: mockCurrentAccount(),\n        mockCurrentUser: mockCurrentUser()\n      }\n    };\n  },\n  name: 'Default',\n  argTypes: {\n    source: {\n      type: 'object',\n      description: 'The source model containing the ID and model name for constructing API URLs.'\n    },\n    communication: {\n      type: 'object',\n      description: 'The communication model containing details about the Zoom meeting.'\n    },\n    communicationImportDetails: {\n      type: 'object',\n      description: 'Details related to the communication import process, including error messages.'\n    },\n    noteTypes: {\n      type: 'array',\n      description: 'Array of note types available for selection.'\n    },\n    selectedNoteType: {\n      type: 'object',\n      description: 'The currently selected note type.'\n    },\n    onNoteTypeChange: {\n      type: 'function',\n      description: 'Callback function triggered when the note type is changed.'\n    }\n  },\n  args: {\n    source: EmberObject.create({\n      id: 1,\n      constructor: {\n        modelName: 'ticket'\n      }\n    }),\n    communication: EmberObject.create({\n      id: 1,\n      zoomMeetingInfo: {\n        meetingId: '123-456-789'\n      }\n    }),\n    communicationImportDetails: EmberObject.create({\n      communicationDetailsFailed: 'fs.errors.communication_details_failed',\n      communicationPreviewFailed: 'fs.errors.communication_preview_failed'\n    }),\n    noteTypes: [{\n      id: 'private',\n      value: 'Private note',\n      label: 'Add private note',\n      optionLabel: 'Private note',\n      icon: 'lock-white',\n      dropdown_icon: 'lock',\n      icon_class: 'private-note',\n      description: 'Hidden to the customer'\n    }, {\n      id: 'public',\n      value: 'Public note',\n      label: 'Add public note',\n      optionLabel: 'Public note',\n      icon: 'globe-white',\n      dropdown_icon: 'globe',\n      icon_class: 'public-note',\n      description: 'Visible to the customer'\n    }],\n    selectedNoteType: EmberObject.create({\n      id: 'private',\n      value: 'Private note',\n      label: 'Add private note',\n      optionLabel: 'Private note',\n      icon: 'lock-white',\n      dropdown_icon: 'lock',\n      icon_class: 'private-note',\n      description: 'Hidden to the customer'\n    }),\n    onNoteTypeChange: action('Note type changed')\n  }\n}",...Default.parameters?.docs?.source}}}}}]);