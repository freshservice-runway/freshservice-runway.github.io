{"version":3,"file":"ui-components-attach-files-attach-files-mdx.e0933203.iframe.bundle.js","mappings":";;;;;;;;;;;;AA+CA","sources":["webpack://freshservice/./app/components/ui-components/attach-files/attach-files.mdx"],"sourcesContent":["\nimport React from 'react';\n\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/runner/_work/itildesk/itildesk/frontend/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim.mjs\";\nimport {Meta, Controls, Canvas, Source, Story} from '@storybook/blocks';\nimport dedent from 'ts-dedent';\nimport * as AttachFilesStories from './attach-files.stories';\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    li: \"li\",\n    p: \"p\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(Meta, {\n      of: AttachFilesStories\n    }), \"\\n\", _jsx(_components.h1, {\n      id: \"attach-files\",\n      children: \"Attach Files\"\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        of: AttachFilesStories.Default\n      })\n    }), \"\\n\", _jsx(Source, {\n      language: \"html\",\n      dark: true,\n      format: false,\n      code: dedent`\n\t\t<UiComponents::AttachFiles\n\t\t\t@cloudFiles = {{this.cloudFiles}}\n\t\t\t@attachments = {{this.attachments}}\n\t\t\t@onFileSelected = {{this.onFileSelected}}\n\t\t\t@onCloudFileSelected = {{this.onCloudFileSelected}}\n\t\t\t@onUpdate = {{this.updateAttachments}}\n\t\t\t@deleteCloudFile = {{this.deleteCloudFile}}\n\t\t\t@deleteAttachment = {{this.deleteAttachment}}\n\t\t\t@onFileUpdate = {{this.onFileUpdate}}\n\t\t\t@allowUpload = {{this.allowUpload}}\n\t\t/>\n\t`\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"supported-arguments\",\n      children: \"Supported Arguments\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"allowupload\",\n      children: \"allowUpload\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Enables or disables the file upload functionality. When set to \", _jsx(_components.code, {\n        children: \"true\"\n      }), \", users can select and upload files. When set to \", _jsx(_components.code, {\n        children: \"false\"\n      }), \", the file upload functionality is disabled.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"cloudapps\",\n      children: \"cloudApps\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The list of cloud applications to display in the cloud picker. Pass an array of cloud application objects with the following properties:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"id\"\n        }), \" (string): The ID of the cloud application.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"name\"\n        }), \" (string): The name of the cloud application.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"icon\"\n        }), \" (string): The URL or path to the icon of the cloud application.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"fieldstate\",\n      children: \"fieldState\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The state of the attachment field. Pass an object with the desired field state properties. This can be used to control the appearance or behavior of the attachment field.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"allowdraganddrop\",\n      children: \"allowDragAndDrop\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Enables or disables drag and drop file upload. When set to \", _jsx(_components.code, {\n        children: \"true\"\n      }), \", users can drag and drop files onto the attachment field to upload them. When set to \", _jsx(_components.code, {\n        children: \"false\"\n      }), \", drag and drop file upload is disabled.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"validfileslist\",\n      children: \"validFilesList\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The list of valid files. Pass an array of file objects that represent the valid files. Each file object should have the following properties:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"id\"\n        }), \" (string): The ID of the file.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"name\"\n        }), \" (string): The name of the file.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"size\"\n        }), \" (number): The size of the file in bytes.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"filesexceedingmaxsize\",\n      children: \"filesExceedingMaxSize\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The list of files exceeding the maximum size limit. Pass an array of file objects that represent the files exceeding the maximum size limit. Each file object should have the following properties:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"id\"\n        }), \" (string): The ID of the file.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"name\"\n        }), \" (string): The name of the file.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"size\"\n        }), \" (number): The size of the file in bytes.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"invalidextattachments\",\n      children: \"inValidExtAttachments\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The list of attachments with invalid file extensions. Pass an array of attachment objects that represent the attachments with invalid file extensions. Each attachment object should have the following properties:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"id\"\n        }), \" (string): The ID of the attachment.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"name\"\n        }), \" (string): The name of the attachment.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"extension\"\n        }), \" (string): The file extension of the attachment.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"showattachmentviewer\",\n      children: \"showAttachmentViewer\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Enables or disables the attachment viewer. When set to \", _jsx(_components.code, {\n        children: \"true\"\n      }), \", users can view attachments in a carousel or gallery view. When set to \", _jsx(_components.code, {\n        children: \"false\"\n      }), \", the attachment viewer is disabled.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"attachments\",\n      children: \"attachments\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The list of attachments. Pass an Ember Array containing the attachments to be displayed. Each attachment should be an object with the desired properties, such as \", _jsx(_components.code, {\n        children: \"id\"\n      }), \", \", _jsx(_components.code, {\n        children: \"name\"\n      }), \", and \", _jsx(_components.code, {\n        children: \"url\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"cloudattachments\",\n      children: \"cloudAttachments\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The list of cloud attachments. Pass an Ember Array containing the cloud attachments to be displayed. Each cloud attachment should be an object with the desired properties, such as \", _jsx(_components.code, {\n        children: \"id\"\n      }), \", \", _jsx(_components.code, {\n        children: \"name\"\n      }), \", \", _jsx(_components.code, {\n        children: \"icon\"\n      }), \", and \", _jsx(_components.code, {\n        children: \"url\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"callbacks\",\n      children: \"Callbacks\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Attach Files component provides several callbacks to handle different events. These callbacks can be used to perform custom logic or trigger additional actions in your application.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"onfileselected\",\n      children: \"onFileSelected\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This callback is triggered when files are selected by the user for upload. The selected files are passed as an array to the callback function.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"oncloudfileselected\",\n      children: \"onCloudFileSelected\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This callback is triggered when cloud files are selected by the user. The selected cloud files are passed as an array to the callback function.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"onupdate\",\n      children: \"onUpdate\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This callback is triggered when the attachments are updated, such as when files are uploaded or deleted. The callback function receives the updated attachment information.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"deletecloudfile\",\n      children: \"deleteCloudFile\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This callback is triggered when a cloud file is deleted. The cloud file object to be deleted is passed as an argument to the callback function.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"deleteattachment\",\n      children: \"deleteAttachment\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This callback is triggered when an attachment is deleted. The attachment object to be deleted is passed as an argument to the callback function.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"onfileupdate\",\n      children: \"onFileUpdate\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This callback is triggered when an uploaded file is updated, such as when its status or progress changes.\"\n    }), \"\\n\", _jsx(Canvas, {\n      children: _jsx(Story, {\n        of: AttachFilesStories.ListFiles\n      })\n    })]\n  });\n}\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n"],"names":[],"sourceRoot":""}