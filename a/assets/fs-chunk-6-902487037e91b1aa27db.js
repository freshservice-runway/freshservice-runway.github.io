(window["webpackJsonp_ember_auto_import_"] = window["webpackJsonp_ember_auto_import_"] || []).push([[6],{

/***/ "./node_modules/@fullcalendar/daygrid/main.js":
/*!****************************************************!*\
  !*** ./node_modules/@fullcalendar/daygrid/main.js ***!
  \****************************************************/
/*! exports provided: default, DayGridView, DayTable, DayTableSlicer, Table, TableView, buildDayTableModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DayGridView\", function() { return DayTableView; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DayTable\", function() { return DayTable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DayTableSlicer\", function() { return DayTableSlicer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Table\", function() { return Table; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TableView\", function() { return TableView; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildDayTableModel\", function() { return buildDayTableModel; });\n/* harmony import */ var _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fullcalendar/common */ \"./node_modules/@fullcalendar/common/main.js\");\n/*!\nFullCalendar v6.0.0-beta.1\nDocs & License: https://fullcalendar.io/\n(c) 2022 Adam Shaw\n*/\n\n\n/* An abstract class for the daygrid views, as well as month view. Renders one or more rows of day cells.\n----------------------------------------------------------------------------------------------------------------------*/\n// It is a manager for a Table subcomponent, which does most of the heavy lifting.\n// It is responsible for managing width/height.\nclass TableView extends _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"DateComponent\"] {\n  constructor() {\n    super(...arguments);\n    this.headerElRef = Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createRef\"])();\n  }\n  renderSimpleLayout(headerRowContent, bodyContent) {\n    let {\n      props,\n      context\n    } = this;\n    let sections = [];\n    let stickyHeaderDates = Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"getStickyHeaderDates\"])(context.options);\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        chunk: {\n          elRef: this.headerElRef,\n          tableClassName: 'fc-col-header',\n          rowContent: headerRowContent\n        }\n      });\n    }\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      chunk: {\n        content: bodyContent\n      }\n    });\n    return Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"ViewRoot\"], {\n      viewSpec: context.viewSpec\n    }, (rootElRef, classNames) => Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(\"div\", {\n      ref: rootElRef,\n      className: ['fc-daygrid'].concat(classNames).join(' ')\n    }, Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"SimpleScrollGrid\"], {\n      liquid: !props.isHeightAuto && !props.forPrint,\n      collapsibleWidth: props.forPrint,\n      cols: [] /* TODO: make optional? */,\n      sections: sections\n    })));\n  }\n  renderHScrollLayout(headerRowContent, bodyContent, colCnt, dayMinWidth) {\n    let ScrollGrid = this.context.pluginHooks.scrollGridImpl;\n    if (!ScrollGrid) {\n      throw new Error('No ScrollGrid implementation');\n    }\n    let {\n      props,\n      context\n    } = this;\n    let stickyHeaderDates = !props.forPrint && Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"getStickyHeaderDates\"])(context.options);\n    let stickyFooterScrollbar = !props.forPrint && Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"getStickyFooterScrollbar\"])(context.options);\n    let sections = [];\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        chunks: [{\n          key: 'main',\n          elRef: this.headerElRef,\n          tableClassName: 'fc-col-header',\n          rowContent: headerRowContent\n        }]\n      });\n    }\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      chunks: [{\n        key: 'main',\n        content: bodyContent\n      }]\n    });\n    if (stickyFooterScrollbar) {\n      sections.push({\n        type: 'footer',\n        key: 'footer',\n        isSticky: true,\n        chunks: [{\n          key: 'main',\n          content: _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"renderScrollShim\"]\n        }]\n      });\n    }\n    return Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"ViewRoot\"], {\n      viewSpec: context.viewSpec\n    }, (rootElRef, classNames) => Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(\"div\", {\n      ref: rootElRef,\n      className: ['fc-daygrid'].concat(classNames).join(' ')\n    }, Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(ScrollGrid, {\n      liquid: !props.isHeightAuto && !props.forPrint,\n      collapsibleWidth: props.forPrint,\n      colGroups: [{\n        cols: [{\n          span: colCnt,\n          minWidth: dayMinWidth\n        }]\n      }],\n      sections: sections\n    })));\n  }\n}\nfunction splitSegsByRow(segs, rowCnt) {\n  let byRow = [];\n  for (let i = 0; i < rowCnt; i += 1) {\n    byRow[i] = [];\n  }\n  for (let seg of segs) {\n    byRow[seg.row].push(seg);\n  }\n  return byRow;\n}\nfunction splitSegsByFirstCol(segs, colCnt) {\n  let byCol = [];\n  for (let i = 0; i < colCnt; i += 1) {\n    byCol[i] = [];\n  }\n  for (let seg of segs) {\n    byCol[seg.firstCol].push(seg);\n  }\n  return byCol;\n}\nfunction splitInteractionByRow(ui, rowCnt) {\n  let byRow = [];\n  if (!ui) {\n    for (let i = 0; i < rowCnt; i += 1) {\n      byRow[i] = null;\n    }\n  } else {\n    for (let i = 0; i < rowCnt; i += 1) {\n      byRow[i] = {\n        affectedInstances: ui.affectedInstances,\n        isEvent: ui.isEvent,\n        segs: []\n      };\n    }\n    for (let seg of ui.segs) {\n      byRow[seg.row].segs.push(seg);\n    }\n  }\n  return byRow;\n}\nclass TableCellTop extends _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"BaseComponent\"] {\n  render() {\n    let {\n      props\n    } = this;\n    let navLinkAttrs = Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"buildNavLinkAttrs\"])(this.context, props.date);\n    return Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"DayCellContent\"], {\n      date: props.date,\n      dateProfile: props.dateProfile,\n      todayRange: props.todayRange,\n      showDayNumber: props.showDayNumber,\n      extraHookProps: props.extraHookProps,\n      defaultContent: renderTopInner\n    }, (innerElRef, innerContent) => (innerContent || props.forceDayTop) && Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(\"div\", {\n      className: \"fc-daygrid-day-top\",\n      ref: innerElRef\n    }, Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(\"a\", Object.assign({\n      id: props.dayNumberId,\n      className: \"fc-daygrid-day-number\"\n    }, navLinkAttrs), innerContent || Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"Fragment\"], null, \"\\u00A0\"))));\n  }\n}\nfunction renderTopInner(props) {\n  return props.dayNumberText;\n}\nconst DEFAULT_TABLE_EVENT_TIME_FORMAT = Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createFormatter\"])({\n  hour: 'numeric',\n  minute: '2-digit',\n  omitZeroMinute: true,\n  meridiem: 'narrow'\n});\nfunction hasListItemDisplay(seg) {\n  let {\n    display\n  } = seg.eventRange.ui;\n  return display === 'list-item' || display === 'auto' && !seg.eventRange.def.allDay && seg.firstCol === seg.lastCol &&\n  // can't be multi-day\n  seg.isStart &&\n  // \"\n  seg.isEnd // \"\n  ;\n}\nclass TableBlockEvent extends _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"BaseComponent\"] {\n  render() {\n    let {\n      props\n    } = this;\n    return Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"StandardEvent\"], Object.assign({}, props, {\n      extraClassNames: ['fc-daygrid-event', 'fc-daygrid-block-event', 'fc-h-event'],\n      defaultTimeFormat: DEFAULT_TABLE_EVENT_TIME_FORMAT,\n      defaultDisplayEventEnd: props.defaultDisplayEventEnd,\n      disableResizing: !props.seg.eventRange.def.allDay\n    }));\n  }\n}\nclass TableListItemEvent extends _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"BaseComponent\"] {\n  render() {\n    let {\n      props,\n      context\n    } = this;\n    let timeFormat = context.options.eventTimeFormat || DEFAULT_TABLE_EVENT_TIME_FORMAT;\n    let timeText = Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"buildSegTimeText\"])(props.seg, timeFormat, context, true, props.defaultDisplayEventEnd);\n    return Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"EventRoot\"], {\n      seg: props.seg,\n      timeText: timeText,\n      defaultContent: renderInnerContent,\n      isDragging: props.isDragging,\n      isResizing: false,\n      isDateSelecting: false,\n      isSelected: props.isSelected,\n      isPast: props.isPast,\n      isFuture: props.isFuture,\n      isToday: props.isToday\n    }, (rootElRef, classNames, innerElRef, innerContent) =>\n    // we don't use styles!\n    Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(\"a\", Object.assign({\n      className: ['fc-daygrid-event', 'fc-daygrid-dot-event'].concat(classNames).join(' '),\n      ref: rootElRef\n    }, Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"getSegAnchorAttrs\"])(props.seg, context)), innerContent));\n  }\n}\nfunction renderInnerContent(innerProps) {\n  return Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"Fragment\"], null, Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(\"div\", {\n    className: \"fc-daygrid-event-dot\",\n    style: {\n      borderColor: innerProps.borderColor || innerProps.backgroundColor\n    }\n  }), innerProps.timeText && Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(\"div\", {\n    className: \"fc-event-time\"\n  }, innerProps.timeText), Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(\"div\", {\n    className: \"fc-event-title\"\n  }, innerProps.event.title || Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"Fragment\"], null, \"\\u00A0\")));\n}\nclass TableCellMoreLink extends _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"BaseComponent\"] {\n  constructor() {\n    super(...arguments);\n    this.compileSegs = Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"memoize\"])(compileSegs);\n  }\n  render() {\n    let {\n      props\n    } = this;\n    let {\n      allSegs,\n      invisibleSegs\n    } = this.compileSegs(props.singlePlacements);\n    return Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"MoreLinkRoot\"], {\n      dateProfile: props.dateProfile,\n      todayRange: props.todayRange,\n      allDayDate: props.allDayDate,\n      moreCnt: props.moreCnt,\n      allSegs: allSegs,\n      hiddenSegs: invisibleSegs,\n      alignmentElRef: props.alignmentElRef,\n      alignGridTop: props.alignGridTop,\n      extraDateSpan: props.extraDateSpan,\n      popoverContent: () => {\n        let isForcedInvisible = (props.eventDrag ? props.eventDrag.affectedInstances : null) || (props.eventResize ? props.eventResize.affectedInstances : null) || {};\n        return Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"Fragment\"], null, allSegs.map(seg => {\n          let instanceId = seg.eventRange.instance.instanceId;\n          return Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(\"div\", {\n            className: \"fc-daygrid-event-harness\",\n            key: instanceId,\n            style: {\n              visibility: isForcedInvisible[instanceId] ? 'hidden' : ''\n            }\n          }, hasListItemDisplay(seg) ? Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(TableListItemEvent, Object.assign({\n            seg: seg,\n            isDragging: false,\n            isSelected: instanceId === props.eventSelection,\n            defaultDisplayEventEnd: false\n          }, Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"getSegMeta\"])(seg, props.todayRange))) : Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(TableBlockEvent, Object.assign({\n            seg: seg,\n            isDragging: false,\n            isResizing: false,\n            isDateSelecting: false,\n            isSelected: instanceId === props.eventSelection,\n            defaultDisplayEventEnd: false\n          }, Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"getSegMeta\"])(seg, props.todayRange))));\n        }));\n      }\n    }, (rootElRef, classNames, innerElRef, innerContent, handleClick, title, isExpanded, popoverId) => Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(\"a\", Object.assign({\n      ref: rootElRef,\n      className: ['fc-daygrid-more-link'].concat(classNames).join(' '),\n      title: title,\n      \"aria-expanded\": isExpanded,\n      \"aria-controls\": popoverId\n    }, Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createAriaClickAttrs\"])(handleClick)), innerContent));\n  }\n}\nfunction compileSegs(singlePlacements) {\n  let allSegs = [];\n  let invisibleSegs = [];\n  for (let placement of singlePlacements) {\n    allSegs.push(placement.seg);\n    if (!placement.isVisible) {\n      invisibleSegs.push(placement.seg);\n    }\n  }\n  return {\n    allSegs,\n    invisibleSegs\n  };\n}\nconst DEFAULT_WEEK_NUM_FORMAT = Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createFormatter\"])({\n  week: 'narrow'\n});\nclass TableCell extends _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"DateComponent\"] {\n  constructor() {\n    super(...arguments);\n    this.rootElRef = Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createRef\"])();\n    this.state = {\n      dayNumberId: Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"getUniqueDomId\"])()\n    };\n    this.handleRootEl = el => {\n      Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"setRef\"])(this.rootElRef, el);\n      Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"setRef\"])(this.props.elRef, el);\n    };\n  }\n  render() {\n    let {\n      context,\n      props,\n      state,\n      rootElRef\n    } = this;\n    let {\n      date,\n      dateProfile\n    } = props;\n    let navLinkAttrs = Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"buildNavLinkAttrs\"])(context, date, 'week');\n    return Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"DayCellRoot\"], {\n      date: date,\n      dateProfile: dateProfile,\n      todayRange: props.todayRange,\n      showDayNumber: props.showDayNumber,\n      extraHookProps: props.extraHookProps,\n      elRef: this.handleRootEl\n    }, (dayElRef, dayClassNames, rootDataAttrs, isDisabled) => Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(\"td\", Object.assign({\n      ref: dayElRef,\n      role: \"gridcell\",\n      className: ['fc-daygrid-day'].concat(dayClassNames, props.extraClassNames || []).join(' ')\n    }, rootDataAttrs, props.extraDataAttrs, props.showDayNumber ? {\n      'aria-labelledby': state.dayNumberId\n    } : {}), Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(\"div\", {\n      className: \"fc-daygrid-day-frame fc-scrollgrid-sync-inner\",\n      ref: props.innerElRef /* different from hook system! RENAME */\n    }, props.showWeekNumber && Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"WeekNumberRoot\"], {\n      date: date,\n      defaultFormat: DEFAULT_WEEK_NUM_FORMAT\n    }, (weekElRef, weekClassNames, innerElRef, innerContent) => Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(\"a\", Object.assign({\n      ref: weekElRef,\n      className: ['fc-daygrid-week-number'].concat(weekClassNames).join(' ')\n    }, navLinkAttrs), innerContent)), !isDisabled && Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(TableCellTop, {\n      date: date,\n      dateProfile: dateProfile,\n      showDayNumber: props.showDayNumber,\n      dayNumberId: state.dayNumberId,\n      forceDayTop: props.forceDayTop,\n      todayRange: props.todayRange,\n      extraHookProps: props.extraHookProps\n    }), Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(\"div\", {\n      className: \"fc-daygrid-day-events\",\n      ref: props.fgContentElRef\n    }, props.fgContent, Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(\"div\", {\n      className: \"fc-daygrid-day-bottom\",\n      style: {\n        marginTop: props.moreMarginTop\n      }\n    }, Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(TableCellMoreLink, {\n      allDayDate: date,\n      singlePlacements: props.singlePlacements,\n      moreCnt: props.moreCnt,\n      alignmentElRef: rootElRef,\n      alignGridTop: !props.showDayNumber,\n      extraDateSpan: props.extraDateSpan,\n      dateProfile: props.dateProfile,\n      eventSelection: props.eventSelection,\n      eventDrag: props.eventDrag,\n      eventResize: props.eventResize,\n      todayRange: props.todayRange\n    }))), Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(\"div\", {\n      className: \"fc-daygrid-day-bg\"\n    }, props.bgContent))));\n  }\n}\nfunction computeFgSegPlacement(segs,\n// assumed already sorted\ndayMaxEvents, dayMaxEventRows, strictOrder, eventInstanceHeights, maxContentHeight, cells) {\n  let hierarchy = new DayGridSegHierarchy();\n  hierarchy.allowReslicing = true;\n  hierarchy.strictOrder = strictOrder;\n  if (dayMaxEvents === true || dayMaxEventRows === true) {\n    hierarchy.maxCoord = maxContentHeight;\n    hierarchy.hiddenConsumes = true;\n  } else if (typeof dayMaxEvents === 'number') {\n    hierarchy.maxStackCnt = dayMaxEvents;\n  } else if (typeof dayMaxEventRows === 'number') {\n    hierarchy.maxStackCnt = dayMaxEventRows;\n    hierarchy.hiddenConsumes = true;\n  }\n  // create segInputs only for segs with known heights\n  let segInputs = [];\n  let unknownHeightSegs = [];\n  for (let i = 0; i < segs.length; i += 1) {\n    let seg = segs[i];\n    let {\n      instanceId\n    } = seg.eventRange.instance;\n    let eventHeight = eventInstanceHeights[instanceId];\n    if (eventHeight != null) {\n      segInputs.push({\n        index: i,\n        thickness: eventHeight,\n        span: {\n          start: seg.firstCol,\n          end: seg.lastCol + 1\n        }\n      });\n    } else {\n      unknownHeightSegs.push(seg);\n    }\n  }\n  let hiddenEntries = hierarchy.addSegs(segInputs);\n  let segRects = hierarchy.toRects();\n  let {\n    singleColPlacements,\n    multiColPlacements,\n    leftoverMargins\n  } = placeRects(segRects, segs, cells);\n  let moreCnts = [];\n  let moreMarginTops = [];\n  // add segs with unknown heights\n  for (let seg of unknownHeightSegs) {\n    multiColPlacements[seg.firstCol].push({\n      seg,\n      isVisible: false,\n      isAbsolute: true,\n      absoluteTop: 0,\n      marginTop: 0\n    });\n    for (let col = seg.firstCol; col <= seg.lastCol; col += 1) {\n      singleColPlacements[col].push({\n        seg: resliceSeg(seg, col, col + 1, cells),\n        isVisible: false,\n        isAbsolute: false,\n        absoluteTop: 0,\n        marginTop: 0\n      });\n    }\n  }\n  // add the hidden entries\n  for (let col = 0; col < cells.length; col += 1) {\n    moreCnts.push(0);\n  }\n  for (let hiddenEntry of hiddenEntries) {\n    let seg = segs[hiddenEntry.index];\n    let hiddenSpan = hiddenEntry.span;\n    multiColPlacements[hiddenSpan.start].push({\n      seg: resliceSeg(seg, hiddenSpan.start, hiddenSpan.end, cells),\n      isVisible: false,\n      isAbsolute: true,\n      absoluteTop: 0,\n      marginTop: 0\n    });\n    for (let col = hiddenSpan.start; col < hiddenSpan.end; col += 1) {\n      moreCnts[col] += 1;\n      singleColPlacements[col].push({\n        seg: resliceSeg(seg, col, col + 1, cells),\n        isVisible: false,\n        isAbsolute: false,\n        absoluteTop: 0,\n        marginTop: 0\n      });\n    }\n  }\n  // deal with leftover margins\n  for (let col = 0; col < cells.length; col += 1) {\n    moreMarginTops.push(leftoverMargins[col]);\n  }\n  return {\n    singleColPlacements,\n    multiColPlacements,\n    moreCnts,\n    moreMarginTops\n  };\n}\n// rects ordered by top coord, then left\nfunction placeRects(allRects, segs, cells) {\n  let rectsByEachCol = groupRectsByEachCol(allRects, cells.length);\n  let singleColPlacements = [];\n  let multiColPlacements = [];\n  let leftoverMargins = [];\n  for (let col = 0; col < cells.length; col += 1) {\n    let rects = rectsByEachCol[col];\n    // compute all static segs in singlePlacements\n    let singlePlacements = [];\n    let currentHeight = 0;\n    let currentMarginTop = 0;\n    for (let rect of rects) {\n      let seg = segs[rect.index];\n      singlePlacements.push({\n        seg: resliceSeg(seg, col, col + 1, cells),\n        isVisible: true,\n        isAbsolute: false,\n        absoluteTop: rect.levelCoord,\n        marginTop: rect.levelCoord - currentHeight\n      });\n      currentHeight = rect.levelCoord + rect.thickness;\n    }\n    // compute mixed static/absolute segs in multiPlacements\n    let multiPlacements = [];\n    currentHeight = 0;\n    currentMarginTop = 0;\n    for (let rect of rects) {\n      let seg = segs[rect.index];\n      let isAbsolute = rect.span.end - rect.span.start > 1; // multi-column?\n      let isFirstCol = rect.span.start === col;\n      currentMarginTop += rect.levelCoord - currentHeight; // amount of space since bottom of previous seg\n      currentHeight = rect.levelCoord + rect.thickness; // height will now be bottom of current seg\n      if (isAbsolute) {\n        currentMarginTop += rect.thickness;\n        if (isFirstCol) {\n          multiPlacements.push({\n            seg: resliceSeg(seg, rect.span.start, rect.span.end, cells),\n            isVisible: true,\n            isAbsolute: true,\n            absoluteTop: rect.levelCoord,\n            marginTop: 0\n          });\n        }\n      } else if (isFirstCol) {\n        multiPlacements.push({\n          seg: resliceSeg(seg, rect.span.start, rect.span.end, cells),\n          isVisible: true,\n          isAbsolute: false,\n          absoluteTop: rect.levelCoord,\n          marginTop: currentMarginTop // claim the margin\n        });\n        currentMarginTop = 0;\n      }\n    }\n    singleColPlacements.push(singlePlacements);\n    multiColPlacements.push(multiPlacements);\n    leftoverMargins.push(currentMarginTop);\n  }\n  return {\n    singleColPlacements,\n    multiColPlacements,\n    leftoverMargins\n  };\n}\nfunction groupRectsByEachCol(rects, colCnt) {\n  let rectsByEachCol = [];\n  for (let col = 0; col < colCnt; col += 1) {\n    rectsByEachCol.push([]);\n  }\n  for (let rect of rects) {\n    for (let col = rect.span.start; col < rect.span.end; col += 1) {\n      rectsByEachCol[col].push(rect);\n    }\n  }\n  return rectsByEachCol;\n}\nfunction resliceSeg(seg, spanStart, spanEnd, cells) {\n  if (seg.firstCol === spanStart && seg.lastCol === spanEnd - 1) {\n    return seg;\n  }\n  let eventRange = seg.eventRange;\n  let origRange = eventRange.range;\n  let slicedRange = Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"intersectRanges\"])(origRange, {\n    start: cells[spanStart].date,\n    end: Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"addDays\"])(cells[spanEnd - 1].date, 1)\n  });\n  return Object.assign(Object.assign({}, seg), {\n    firstCol: spanStart,\n    lastCol: spanEnd - 1,\n    eventRange: {\n      def: eventRange.def,\n      ui: Object.assign(Object.assign({}, eventRange.ui), {\n        durationEditable: false\n      }),\n      instance: eventRange.instance,\n      range: slicedRange\n    },\n    isStart: seg.isStart && slicedRange.start.valueOf() === origRange.start.valueOf(),\n    isEnd: seg.isEnd && slicedRange.end.valueOf() === origRange.end.valueOf()\n  });\n}\nclass DayGridSegHierarchy extends _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"SegHierarchy\"] {\n  constructor() {\n    super(...arguments);\n    // config\n    this.hiddenConsumes = false;\n    // allows us to keep hidden entries in the hierarchy so they take up space\n    this.forceHidden = {};\n  }\n  addSegs(segInputs) {\n    const hiddenSegs = super.addSegs(segInputs);\n    const {\n      entriesByLevel\n    } = this;\n    const excludeHidden = entry => !this.forceHidden[Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"buildEntryKey\"])(entry)];\n    // remove the forced-hidden segs\n    for (let level = 0; level < entriesByLevel.length; level += 1) {\n      entriesByLevel[level] = entriesByLevel[level].filter(excludeHidden);\n    }\n    return hiddenSegs;\n  }\n  handleInvalidInsertion(insertion, entry, hiddenEntries) {\n    const {\n      entriesByLevel,\n      forceHidden\n    } = this;\n    const {\n      touchingEntry,\n      touchingLevel,\n      touchingLateral\n    } = insertion;\n    if (this.hiddenConsumes && touchingEntry) {\n      const touchingEntryId = Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"buildEntryKey\"])(touchingEntry);\n      // if not already hidden\n      if (!forceHidden[touchingEntryId]) {\n        if (this.allowReslicing) {\n          const placeholderEntry = Object.assign(Object.assign({}, touchingEntry), {\n            span: Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"intersectSpans\"])(touchingEntry.span, entry.span)\n          });\n          const placeholderEntryId = Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"buildEntryKey\"])(placeholderEntry);\n          forceHidden[placeholderEntryId] = true;\n          entriesByLevel[touchingLevel][touchingLateral] = placeholderEntry; // replace touchingEntry with our placeholder\n          this.splitEntry(touchingEntry, entry, hiddenEntries); // split up the touchingEntry, reinsert it\n        } else {\n          forceHidden[touchingEntryId] = true;\n          hiddenEntries.push(touchingEntry);\n        }\n      }\n    }\n    return super.handleInvalidInsertion(insertion, entry, hiddenEntries);\n  }\n}\nclass TableRow extends _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"DateComponent\"] {\n  constructor() {\n    super(...arguments);\n    this.cellElRefs = new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"RefMap\"](); // the <td>\n    this.frameElRefs = new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"RefMap\"](); // the fc-daygrid-day-frame\n    this.fgElRefs = new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"RefMap\"](); // the fc-daygrid-day-events\n    this.segHarnessRefs = new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"RefMap\"](); // indexed by \"instanceId:firstCol\"\n    this.rootElRef = Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createRef\"])();\n    this.state = {\n      framePositions: null,\n      maxContentHeight: null,\n      eventInstanceHeights: {}\n    };\n  }\n  render() {\n    let {\n      props,\n      state,\n      context\n    } = this;\n    let {\n      options\n    } = context;\n    let colCnt = props.cells.length;\n    let businessHoursByCol = splitSegsByFirstCol(props.businessHourSegs, colCnt);\n    let bgEventSegsByCol = splitSegsByFirstCol(props.bgEventSegs, colCnt);\n    let highlightSegsByCol = splitSegsByFirstCol(this.getHighlightSegs(), colCnt);\n    let mirrorSegsByCol = splitSegsByFirstCol(this.getMirrorSegs(), colCnt);\n    let {\n      singleColPlacements,\n      multiColPlacements,\n      moreCnts,\n      moreMarginTops\n    } = computeFgSegPlacement(Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"sortEventSegs\"])(props.fgEventSegs, options.eventOrder), props.dayMaxEvents, props.dayMaxEventRows, options.eventOrderStrict, state.eventInstanceHeights, state.maxContentHeight, props.cells);\n    let isForcedInvisible =\n    // TODO: messy way to compute this\n    props.eventDrag && props.eventDrag.affectedInstances || props.eventResize && props.eventResize.affectedInstances || {};\n    return Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(\"tr\", {\n      ref: this.rootElRef,\n      role: \"row\"\n    }, props.renderIntro && props.renderIntro(), props.cells.map((cell, col) => {\n      let normalFgNodes = this.renderFgSegs(col, props.forPrint ? singleColPlacements[col] : multiColPlacements[col], props.todayRange, isForcedInvisible);\n      let mirrorFgNodes = this.renderFgSegs(col, buildMirrorPlacements(mirrorSegsByCol[col], multiColPlacements), props.todayRange, {}, Boolean(props.eventDrag), Boolean(props.eventResize), false);\n      return Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(TableCell, {\n        key: cell.key,\n        elRef: this.cellElRefs.createRef(cell.key),\n        innerElRef: this.frameElRefs.createRef(cell.key) /* FF <td> problem, but okay to use for left/right. TODO: rename prop */,\n        dateProfile: props.dateProfile,\n        date: cell.date,\n        showDayNumber: props.showDayNumbers,\n        showWeekNumber: props.showWeekNumbers && col === 0,\n        forceDayTop: props.showWeekNumbers /* even displaying weeknum for row, not necessarily day */,\n        todayRange: props.todayRange,\n        eventSelection: props.eventSelection,\n        eventDrag: props.eventDrag,\n        eventResize: props.eventResize,\n        extraHookProps: cell.extraHookProps,\n        extraDataAttrs: cell.extraDataAttrs,\n        extraClassNames: cell.extraClassNames,\n        extraDateSpan: cell.extraDateSpan,\n        moreCnt: moreCnts[col],\n        moreMarginTop: moreMarginTops[col],\n        singlePlacements: singleColPlacements[col],\n        fgContentElRef: this.fgElRefs.createRef(cell.key),\n        fgContent:\n        // Fragment scopes the keys\n        Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"Fragment\"], null, Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"Fragment\"], null, normalFgNodes), Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"Fragment\"], null, mirrorFgNodes)),\n        bgContent:\n        // Fragment scopes the keys\n        Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"Fragment\"], null, this.renderFillSegs(highlightSegsByCol[col], 'highlight'), this.renderFillSegs(businessHoursByCol[col], 'non-business'), this.renderFillSegs(bgEventSegsByCol[col], 'bg-event'))\n      });\n    }));\n  }\n  componentDidMount() {\n    this.updateSizing(true);\n  }\n  componentDidUpdate(prevProps, prevState) {\n    let currentProps = this.props;\n    this.updateSizing(!Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"isPropsEqual\"])(prevProps, currentProps));\n  }\n  getHighlightSegs() {\n    let {\n      props\n    } = this;\n    if (props.eventDrag && props.eventDrag.segs.length) {\n      // messy check\n      return props.eventDrag.segs;\n    }\n    if (props.eventResize && props.eventResize.segs.length) {\n      // messy check\n      return props.eventResize.segs;\n    }\n    return props.dateSelectionSegs;\n  }\n  getMirrorSegs() {\n    let {\n      props\n    } = this;\n    if (props.eventResize && props.eventResize.segs.length) {\n      // messy check\n      return props.eventResize.segs;\n    }\n    return [];\n  }\n  renderFgSegs(col, segPlacements, todayRange, isForcedInvisible, isDragging, isResizing, isDateSelecting) {\n    let {\n      context\n    } = this;\n    let {\n      eventSelection\n    } = this.props;\n    let {\n      framePositions\n    } = this.state;\n    let defaultDisplayEventEnd = this.props.cells.length === 1; // colCnt === 1\n    let isMirror = isDragging || isResizing || isDateSelecting;\n    let nodes = [];\n    if (framePositions) {\n      for (let placement of segPlacements) {\n        let {\n          seg\n        } = placement;\n        let {\n          instanceId\n        } = seg.eventRange.instance;\n        let key = instanceId + ':' + col;\n        let isVisible = placement.isVisible && !isForcedInvisible[instanceId];\n        let isAbsolute = placement.isAbsolute;\n        let left = '';\n        let right = '';\n        if (isAbsolute) {\n          if (context.isRtl) {\n            right = 0;\n            left = framePositions.lefts[seg.lastCol] - framePositions.lefts[seg.firstCol];\n          } else {\n            left = 0;\n            right = framePositions.rights[seg.firstCol] - framePositions.rights[seg.lastCol];\n          }\n        }\n        /*\n        known bug: events that are force to be list-item but span multiple days still take up space in later columns\n        todo: in print view, for multi-day events, don't display title within non-start/end segs\n        */\n        nodes.push(Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(\"div\", {\n          className: 'fc-daygrid-event-harness' + (isAbsolute ? ' fc-daygrid-event-harness-abs' : ''),\n          key: key,\n          ref: isMirror ? null : this.segHarnessRefs.createRef(key),\n          style: {\n            visibility: isVisible ? '' : 'hidden',\n            marginTop: isAbsolute ? '' : placement.marginTop,\n            top: isAbsolute ? placement.absoluteTop : '',\n            left,\n            right\n          }\n        }, hasListItemDisplay(seg) ? Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(TableListItemEvent, Object.assign({\n          seg: seg,\n          isDragging: isDragging,\n          isSelected: instanceId === eventSelection,\n          defaultDisplayEventEnd: defaultDisplayEventEnd\n        }, Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"getSegMeta\"])(seg, todayRange))) : Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(TableBlockEvent, Object.assign({\n          seg: seg,\n          isDragging: isDragging,\n          isResizing: isResizing,\n          isDateSelecting: isDateSelecting,\n          isSelected: instanceId === eventSelection,\n          defaultDisplayEventEnd: defaultDisplayEventEnd\n        }, Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"getSegMeta\"])(seg, todayRange)))));\n      }\n    }\n    return nodes;\n  }\n  renderFillSegs(segs, fillType) {\n    let {\n      isRtl\n    } = this.context;\n    let {\n      todayRange\n    } = this.props;\n    let {\n      framePositions\n    } = this.state;\n    let nodes = [];\n    if (framePositions) {\n      for (let seg of segs) {\n        let leftRightCss = isRtl ? {\n          right: 0,\n          left: framePositions.lefts[seg.lastCol] - framePositions.lefts[seg.firstCol]\n        } : {\n          left: 0,\n          right: framePositions.rights[seg.firstCol] - framePositions.rights[seg.lastCol]\n        };\n        nodes.push(Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(\"div\", {\n          key: Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"buildEventRangeKey\"])(seg.eventRange),\n          className: \"fc-daygrid-bg-harness\",\n          style: leftRightCss\n        }, fillType === 'bg-event' ? Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"BgEvent\"], Object.assign({\n          seg: seg\n        }, Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"getSegMeta\"])(seg, todayRange))) : Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"renderFill\"])(fillType)));\n      }\n    }\n    return Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"Fragment\"], {}, ...nodes);\n  }\n  updateSizing(isExternalSizingChange) {\n    let {\n      props,\n      frameElRefs\n    } = this;\n    if (!props.forPrint && props.clientWidth !== null // positioning ready?\n    ) {\n      if (isExternalSizingChange) {\n        let frameEls = props.cells.map(cell => frameElRefs.currentMap[cell.key]);\n        if (frameEls.length) {\n          let originEl = this.rootElRef.current;\n          this.setState({\n            framePositions: new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"PositionCache\"](originEl, frameEls, true,\n            // isHorizontal\n            false)\n          });\n        }\n      }\n      const oldInstanceHeights = this.state.eventInstanceHeights;\n      const newInstanceHeights = this.queryEventInstanceHeights();\n      const limitByContentHeight = props.dayMaxEvents === true || props.dayMaxEventRows === true;\n      this.safeSetState({\n        // HACK to prevent oscillations of events being shown/hidden from max-event-rows\n        // Essentially, once you compute an element's height, never null-out.\n        // TODO: always display all events, as visibility:hidden?\n        eventInstanceHeights: Object.assign(Object.assign({}, oldInstanceHeights), newInstanceHeights),\n        maxContentHeight: limitByContentHeight ? this.computeMaxContentHeight() : null\n      });\n    }\n  }\n  queryEventInstanceHeights() {\n    let segElMap = this.segHarnessRefs.currentMap;\n    let eventInstanceHeights = {};\n    // get the max height amongst instance segs\n    for (let key in segElMap) {\n      let height = Math.round(segElMap[key].getBoundingClientRect().height);\n      let instanceId = key.split(':')[0]; // deconstruct how renderFgSegs makes the key\n      eventInstanceHeights[instanceId] = Math.max(eventInstanceHeights[instanceId] || 0, height);\n    }\n    return eventInstanceHeights;\n  }\n  computeMaxContentHeight() {\n    let firstKey = this.props.cells[0].key;\n    let cellEl = this.cellElRefs.currentMap[firstKey];\n    let fcContainerEl = this.fgElRefs.currentMap[firstKey];\n    return cellEl.getBoundingClientRect().bottom - fcContainerEl.getBoundingClientRect().top;\n  }\n  getCellEls() {\n    let elMap = this.cellElRefs.currentMap;\n    return this.props.cells.map(cell => elMap[cell.key]);\n  }\n}\nTableRow.addStateEquality({\n  eventInstanceHeights: _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"isPropsEqual\"]\n});\nfunction buildMirrorPlacements(mirrorSegs, colPlacements) {\n  if (!mirrorSegs.length) {\n    return [];\n  }\n  let topsByInstanceId = buildAbsoluteTopHash(colPlacements); // TODO: cache this at first render?\n  return mirrorSegs.map(seg => ({\n    seg,\n    isVisible: true,\n    isAbsolute: true,\n    absoluteTop: topsByInstanceId[seg.eventRange.instance.instanceId],\n    marginTop: 0\n  }));\n}\nfunction buildAbsoluteTopHash(colPlacements) {\n  let topsByInstanceId = {};\n  for (let placements of colPlacements) {\n    for (let placement of placements) {\n      topsByInstanceId[placement.seg.eventRange.instance.instanceId] = placement.absoluteTop;\n    }\n  }\n  return topsByInstanceId;\n}\nclass Table extends _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"DateComponent\"] {\n  constructor() {\n    super(...arguments);\n    this.splitBusinessHourSegs = Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"memoize\"])(splitSegsByRow);\n    this.splitBgEventSegs = Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"memoize\"])(splitSegsByRow);\n    this.splitFgEventSegs = Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"memoize\"])(splitSegsByRow);\n    this.splitDateSelectionSegs = Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"memoize\"])(splitSegsByRow);\n    this.splitEventDrag = Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"memoize\"])(splitInteractionByRow);\n    this.splitEventResize = Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"memoize\"])(splitInteractionByRow);\n    this.rowRefs = new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"RefMap\"]();\n    this.handleRootEl = rootEl => {\n      this.rootEl = rootEl;\n      if (rootEl) {\n        this.context.registerInteractiveComponent(this, {\n          el: rootEl,\n          isHitComboAllowed: this.props.isHitComboAllowed\n        });\n      } else {\n        this.context.unregisterInteractiveComponent(this);\n      }\n    };\n  }\n  render() {\n    let {\n      props\n    } = this;\n    let {\n      dateProfile,\n      dayMaxEventRows,\n      dayMaxEvents,\n      expandRows\n    } = props;\n    let rowCnt = props.cells.length;\n    let businessHourSegsByRow = this.splitBusinessHourSegs(props.businessHourSegs, rowCnt);\n    let bgEventSegsByRow = this.splitBgEventSegs(props.bgEventSegs, rowCnt);\n    let fgEventSegsByRow = this.splitFgEventSegs(props.fgEventSegs, rowCnt);\n    let dateSelectionSegsByRow = this.splitDateSelectionSegs(props.dateSelectionSegs, rowCnt);\n    let eventDragByRow = this.splitEventDrag(props.eventDrag, rowCnt);\n    let eventResizeByRow = this.splitEventResize(props.eventResize, rowCnt);\n    let limitViaBalanced = dayMaxEvents === true || dayMaxEventRows === true;\n    // if rows can't expand to fill fixed height, can't do balanced-height event limit\n    // TODO: best place to normalize these options?\n    if (limitViaBalanced && !expandRows) {\n      limitViaBalanced = false;\n      dayMaxEventRows = null;\n      dayMaxEvents = null;\n    }\n    let classNames = ['fc-daygrid-body', limitViaBalanced ? 'fc-daygrid-body-balanced' : 'fc-daygrid-body-unbalanced', expandRows ? '' : 'fc-daygrid-body-natural' // will height of one row depend on the others?\n    ];\n    return Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(\"div\", {\n      className: classNames.join(' '),\n      ref: this.handleRootEl,\n      style: {\n        // these props are important to give this wrapper correct dimensions for interactions\n        // TODO: if we set it here, can we avoid giving to inner tables?\n        width: props.clientWidth,\n        minWidth: props.tableMinWidth\n      }\n    }, Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"NowTimer\"], {\n      unit: \"day\"\n    }, (nowDate, todayRange) => Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"Fragment\"], null, Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(\"table\", {\n      role: \"presentation\",\n      className: \"fc-scrollgrid-sync-table\",\n      style: {\n        width: props.clientWidth,\n        minWidth: props.tableMinWidth,\n        height: expandRows ? props.clientHeight : ''\n      }\n    }, props.colGroupNode, Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(\"tbody\", {\n      role: \"presentation\"\n    }, props.cells.map((cells, row) => Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(TableRow, {\n      ref: this.rowRefs.createRef(row),\n      key: cells.length ? cells[0].date.toISOString() /* best? or put key on cell? or use diff formatter? */ : row // in case there are no cells (like when resource view is loading)\n      ,\n      showDayNumbers: rowCnt > 1,\n      showWeekNumbers: props.showWeekNumbers,\n      todayRange: todayRange,\n      dateProfile: dateProfile,\n      cells: cells,\n      renderIntro: props.renderRowIntro,\n      businessHourSegs: businessHourSegsByRow[row],\n      eventSelection: props.eventSelection,\n      bgEventSegs: bgEventSegsByRow[row].filter(isSegAllDay) /* hack */,\n      fgEventSegs: fgEventSegsByRow[row],\n      dateSelectionSegs: dateSelectionSegsByRow[row],\n      eventDrag: eventDragByRow[row],\n      eventResize: eventResizeByRow[row],\n      dayMaxEvents: dayMaxEvents,\n      dayMaxEventRows: dayMaxEventRows,\n      clientWidth: props.clientWidth,\n      clientHeight: props.clientHeight,\n      forPrint: props.forPrint\n    })))))));\n  }\n  // Hit System\n  // ----------------------------------------------------------------------------------------------------\n  prepareHits() {\n    this.rowPositions = new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"PositionCache\"](this.rootEl, this.rowRefs.collect().map(rowObj => rowObj.getCellEls()[0]),\n    // first cell el in each row. TODO: not optimal\n    false, true);\n    this.colPositions = new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"PositionCache\"](this.rootEl, this.rowRefs.currentMap[0].getCellEls(),\n    // cell els in first row\n    true,\n    // horizontal\n    false);\n  }\n  queryHit(positionLeft, positionTop) {\n    let {\n      colPositions,\n      rowPositions\n    } = this;\n    let col = colPositions.leftToIndex(positionLeft);\n    let row = rowPositions.topToIndex(positionTop);\n    if (row != null && col != null) {\n      let cell = this.props.cells[row][col];\n      return {\n        dateProfile: this.props.dateProfile,\n        dateSpan: Object.assign({\n          range: this.getCellRange(row, col),\n          allDay: true\n        }, cell.extraDateSpan),\n        dayEl: this.getCellEl(row, col),\n        rect: {\n          left: colPositions.lefts[col],\n          right: colPositions.rights[col],\n          top: rowPositions.tops[row],\n          bottom: rowPositions.bottoms[row]\n        },\n        layer: 0\n      };\n    }\n    return null;\n  }\n  getCellEl(row, col) {\n    return this.rowRefs.currentMap[row].getCellEls()[col]; // TODO: not optimal\n  }\n  getCellRange(row, col) {\n    let start = this.props.cells[row][col].date;\n    let end = Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"addDays\"])(start, 1);\n    return {\n      start,\n      end\n    };\n  }\n}\nfunction isSegAllDay(seg) {\n  return seg.eventRange.def.allDay;\n}\nclass DayTableSlicer extends _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"Slicer\"] {\n  constructor() {\n    super(...arguments);\n    this.forceDayIfListItem = true;\n  }\n  sliceRange(dateRange, dayTableModel) {\n    return dayTableModel.sliceRange(dateRange);\n  }\n}\nclass DayTable extends _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"DateComponent\"] {\n  constructor() {\n    super(...arguments);\n    this.slicer = new DayTableSlicer();\n    this.tableRef = Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createRef\"])();\n  }\n  render() {\n    let {\n      props,\n      context\n    } = this;\n    return Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(Table, Object.assign({\n      ref: this.tableRef\n    }, this.slicer.sliceProps(props, props.dateProfile, props.nextDayThreshold, context, props.dayTableModel), {\n      dateProfile: props.dateProfile,\n      cells: props.dayTableModel.cells,\n      colGroupNode: props.colGroupNode,\n      tableMinWidth: props.tableMinWidth,\n      renderRowIntro: props.renderRowIntro,\n      dayMaxEvents: props.dayMaxEvents,\n      dayMaxEventRows: props.dayMaxEventRows,\n      showWeekNumbers: props.showWeekNumbers,\n      expandRows: props.expandRows,\n      headerAlignElRef: props.headerAlignElRef,\n      clientWidth: props.clientWidth,\n      clientHeight: props.clientHeight,\n      forPrint: props.forPrint\n    }));\n  }\n}\nclass DayTableView extends TableView {\n  constructor() {\n    super(...arguments);\n    this.buildDayTableModel = Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"memoize\"])(buildDayTableModel);\n    this.headerRef = Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createRef\"])();\n    this.tableRef = Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createRef\"])();\n  }\n  render() {\n    let {\n      options,\n      dateProfileGenerator\n    } = this.context;\n    let {\n      props\n    } = this;\n    let dayTableModel = this.buildDayTableModel(props.dateProfile, dateProfileGenerator);\n    let headerContent = options.dayHeaders && Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"DayHeader\"], {\n      ref: this.headerRef,\n      dateProfile: props.dateProfile,\n      dates: dayTableModel.headerDates,\n      datesRepDistinctDays: dayTableModel.rowCnt === 1\n    });\n    let bodyContent = contentArg => Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(DayTable, {\n      ref: this.tableRef,\n      dateProfile: props.dateProfile,\n      dayTableModel: dayTableModel,\n      businessHours: props.businessHours,\n      dateSelection: props.dateSelection,\n      eventStore: props.eventStore,\n      eventUiBases: props.eventUiBases,\n      eventSelection: props.eventSelection,\n      eventDrag: props.eventDrag,\n      eventResize: props.eventResize,\n      nextDayThreshold: options.nextDayThreshold,\n      colGroupNode: contentArg.tableColGroupNode,\n      tableMinWidth: contentArg.tableMinWidth,\n      dayMaxEvents: options.dayMaxEvents,\n      dayMaxEventRows: options.dayMaxEventRows,\n      showWeekNumbers: options.weekNumbers,\n      expandRows: !props.isHeightAuto,\n      headerAlignElRef: this.headerElRef,\n      clientWidth: contentArg.clientWidth,\n      clientHeight: contentArg.clientHeight,\n      forPrint: props.forPrint\n    });\n    return options.dayMinWidth ? this.renderHScrollLayout(headerContent, bodyContent, dayTableModel.colCnt, options.dayMinWidth) : this.renderSimpleLayout(headerContent, bodyContent);\n  }\n}\nfunction buildDayTableModel(dateProfile, dateProfileGenerator) {\n  let daySeries = new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"DaySeriesModel\"](dateProfile.renderRange, dateProfileGenerator);\n  return new _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"DayTableModel\"](daySeries, /year|month|week/.test(dateProfile.currentRangeUnit));\n}\nclass TableDateProfileGenerator extends _fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"DateProfileGenerator\"] {\n  // Computes the date range that will be rendered.\n  buildRenderRange(currentRange, currentRangeUnit, isRangeAllDay) {\n    let {\n      dateEnv\n    } = this.props;\n    let renderRange = super.buildRenderRange(currentRange, currentRangeUnit, isRangeAllDay);\n    let start = renderRange.start;\n    let end = renderRange.end;\n    let endOfWeek;\n    // year and month views should be aligned with weeks. this is already done for week\n    if (/^(year|month)$/.test(currentRangeUnit)) {\n      start = dateEnv.startOfWeek(start);\n      // make end-of-week if not already\n      endOfWeek = dateEnv.startOfWeek(end);\n      if (endOfWeek.valueOf() !== end.valueOf()) {\n        end = Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"addWeeks\"])(endOfWeek, 1);\n      }\n    }\n    // ensure 6 weeks\n    if (this.props.monthMode && this.props.fixedWeekCount) {\n      let rowCnt = Math.ceil(\n      // could be partial weeks due to hiddenDays\n      Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"diffWeeks\"])(start, end));\n      end = Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"addWeeks\"])(end, 6 - rowCnt);\n    }\n    return {\n      start,\n      end\n    };\n  }\n}\nfunction styleInject(css, ref) {\n  if (ref === void 0) ref = {};\n  var insertAt = ref.insertAt;\n  if (!css || typeof document === 'undefined') {\n    return;\n  }\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\nvar css_248z = \"\\n:root {\\n  --fc-daygrid-event-dot-width: 8px;\\n}\\n/* help things clear margins of inner content */\\n.fc-daygrid-day-frame,\\n.fc-daygrid-day-events,\\n.fc-daygrid-event-harness { /* for event top/bottom margins */\\n}\\n.fc-daygrid-day-frame:before, .fc-daygrid-day-events:before, .fc-daygrid-event-harness:before {\\n  content: \\\"\\\";\\n  clear: both;\\n  display: table; }\\n.fc-daygrid-day-frame:after, .fc-daygrid-day-events:after, .fc-daygrid-event-harness:after {\\n  content: \\\"\\\";\\n  clear: both;\\n  display: table; }\\n.fc .fc-daygrid-body { /* a <div> that wraps the table */\\n    position: relative;\\n    z-index: 1; /* container inner z-index's because <tr>s can't do it */\\n  }\\n.fc .fc-daygrid-day.fc-day-today {\\n      background-color: rgba(255, 220, 40, 0.15);\\n      background-color: var(--fc-today-bg-color, rgba(255, 220, 40, 0.15));\\n    }\\n.fc .fc-daygrid-day-frame {\\n    position: relative;\\n    min-height: 100%; /* seems to work better than `height` because sets height after rows/cells naturally do it */\\n  }\\n.fc {\\n\\n  /* cell top */\\n\\n}\\n.fc .fc-daygrid-day-top {\\n    display: flex;\\n    flex-direction: row-reverse;\\n  }\\n.fc .fc-day-other .fc-daygrid-day-top {\\n    opacity: 0.3;\\n  }\\n.fc {\\n\\n  /* day number (within cell top) */\\n\\n}\\n.fc .fc-daygrid-day-number {\\n    position: relative;\\n    z-index: 4;\\n    padding: 4px;\\n  }\\n.fc {\\n\\n  /* event container */\\n\\n}\\n.fc .fc-daygrid-day-events {\\n    margin-top: 1px; /* needs to be margin, not padding, so that available cell height can be computed */\\n  }\\n.fc {\\n\\n  /* positioning for balanced vs natural */\\n\\n}\\n.fc .fc-daygrid-body-balanced .fc-daygrid-day-events {\\n      position: absolute;\\n      left: 0;\\n      right: 0;\\n    }\\n.fc .fc-daygrid-body-unbalanced .fc-daygrid-day-events {\\n      position: relative; /* for containing abs positioned event harnesses */\\n      min-height: 2em; /* in addition to being a min-height during natural height, equalizes the heights a little bit */\\n    }\\n.fc .fc-daygrid-body-natural { /* can coexist with -unbalanced */\\n  }\\n.fc .fc-daygrid-body-natural .fc-daygrid-day-events {\\n      margin-bottom: 1em;\\n    }\\n.fc {\\n\\n  /* event harness */\\n\\n}\\n.fc .fc-daygrid-event-harness {\\n    position: relative;\\n  }\\n.fc .fc-daygrid-event-harness-abs {\\n    position: absolute;\\n    top: 0; /* fallback coords for when cannot yet be computed */\\n    left: 0; /* */\\n    right: 0; /* */\\n  }\\n.fc .fc-daygrid-bg-harness {\\n    position: absolute;\\n    top: 0;\\n    bottom: 0;\\n  }\\n.fc {\\n\\n  /* bg content */\\n\\n}\\n.fc .fc-daygrid-day-bg .fc-non-business { z-index: 1 }\\n.fc .fc-daygrid-day-bg .fc-bg-event { z-index: 2 }\\n.fc .fc-daygrid-day-bg .fc-highlight { z-index: 3 }\\n.fc {\\n\\n  /* events */\\n\\n}\\n.fc .fc-daygrid-event {\\n    z-index: 6;\\n    margin-top: 1px;\\n  }\\n.fc .fc-daygrid-event.fc-event-mirror {\\n    z-index: 7;\\n  }\\n.fc {\\n\\n  /* cell bottom (within day-events) */\\n\\n}\\n.fc .fc-daygrid-day-bottom {\\n    font-size: .85em;\\n    padding: 2px 3px 0\\n  }\\n.fc .fc-daygrid-day-bottom:before {\\n  content: \\\"\\\";\\n  clear: both;\\n  display: table; }\\n.fc .fc-daygrid-more-link {\\n    position: relative;\\n    z-index: 4;\\n    cursor: pointer;\\n  }\\n.fc {\\n\\n  /* week number (within frame) */\\n\\n}\\n.fc .fc-daygrid-week-number {\\n    position: absolute;\\n    z-index: 5;\\n    top: 0;\\n    padding: 2px;\\n    min-width: 1.5em;\\n    text-align: center;\\n    background-color: rgba(208, 208, 208, 0.3);\\n    background-color: var(--fc-neutral-bg-color, rgba(208, 208, 208, 0.3));\\n    color: #808080;\\n    color: var(--fc-neutral-text-color, #808080);\\n  }\\n.fc {\\n\\n  /* popover */\\n\\n}\\n.fc .fc-more-popover .fc-popover-body {\\n    min-width: 220px;\\n    padding: 10px;\\n  }\\n.fc-direction-ltr .fc-daygrid-event.fc-event-start,\\n.fc-direction-rtl .fc-daygrid-event.fc-event-end {\\n  margin-left: 2px;\\n}\\n.fc-direction-ltr .fc-daygrid-event.fc-event-end,\\n.fc-direction-rtl .fc-daygrid-event.fc-event-start {\\n  margin-right: 2px;\\n}\\n.fc-direction-ltr .fc-daygrid-week-number {\\n    left: 0;\\n    border-radius: 0 0 3px 0;\\n  }\\n.fc-direction-rtl .fc-daygrid-week-number {\\n    right: 0;\\n    border-radius: 0 0 0 3px;\\n  }\\n.fc-liquid-hack .fc-daygrid-day-frame {\\n    position: static; /* will cause inner absolute stuff to expand to <td> */\\n  }\\n.fc-daygrid-event { /* make root-level, because will be dragged-and-dropped outside of a component root */\\n  position: relative; /* for z-indexes assigned later */\\n  white-space: nowrap;\\n  border-radius: 3px; /* dot event needs this to when selected */\\n  font-size: .85em;\\n  font-size: var(--fc-small-font-size, .85em);\\n}\\n/* --- the rectangle (\\\"block\\\") style of event --- */\\n.fc-daygrid-block-event .fc-event-time {\\n    font-weight: bold;\\n  }\\n.fc-daygrid-block-event .fc-event-time,\\n  .fc-daygrid-block-event .fc-event-title {\\n    padding: 1px;\\n  }\\n/* --- the dot style of event --- */\\n.fc-daygrid-dot-event {\\n  display: flex;\\n  align-items: center;\\n  padding: 2px 0\\n\\n}\\n.fc-daygrid-dot-event .fc-event-title {\\n    flex-grow: 1;\\n    flex-shrink: 1;\\n    min-width: 0; /* important for allowing to shrink all the way */\\n    overflow: hidden;\\n    font-weight: bold;\\n  }\\n.fc-daygrid-dot-event:hover,\\n  .fc-daygrid-dot-event.fc-event-mirror {\\n    background: rgba(0, 0, 0, 0.1);\\n  }\\n.fc-daygrid-dot-event.fc-event-selected:before {\\n    /* expand hit area */\\n    top: -10px;\\n    bottom: -10px;\\n  }\\n.fc-daygrid-event-dot { /* the actual dot */\\n  margin: 0 4px;\\n  box-sizing: content-box;\\n  width: 0;\\n  height: 0;\\n  border: 4px solid #3788d8;\\n  border: calc(var(--fc-daygrid-event-dot-width, 8px) / 2) solid var(--fc-event-border-color, #3788d8);\\n  border-radius: 4px;\\n  border-radius: calc(var(--fc-daygrid-event-dot-width, 8px) / 2);\\n}\\n/* --- spacing between time and title --- */\\n.fc-direction-ltr .fc-daygrid-event .fc-event-time {\\n    margin-right: 3px;\\n  }\\n.fc-direction-rtl .fc-daygrid-event .fc-event-time {\\n    margin-left: 3px;\\n  }\\n\";\nstyleInject(css_248z);\nvar main = Object(_fullcalendar_common__WEBPACK_IMPORTED_MODULE_0__[\"createPlugin\"])({\n  initialView: 'dayGridMonth',\n  views: {\n    dayGrid: {\n      component: DayTableView,\n      dateProfileGeneratorClass: TableDateProfileGenerator\n    },\n    dayGridDay: {\n      type: 'dayGrid',\n      duration: {\n        days: 1\n      }\n    },\n    dayGridWeek: {\n      type: 'dayGrid',\n      duration: {\n        weeks: 1\n      }\n    },\n    dayGridMonth: {\n      type: 'dayGrid',\n      duration: {\n        months: 1\n      },\n      monthMode: true,\n      fixedWeekCount: true\n    }\n  }\n});\n/* harmony default export */ __webpack_exports__[\"default\"] = (main);\n\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/@fullcalendar/daygrid/main.js?");

/***/ })

}]);