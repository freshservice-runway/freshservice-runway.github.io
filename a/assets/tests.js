'use strict';

define("freshservice/tests/acceptance/app-layout/style-lazy-load-test", ["qunit", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/stub-current-account", "freshservice/tests/pages/components/module-sam/sam-list", "freshservice/tests/pages/components/module-solutions/common", "freshservice/tests/pages/components/app-layout/style-lazy-load"], function (_qunit, _emberQunit, _testSupport, _stubCurrentUser, _stubCurrentAccount, _samList, _common, _styleLazyLoad) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var RTL_USER = {
    language: "ar",
    privileges: ['view_solutions']
  };
  (0, _qunit.module)('Acceptance | app-layout | style-lazy-load', function (hooks) {
    (0, _emberQunit.setupApplicationTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    hooks.beforeEach(function () {
      (0, _stubCurrentAccount.stubCurrentAccount)({
        subscription: {
          non_asset_plan: false
        }
      });
    });
    (0, _qunit.test)('Style sheet for a particular module should be loaded only after we visit that module', /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _common.default.allArticles.visitPage();

              case 2:
                assert.ok(_styleLazyLoad.default.solutionsLtrLoaded, 'soluitons style sheet loaded');
                assert.notOk(_styleLazyLoad.default.samLtrLoaded, 'sam style sheet not loaded yet');
                _context.next = 6;
                return _samList.default.visit();

              case 6:
                assert.ok(_styleLazyLoad.default.samLtrLoaded, 'sam style sheet loaded');

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Style sheet should be loaded depending on LTR/RTL considerations', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)(RTL_USER);
                _context2.next = 3;
                return _common.default.allArticles.visitPage();

              case 3:
                assert.ok(_styleLazyLoad.default.solutionsRtlLoaded, 'RTL style sheet loaded');
                assert.notOk(_styleLazyLoad.default.solutionsLtrLoaded, 'LTR style sheet removed'); // clearing out rtl css from header

                _styleLazyLoad.default.clearRtlStyles();

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Style sheet should not be duplicated on visiting a page twice', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return _common.default.allArticles.visitPage();

              case 2:
                _context3.next = 4;
                return _samList.default.visit();

              case 4:
                _context3.next = 6;
                return _common.default.allArticles.visitPage();

              case 6:
                assert.equal(_styleLazyLoad.default.solutionsLtrStyles.length, 1, 'No duplicate style sheets');

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x3) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/acceptance/components/module-ams/details/model-query-failure-test", ["qunit", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/spy-flash-message", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/stub-current-account", "freshservice/tests/lib/error-responses", "freshservice/tests/pages/components/module-ams/alert-details", "freshservice/constants/http-status-codes"], function (_qunit, _emberQunit, _testSupport, _sinonContext, _spyFlashMessage, _intl, _stubCurrentUser, _stubCurrentAccount, _errorResponses, _alertDetails, _httpStatusCodes) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var TEST_USER = {
    privileges: ["view_alerts"]
  };
  var TEST_ACCOUNT = {
    features: ["alert_management"]
  }; // TODO:: NEED TO REVISIT
  // module( "Acceptance | Component | module-ams | details | model-query-failure-test", function (hooks) {

  (0, _qunit.skip)("Acceptance | Component | module-ams | details | model-query-failure-test", function (hooks) {
    (0, _emberQunit.setupApplicationTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      (0, _stubCurrentUser.stubCurrentUser)(TEST_USER);
      (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
      this.intl = this.owner.lookup("service:intl");
      this.owner.register("service:socket-actions-rts", Ember.Service.extend({}));
      this.owner.register("service:sockets.alert-auto-refresh-rts", Ember.Service.extend({
        initializeRTSConnection: function initializeRTSConnection() {},
        closeRTSConnection: function closeRTSConnection() {}
      }));
    });
    hooks.after(function () {
      this.owner.destroy("service:current-user");
      this.owner.destroy("service:current-account");
    }); // 1. 500 error check

    (0, _qunit.test)("it should show error toastr in case of model findRecord failure (500)", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var failureToastrSpy, EXPECTED_TOASTR_MSG, ERROR_TYPE, alertId;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Arrange
                failureToastrSpy = (0, _spyFlashMessage.default)("danger");
                EXPECTED_TOASTR_MSG = this.intl.t("fs.errors.service_unavailable");
                ERROR_TYPE = _httpStatusCodes.HTTP_STATUS_CODES.InternalServerError;
                this.server.createList("alert", 1);
                alertId = this.server.db.alerts[0].id;
                this.server.get("/alerts/".concat(alertId), _errorResponses.default[ERROR_TYPE], +ERROR_TYPE); // Act

                _context.next = 8;
                return _alertDetails.default.visit({
                  id: alertId
                });

              case 8:
                // Assert
                assert.ok(failureToastrSpy.calledOnceWithExactly(EXPECTED_TOASTR_MSG), "Expected failure toastr is shown");

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }()); // 2. 404 error check

    (0, _qunit.test)("it should show error toastr in case of model findRecord failure (404)", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var failureToastrSpy, EXPECTED_TOASTR_MSG, ERROR_TYPE, alertId;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                // Arrange
                failureToastrSpy = (0, _spyFlashMessage.default)("danger");
                EXPECTED_TOASTR_MSG = this.intl.t("fs.errors.generic_error");
                ERROR_TYPE = _httpStatusCodes.HTTP_STATUS_CODES.NotFound;
                this.server.createList("alert", 1);
                alertId = this.server.db.alerts[0].id;
                this.server.get("/alerts/".concat(alertId), _errorResponses.default[ERROR_TYPE], +ERROR_TYPE); // Act

                _context2.next = 8;
                return _alertDetails.default.visit({
                  id: alertId
                });

              case 8:
                // Assert
                assert.equal(failureToastrSpy.firstCall.firstArg, EXPECTED_TOASTR_MSG, "Expected failure toastr is shown");

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }()); // 3. Some other error

    (0, _qunit.test)("it should show error toastr in case of model findRecord failure", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var failureToastrSpy, EXPECTED_TOASTR_MSG, ERROR_TYPE, alertId;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                // Arrange
                failureToastrSpy = (0, _spyFlashMessage.default)("danger");
                EXPECTED_TOASTR_MSG = this.intl.t("fs.errors.something_went_wrong");
                ERROR_TYPE = _httpStatusCodes.HTTP_STATUS_CODES.Unauthorized;
                this.server.createList("alert", 1);
                alertId = this.server.db.alerts[0].id;
                this.server.get("/alerts/".concat(alertId), _errorResponses.default[ERROR_TYPE], +ERROR_TYPE); // Act

                _context3.next = 8;
                return _alertDetails.default.visit({
                  id: alertId
                });

              case 8:
                // Assert
                assert.equal(failureToastrSpy.firstCall.firstArg, EXPECTED_TOASTR_MSG, "Expected failure toastr is shown");

              case 9:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/acceptance/components/module-ams/details/privilege-test", ["qunit", "ember-qunit", "ember-cli-mirage/test-support", "ember-window-mock", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/spy-flash-message", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/stub-current-account", "freshservice/tests/pages/components/module-ams/alert-details", "freshservice/tests/lib/safe-visit"], function (_qunit, _emberQunit, _testSupport, _emberWindowMock, _sinonContext, _spyFlashMessage, _intl, _stubCurrentUser, _stubCurrentAccount, _alertDetails, _safeVisit) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var TEST_USER = {
    privileges: ["view_alerts"]
  };
  var TEST_ACCOUNT = {
    features: ["alert_management"]
  };
  (0, _qunit.module)("Acceptance | Component | module-ams | details | privilege-test", function (hooks) {
    (0, _emberQunit.setupApplicationTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      (0, _stubCurrentUser.stubCurrentUser)(TEST_USER);
      (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
      this.intl = this.owner.lookup("service:intl");
    });
    hooks.after(function () {
      this.owner.destroy("service:current-user");
      this.owner.destroy("service:current-account");
    }); // 1. Priv. test

    (0, _qunit.test)("it should redirect in case of no privilege", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var failureToastrSpy, EXPECTED_TOASTR_MSG, alertId;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Arrange
                (0, _stubCurrentUser.stubCurrentUser)(); // without 'view_alerts' priv

                (0, _stubCurrentAccount.stubCurrentAccount)(); // without 'alert_management' feature

                this.server.createList("alert", 1);
                failureToastrSpy = (0, _spyFlashMessage.default)("danger");
                EXPECTED_TOASTR_MSG = this.intl.t("fs.errors.generic_error"); // Act - using 'safeVisit()' helper since there is transition.abort in the flow

                alertId = this.server.db.alerts[0].id;
                _context.next = 8;
                return (0, _safeVisit.default)(function () {
                  return _alertDetails.default.visit({
                    id: alertId
                  });
                });

              case 8:
                _context.t0 = assert;
                _context.next = 11;
                return failureToastrSpy.calledOnceWithExactly(EXPECTED_TOASTR_MSG);

              case 11:
                _context.t1 = _context.sent;

                _context.t0.ok.call(_context.t0, _context.t1, "Expected failure toastr is shown");

                assert.equal(_emberWindowMock.default.location.pathname, "/helpdesk/dashboard", "Redirected to 'helpdesk/dashboard' in case of no privilege");

              case 14:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/acceptance/components/module-ams/list/model-query-failure-test", ["qunit", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/spy-flash-message", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/stub-current-account", "freshservice/tests/lib/error-responses", "freshservice/tests/pages/components/module-ams/alert-list", "freshservice/constants/http-status-codes"], function (_qunit, _emberQunit, _testSupport, _sinonContext, _spyFlashMessage, _intl, _stubCurrentUser, _stubCurrentAccount, _errorResponses, _alertList, _httpStatusCodes) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var TEST_USER = {
    privileges: ["view_alerts"]
  };
  var TEST_ACCOUNT = {
    features: ["alert_management"]
  }; // module("Acceptance | Component | module-ams | list | model-query-failure-test",
  // 	function (hooks) {

  (0, _qunit.skip)("Acceptance | Component | module-ams | list | model-query-failure-test", function (hooks) {
    (0, _emberQunit.setupApplicationTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      (0, _stubCurrentUser.stubCurrentUser)(TEST_USER);
      (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
      this.intl = this.owner.lookup("service:intl");
      this.owner.register("service:socket-actions-rts", Ember.Service.extend({}));
      this.owner.register("service:sockets.alert-auto-refresh-rts", Ember.Service.extend({
        initializeRTSConnection: function initializeRTSConnection() {},
        closeRTSConnection: function closeRTSConnection() {}
      }));
    });
    hooks.after(function () {
      this.owner.destroy("service:current-user");
      this.owner.destroy("service:current-account");
    }); // 1. 500 check

    (0, _qunit.test)("it should show error toastr in case of model query call failure (500)", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var failureToastrSpy, EXPECTED_TOASTR_MSG, EXPECTED_EMPTY_STATE_TEXT, ERROR_TYPE;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Arrange
                failureToastrSpy = (0, _spyFlashMessage.default)("danger");
                EXPECTED_TOASTR_MSG = this.intl.t("fs.errors.service_unavailable");
                EXPECTED_EMPTY_STATE_TEXT = this.intl.t("fs.ams.no_data_in_view");
                ERROR_TYPE = _httpStatusCodes.HTTP_STATUS_CODES.InternalServerError;
                this.server.createList("alert", 1);
                this.server.get("/alerts", _errorResponses.default[ERROR_TYPE], +ERROR_TYPE); // Act

                _context.next = 8;
                return _alertList.default.visit();

              case 8:
                // Assert
                assert.ok(failureToastrSpy.calledOnceWithExactly(EXPECTED_TOASTR_MSG), "Expected failure toastr is shown");
                assert.equal(_alertList.default.emptyStateText, EXPECTED_EMPTY_STATE_TEXT, "Expected empty state text is shown");

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }()); // 2. Someother error check

    (0, _qunit.test)("it should show error toastr in case of model query call failure", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var failureToastrSpy, EXPECTED_TOASTR_MSG, EXPECTED_EMPTY_STATE_TEXT, ERROR_TYPE;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                // Arrange
                failureToastrSpy = (0, _spyFlashMessage.default)("danger");
                EXPECTED_TOASTR_MSG = this.intl.t("fs.errors.something_went_wrong");
                EXPECTED_EMPTY_STATE_TEXT = this.intl.t("fs.ams.no_data_in_view");
                ERROR_TYPE = _httpStatusCodes.HTTP_STATUS_CODES.Unauthorized;
                this.server.createList("alert", 1);
                this.server.get("/alerts", _errorResponses.default[ERROR_TYPE], +ERROR_TYPE); // Act

                _context2.next = 8;
                return _alertList.default.visit();

              case 8:
                // Assert
                assert.ok(failureToastrSpy.calledOnceWithExactly(EXPECTED_TOASTR_MSG), "Expected failure toastr is shown");
                assert.equal(_alertList.default.emptyStateText, EXPECTED_EMPTY_STATE_TEXT, "Expected empty state text is shown");

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/acceptance/components/module-ams/list/privilege-test", ["qunit", "ember-qunit", "ember-cli-mirage/test-support", "ember-window-mock", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/spy-flash-message", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/stub-current-account", "freshservice/tests/pages/components/module-ams/alert-list", "freshservice/tests/lib/safe-visit"], function (_qunit, _emberQunit, _testSupport, _emberWindowMock, _sinonContext, _spyFlashMessage, _intl, _stubCurrentUser, _stubCurrentAccount, _alertList, _safeVisit) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var TEST_USER = {
    privileges: ["view_alerts"]
  };
  var TEST_ACCOUNT = {
    features: ["alert_management"]
  };
  (0, _qunit.module)("Acceptance | Component | module-ams | list | privilege-test", function (hooks) {
    (0, _emberQunit.setupApplicationTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      (0, _stubCurrentUser.stubCurrentUser)(TEST_USER);
      (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
      Ember.set(this, "intl", this.owner.lookup("service:intl"));
    });
    hooks.after(function () {
      this.owner.destroy("service:current-user");
      this.owner.destroy("service:current-account");
    }); // 1. Priv. test

    (0, _qunit.test)("it should redirect in case of no privilege", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var failureToastrSpy, EXPECTED_TOASTR_MSG;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Arrange
                (0, _stubCurrentUser.stubCurrentUser)(); // without 'view_alerts' priv

                (0, _stubCurrentAccount.stubCurrentAccount)(); // without 'alert_management' feature

                this.server.createList("alert", 1);
                failureToastrSpy = (0, _spyFlashMessage.default)("danger");
                EXPECTED_TOASTR_MSG = this.intl.t("fs.errors.generic_error"); // Act - using 'safeVisit()' helper since there is transition.abort in the flow

                _context.next = 7;
                return (0, _safeVisit.default)(function () {
                  return _alertList.default.visit();
                });

              case 7:
                _context.t0 = assert;
                _context.next = 10;
                return failureToastrSpy.calledWith(EXPECTED_TOASTR_MSG);

              case 10:
                _context.t1 = _context.sent;

                _context.t0.ok.call(_context.t0, _context.t1, "Expected failure toastr is shown");

                assert.equal(_emberWindowMock.default.location.pathname, "/helpdesk/dashboard", "Redirected to 'helpdesk/dashboard' in case of no privilege");

              case 13:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
  });
});
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

define("freshservice/tests/acceptance/components/module-ams/list/table-test", ["qunit", "ember-qunit", "ember-cli-mirage/test-support", "ember-local-storage/local/object", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/stub-current-account", "freshservice/tests/pages/components/module-ams/alert-list"], function (_qunit, _emberQunit, _testSupport, _object, _stubCurrentUser, _stubCurrentAccount, _alertList) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var MAX_EVEN_ALERTS = 100;
  var MAX_ODD_ALERTS = 33;
  var PER_PAGE = 30;

  var getFirstPageCount = function getFirstPageCount(count) {
    return count >= PER_PAGE ? PER_PAGE : count;
  };

  var getTotalPages = function getTotalPages(length) {
    return Math.ceil(length / PER_PAGE);
  };

  var difference = function difference(arr1, arr2) {
    return Ember.A(arr1).filter(function (x) {
      return !Ember.A(arr2).includes(x);
    });
  };

  var MockSocketsAlertAutoRefreshRtsService = /*#__PURE__*/function (_Ember$Service) {
    _inherits(MockSocketsAlertAutoRefreshRtsService, _Ember$Service);

    var _super = _createSuper(MockSocketsAlertAutoRefreshRtsService);

    function MockSocketsAlertAutoRefreshRtsService() {
      var _this;

      _classCallCheck(this, MockSocketsAlertAutoRefreshRtsService);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _defineProperty(_assertThisInitialized(_this), "createdAlerts", Ember.A(["CPU 1"]));

      _defineProperty(_assertThisInitialized(_this), "updatedAlerts", Ember.A([]));

      _defineProperty(_assertThisInitialized(_this), "resetAlertsWasCalled", false);

      return _this;
    }

    _createClass(MockSocketsAlertAutoRefreshRtsService, [{
      key: "initializeRTSConnection",
      value: function initializeRTSConnection() {}
    }, {
      key: "closeRTSConnection",
      value: function closeRTSConnection() {}
    }, {
      key: "resetAlerts",
      value: function resetAlerts() {
        this.resetAlertsWasCalled = true;
      }
    }]);

    return MockSocketsAlertAutoRefreshRtsService;
  }(Ember.Service);

  window.__CLASSIC_OWN_CLASSES__.set(MockSocketsAlertAutoRefreshRtsService, true);

  var TEST_USER = {
    privileges: ["view_alerts", "manage_alerts"]
  };
  var TEST_ACCOUNT = {
    features: ["alert_management"]
  };
  var FILTER_SEVERITY_DROPDOWN = {
    OK: 0,
    WARNING: 1,
    ERROR: 2,
    CRITICAL: 3
  };
  (0, _qunit.module)("Acceptance | Component | module-ams | list | table-test", function (hooks) {
    (0, _emberQunit.setupApplicationTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    hooks.beforeEach(function () {
      (0, _stubCurrentUser.stubCurrentUser)(TEST_USER);
      (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
      this.owner.register("service:socket-actions-rts", Ember.Service.extend({}));
      this.owner.register("service:sockets.alert-auto-refresh-rts", MockSocketsAlertAutoRefreshRtsService);

      var mockStorage = _object.default.extend();

      mockStorage.reopenClass({
        initialState: function initialState() {
          return {
            "qp:1:1": {
              _dir: "desc",
              _page: 1,
              _sort_by: "updated_at"
            },
            "cols:1:1": {
              isSelected: false,
              id: false,
              formattedMessage: false,
              severity: false,
              updatedAt: false,
              createdAt: false,
              incidentId: false,
              tags: true,
              resource: false
            }
          };
        }
      });
      window.localStorage.removeItem("storage:alerts");
      this.owner.register("storage:alerts", mockStorage);
    });
    hooks.after(function () {
      this.owner.destroy("service:current-user");
      this.owner.destroy("service:current-account");
      this.owner.destroy("service:socket-actions-rts");
      this.owner.destroy("service:sockets.alert-auto-refresh-rts");
      window.localStorage.removeItem("storage:alerts");
    }); // 1. Render test

    (0, _qunit.test)("Verify table details 100 even alerts (first page)", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var firstPageCount, totalPages;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Arrange
                this.server.createList("alert", MAX_EVEN_ALERTS); // Act

                _context.next = 3;
                return _alertList.default.visit();

              case 3:
                firstPageCount = getFirstPageCount(MAX_EVEN_ALERTS);
                totalPages = getTotalPages(MAX_EVEN_ALERTS); // Assert

                assert.equal(_alertList.default.topNavText, "Showing 1 to ".concat(PER_PAGE, " of ").concat(MAX_EVEN_ALERTS), "Alerts table top nav text 'Showing 1 to ".concat(PER_PAGE, " of ").concat(MAX_EVEN_ALERTS, "' is present"));
                assert.equal(_alertList.default.numRows, firstPageCount, "Alerts table has ".concat(firstPageCount, " rows in the first page"));
                assert.equal(_alertList.default.numPages, totalPages, "Alerts table has ".concat(totalPages, " pages in the pagination bar"));
                assert.ok(_alertList.default.isPaginationPrevBtnDisabled, "Alerts table has previous link is disabled in the first page");
                assert.ok(_alertList.default.hasNoDisabledNextBtn, "Alerts table has next link is enabled in the first page");

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }()); // 2. Pagination navigation test

    (0, _qunit.test)("Verify table details when navigating to next page", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var firstPageCount, totalPages, topPaginationTextFirstPage, topPaginationTextLastPage;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                // Arrange
                this.server.createList("alert", MAX_ODD_ALERTS); // Act

                _context2.next = 3;
                return _alertList.default.visit();

              case 3:
                firstPageCount = getFirstPageCount(MAX_ODD_ALERTS);
                totalPages = getTotalPages(MAX_ODD_ALERTS);
                topPaginationTextFirstPage = "Showing 1 to ".concat(PER_PAGE, " of ").concat(MAX_ODD_ALERTS);
                topPaginationTextLastPage = "Showing 31 to ".concat(MAX_ODD_ALERTS, " of ").concat(MAX_ODD_ALERTS); // Assert

                assert.equal(_alertList.default.topNavText, topPaginationTextFirstPage, "First page: Alerts table top nav text '".concat(topPaginationTextFirstPage, "' is present"));
                assert.equal(_alertList.default.numRows, firstPageCount, "First page: Alerts table has ".concat(firstPageCount, " rows in the first page"));
                assert.ok(_alertList.default.isTopNavPrevBtnDisabled, "First page: Alert table has previous button disabled in the top pagination");
                assert.ok(_alertList.default.hasNoDisabledNextBtnTopNav, "First page: Alerts table has next button enabled in the top pagination");
                assert.ok(_alertList.default.isPaginationPrevBtnDisabled, "First page: Alerts table has previous link disabled in the bottom pagination");
                assert.ok(_alertList.default.hasNoDisabledNextBtn, "First page: Alerts table has next link enabled in the bottom pagination");
                assert.equal(_alertList.default.numPages, totalPages, "Alerts table has ".concat(totalPages, " pages in the pagination bar")); // Navigate to next page via next button in bottom pagination and do assertions

                _context2.next = 16;
                return _alertList.default.clickNextPage();

              case 16:
                assert.equal(_alertList.default.topNavText, topPaginationTextLastPage, "Last page: Alerts table top nav text '".concat(topPaginationTextLastPage, "' is present"));
                assert.equal(_alertList.default.numRows, MAX_ODD_ALERTS % PER_PAGE, "Last page: Alerts table has 3 rows in the next page");
                assert.ok(_alertList.default.hasNoDisabledPrevBtnTopNav, "Last page: Alerts table has previous link enabled in the top pagination");
                assert.ok(_alertList.default.isTopNavNextBtnDisabled, "Last page: Alert table has next button disabled in the top pagination");
                assert.ok(_alertList.default.hasNoDisabledPrevBtn, "Last page: Alerts table has previous link enabled in the bottom pagination");
                assert.ok(_alertList.default.isPaginationNextBtnDisabled, "Last page: Alerts table has next link disabled in the bottom pagination");

              case 22:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }()); // 3. SKIP : Autorefresh test

    (0, _qunit.skip)("it should render a test autorefresh notification", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var service;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                // Arrange
                this.server.createList("alert", 1); // Act - render and click auto refresh icon

                _context3.next = 3;
                return _alertList.default.visit();

              case 3:
                _context3.next = 5;
                return _alertList.default.clickAutoRefreshNotification();

              case 5:
                // Assert
                service = this.owner.lookup("service:sockets.alert-auto-refresh-rts");
                assert.ok(service.resetAlertsWasCalled, "'resetAlerts()' was called in the service as expected");

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref3.apply(this, arguments);
      };
    }()); // 4. SKIP : Column customization test

    (0, _qunit.skip)("it should check column customization", /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var colsOnPageLoad, colsAfterCust, colsDiff;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                // Arrange
                this.server.createList("alert", 1); // Act - render and click col.cust.icon

                _context4.next = 3;
                return _alertList.default.visit();

              case 3:
                _context4.next = 5;
                return _alertList.default.formUtils.openBasicDropDdown("column-customizer");

              case 5:
                // Assert
                colsOnPageLoad = _alertList.default.tableHeaderCols.map(function (col) {
                  return col.text;
                });
                assert.ok(_alertList.default.isSubjectColCustChecked);
                assert.ok(_alertList.default.isSeverityColCustChecked);
                assert.ok(_alertList.default.isUpdatedOnColCustChecked);
                assert.ok(_alertList.default.isCreatedOnColCustChecked);
                assert.ok(_alertList.default.isRelatedIncColCustChecked);
                assert.notOk(_alertList.default.isTagsColCustChecked, "'Tags' is not checked in the col.customisation list"); // Act - uncheck and apply

                _context4.next = 14;
                return _alertList.default.clickRelatedIncColCustCheckbox();

              case 14:
                _context4.next = 16;
                return _alertList.default.clickColCustApply();

              case 16:
                _context4.next = 18;
                return _alertList.default.formUtils.openBasicDropDdown("column-customizer");

              case 18:
                // Assert
                colsAfterCust = _alertList.default.tableHeaderCols.map(function (col) {
                  return col.text;
                });
                colsDiff = difference(colsOnPageLoad, colsAfterCust);
                assert.deepEqual(colsDiff, ["Related incident"], "[after customization] 'Recent incident' column is not present in table");
                assert.notOk(_alertList.default.isRelatedIncColCustChecked, "[after customization] 'Recent incident' is not in checked state in col.customisation list");

              case 22:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref4.apply(this, arguments);
      };
    }()); // 5. SKIP : Filter apply/reset test

    (0, _qunit.skip)("it should check resetting filter", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var EXPECTED_SEVERITY, allRowsOfExpectedSeverity;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                // Arrange
                this.server.create("alert", {
                  severity: "ok",
                  tags: null,
                  additionalInfo: null
                });
                this.server.create("alert", {
                  severity: "warning",
                  tags: null,
                  additionalInfo: null
                });
                this.server.create("alert", {
                  severity: "error",
                  tags: null,
                  additionalInfo: null
                });
                this.server.create("alert", {
                  severity: "critical",
                  tags: null,
                  additionalInfo: null
                });
                EXPECTED_SEVERITY = this.server.db.alerts[0].severity.toLowerCase(); // Act - apply warning severity filter

                _context5.next = 7;
                return _alertList.default.visit();

              case 7:
                _context5.next = 9;
                return _alertList.default.clickFilterIcon();

              case 9:
                _context5.next = 11;
                return _alertList.default.formUtils.autocompleteSelectMultipleWithoutSearch("filter-field-severity", FILTER_SEVERITY_DROPDOWN[EXPECTED_SEVERITY]);

              case 11:
                _context5.next = 13;
                return _alertList.default.clickFilterApply();

              case 13:
                // Assert
                allRowsOfExpectedSeverity = function allRowsOfExpectedSeverity() {
                  var severityRows = _alertList.default.severityColumnRows;
                  return severityRows.map(function (el) {
                    return el.text;
                  }).every(function (val) {
                    return val === EXPECTED_SEVERITY;
                  });
                };

                assert.ok(allRowsOfExpectedSeverity(), "All rows in the table are of expected severity as per the applied filter"); // Act - clear filter

                _context5.next = 17;
                return _alertList.default.clickFilterCancel();

              case 17:
                // Assert
                assert.notOk(allRowsOfExpectedSeverity(), "[after filter cancel] All rows are reverted back in the table");

              case 18:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref5.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/acceptance/components/module-kanban-board/board-view-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/intl", "freshservice/tests/lib/spy-flash-message", "freshservice/tests/pages/components/utils/form-fields", "freshservice/tests/pages/components/module-kanban-board/board"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _sinonContext, _stubCurrentUser, _intl, _spyFlashMessage, _formFields, _board) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Acceptance | Component | module-kanban-board | board-view', function (hooks) {
    (0, _emberQunit.setupApplicationTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      this.server.loadFixtures('tickets');
      this.server.loadFixtures('boards');
    });
    (0, _qunit.test)('Should create a new board and redirect to it', /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var successFlash, boardId;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                successFlash = (0, _spyFlashMessage.default)('success');
                (0, _stubCurrentUser.stubCurrentUser)({
                  privileges: ['manage_tickets', 'edit_ticket_properties']
                });
                boardId = this.server.db.boards[1].id;
                _context.next = 5;
                return _board.default.visitBoard({
                  id: boardId
                });

              case 5:
                assert.equal((0, _testHelpers.currentURL)(), _board.default.boardShowPage(2));
                assert.equal(_board.default.visibilityType, "All agents");
                assert.equal(_board.default.boardName, 'Unassigned Ticket Filter');
                _context.next = 10;
                return (0, _testHelpers.click)(document.querySelector('.menu-trigger'));

              case 10:
                _context.next = 12;
                return _board.default.newBoardBtn();

              case 12:
                _context.next = 14;
                return (0, _testHelpers.waitFor)('.new-board-modal');

              case 14:
                assert.ok(_board.default.newBoardModalExists);
                assert.ok(_board.default.boardNameInputExists);
                _context.next = 18;
                return (0, _testHelpers.fillIn)('.board-name input', 'New board');

              case 18:
                assert.ok(_board.default.newBoardSubmitExists);
                _context.next = 21;
                return (0, _testHelpers.click)('.new-board-submit');

              case 21:
                assert.ok(successFlash.calledOnce); // goes to created board show page

                assert.equal((0, _testHelpers.currentURL)(), _board.default.boardShowPage(1), 'go to board show page after creating board');

              case 23:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Create wip limit for a column', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var boardId;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)({
                  privileges: ['manage_tickets', 'edit_ticket_properties']
                });
                boardId = this.server.db.boards[1].id;
                _context2.next = 4;
                return _board.default.visitBoard({
                  id: boardId
                });

              case 4:
                assert.equal((0, _testHelpers.currentURL)(), _board.default.boardShowPage(2)); // Act

                _context2.next = 7;
                return _formFields.default.selectBasicDropdownByClassName('kanban-board--column[column-id="3"] .kanban-column-options', 'Set column limit');

              case 7:
                _context2.next = 9;
                return (0, _testHelpers.waitFor)('.kanban-board-column-limit-modal');

              case 9:
                assert.ok(_board.default.columnLimitModalExists);
                _context2.next = 12;
                return (0, _testHelpers.fillIn)('.kanban-board-column-limit--input', 2);

              case 12:
                _context2.next = 14;
                return _board.default.modalSubmit();

              case 14:
                //Assert
                assert.equal(_board.default.pendingColumnLimit.split(" / ")[1], "2");

              case 15:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should be able to apply filters and save as a board', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var successFlash, boardId;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                //Arrange
                successFlash = (0, _spyFlashMessage.default)('success');
                (0, _stubCurrentUser.stubCurrentUser)({
                  privileges: ['manage_tickets', 'edit_ticket_properties']
                });
                boardId = this.server.db.boards[1].id;
                _context3.next = 5;
                return _board.default.visitBoard({
                  id: boardId
                });

              case 5:
                assert.equal((0, _testHelpers.currentURL)(), _board.default.boardShowPage(2));
                assert.equal(_board.default.visibilityType, "All agents");
                assert.equal(_board.default.boardName, 'Unassigned Ticket Filter');
                _context3.next = 10;
                return _board.default.queryForm.overdueCheckbox();

              case 10:
                _context3.next = 12;
                return _board.default.queryForm.applyFilter();

              case 12:
                assert.ok(_board.default.saveAsBtnExists);
                _context3.next = 15;
                return _board.default.saveAsBoard();

              case 15:
                _context3.next = 17;
                return (0, _testHelpers.waitFor)('.save-as-board-modal');

              case 17:
                assert.ok(_board.default.saveAsBoardModalExists);
                _context3.next = 20;
                return _board.default.modalCancel();

              case 20:
                _context3.next = 22;
                return _board.default.saveAsBoard();

              case 22:
                _context3.next = 24;
                return (0, _testHelpers.waitFor)('.save-as-board-modal');

              case 24:
                assert.ok(_board.default.saveAsBoardModalExists); //Assert

                assert.equal(_board.default.boardName, 'Copy of Unassigned Ticket Filter');
                assert.ok(_board.default.saveAsBoardSubmitExists);
                _context3.next = 29;
                return (0, _testHelpers.click)('.save-as-board-submit');

              case 29:
                assert.ok(successFlash.calledOnce); // goes to created board show page

                assert.equal((0, _testHelpers.currentURL)(), _board.default.boardShowPage(1), 'go to board show page after creating board');

              case 31:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should be able to delete a board', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var successFlash, boardId, intl;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                successFlash = (0, _spyFlashMessage.default)('success');
                (0, _stubCurrentUser.stubCurrentUser)({
                  privileges: ['manage_tickets', 'edit_ticket_properties']
                });
                boardId = this.server.db.boards[2].id;
                _context4.next = 5;
                return _board.default.visitBoard({
                  id: boardId
                });

              case 5:
                assert.equal((0, _testHelpers.currentURL)(), _board.default.boardShowPage(3));
                _context4.next = 8;
                return _formFields.default.selectBasicDropdown('board-options', 'Delete');

              case 8:
                _context4.next = 10;
                return (0, _testHelpers.waitFor)('.delete-board-modal');

              case 10:
                assert.ok(_board.default.deleteBoardModalExists);
                intl = this.owner.lookup('service:intl');
                assert.equal(_board.default.boardDeleteWarning, intl.t("fs.kanban_board.delete_board_desc_for_me"));
                _context4.next = 15;
                return _board.default.modalSubmit();

              case 15:
                assert.ok(successFlash.calledOnce); //Assert

                assert.equal((0, _testHelpers.currentURL)(), _board.default.boardShowPage("my_board"), 'Redirected to default board after delete');

              case 17:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should be able to delete a board with "All agents" visibility', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var successFlash, boardId, intl;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                successFlash = (0, _spyFlashMessage.default)('success');
                (0, _stubCurrentUser.stubCurrentUser)({
                  privileges: ['manage_tickets']
                });
                boardId = this.server.db.boards[1].id;
                _context5.next = 5;
                return _board.default.visitBoard({
                  id: boardId
                });

              case 5:
                assert.equal((0, _testHelpers.currentURL)(), _board.default.boardShowPage(2));
                _context5.next = 8;
                return _formFields.default.selectBasicDropdown('board-options', 'Delete');

              case 8:
                _context5.next = 10;
                return (0, _testHelpers.waitFor)('.delete-board-modal');

              case 10:
                assert.ok(_board.default.deleteBoardModalExists);
                intl = this.owner.lookup('service:intl');
                assert.equal(_board.default.boardDeleteWarning, intl.t("fs.kanban_board.delete_board_desc_for_group"));
                _context5.next = 15;
                return _board.default.modalSubmit();

              case 15:
                assert.ok(successFlash.calledOnce);
                assert.equal((0, _testHelpers.currentURL)(), _board.default.boardShowPage("my_board"), 'Redirected to default board after delete');

              case 17:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should navigate to a board via the list component', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var boardId;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)({
                  privileges: ['manage_tickets', 'edit_ticket_properties']
                });
                boardId = this.server.db.boards[1].id;
                _context6.next = 4;
                return _board.default.visitBoard({
                  id: boardId
                });

              case 4:
                assert.equal((0, _testHelpers.currentURL)(), _board.default.boardShowPage(2));
                _context6.next = 7;
                return (0, _testHelpers.click)(document.querySelector('.menu-trigger'));

              case 7:
                _context6.next = 9;
                return _board.default.boardListItems.objectAt(1).click();

              case 9:
                assert.equal((0, _testHelpers.currentURL)(), _board.default.boardShowPage("my_board"), 'go to my board show page via list component');

              case 10:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x6) {
        return _ref6.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/acceptance/components/module-sam/details/delete-software-test", ["qunit", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/spy-flash-message", "freshservice/mirage/fixtures/sams", "freshservice/tests/pages/components/module-sam/sam-details", "freshservice/tests/pages/components/module-sam/sam-list"], function (_qunit, _emberQunit, _testSupport, _sinonContext, _spyFlashMessage, _sams, _samDetails, _samList) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var ADRESS_BOOK_MANAGER = _sams.default.find(function (app) {
    return app.id === 1;
  });

  (0, _qunit.module)('Acceptance | Component | module-sam | details | delete', function (hooks) {
    (0, _emberQunit.setupApplicationTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.server.create('sam', ADRESS_BOOK_MANAGER);

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('deleting a software should remove the entry and show success toaster', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var successFlashSpy;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                // Arrange
                successFlashSpy = (0, _spyFlashMessage.default)(); // Act

                _context2.next = 3;
                return _samDetails.default.visit({
                  id: 1
                }).delete().confirmDelete();

              case 3:
                _context2.t0 = assert;
                _context2.next = 6;
                return successFlashSpy.calledOnce;

              case 6:
                _context2.t1 = _context2.sent;

                _context2.t0.ok.call(_context2.t0, _context2.t1);

                assert.ok(_samList.default.isTableEmpty);

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('deleting a software with licenses should throw toaster error', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var errorFlashSpy;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                // Arrange
                errorFlashSpy = (0, _spyFlashMessage.default)('danger'); // Mocking the api to throw error

                this.server.delete('/api/_/applications/:id', function () {
                  return {
                    errors: [{
                      message: 'Contract present',
                      detail: {
                        code: 'invalid_value'
                      }
                    }]
                  };
                }, 500); // Act

                _context3.next = 4;
                return _samDetails.default.visit({
                  id: 1
                }).delete().confirmDelete();

              case 4:
                _context3.t0 = assert;
                _context3.next = 7;
                return errorFlashSpy.calledOnce;

              case 7:
                _context3.t1 = _context3.sent;

                _context3.t0.ok.call(_context3.t0, _context3.t1);

              case 9:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/acceptance/components/module-sam/list/add-new-software-test", ["qunit", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/pages/components/module-sam/form", "freshservice/tests/pages/components/module-sam/sam-details", "freshservice/tests/pages/components/module-sam/sam-list", "freshservice/mirage/fixtures/sams", "@ember/test-helpers"], function (_qunit, _emberQunit, _testSupport, _form, _samDetails, _samList, _sams, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var STATUSDD = {
    managed: 2,
    ignored: 1,
    restricted: 0
  };
  var TYPEDD = {
    saas: 0,
    desktop: 1,
    mobile: 2
  };
  var SOFTWAREPROPS = {
    name: 'Google chrome',
    status: 'managed',
    type: 'SaaS',
    notes: 'Latest version',
    publisher: 'Freshworks'
  };

  var ADRESS_BOOK_MANAGER = _sams.default.find(function (app) {
    return app.id === 1;
  }); // module('Acceptance | Component | module-sam | list | add-new', function(hooks) {


  (0, _qunit.module)('Acceptance | Component | module-sam | list | add-new', function (hooks) {
    (0, _emberQunit.setupApplicationTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _qunit.test)('Adding a new software should take us to details page and display the properties in properties tab', /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.server.create('sam', ADRESS_BOOK_MANAGER);
                this.server.loadFixtures('applicationFields'); // Act - navigating to all filer due to the existing console error in absence of filter

                _context.next = 4;
                return _samList.default.visitAll();

              case 4:
                _context.next = 6;
                return _form.default.triggerAdd().fillName(SOFTWAREPROPS.name).fillNotes(SOFTWAREPROPS.notes);

              case 6:
                _context.next = 8;
                return _form.default.formUtils.selectSingle('applicationType', TYPEDD.saas);

              case 8:
                _context.next = 10;
                return _form.default.formUtils.selectSingle('status', STATUSDD.managed);

              case 10:
                _context.next = 12;
                return _form.default.formUtils.autocompleteSelectMultiple('manufacturer', SOFTWAREPROPS.publisher, 1);

              case 12:
                _context.next = 14;
                return _form.default.submitForm();

              case 14:
                // Assert
                assert.equal((0, _testHelpers.currentURL)(), '/applications/1');
                assert.equal(_samDetails.default.nameText, SOFTWAREPROPS.name);
                assert.equal(_samDetails.default.statusText, SOFTWAREPROPS.status);
                assert.equal(_samDetails.default.typeText, SOFTWAREPROPS.type);
                assert.equal(_samDetails.default.notesText, SOFTWAREPROPS.notes);
                assert.equal(_samDetails.default.manufacturerText, SOFTWAREPROPS.publisher);

              case 20:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/acceptance/components/module-sam/list/table-bulk-action-test", ["qunit", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/pages/components/module-sam/sam-list", "freshservice/mirage/fixtures/sams"], function (_qunit, _emberQunit, _testSupport, _samList, _sams) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var STATUSDD = {
    managed: 'Managed',
    ignored: 'Ignored',
    restricted: 'Restricted'
  };

  var ADRESS_BOOK_MANAGER = _sams.default.find(function (app) {
    return app.id === 1;
  });

  var SOFTWARENAME = 'AddressBookManager';
  var CATEGORYNAME = 'accounts';
  var CATEGORYNAMENEW = 'accounts new'; // module('Acceptance | Component | module-sam | list | bulk-action', function(hooks) {

  (0, _qunit.module)('Acceptance | Component | module-sam | list | bulk-action', function (hooks) {
    (0, _emberQunit.setupApplicationTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.server.create('sam', ADRESS_BOOK_MANAGER);

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('Changing status of a software should reflect in the table properly', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return _samList.default.visitAll().searchSoftare(SOFTWARENAME).selectRows();

              case 2:
                _context2.next = 4;
                return _samList.default.formUtils.selectBasicDropdown('updateSoftwareStatus', STATUSDD.restricted);

              case 4:
                // Assert
                assert.equal(_samList.default.tableRows.objectAt(0).name, SOFTWARENAME);
                assert.equal(_samList.default.tableRows.objectAt(0).status, STATUSDD.restricted);

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Changing category of a software by choosing an existing category should reflect in the table properly', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                // Arrange
                this.server.loadFixtures('applicationCategories'); // Act

                _context3.next = 3;
                return _samList.default.visitAll().searchSoftare(SOFTWARENAME).selectRows();

              case 3:
                _context3.next = 5;
                return _samList.default.triggerCategoryModel();

              case 5:
                _context3.next = 7;
                return _samList.default.formUtils.autocompleteSelectMultiple('assign-category-dd', CATEGORYNAME, 1);

              case 7:
                _context3.next = 9;
                return _samList.default.submitCategory();

              case 9:
                // Assert
                assert.equal(_samList.default.tableRows.objectAt(0).name, SOFTWARENAME);
                assert.equal(_samList.default.tableRows.objectAt(0).category, CATEGORYNAME);

              case 11:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Changing category of a software by adding a new category should reflect in the table properly', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                // Arrange
                this.server.loadFixtures('applicationCategories'); // Act

                _context4.next = 3;
                return _samList.default.visitAll().searchSoftare(SOFTWARENAME).selectRows();

              case 3:
                _context4.next = 5;
                return _samList.default.triggerCategoryModel();

              case 5:
                _context4.next = 7;
                return _samList.default.formUtils.autocompleteSelectMultiple('assign-category-dd', CATEGORYNAMENEW, 1);

              case 7:
                _context4.next = 9;
                return _samList.default.addCategoryOption();

              case 9:
                _context4.next = 11;
                return _samList.default.submitCategory();

              case 11:
                // Assert
                assert.equal(_samList.default.tableRows.objectAt(0).name, SOFTWARENAME);
                assert.equal(_samList.default.tableRows.objectAt(0).category, CATEGORYNAMENEW);

              case 13:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/acceptance/components/module-sam/list/table-search-test", ["qunit", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/pages/components/module-sam/sam-list", "freshservice/mirage/fixtures/sams"], function (_qunit, _emberQunit, _testSupport, _samList, _sams) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var ADRESS_BOOK_MANAGER = _sams.default.find(function (app) {
    return app.id === 1;
  });

  var SOFTWARENAME = 'AddressBookManager';
  var SOFTWARENAMENEW = 'AddressBookManager new'; // module('Acceptance | Component | module-sam | list | table-search', function(hooks) {

  (0, _qunit.module)('Acceptance | Component | module-sam | list | table-search', function (hooks) {
    (0, _emberQunit.setupApplicationTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              // loading a single entry to improve performance
              this.server.create('sam', ADRESS_BOOK_MANAGER);

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('Search functionality in sam table should display the search results properly', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return _samList.default.visitAll().searchSoftare(SOFTWARENAME);

              case 2:
                // Assert
                assert.equal(_samList.default.tableRows.objectAt(0).name, SOFTWARENAME);

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Search functionality should return empty state when no application is found', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return _samList.default.visitAll().searchSoftare(SOFTWARENAMENEW);

              case 2:
                // Assert
                assert.ok(_samList.default.isTableEmpty);

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/acceptance/components/module-service-request/list-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-current-account", "freshservice/tests/pages/components/module-service-request/list"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _stubCurrentAccount, _list) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var MOCK_ITEM_NAMES = ['Adobe Illustrator CC', 'Adobe Photoshop CS6', 'Adobe Premiere Pro CC', 'All Adobe Products']; // To be removed after ERM flag clean up

  var TEST_ACCOUNT = {
    temp_features: ["ember_service_request"]
  };

  function performSearch(_x) {
    return _performSearch.apply(this, arguments);
  }

  function _performSearch() {
    _performSearch = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(term) {
      return regeneratorRuntime.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              _list.default.search.fillSearch(term);

              _context13.next = 3;
              return _list.default.search.keyUp();

            case 3:
              return _context13.abrupt("return");

            case 4:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    }));
    return _performSearch.apply(this, arguments);
  }

  (0, _qunit.module)('Acceptance | module-service-request/catalog-list', function (hooks) {
    (0, _emberQunit.setupApplicationTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
      this.server.loadFixtures('service_categories');
      this.server.loadFixtures('service_items');
      Ember.set(this, 'store', this.owner.lookup('service:store'));
    });
    hooks.afterEach(function () {
      this.owner.destroy('service:store');
    });
    (0, _qunit.test)('Should show All Items in the category list', /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var categoriesCount;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _list.default.visitDefault();

              case 2:
                categoriesCount = this.store.peekAll('service-category').length;
                assert.equal(_list.default.category.activeText, 'All items', 'Default active state should be All Items');
                assert.equal(_list.default.category.count, categoriesCount + 1, 'Count should match the categories + 1 All Items');

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x2) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should load category items on clicking in category link', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return _list.default.visitDefault();

              case 2:
                _list.default.category.linkClickable();

                _context2.next = 5;
                return (0, _testHelpers.waitFor)('.list-catalog-items[data-test-id="list-dynamic-loader"]');

              case 5:
                // Showing Loaders
                assert.ok(_list.default.item.isLoaderVisible, 'Loader visible');
                assert.notEqual(_list.default.item.hasLabelInLoader, '', 'Loader has Label');
                _context2.next = 9;
                return (0, _testHelpers.waitFor)('#category-title');

              case 9:
                // 14 Items provided for HR Category in fixtures
                assert.equal(_list.default.item.count, 15, 'Items inside category loaded');

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x3) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should load category by defualt when loaded via URL Param', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return _list.default.visitITServiceCategory();

              case 2:
                // let categoryScrollTop = 0;
                assert.ok(_list.default.category.isITServiceActive, 'Selected Category is active'); // 3 Items provided for IT Service in fixtures

                assert.equal(_list.default.item.count, 3, 'Items inside category loaded');
                assert.equal(_list.default.item.list.objectAt(0).name, MOCK_ITEM_NAMES[0]);
                assert.equal(_list.default.item.list.objectAt(1).name, MOCK_ITEM_NAMES[1]);
                assert.equal(_list.default.item.list.objectAt(2).name, MOCK_ITEM_NAMES[2]); //Need to revisit since scroll in test suite is not working due to height diff
                // await waitUntil(() => {
                // 	categoryScrollTop = this.element.querySelector('#category-container').scrollTop;
                // 	return categoryScrollTop > 0;
                // }, {timeout: 2000});
                // assert.notEqual(categoryScrollTop, 0, 'Active Category scrolled up into view port');

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x4) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should search items based on the keyword', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return _list.default.visitDefault();

              case 2:
                _context4.next = 4;
                return performSearch('Adobe');

              case 4:
                assert.ok(_list.default.search.clearBtnVisible, 'clear button visible');
                assert.equal(_list.default.item.count, 4, 'Search Results count Match');
                assert.equal(_list.default.item.list.objectAt(0).name, MOCK_ITEM_NAMES[0]);
                assert.equal(_list.default.item.list.objectAt(1).name, MOCK_ITEM_NAMES[1]);
                assert.equal(_list.default.item.list.objectAt(2).name, MOCK_ITEM_NAMES[2]);
                assert.equal(_list.default.item.list.objectAt(3).name, MOCK_ITEM_NAMES[3]);

              case 10:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      return function (_x5) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should search items in the category', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return _list.default.visitITServiceCategory();

              case 2:
                _context5.next = 4;
                return performSearch('Photoshop');

              case 4:
                assert.ok(_list.default.search.clearBtnVisible, 'clear button visible');
                assert.equal(_list.default.item.count, 1, 'Search Results count Match');
                assert.equal(_list.default.item.list.objectAt(0).name, MOCK_ITEM_NAMES[1]);

              case 7:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      return function (_x6) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should search items in other categories', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var intl, searchTerm, emptyTitle;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                intl = this.owner.lookup('service:intl');
                searchTerm = 'Employee';
                emptyTitle = intl.t('fs.request_items.catalog_list.no_results.title', {
                  term: searchTerm
                });
                _context6.next = 5;
                return _list.default.visitITServiceCategory();

              case 5:
                _context6.next = 7;
                return performSearch(searchTerm);

              case 7:
                assert.ok(_list.default.search.clearBtnVisible, 'clear button visible');
                assert.ok(_list.default.item.emptyStateVisible, 'Empty State Visible');
                assert.equal(_list.default.item.emptyStateTitleText, emptyTitle, 'Empty state title match');
                assert.ok(_list.default.search.otherResultsTitleVisible, 'Other Results Title Visible');
                assert.ok(_list.default.search.otherResultsListVisible, 'Other Results List Visible');
                assert.equal(_list.default.item.count, 3, 'Other Results Count match');

              case 13:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x7) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should update search items when category is changed', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var intl, searchTerm, emptyTitle;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                intl = this.owner.lookup('service:intl');
                searchTerm = 'Adobe';
                emptyTitle = intl.t('fs.request_items.catalog_list.no_results.title', {
                  term: searchTerm
                });
                _context7.next = 5;
                return _list.default.visitDefault();

              case 5:
                _context7.next = 7;
                return performSearch(searchTerm);

              case 7:
                assert.equal(_list.default.item.count, 4, 'All Items search Count match');
                _context7.next = 10;
                return _list.default.category.facilitiesManagementClick();

              case 10:
                assert.equal(_list.default.search.value, 'Adobe', 'Search term remains populated');
                assert.ok(_list.default.search.clearBtnVisible, 'clear button visible');
                assert.equal(_list.default.item.count, 1, 'Facilities Management search Count match'); // HR Mangement click

                _context7.next = 15;
                return _list.default.category.linkClickable();

              case 15:
                assert.ok(_list.default.item.emptyStateVisible, 'Empty State Visible on other category');
                assert.equal(_list.default.item.emptyStateTitleText, emptyTitle, 'Empty state title match');

              case 17:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x8) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should show searched items by defualt when loaded via URL Param', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return _list.default.visitAdobeSearch();

              case 2:
                assert.equal(_list.default.search.value, 'Adobe', 'Search term populated');
                assert.ok(_list.default.search.clearBtnVisible, 'clear button visible');
                assert.equal(_list.default.item.count, 4, 'Search Results count Match');
                assert.equal(_list.default.item.list.objectAt(0).name, MOCK_ITEM_NAMES[0]);
                assert.equal(_list.default.item.list.objectAt(1).name, MOCK_ITEM_NAMES[1]);
                assert.equal(_list.default.item.list.objectAt(2).name, MOCK_ITEM_NAMES[2]);
                assert.equal(_list.default.item.list.objectAt(3).name, MOCK_ITEM_NAMES[3]);

              case 9:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }));

      return function (_x9) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should search items in other categories when loaded via URL Param', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        var intl, searchTerm, emptyTitle;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                intl = this.owner.lookup('service:intl');
                searchTerm = 'Employee';
                emptyTitle = intl.t('fs.request_items.catalog_list.no_results.title', {
                  term: searchTerm
                });
                _context9.next = 5;
                return _list.default.visitITServiceEmployeeSearch();

              case 5:
                _context9.next = 7;
                return performSearch(searchTerm);

              case 7:
                assert.ok(_list.default.search.clearBtnVisible, 'clear button visible');
                assert.ok(_list.default.item.emptyStateVisible, 'Empty State Visible');
                assert.equal(_list.default.item.emptyStateTitleText, emptyTitle, 'Empty state title match');
                assert.ok(_list.default.search.otherResultsTitleVisible, 'Other Results Title Visible');
                assert.ok(_list.default.search.otherResultsListVisible, 'Other Results List Visible');
                assert.equal(_list.default.item.count, 3, 'Other Results Count match');

              case 13:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x10) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should clear search items when clear button is clicked', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var searchTerm;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                searchTerm = 'Adobe';
                _context10.next = 3;
                return _list.default.visitDefault();

              case 3:
                _context10.next = 5;
                return performSearch(searchTerm);

              case 5:
                assert.equal(_list.default.item.count, 4, 'Search Results Rendered');
                _context10.next = 8;
                return _list.default.search.clearBtnClickable();

              case 8:
                assert.equal(_list.default.search.value, '', 'Search term cleared');
                assert.ok(_list.default.search.clearBtnHidden, 'clear button hidden');
                assert.ok(_list.default.item.count >= 30, 'Search Results cleared');

              case 11:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10);
      }));

      return function (_x11) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should clear search items when Escape is pressed', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        var searchTerm;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                searchTerm = 'Adobe';
                _context11.next = 3;
                return _list.default.visitDefault();

              case 3:
                _context11.next = 5;
                return performSearch(searchTerm);

              case 5:
                assert.equal(_list.default.item.count, 4, 'Search Results Rendered'); // key param inside Event is used by ember input helpers
                // Refer: https://github.com/emberjs/ember.js/blob/master/packages/%40ember/-internals/glimmer/lib/components/abstract-input.ts#L150

                _context11.next = 8;
                return _list.default.search.keyUp({
                  key: 'Escape'
                });

              case 8:
                assert.equal(_list.default.search.value, '', 'Search term cleared');
                assert.ok(_list.default.search.clearBtnHidden, 'clear button hidden');
                assert.ok(_list.default.item.count >= 30, 'Search Results cleared');

              case 11:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11);
      }));

      return function (_x12) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should lazy load items on scrolling', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        var prevCount, container, loader;
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                _context12.next = 2;
                return _list.default.visitDefault();

              case 2:
                prevCount = _list.default.item.count;
                container = this.element.querySelector('.main-container');
                container.scrollTop = container.scrollHeight - 50; // Delaying the server response to verify loaders

                this.server.timing = 500;
                _context12.next = 8;
                return _list.default.item.scrollList();

              case 8:
                _context12.next = 10;
                return (0, _testHelpers.find)('.infinity-loader');

              case 10:
                loader = _context12.sent;
                _context12.next = 13;
                return loader === null || loader === void 0 ? void 0 : loader.scrollIntoView();

              case 13:
                assert.ok(_list.default.item.lazyLoaderExist, 'Loader is displayed');
                _context12.next = 16;
                return _list.default.item.lazyLoaderRemoved;

              case 16:
                _context12.next = 18;
                return (0, _testHelpers.waitUntil)(function () {
                  return prevCount < _list.default.item.count;
                }, {
                  timeout: 2000
                });

              case 18:
                assert.ok(prevCount < _list.default.item.count, 'items count increased');

              case 19:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x13) {
        return _ref12.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/acceptance/module-solutions/article-creation-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/stub-current-account", "freshservice/tests/lib/spy-flash-message", "freshservice/tests/pages/components/utils/form-fields", "freshservice/tests/pages/components/module-solutions/common", "freshservice/tests/pages/components/module-solutions/folder", "freshservice/tests/pages/components/module-solutions/article", "freshservice/tests/pages/components/module-solutions/category"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _sinonContext, _stubCurrentUser, _stubCurrentAccount, _spyFlashMessage, _formFields, _common, _folder, _article, _category) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var MOCK_DATA = {
    category: {
      title: 'Approval Category'
    },
    folder: {
      title: 'Approval Folder',
      approver: 'Support'
    },
    article: {
      title: 'Approval Article',
      description: 'Approval Article'
    },
    addComments: 'Improve',
    newArticle: {
      title: 'External',
      url: 'https://www.google.com/',
      author: 'Support',
      tags: 'External',
      keywords: 'External'
    }
  };
  var SELECT = {
    moduleCategory: 'Category',
    moduleFolder: 'Folder',
    moduleArticle: 'Article',
    editsRequired: 'Edits Required',
    approve: 'Approve',
    approveAndPublish: 'Approve & Publish',
    edit: 'Edit',
    delete: 'Delete',
    deleteFolder: 'Delete Folder',
    category: 'Test Category',
    moduleExternalArticle: 'Article from external URL'
  };
  var PRIVILEGES = {
    scoped_privileges: {
      0: ['view_solutions', 'manage_solutions', 'publish_solution', 'delete_solution'],
      1: [],
      2: [],
      3: []
    },
    privileges: ['view_solutions', 'manage_solutions', 'publish_solution', 'delete_solution']
  };
  (0, _qunit.module)('Acceptance | module-solutions/article-creation', function (hooks) {
    (0, _emberQunit.setupApplicationTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    hooks.beforeEach(function () {
      this.server.loadFixtures('agents');
      this.server.loadFixtures('categories');
      this.server.loadFixtures('folders');
    });
    (0, _qunit.test)('Should create article with approval process', /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var successFlash, categories, _categories$objectAt$, folders;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                successFlash = (0, _spyFlashMessage.default)('success');
                (0, _stubCurrentAccount.stubCurrentAccount)({
                  features: ['solution_approvals']
                });
                (0, _stubCurrentUser.stubCurrentUser)(PRIVILEGES);
                _context2.next = 5;
                return _common.default.allArticles.visitPage();

              case 5:
                assert.equal((0, _testHelpers.currentURL)(), _common.default.url.allArticles, 'landed in all articles page'); // create category

                _context2.next = 8;
                return _formFields.default.selectBasicDropdown('module-entities', SELECT.moduleCategory);

              case 8:
                _context2.next = 10;
                return _category.default.newForm.fillName(MOCK_DATA.category.title).save();

              case 10:
                _context2.next = 12;
                return (0, _testHelpers.waitUntil)( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          _context.next = 2;
                          return _formFields.default.selectBasicDropdown('module-entities', SELECT.moduleCategory);

                        case 2:
                          _context.next = 4;
                          return _category.default.newForm.cancel();

                        case 4:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                })));

              case 12:
                categories = _common.default.sidebar.categories;
                _context2.next = 15;
                return categories.objectAt(0).click();

              case 15:
                assert.equal(_common.default.sidebar.activeCategory, MOCK_DATA.category.title, 'category title should match created category'); // create folder

                _context2.next = 18;
                return _formFields.default.selectBasicDropdown('module-entities', SELECT.moduleFolder);

              case 18:
                _context2.next = 20;
                return _folder.default.newForm.fillName(MOCK_DATA.folder.title).addApproval().selectApprovalTypeAny();

              case 20:
                _context2.next = 22;
                return _formFields.default.autocompleteSelectMultiple('approvalSettings.approverIds', MOCK_DATA.folder.approver, '0');

              case 22:
                _context2.next = 24;
                return _folder.default.newForm.save();

              case 24:
                _categories$objectAt$ = categories.objectAt(0).getFolders(), folders = _categories$objectAt$.folders;
                _context2.next = 27;
                return folders.objectAt(0).click();

              case 27:
                assert.equal(_common.default.sidebar.activeFolder, MOCK_DATA.folder.title, 'folder title should match created folder'); // perform category sorting

                _context2.next = 30;
                return _category.default.reordering.lib.sort(0, 3, false);

              case 30:
                assert.equal(_category.default.reordering.lib.items().count, this.server.db.categories.length, 'number of categories is same, before and after sorting'); // go to new article page and create article

                _context2.next = 33;
                return _formFields.default.selectBasicDropdown('module-entities', SELECT.moduleArticle, true);

              case 33:
                _context2.next = 35;
                return (0, _testHelpers.waitUntil)(function () {
                  return _article.default.newForm.exists;
                });

              case 35:
                assert.equal((0, _testHelpers.currentURL)(), _common.default.url.newArticle, 'landed in new article page, with selected folder and category');
                _context2.next = 38;
                return (0, _testHelpers.waitFor)('.froala-editor-container .fr-element');

              case 38:
                _context2.next = 40;
                return _article.default.newForm.fillTitle(MOCK_DATA.article.title).fillDescription(MOCK_DATA.article.description).save();

              case 40:
                // goes to created article show page
                assert.equal((0, _testHelpers.currentURL)(), _common.default.url.showPage(1), 'go to article show page after creating article'); // send for approval

                assert.ok(_article.default.showPage.sendForApprovalExists, 'send the article for approval');
                _context2.next = 44;
                return _article.default.showPage.sendForApproval();

              case 44:
                assert.ok(successFlash.called, 'article was successfully sent for approval');
                assert.ok(_article.default.showPage.approvalActionsExists, 'article approval actions exists'); // reject article

                _context2.next = 48;
                return _article.default.showPage.clickApprovalActions();

              case 48:
                _context2.next = 50;
                return _formFields.default.selectBasicDropdown('article-approval-actions', SELECT.editsRequired, true);

              case 50:
                _context2.next = 52;
                return _article.default.showPage.addEditsToArticle();

              case 52:
                _context2.next = 54;
                return (0, _testHelpers.waitFor)('.article-reject-modal');

              case 54:
                assert.ok(_article.default.showPage.addEditsModal, 'reject article modal should be shown');
                _context2.next = 57;
                return _article.default.showPage.submitEdits();

              case 57:
                assert.ok(_article.default.showPage.addEditsError, 'show validation errors when submitted without comments');
                _context2.next = 60;
                return _article.default.showPage.addEdits(MOCK_DATA.addComments);

              case 60:
                _context2.next = 62;
                return _article.default.showPage.submitEdits();

              case 62:
                assert.notOk(_article.default.showPage.approvalActionsExists, 'approval actions doesn\'t exists once article is rejected'); // send for approval

                assert.ok(_article.default.showPage.sendForApprovalExists, 'send for approval button is visible after article rejection');
                _context2.next = 66;
                return _article.default.showPage.sendForApproval();

              case 66:
                assert.ok(successFlash.called, 'article was successfully sent for re-approval after rejection');
                assert.ok(_article.default.showPage.approvalActionsExists, 'article approval actions exists'); // approve article

                _context2.next = 70;
                return _article.default.showPage.clickApprovalActions();

              case 70:
                _context2.next = 72;
                return _formFields.default.selectBasicDropdown('article-approval-actions', SELECT.approve, true, '.ember-basic-dropdown-content');

              case 72:
                _context2.next = 74;
                return (0, _testHelpers.waitUntil)(function () {
                  return !_article.default.showPage.approvalActionsExists;
                });

              case 74:
                assert.notOk(_article.default.showPage.approvalActionsExists, 'article approval actions is not visible after article is approved'); // publish article

                _context2.next = 77;
                return _article.default.showPage.publishArticle();

              case 77:
                assert.notOk(_article.default.showPage.publishArticleExists, 'publish button is shown after article is approved'); // edit article (2nd round)

                _context2.next = 80;
                return _article.default.showPage.clickArticleActions();

              case 80:
                _context2.next = 82;
                return _formFields.default.selectBasicDropdown('article-actions', SELECT.edit);

              case 82:
                assert.equal((0, _testHelpers.currentURL)(), _common.default.url.editPage(1), 'go to edit page and update article');
                _context2.next = 85;
                return _article.default.newForm.fillTitle(MOCK_DATA.article.title);

              case 85:
                _context2.next = 87;
                return _article.default.newForm.save();

              case 87:
                assert.equal((0, _testHelpers.currentURL)(), _common.default.url.showPage(1), 'after update of article, should land in show page'); // send for approval (updated article)

                assert.ok(_article.default.showPage.sendForApprovalExists, 'updated article, should be sent for re-approval, send for approval button is shown');
                _context2.next = 91;
                return _article.default.showPage.sendForApproval();

              case 91:
                _context2.next = 93;
                return _article.default.showPage.clickApprovalActions();

              case 93:
                _context2.next = 95;
                return _formFields.default.selectBasicDropdown('article-approval-actions', SELECT.editsRequired, true);

              case 95:
                _context2.next = 97;
                return (0, _testHelpers.waitFor)('.article-reject-modal');

              case 97:
                _context2.next = 99;
                return _article.default.showPage.cancelEdits();

              case 99:
                _context2.next = 101;
                return _article.default.showPage.clickApprovalActions();

              case 101:
                _context2.next = 103;
                return _formFields.default.selectBasicDropdown('article-approval-actions', SELECT.approveAndPublish, true, '.ember-basic-dropdown-content');

              case 103:
                assert.ok(successFlash.called, 'updated article is approved and published in single action');
                _context2.next = 106;
                return (0, _testHelpers.waitUntil)(function () {
                  return !_article.default.showPage.approvalActionsExists;
                });

              case 106:
                _context2.next = 108;
                return _article.default.showPage.clickArticleActions();

              case 108:
                _context2.next = 110;
                return _formFields.default.selectBasicDropdown('article-actions', SELECT.delete);

              case 110:
                _context2.next = 112;
                return (0, _testHelpers.waitFor)('.article-delete-confirm-modal');

              case 112:
                _context2.next = 114;
                return _article.default.showPage.deleteArticleModalConfirm();

              case 114:
                assert.equal((0, _testHelpers.currentURL)(), _common.default.url.categoryFolderIndex(5, 9), 'should land in selected folder and category of the article, once the article is deleted');
                assert.ok(successFlash.called, 'article was successfully deleted'); // delete folder

                _context2.next = 118;
                return _formFields.default.selectBasicDropdown('folder-options', SELECT.deleteFolder);

              case 118:
                _context2.next = 120;
                return _folder.default.actions.deleteModal.confirmName(MOCK_DATA.folder.title).submit();

              case 120:
                assert.equal((0, _testHelpers.currentURL)(), _common.default.url.categoryIndex(5), 'should land in selected category, once folder under the category is deleted');
                assert.ok(successFlash.called, 'folder was deleted successfully'); // delete category

                _context2.next = 124;
                return _category.default.actions.clickDelete();

              case 124:
                _context2.next = 126;
                return _category.default.actions.deleteModal.confirmName(MOCK_DATA.category.title);

              case 126:
                _context2.next = 128;
                return _category.default.actions.deleteModal.submit();

              case 128:
                assert.equal((0, _testHelpers.currentURL)(), _common.default.url.allArticles, 'should land in all articles page, once the selected category was deleted');
                assert.ok(successFlash.called, 'category was deleted successfully');

              case 130:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should create external article', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var successFlash;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                (0, _stubCurrentAccount.stubCurrentAccount)();
                successFlash = (0, _spyFlashMessage.default)('success');
                _context3.next = 4;
                return _common.default.allArticles.visitPage();

              case 4:
                _context3.next = 6;
                return _formFields.default.selectBasicDropdown('module-entities', SELECT.moduleExternalArticle, true);

              case 6:
                _context3.next = 8;
                return (0, _testHelpers.waitFor)('.external-article-create-modal');

              case 8:
                _context3.next = 10;
                return _article.default.externalNewForm.fillTitle(MOCK_DATA.newArticle.title).fillUrl(MOCK_DATA.newArticle.url);

              case 10:
                _context3.next = 12;
                return _formFields.default.selectSingle('categoryId', '0');

              case 12:
                _context3.next = 14;
                return _formFields.default.selectSingle('folderId', '0');

              case 14:
                _context3.next = 16;
                return _formFields.default.autocompleteSelectMultiple('author', MOCK_DATA.newArticle.author, '0');

              case 16:
                _context3.next = 18;
                return _formFields.default.autocompleteSelectMultiple('tags', MOCK_DATA.newArticle.tags, '0');

              case 18:
                _context3.next = 20;
                return _formFields.default.autocompleteSelectMultiple('keywords', MOCK_DATA.newArticle.keywords, '0');

              case 20:
                _context3.next = 22;
                return _article.default.externalNewForm.save();

              case 22:
                assert.ok(successFlash.calledOnce);

              case 23:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/acceptance/module-solutions/article-table-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/stub-current-account", "freshservice/tests/lib/spy-flash-message", "freshservice/tests/pages/components/utils/form-fields", "freshservice/tests/pages/components/module-solutions/common", "freshservice/tests/pages/components/module-solutions/article"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _sinonContext, _stubCurrentUser, _stubCurrentAccount, _spyFlashMessage, _formFields, _common, _article) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var MOCK_DATA = {
    folder: {
      title: 'Test Folder'
    },
    article: {
      title: 'Sample Text'
    }
  };
  var SELECT = {
    filters: {
      allArticles: 'All Articles',
      drafts: 'Drafts',
      published: 'Published'
    },
    category: 'External Articles Category',
    folder: 'External Articles Folder'
  };
  var IS_FOLDER = {
    departments: 'Move Folder & Folder with visibility Departments',
    agentGroups: 'Folder with visibility Agent Groups',
    requesterGroups: 'Folder with visibility Requester Groups'
  };
  var PRIVILEGES = {
    scoped_privileges: {
      0: ['view_solutions', 'manage_solutions', 'publish_solution', 'delete_solution'],
      1: [],
      2: [],
      3: []
    },
    privileges: ['view_solutions', 'manage_solutions', 'publish_solution', 'delete_solution']
  };
  (0, _qunit.module)('Acceptance | module-solutions/article-table', function (hooks) {
    (0, _emberQunit.setupApplicationTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    hooks.beforeEach(function () {
      (0, _stubCurrentAccount.stubCurrentAccount)();
      this.server.loadFixtures('categories');
      this.server.loadFixtures('folders');
      this.server.loadFixtures('articles');
      this.server.loadFixtures('approvals');
      this.server.loadFixtures('users');
      this.server.loadFixtures('agents');
    });
    (0, _qunit.test)('Visit all articles page check if sorting and pagination works', /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var articles, viewsRange;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                articles = this.server.db.articles; // 37 articles

                _context.next = 3;
                return _common.default.allArticles.visitPage();

              case 3:
                assert.equal(_common.default.table.filterHeader.objectAt(0).text, SELECT.filters.allArticles);
                assert.equal(_common.default.table.filterHeader.objectAt(1).text, "(".concat(articles.length, ")"));
                /*
                	Once the all articles table is loaded click on the View column to check sorting is happening in DESC and ASC
                */

                viewsRange = _common.default.getRange(articles, 'views');
                _context.next = 8;
                return _common.default.table.clickViewColumn();

              case 8:
                // DESC
                assert.equal(_common.default.table.columns.objectAt(0).views, String(viewsRange.max));
                _context.next = 11;
                return _common.default.table.clickViewColumn();

              case 11:
                // ASC
                assert.equal(_common.default.table.columns.objectAt(0).views, String(viewsRange.min)); // Check current page contains pagination and loaded items

                assert.equal(_common.default.table.paginationExists, 1);
                assert.equal(_common.default.table.articlesCount, 30); // go to next page, will be loaded with current page articles

                _context.next = 16;
                return _common.default.table.clickNextPage();

              case 16:
                assert.equal(_common.default.table.articlesCount, _common.default.table.currentPageCount(articles, 2)); // current_page=2

              case 17:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Visit all articles page check if draft and published article filter works', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var articles, draftArticles, publishedArticles;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                articles = this.server.db.articles;
                _context2.next = 3;
                return _common.default.allArticles.visitPage();

              case 3:
                draftArticles = articles.filter(function (article) {
                  return article.status === 1;
                });
                publishedArticles = articles.filter(function (article) {
                  return article.status === 2;
                }); // select draft articles

                _context2.next = 7;
                return _formFields.default.selectBasicDropdown('article-types', SELECT.filters.drafts);

              case 7:
                assert.equal(_common.default.table.articlesCount, draftArticles.length);
                assert.equal(_common.default.table.paginationExists, 0);
                assert.equal(_common.default.table.filterHeader.objectAt(0).text, SELECT.filters.drafts);
                assert.equal(_common.default.table.filterHeader.objectAt(1).text, "(".concat(draftArticles.length, ")")); // select published articles

                _context2.next = 13;
                return _formFields.default.selectBasicDropdown('article-types', SELECT.filters.published);

              case 13:
                assert.equal(_common.default.table.articlesCount, publishedArticles.length);
                assert.equal(_common.default.table.paginationExists, 0);
                assert.equal(_common.default.table.filterHeader.objectAt(0).text, SELECT.filters.published);
                assert.equal(_common.default.table.filterHeader.objectAt(1).text, "(".concat(publishedArticles.length, ")"));

              case 17:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Visit external aticle and perform update and delete operation', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var successFlash, categories, _categories$objectAt$, folders;

        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)(PRIVILEGES);
                successFlash = (0, _spyFlashMessage.default)('success');
                _context3.next = 4;
                return _common.default.allArticles.visitPage();

              case 4:
                categories = _common.default.sidebar.categories;
                _context3.next = 7;
                return categories.objectAt(3).click();

              case 7:
                assert.ok(_common.default.categoryTableExists);
                assert.equal(_common.default.table.header.objectAt(0).text, SELECT.category);
                _categories$objectAt$ = categories.objectAt(3).getFolders(), folders = _categories$objectAt$.folders;
                _context3.next = 12;
                return folders.objectAt(0).click();

              case 12:
                assert.ok(_common.default.folderTableExists);
                assert.equal(_common.default.table.header.objectAt(0).text, SELECT.folder);
                _context3.next = 16;
                return _common.default.table.clickFirstArticle();

              case 16:
                _context3.next = 18;
                return (0, _testHelpers.waitFor)('.external-article-show-modal');

              case 18:
                assert.ok(_article.default.externalShowPage.exists);
                _context3.next = 21;
                return _article.default.externalShowPage.clickEdit();

              case 21:
                _context3.next = 23;
                return _article.default.externalNewForm.fillTitle(MOCK_DATA.article.title).save();

              case 23:
                _context3.next = 25;
                return _common.default.table.clickFirstArticle();

              case 25:
                _context3.next = 27;
                return (0, _testHelpers.waitFor)('.external-article-show-modal');

              case 27:
                _context3.next = 29;
                return _article.default.externalShowPage.clickDelete();

              case 29:
                assert.ok(_article.default.externalShowPage.confirmDeleteModal.exists);
                _context3.next = 32;
                return _article.default.externalShowPage.confirmDeleteModal.submit();

              case 32:
                assert.ok(successFlash.calledTwice);

              case 33:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x3) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Visit category and folder and check its details', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var categories, _categories$objectAt$2, folders;

        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return _common.default.allArticles.visitPage();

              case 2:
                categories = _common.default.sidebar.categories;
                _context4.next = 5;
                return categories.objectAt(1).click();

              case 5:
                _categories$objectAt$2 = categories.objectAt(1).getFolders(), folders = _categories$objectAt$2.folders;
                _context4.next = 8;
                return folders.objectAt(0).click();

              case 8:
                assert.equal(_common.default.sidebar.activeFolder, MOCK_DATA.folder.title);
                assert.equal(_common.default.table.header.objectAt(0).text, MOCK_DATA.folder.title);
                assert.equal(_common.default.table.header.objectAt(1).text, "(".concat(this.server.db.articles.where({
                  folder_id: 1
                }).length, ")"));

              case 11:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Visit folders with different visibility and verify folder visibility descriptions', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var categories, _categories$objectAt$3, folders, viewsRange;

        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                (0, _stubCurrentAccount.stubCurrentAccount)({
                  features: ['solution_approvals']
                });
                (0, _stubCurrentUser.stubCurrentUser)({
                  privileges: ['view_solutions', 'manage_solutions', 'publish_solution', 'delete_solution'],
                  scopes: ['all_solutions']
                });
                _context5.next = 4;
                return _common.default.allArticles.visitPage();

              case 4:
                categories = _common.default.sidebar.categories;
                _context5.next = 7;
                return categories.objectAt(1).click();

              case 7:
                _categories$objectAt$3 = categories.objectAt(1).getFolders(), folders = _categories$objectAt$3.folders;
                viewsRange = _common.default.getRange(this.server.db.articles.where({
                  category_id: 2
                }), 'views');
                _context5.next = 11;
                return _common.default.table.clickViewColumn();

              case 11:
                // DESC
                assert.equal(_common.default.table.columns.objectAt(0).views, String(viewsRange.max));
                _context5.next = 14;
                return _common.default.table.clickViewColumn();

              case 14:
                // ASC
                assert.equal(_common.default.table.columns.objectAt(0).views, String(viewsRange.min)); // check if sorting is working in loaded articles in folder

                _context5.next = 17;
                return folders.objectAt(1).click();

              case 17:
                viewsRange = _common.default.getRange(this.server.db.articles.where({
                  folder_id: 3
                }), 'views');
                _context5.next = 20;
                return _common.default.table.clickViewColumn();

              case 20:
                // DESC
                assert.equal(_common.default.table.columns.objectAt(0).views, String(viewsRange.max));
                _context5.next = 23;
                return _common.default.table.clickViewColumn();

              case 23:
                // ASC
                assert.equal(_common.default.table.columns.objectAt(0).views, String(viewsRange.min)); // visiting folders with different visibility

                assert.equal(_common.default.table.header.objectAt(0).text, IS_FOLDER.departments);
                _context5.next = 27;
                return folders.objectAt(2).click();

              case 27:
                assert.equal(_common.default.table.header.objectAt(0).text, IS_FOLDER.agentGroups);
                _context5.next = 30;
                return folders.objectAt(3).click();

              case 30:
                assert.equal(_common.default.table.header.objectAt(0).text, IS_FOLDER.requesterGroups);

              case 31:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should refresh table after bulk delete action on one article (success)', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var successFlash, initialCount, finalCount;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                successFlash = (0, _spyFlashMessage.default)('success');
                _context6.next = 3;
                return _common.default.allArticles.visitPage();

              case 3:
                initialCount = _common.default.table.filterHeader.objectAt(1).text;
                _context6.next = 6;
                return _common.default.table.articles.objectAt(0).checkBox();

              case 6:
                _context6.next = 8;
                return _common.default.table.bulkActions.clickBulkDelete();

              case 8:
                _context6.next = 10;
                return (0, _testHelpers.waitFor)('.solution-delete-confirm-modal');

              case 10:
                _context6.next = 12;
                return _common.default.table.bulkActions.confirmBulkDelete();

              case 12:
                finalCount = _common.default.table.filterHeader.objectAt(1).text;
                assert.ok(successFlash.calledOnce);
                assert.notEqual(initialCount, finalCount);

              case 15:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      return function (_x6) {
        return _ref6.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/acceptance/module-solutions/solution-routes-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/stub-current-account", "freshservice/tests/lib/spy-flash-message", "freshservice/tests/pages/components/utils/form-fields", "freshservice/tests/pages/components/module-solutions/article", "freshservice/tests/pages/components/module-solutions/common"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _sinonContext, _stubCurrentUser, _stubCurrentAccount, _spyFlashMessage, _formFields, _article, _common) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var MOCK_DATA = {
    articleName: 'Test Article',
    approval: {
      "article_id": 3,
      "member_id": 1,
      "user_id": 1,
      "approval_status": {
        "id": 0,
        "name": "requested"
      },
      "member_name": "Support"
    },
    createArticle: {
      folder_id: 1,
      category_id: 2,
      title: 'Test',
      description: 'Test',
      views: 50
    },
    article: {
      title: 'Revert Changes'
    }
  };
  var SELECT = {
    moduleExternalArticle: 'Article from external URL',
    delete: 'Delete'
  };
  var PRIVILEGES = {
    scoped_privileges: {
      0: ['view_solutions', 'manage_solutions', 'publish_solution', 'delete_solution'],
      1: [],
      2: [],
      3: []
    },
    privileges: ['view_solutions', 'manage_solutions', 'publish_solution', 'delete_solution']
  };
  (0, _qunit.module)('Acceptance | module-solutions/solution-routes', function (hooks) {
    (0, _emberQunit.setupApplicationTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    hooks.beforeEach(function () {
      (0, _stubCurrentAccount.stubCurrentAccount)();
      this.server.loadFixtures('articles');
      this.server.loadFixtures('categories');
      this.server.loadFixtures('folders');
      this.server.loadFixtures('approvals');
      this.server.loadFixtures('users');
    });
    (0, _qunit.test)('visiting /solutions/approvals without feature', /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var dangerFlash;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                dangerFlash = (0, _spyFlashMessage.default)('danger');
                _context.next = 3;
                return _common.default.approvals.visitPage();

              case 3:
                assert.equal((0, _testHelpers.currentURL)(), _common.default.url.allArticles);
                assert.ok(dangerFlash.calledOnce);

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('visiting /solutions/approvals with feature enabled', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                (0, _stubCurrentAccount.stubCurrentAccount)({
                  features: ['solution_approvals']
                });
                _context2.next = 3;
                return _common.default.approvals.visitPage();

              case 3:
                assert.equal((0, _testHelpers.currentURL)(), _common.default.url.approvals);

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Visiting edit article and cancelling should rollback model', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return _article.default.editPage.visit({
                  id: 1
                });

              case 2:
                assert.equal((0, _testHelpers.currentURL)(), _common.default.url.editPage(1));
                _context3.next = 5;
                return _article.default.editForm.fillTitle(MOCK_DATA.article.title).cancel();

              case 5:
                assert.equal((0, _testHelpers.currentURL)(), _common.default.url.showPage(1));

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x3) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Visiting new article route and cancelling should rollback model', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return _article.default.newForm.visit();

              case 2:
                assert.equal((0, _testHelpers.currentURL)(), _common.default.url.newArticle);
                _context4.next = 5;
                return _article.default.newForm.fillTitle(MOCK_DATA.article.title).cancel();

              case 5:
                assert.equal((0, _testHelpers.currentURL)(), _common.default.url.allArticles);

              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      return function (_x4) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Visiting solutions index route should redirect to all articles page', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return _common.default.visitIndexPage();

              case 2:
                assert.equal((0, _testHelpers.currentURL)(), _common.default.url.allArticles);

              case 3:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      return function (_x5) {
        return _ref5.apply(this, arguments);
      };
    }()); // simulation

    (0, _qunit.test)('Trying to view article 24 & 25 should throw 500 error & 409 error respectively', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var dangerFlash;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                dangerFlash = (0, _spyFlashMessage.default)('danger');
                _context6.next = 3;
                return _article.default.showPage.visit({
                  id: 25
                });

              case 3:
                assert.ok(dangerFlash.calledOnce);
                _context6.next = 6;
                return _article.default.showPage.visit({
                  id: 24
                });

              case 6:
                assert.ok(dangerFlash.calledTwice);

              case 7:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      return function (_x6) {
        return _ref6.apply(this, arguments);
      };
    }()); // simulation

    (0, _qunit.test)('Try editing article 24 should throw 409 error', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var dangerFlash;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                dangerFlash = (0, _spyFlashMessage.default)('danger');
                _context7.next = 3;
                return _article.default.editPage.visit({
                  id: 24
                });

              case 3:
                assert.ok(dangerFlash.calledOnce);

              case 4:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      return function (_x7) {
        return _ref7.apply(this, arguments);
      };
    }()); // simulation

    (0, _qunit.test)('Try editing article 25 should throw 500 error', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var dangerFlash;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                dangerFlash = (0, _spyFlashMessage.default)('danger');
                _context8.next = 3;
                return _article.default.editPage.visit({
                  id: 25
                });

              case 3:
                assert.ok(dangerFlash.calledOnce);

              case 4:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }));

      return function (_x8) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Visit insights tab and perform pagination', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                this.server.createList('article', 60, MOCK_DATA.createArticle);
                _context9.next = 3;
                return _common.default.insights.visitPage();

              case 3:
                assert.equal((0, _testHelpers.currentURL)(), _common.default.url.insights);
                _context9.next = 6;
                return _common.default.table.clickNextPage();

              case 6:
                assert.equal(_common.default.table.paginationExists, 1);
                assert.equal(_common.default.table.activePageNo, '2');

              case 8:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x9) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Visit approvals tab and perform pagination and approve one approval', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var successFlash, i, aritcle, approval;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                successFlash = (0, _spyFlashMessage.default)('success');
                (0, _stubCurrentAccount.stubCurrentAccount)({
                  features: ['solution_approvals']
                });
                (0, _stubCurrentUser.stubCurrentUser)({
                  privileges: ['view_solutions', 'manage_solutions', 'publish_solution', 'delete_solution'],
                  scopes: ['all_solutions']
                });

                for (i = 0; i < 50; i++) {
                  aritcle = this.server.create('article', MOCK_DATA.createArticle);
                  approval = this.server.create('approval', MOCK_DATA.approval);
                  approval.update({
                    article_id: +aritcle.id
                  });
                  aritcle.update({
                    approval_ids: [+approval.id]
                  });
                }

                _context10.next = 6;
                return _common.default.approvals.visitPage();

              case 6:
                assert.equal(_common.default.table.paginationExists, 1); // requested approval from fixtures

                _context10.next = 9;
                return _common.default.approvals.list.objectAt(1).approve();

              case 9:
                assert.ok(successFlash.calledOnce);
                _context10.next = 12;
                return _common.default.table.clickNextPage();

              case 12:
                assert.equal(_common.default.table.activePageNo, '2');

              case 13:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x10) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Visit categories index page and search for articles and create external article action and cancel', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        var categories;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _context11.next = 2;
                return _common.default.allArticles.visitPage();

              case 2:
                categories = _common.default.sidebar.categories;
                _context11.next = 5;
                return categories.objectAt(1).click();

              case 5:
                _context11.next = 7;
                return _common.default.table.search.articles(MOCK_DATA.articleName);

              case 7:
                _context11.next = 9;
                return _common.default.table.search.pressEscape();

              case 9:
                assert.notOk(_common.default.table.search.resultsVisible);
                _context11.next = 12;
                return _formFields.default.selectBasicDropdown('module-entities', SELECT.moduleExternalArticle, true);

              case 12:
                _context11.next = 14;
                return (0, _testHelpers.waitFor)('.external-article-create-modal');

              case 14:
                assert.ok(_article.default.externalNewForm.exists);
                _context11.next = 17;
                return _article.default.externalNewForm.cancel();

              case 17:
                assert.notOk(_article.default.externalNewForm.exists);

              case 18:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11);
      }));

      return function (_x11) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Visit categories folders index page and search for articles and create external article action and cancel', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        var categories, _categories$objectAt$, folders;

        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                _context12.next = 2;
                return _common.default.allArticles.visitPage();

              case 2:
                categories = _common.default.sidebar.categories;
                _context12.next = 5;
                return categories.objectAt(1).click();

              case 5:
                _categories$objectAt$ = categories.objectAt(1).getFolders(), folders = _categories$objectAt$.folders;
                _context12.next = 8;
                return folders.objectAt(0).click();

              case 8:
                _context12.next = 10;
                return _common.default.table.search.articles(MOCK_DATA.articleName);

              case 10:
                _context12.next = 12;
                return _common.default.table.search.pressEscape();

              case 12:
                assert.notOk(_common.default.table.search.resultsVisible);
                _context12.next = 15;
                return _formFields.default.selectBasicDropdown('module-entities', SELECT.moduleExternalArticle, true);

              case 15:
                _context12.next = 17;
                return (0, _testHelpers.waitFor)('.external-article-create-modal');

              case 17:
                assert.ok(_article.default.externalNewForm.exists);
                _context12.next = 20;
                return _article.default.externalNewForm.cancel();

              case 20:
                assert.notOk(_article.default.externalNewForm.exists);

              case 21:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12);
      }));

      return function (_x12) {
        return _ref12.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should delete article from category index', /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
        var successFlash, categories;
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)(PRIVILEGES);
                successFlash = (0, _spyFlashMessage.default)('success');
                _context13.next = 4;
                return _common.default.allArticles.visitPage();

              case 4:
                categories = _common.default.sidebar.categories;
                _context13.next = 7;
                return categories.objectAt(1).click();

              case 7:
                _context13.next = 9;
                return _common.default.table.articles.objectAt(0).select();

              case 9:
                _context13.next = 11;
                return _article.default.showPage.clickArticleActions();

              case 11:
                _context13.next = 13;
                return _formFields.default.selectBasicDropdown('article-actions', SELECT.delete);

              case 13:
                _context13.next = 15;
                return (0, _testHelpers.waitFor)('.article-delete-confirm-modal');

              case 15:
                _context13.next = 17;
                return _article.default.showPage.deleteArticleModalConfirm();

              case 17:
                assert.equal((0, _testHelpers.currentURL)(), _common.default.url.categoryIndex(2));
                assert.ok(successFlash.called);

              case 19:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13);
      }));

      return function (_x13) {
        return _ref13.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should delete article from all articles', /*#__PURE__*/function () {
      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {
        var successFlash;
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)(PRIVILEGES);
                successFlash = (0, _spyFlashMessage.default)('success');
                _context14.next = 4;
                return _common.default.allArticles.visitPage();

              case 4:
                _context14.next = 6;
                return _common.default.table.articles.objectAt(0).select();

              case 6:
                _context14.next = 8;
                return _article.default.showPage.clickArticleActions();

              case 8:
                _context14.next = 10;
                return _formFields.default.selectBasicDropdown('article-actions', SELECT.delete);

              case 10:
                _context14.next = 12;
                return (0, _testHelpers.waitFor)('.article-delete-confirm-modal');

              case 12:
                _context14.next = 14;
                return _article.default.showPage.deleteArticleModalConfirm();

              case 14:
                assert.equal((0, _testHelpers.currentURL)(), _common.default.url.allArticles);
                assert.ok(successFlash.called);

              case 16:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14);
      }));

      return function (_x14) {
        return _ref14.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/acceptance/projects-test", ["qunit", "@ember/test-helpers", "ember-qunit", "freshservice/tests/lib/stub-current-account", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/intl", "freshservice/tests/pages/projects", "freshservice/tests/pages/projects/project-management"], function (_qunit, _testHelpers, _emberQunit, _stubCurrentAccount, _stubCurrentUser, _intl, _projects, _projectManagement) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  // mock for synergy SDK
  var freshSynergyHost = {
    addGuest: function addGuest() {},
    setRootURLPath: function setRootURLPath() {}
  };
  var TEST_ACCOUNT = {
    features: ["fr_project"],
    installedApps: {
      freshrelease: {
        fr_account_id: 1,
        domain: "localhost.sample.com"
      }
    }
  };
  var TEST_USER = {
    privileges: ["manage_all_projects"],
    hasActiveFreshId: true,
    isAssumedUser: false
  };
  var ASSUMED_IDENTITY_USER = {
    privileges: ["manage_all_projects"],
    hasActiveFreshId: true,
    isAssumedUser: true
  };

  var PROJECT_MANAGEMENT_ACCOUNT = _objectSpread({}, TEST_ACCOUNT);

  var PROJECT_MANAGEMENT_ROUTE = '/admin/project-management/admin-settings';
  (0, _qunit.module)("Acceptance | projects", function (hooks) {
    (0, _emberQunit.setupApplicationTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.intl = this.owner.lookup("service:intl");
              window.freshSynergyHost = freshSynergyHost;

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)("visiting projects without feature", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var EXPECTED_HEADING_TEXT, EXPECTED_DESCRIPTION_TEXT;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                EXPECTED_HEADING_TEXT = this.intl.t("fs.projects.no_access_title");
                EXPECTED_DESCRIPTION_TEXT = this.intl.t("fs.projects.no_access_description");
                _context2.next = 4;
                return _projects.default.visit();

              case 4:
                assert.equal((0, _testHelpers.currentURL)(), "/project_management/not_found");
                assert.equal(_projects.default.headingText, EXPECTED_HEADING_TEXT, "Expected empty state text is shown");
                assert.equal(_projects.default.descriptionText, EXPECTED_DESCRIPTION_TEXT, "Expected empty state text is shown");

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("visiting projects with feature but without activation", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var EXPECTED_HEADING_TEXT, EXPECTED_DESCRIPTION_TEXT;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
                EXPECTED_HEADING_TEXT = this.intl.t("fs.projects.activation_title");
                EXPECTED_DESCRIPTION_TEXT = this.intl.t("fs.projects.activation_description");
                _context3.next = 5;
                return _projects.default.visit();

              case 5:
                assert.equal((0, _testHelpers.currentURL)(), "/project_management/projects");
                assert.equal(_projects.default.headingText, EXPECTED_HEADING_TEXT, "Expected empty state text is shown");
                assert.equal(_projects.default.descriptionText, EXPECTED_DESCRIPTION_TEXT, "Expected empty state text is shown");

              case 8:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("visiting projects with assumed identity user", /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var EXPECTED_HEADING_TEXT, EXPECTED_DESCRIPTION_TEXT;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
                (0, _stubCurrentUser.stubCurrentUser)(ASSUMED_IDENTITY_USER);
                EXPECTED_HEADING_TEXT = this.intl.t("fs.projects.no_assumed_user");
                EXPECTED_DESCRIPTION_TEXT = this.intl.t("fs.projects.revert_identity");
                _context4.next = 6;
                return _projects.default.visit();

              case 6:
                assert.equal((0, _testHelpers.currentURL)(), "/project_management/projects");
                assert.equal(_projects.default.headingText, EXPECTED_HEADING_TEXT, "Expected empty state text is shown");
                assert.equal(_projects.default.revertIdentityLink, EXPECTED_DESCRIPTION_TEXT, "Expected empty state text is shown");

              case 9:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.skip)("visiting projects with feature and with activation", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
                (0, _stubCurrentUser.stubCurrentUser)(TEST_USER);
                _context5.next = 4;
                return _projects.default.visit();

              case 4:
                assert.equal((0, _testHelpers.currentURL)(), "/project_management/projects");
                assert.ok(_projects.default.isIframePresent, "Projects contents loaded successfully");

              case 6:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }()); // Admin -> Project management tests

    (0, _qunit.skip)("visit project management with feature and privileges", /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                (0, _stubCurrentAccount.stubCurrentAccount)(PROJECT_MANAGEMENT_ACCOUNT);
                (0, _stubCurrentUser.stubCurrentUser)(TEST_USER);
                _context6.next = 4;
                return _projectManagement.default.visit();

              case 4:
                assert.equal((0, _testHelpers.currentURL)(), PROJECT_MANAGEMENT_ROUTE);
                assert.ok(_projectManagement.default.isIframePresent, "Project Management contents loaded successfully");

              case 6:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
  });
});
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

define("freshservice/tests/acceptance/workload-test", ["freshservice/config/environment", "ember-concurrency", "qunit", "@ember/test-helpers", "ember-qunit", "freshservice/tests/lib/stub-current-account"], function (_environment, _emberConcurrency, _qunit, _testHelpers, _emberQunit, _stubCurrentAccount) {
  "use strict";

  var _dec, _class, _descriptor, _temp;

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  var MockService1 = (_dec = (0, _emberConcurrency.task)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _emberConcurrency.timeout)(50);

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })).restartable(), (_class = (_temp = /*#__PURE__*/function (_Ember$Service) {
    _inherits(MockService1, _Ember$Service);

    var _super = _createSuper(MockService1);

    function MockService1() {
      var _this;

      _classCallCheck(this, MockService1);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _defineProperty(_assertThisInitialized(_this), "changeFormFieldHash", Object.freeze({
        status: {
          choices: [{
            id: 1,
            value: 'Open'
          }, {
            id: 2,
            value: 'Planning'
          }, {
            id: 3,
            value: 'Awaiting Approval'
          }, {
            id: 4,
            value: 'Pending Release'
          }, {
            id: 5,
            value: 'Pending Review'
          }, {
            id: 6,
            value: 'Closed'
          }]
        }
      }));

      _initializerDefineProperty(_assertThisInitialized(_this), "fetchModuleFields", _descriptor, _assertThisInitialized(_this));

      return _this;
    }

    return MockService1;
  }(Ember.Service), _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "fetchModuleFields", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));

  window.__CLASSIC_OWN_CLASSES__.set(MockService1, true);

  var MOCK_FETCH_SERVICE = Ember.Service.extend({
    request: function request(path, options) {
      var response = null;
      this.setProperties({
        path: path,
        options: options
      });

      if (path === 'workload/settings') {
        response = {
          'workload_settings': {
            'allocation_levels': {
              'low_workload': {
                'inclusive': false,
                'percentage': 80
              },
              'high_workload': {
                'inclusive': true,
                'percentage': 100
              }
            }
          }
        };
      }

      return Ember.RSVP.resolve(response);
    },
    json: function json() {
      return [];
    },
    host: _environment.default.environment === 'development' ? "".concat(_environment.default.APP.hostURL, "/api/_/") : '/api/_/'
  });
  (0, _qunit.module)('Acceptance | workload', function (hooks) {
    (0, _emberQunit.setupApplicationTest)(hooks);
    (0, _qunit.test)('visiting /workload should load the route if temp features enabled', /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.owner.register('service:fetch', MOCK_FETCH_SERVICE);
                this.owner.register('service:moduleFields', MockService1);
                (0, _stubCurrentAccount.stubCurrentAccount)({
                  temp_features: ["workload_management"]
                });
                _context2.next = 5;
                return (0, _testHelpers.visit)('/workload');

              case 5:
                assert.equal((0, _testHelpers.currentURL)().includes('/workload'), true);

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('visiting /workload should abort the transition if workload_management temp features is not enabled', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                (0, _stubCurrentAccount.stubCurrentAccount)({
                  temp_features: ["demo_features"]
                });
                _context3.prev = 1;
                _context3.next = 4;
                return (0, _testHelpers.visit)('/workload');

              case 4:
                _context3.next = 9;
                break;

              case 6:
                _context3.prev = 6;
                _context3.t0 = _context3["catch"](1);
                assert.equal(_context3.t0.message, 'TransitionAborted');

              case 9:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, null, [[1, 6]]);
      }));

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/data/custom-translations", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.defaultCustomTranslations = void 0;
  var defaultCustomTranslations = {
    module_names: {
      ticket: "ticket",
      tickets: "tickets",
      Ticket: "Ticket",
      Tickets: "Tickets",
      problem: "problem",
      problems: "problems",
      Problem: "Problem",
      Problems: "Problems",
      release: "release",
      releases: "releases",
      Release: "Release",
      Releases: "Releases",
      contract: "contract",
      contracts: "contracts",
      Contract: "Contract",
      Contracts: "Contracts",
      configuration_item: "configuration item",
      configuration_items: "configuration items",
      Configuration_Item: "Configuration Item",
      Configuration_Items: "Configuration Items",
      CI: "CI",
      CIs: "CIs",
      ci: "ci",
      cis: "cis",
      asset: "asset",
      assets: "assets",
      Asset: "Asset",
      Assets: "Assets",
      solution: "solution",
      solutions: "solutions",
      Solution: "Solution",
      Solutions: "Solutions",
      change: "change",
      changes: "changes",
      Change: "Change",
      Changes: "Changes",
      incident: "incident",
      incidents: "incidents",
      Incident: "Incident",
      Incidents: "Incidents",
      announcement: "announcement",
      announcements: "announcements",
      Announcement: "Announcement",
      Announcements: "Announcements",
      role: "role",
      roles: "roles",
      Role: "Role",
      Roles: "Roles",
      cab: "cab",
      cabs: "cabs",
      CAB: "CAB",
      CABs: "CABs",
      Change_Advisory_Board: "Change Advisory Board",
      Change_Advisory_Boards: "Change Advisory Boards",
      change_advisory_board: "change advisory board",
      change_advisory_boards: "change advisory boards",
      requester: "requester",
      requesters: "requesters",
      Requester: "Requester",
      Requesters: "Requesters",
      contact: "contact",
      contacts: "contacts",
      Contact: "Contact",
      Contacts: "Contacts",
      agent: "agent",
      agents: "agents",
      Agent: "Agent",
      Agents: "Agents",
      service_request: "service request",
      service_requests: "service requests",
      Service_Request: "Service Request",
      Service_Requests: "Service Requests",
      service_item: "service item",
      service_items: "service items",
      Service_Item: "Service Item",
      Service_Items: "Service Items",
      service_catalog: "service catalog",
      Service_Catalog: "Service Catalog",
      service_catalogs: "service catalogs",
      Service_Catalogs: "Service Catalogs",
      service_category: "service category",
      service_categories: "service categories",
      Service_Category: "Service Category",
      Service_Categories: "Service Categories",
      department: "department",
      departments: "departments",
      Department: "Department",
      Departments: "Departments",
      company: "company",
      companies: "companies",
      Company: "Company",
      Companies: "Companies"
    }
  };
  _exports.defaultCustomTranslations = defaultCustomTranslations;
});
define("freshservice/tests/helpers/ember-basic-dropdown", ["exports", "ember-native-dom-helpers", "ember-basic-dropdown/test-support/helpers"], function (_exports, _emberNativeDomHelpers, _helpers) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "nativeTap", {
    enumerable: true,
    get: function get() {
      return _helpers.nativeTap;
    }
  });
  Object.defineProperty(_exports, "clickTrigger", {
    enumerable: true,
    get: function get() {
      return _helpers.clickTrigger;
    }
  });
  Object.defineProperty(_exports, "tapTrigger", {
    enumerable: true,
    get: function get() {
      return _helpers.tapTrigger;
    }
  });
  Object.defineProperty(_exports, "fireKeydown", {
    enumerable: true,
    get: function get() {
      return _helpers.fireKeydown;
    }
  });
  _exports.nativeClick = _exports.default = void 0;
  var _default = _helpers.default;
  _exports.default = _default;
  var nativeClick = _emberNativeDomHelpers.click;
  _exports.nativeClick = nativeClick;
});
define("freshservice/tests/helpers/ember-cli-clipboard", ["exports", "ember-cli-clipboard/test-support"], function (_exports, _testSupport) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.triggerSuccess = triggerSuccess;
  _exports.triggerError = triggerError;
  _exports.default = _default;

  var getOwnerFromContext = function getOwnerFromContext(c) {
    return c.container || c.owner;
  };
  /* === Legacy Integration Test Helpers === */

  /**
   * Fires `success` action for an instance of a copy-button component
   * @function triggerSuccess
   * @param {Object} context - integration test’s this context
   * @param {String} selector - css selector of the copy-button instance
   * @returns {Void}
   */


  function triggerSuccess(context, selector) {
    var owner = getOwnerFromContext(context);
    (0, _testSupport._fireComponentAction)(owner, selector, 'success');
  }
  /**
   * Fires `error` action for an instance of a copy-button component
   * @function triggerError
   * @param {Object} context - integration test’s this context
   * @param {String} selector - css selector of the copy-button instance
   * @returns {Void}
   */


  function triggerError(context, selector) {
    var owner = getOwnerFromContext(context);
    (0, _testSupport._fireComponentAction)(owner, selector, 'error');
  }
  /* === Register Legacy Acceptance Test Helpers === */


  function _default() {
    Ember.Test.registerAsyncHelper('triggerCopySuccess', function (app, selector) {
      var owner = app.__container__;
      (0, _testSupport._fireComponentAction)(owner, selector, 'success');
    });
    Ember.Test.registerAsyncHelper('triggerCopyError', function (app, selector) {
      var owner = app.__container__;
      (0, _testSupport._fireComponentAction)(owner, selector, 'error');
    });
  }
});
define("freshservice/tests/helpers/ember-power-calendar", ["exports", "ember-power-calendar/test-support"], function (_exports, _testSupport) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _default;

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function _default() {
    Ember.Test.registerAsyncHelper('calendarCenter', /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(app, selector, newCenter) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", (0, _testSupport.calendarCenter)(selector, newCenter));

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x, _x2, _x3) {
        return _ref.apply(this, arguments);
      };
    }());
    Ember.Test.registerAsyncHelper('calendarSelect', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(app, selector, selected) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", (0, _testSupport.calendarSelect)(selector, selected));

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x4, _x5, _x6) {
        return _ref2.apply(this, arguments);
      };
    }());
  }
});
define("freshservice/tests/helpers/ember-power-select", ["exports", "ember-power-select/test-support/helpers"], function (_exports, _helpers) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = deprecatedRegisterHelpers;
  _exports.selectChoose = _exports.touchTrigger = _exports.nativeTouch = _exports.clickTrigger = _exports.typeInSearch = _exports.triggerKeydown = _exports.nativeMouseUp = _exports.nativeMouseDown = _exports.findContains = void 0;

  function deprecateHelper(fn, name) {
    return function () {
      (true && !(false) && Ember.deprecate("DEPRECATED `import { ".concat(name, " } from '../../tests/helpers/ember-power-select';` is deprecated. Please, replace it with `import { ").concat(name, " } from 'ember-power-select/test-support/helpers';`"), false, {
        until: '1.11.0',
        id: "ember-power-select-test-support-".concat(name)
      }));
      return fn.apply(void 0, arguments);
    };
  }

  var findContains = deprecateHelper(_helpers.findContains, 'findContains');
  _exports.findContains = findContains;
  var nativeMouseDown = deprecateHelper(_helpers.nativeMouseDown, 'nativeMouseDown');
  _exports.nativeMouseDown = nativeMouseDown;
  var nativeMouseUp = deprecateHelper(_helpers.nativeMouseUp, 'nativeMouseUp');
  _exports.nativeMouseUp = nativeMouseUp;
  var triggerKeydown = deprecateHelper(_helpers.triggerKeydown, 'triggerKeydown');
  _exports.triggerKeydown = triggerKeydown;
  var typeInSearch = deprecateHelper(_helpers.typeInSearch, 'typeInSearch');
  _exports.typeInSearch = typeInSearch;
  var clickTrigger = deprecateHelper(_helpers.clickTrigger, 'clickTrigger');
  _exports.clickTrigger = clickTrigger;
  var nativeTouch = deprecateHelper(_helpers.nativeTouch, 'nativeTouch');
  _exports.nativeTouch = nativeTouch;
  var touchTrigger = deprecateHelper(_helpers.touchTrigger, 'touchTrigger');
  _exports.touchTrigger = touchTrigger;
  var selectChoose = deprecateHelper(_helpers.selectChoose, 'selectChoose');
  _exports.selectChoose = selectChoose;

  function deprecatedRegisterHelpers() {
    (true && !(false) && Ember.deprecate("DEPRECATED `import registerPowerSelectHelpers from '../../tests/helpers/ember-power-select';` is deprecated. Please, replace it with `import registerPowerSelectHelpers from 'ember-power-select/test-support/helpers';`", false, {
      until: '1.11.0',
      id: 'ember-power-select-test-support-register-helpers'
    }));
    return (0, _helpers.default)();
  }
});
define("freshservice/tests/helpers/flash-message", ["ember-cli-flash/flash/object"], function (_object) {
  "use strict";

  _object.default.reopen({
    init: function init() {}
  });
});
define("freshservice/tests/helpers/hifi-acceptance-helper", ["ember-hifi/hifi-connections/dummy-connection"], function (_dummyConnection) {
  "use strict";

  Ember.Test.onInjectHelpers(function (app) {
    var service = app.__container__.lookup('service:hifi');

    app.register('hifi-connection:local-dummy-connection', _dummyConnection.default, {
      instantiate: false
    });

    var activeDummy = service._activateConnection({
      name: 'LocalDummyConnection'
    });

    service.set('_connections', [activeDummy]);
  });
});
define("freshservice/tests/helpers/hifi-integration-helpers", ["exports", "ember-hifi/services/hifi", "ember-hifi/hifi-connections/dummy-connection", "freshservice/tests/helpers/hifi-needs"], function (_exports, _hifi, _dummyConnection, _hifiNeeds) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "DummyConnection", {
    enumerable: true,
    get: function get() {
      return _dummyConnection.default;
    }
  });
  Object.defineProperty(_exports, "hifiNeeds", {
    enumerable: true,
    get: function get() {
      return _hifiNeeds.default;
    }
  });
  _exports.dummyHifi = void 0;

  var dummyHifi = _hifi.default.extend({
    init: function init() {
      this.set('options', {
        emberHifi: {
          connections: [{
            name: 'DummyConnection',
            config: {
              testOption: 'DummyConnection'
            }
          }]
        }
      });

      this._super.apply(this, arguments);
    },
    _lookupConnection: function _lookupConnection() {
      return _dummyConnection.default;
    }
  });

  _exports.dummyHifi = dummyHifi;
});
define("freshservice/tests/helpers/hifi-needs", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = ['service:hifi', 'service:hifi-cache', 'service:poll'];
  _exports.default = _default;
});
define("freshservice/tests/helpers/shared-audio-access", ["exports", "ember-hifi/utils/shared-audio-access"], function (_exports, _sharedAudioAccess) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function get() {
      return _sharedAudioAccess.default;
    }
  });
});
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

define("freshservice/tests/integration/components/admin/cloud-management/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/intl", "sinon", "freshservice/tests/pages/components/admin/cloud-management", "freshservice/constants/admin/cloud-management"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _sinonContext, _intl, _sinon, _cloudManagement, _cloudManagement2) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var MockMarketplaceAdapterService = /*#__PURE__*/function (_Ember$Service) {
    _inherits(MockMarketplaceAdapterService, _Ember$Service);

    var _super = _createSuper(MockMarketplaceAdapterService);

    function MockMarketplaceAdapterService() {
      var _this;

      _classCallCheck(this, MockMarketplaceAdapterService);

      _this = _super.apply(this, arguments);

      _defineProperty(_assertThisInitialized(_this), "marketplaceManager", void 0);

      _this.marketplaceManager = {
        getCollections: _this.getCollections
      };
      return _this;
    }

    _createClass(MockMarketplaceAdapterService, [{
      key: "initializeMarketplaceManager",
      value: function initializeMarketplaceManager() {
        return;
      }
    }, {
      key: "getCollections",
      value: function getCollections() {
        return {
          apps: self.server.db.marketplaceApps
        };
      }
    }]);

    return MockMarketplaceAdapterService;
  }(Ember.Service);

  _defineProperty(MockMarketplaceAdapterService, "self", void 0);

  window.__CLASSIC_HAS_CONSTRUCTOR__.set(MockMarketplaceAdapterService, true);

  window.__CLASSIC_OWN_CLASSES__.set(MockMarketplaceAdapterService, true);

  (0, _qunit.module)("Integration | Component | admin | cloud-management", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.server.createList('marketplace-app', 10);
              this.owner.unregister('service:marketplaceAdapter');
              MockMarketplaceAdapterService.self = this;
              this.owner.register('service:marketplaceAdapter', MockMarketplaceAdapterService);

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)("should be able to navigate between banners", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var intl;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                intl = this.owner.lookup("service:intl");
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::CloudManagement/>
                */
                {
                  id: "DtGY0emZ",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/cloud-management\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.equal(_cloudManagement.default.bannerTitle, intl.t(_cloudManagement2.CM_BANNER_DATA[0].title), "Banner first title should be visible");
                assert.ok(_cloudManagement.default.bannerPrevBtnDisabled, "Prev button should be disabled");
                _context2.next = 7;
                return _cloudManagement.default.bannerNxtBtn();

              case 7:
                assert.equal(_cloudManagement.default.bannerTitle, intl.t(_cloudManagement2.CM_BANNER_DATA[1].title), "Banner second title should be visible");
                assert.ok(_cloudManagement.default.bannerNxtBtnDisabled, "Next button should be disabled");

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("should be able to toggle sidepane by clicking on the first app", /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var spy, mkpApp;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                spy = _sinon.default.spy();
                mkpApp = this.server.db.marketplaceApps[0];
                mkpApp.logoImg = undefined;
                this.set('toggleMkpApp', spy);
                _context3.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::CloudManagement @toggleMkpApp={{toggleMkpApp}}/>
                */
                {
                  id: "rBE1DQjt",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/cloud-management\",[],[[\"@toggleMkpApp\"],[[22,\"toggleMkpApp\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                _context3.next = 8;
                return _cloudManagement.default.firstGalleryItem();

              case 8:
                // clicking on the first item in the gallery
                assert.ok(spy.calledOnceWith(mkpApp), "Marketplace toggle app called");
                assert.ok(_cloudManagement.default.isSidePaneVisible, "Sidepane should be visible");

              case 10:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("should render all the apps items in the gallery list", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var noOfApps;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::CloudManagement/>
                */
                {
                  id: "DtGY0emZ",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/cloud-management\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                noOfApps = this.server.db.marketplaceApps.length;
                assert.equal(noOfApps, _cloudManagement.default.galleryAppListCont.objectAt(0).galleryItem.length, "Should render all the items under first category");
                assert.equal(noOfApps, _cloudManagement.default.galleryAppListCont.objectAt(1).galleryItem.length, "Should render all the items under second category");

              case 5:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/admin/freddy/response-suggestion/config/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-fetch"], function (_qunit, _emberQunit, _testHelpers, _sinonContext, _intl, _stubFetch) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var pageObj = {
    solToggleDom: '[data-test-item-name="solution_article"] [data-test-checkbox]',
    cannedToggleDom: '[data-test-item-name="canned_response"] [data-test-checkbox]'
  };
  (0, _qunit.module)('Integration | Component | admin/response-suggestion/config', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _qunit.test)('check if config toggles are working', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var fetchStub, solToggleDom, cannedToggleDom;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                fetchStub = (0, _stubFetch.stubFetch)();
                fetchStub.withArgs('predictive_intelligence/change_suggestion_status').returns(Promise.resolve({}));
                this.set('model', [{
                  "token": "solution_article",
                  "name": "Solution article suggestions",
                  "state": false,
                  "disabled": false,
                  "message": "Freddy will automatically suggest relevant solution articles when agent works on ticket."
                }, {
                  "token": "canned_response",
                  "name": "Canned response suggestions",
                  "state": true,
                  "disabled": false,
                  "message": "Freddy will automatically suggest relevant canned responses when agent works on ticket."
                }]);
                _context.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::Freddy::ResponseSuggestion::Config @model={{this.model}} />
                */
                {
                  id: "axVUD63X",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/freddy/response-suggestion/config\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                solToggleDom = (0, _testHelpers.find)(pageObj.solToggleDom);
                assert.equal(solToggleDom.checked, false, 'solution article row toggle off');
                _context.next = 9;
                return (0, _testHelpers.click)(solToggleDom);

              case 9:
                assert.equal(solToggleDom.checked, true, 'solution article row toggle on');
                cannedToggleDom = (0, _testHelpers.find)(pageObj.cannedToggleDom);
                assert.equal(cannedToggleDom.checked, true, 'canned row toggle on');
                _context.next = 14;
                return (0, _testHelpers.click)(cannedToggleDom);

              case 14:
                assert.equal(cannedToggleDom.checked, false, 'canned row toggle off');

              case 15:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('check if showing global info if all items disabled', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var solToggleDom, cannedToggleDom;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.set('model', [{
                  "token": "solution_article",
                  "name": "Solution article suggestions",
                  "state": false,
                  "disabled": true,
                  "message": "Freddy will automatically suggest relevant solution articles when agent works on ticket."
                }, {
                  "token": "canned_response",
                  "name": "Canned response suggestions",
                  "state": true,
                  "disabled": true,
                  "message": "Freddy will automatically suggest relevant canned responses when agent works on ticket."
                }]);
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::Freddy::ResponseSuggestion::Config @model={{this.model}} />
                */
                {
                  id: "axVUD63X",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/freddy/response-suggestion/config\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.ok((0, _testHelpers.find)('.response-suggestions-body > .response-suggestions-body--info'), 'freddy is learning info shown');
                solToggleDom = (0, _testHelpers.find)(pageObj.solToggleDom);
                cannedToggleDom = (0, _testHelpers.find)(pageObj.cannedToggleDom);
                assert.equal(solToggleDom.disabled, true);
                assert.equal(cannedToggleDom.disabled, true);
                assert.equal(solToggleDom.checked, false, 'canned row toggle did not change since disabled');

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('check if only one of the items disabled', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var solToggleDom, cannedToggleDom;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this.set('model', [{
                  "token": "solution_article",
                  "name": "Solution article suggestions",
                  "state": false,
                  "disabled": false,
                  "message": "Freddy will automatically suggest relevant solution articles when agent works on ticket."
                }, {
                  "token": "canned_response",
                  "name": "Canned response suggestions",
                  "state": true,
                  "disabled": true,
                  "message": "Freddy will automatically suggest relevant canned responses when agent works on ticket."
                }]);
                _context3.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::Freddy::ResponseSuggestion::Config @model={{this.model}} />
                */
                {
                  id: "axVUD63X",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/freddy/response-suggestion/config\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.notOk((0, _testHelpers.find)('.response-suggestions-body > .response-suggestions-body--info'), 'freddy is learning top info not shown');
                solToggleDom = (0, _testHelpers.find)(pageObj.solToggleDom);
                cannedToggleDom = (0, _testHelpers.find)(pageObj.cannedToggleDom);
                assert.equal(solToggleDom.disabled, false);
                assert.equal(cannedToggleDom.disabled, true);
                assert.notOk((0, _testHelpers.find)('[data-test-item-name="solution_article"] .response-suggestions-body--info'), 'freddy is learning info not shown inside solution article');
                assert.ok((0, _testHelpers.find)('[data-test-item-name="canned_response"] .response-suggestions-body--info'), 'freddy is learning info shown inside canned');

              case 10:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/admin/freddy/response-suggestion/config/item/component-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | admin/response-suggestion/config/item', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.skip)('it renders', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::ResponseSuggestion::Config::Item />
                */
                {
                  id: "0ykOWuzU",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/response-suggestion/config/item\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.equal(this.element.textContent.trim(), ''); // Template block usage:

                _context.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                      <Admin::ResponseSuggestion::Config::Item>
                        template block text
                      </Admin::ResponseSuggestion::Config::Item>
                    
                */
                {
                  id: "UO7hL+nQ",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n      \"],[5,\"admin/response-suggestion/config/item\",[],[[],[]],{\"statements\":[[0,\"\\n        template block text\\n      \"]],\"parameters\":[]}],[0,\"\\n    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                assert.equal(this.element.textContent.trim(), 'template block text');

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/admin/freddy/response-suggestion/config/sidebar/component-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | admin/response-suggestion/config/sidebar', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.skip)('it renders', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::ResponseSuggestion::Config::Sidebar />
                */
                {
                  id: "hX9amnZZ",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/response-suggestion/config/sidebar\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.equal(this.element.textContent.trim(), ''); // Template block usage:

                _context.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                      <Admin::ResponseSuggestion::Config::Sidebar>
                        template block text
                      </Admin::ResponseSuggestion::Config::Sidebar>
                    
                */
                {
                  id: "iWMK7mgK",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n      \"],[5,\"admin/response-suggestion/config/sidebar\",[],[[],[]],{\"statements\":[[0,\"\\n        template block text\\n      \"]],\"parameters\":[]}],[0,\"\\n    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                assert.equal(this.element.textContent.trim(), 'template block text');

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/admin/freddy/tfs/config/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/intl", "freshservice/tests/lib/set-locale-timezone-moment", "freshservice/tests/lib/stub-fetch"], function (_qunit, _emberQunit, _testHelpers, _sinonContext, _intl, _setLocaleTimezoneMoment, _stubFetch) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | admin/freddy/tfs/config', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _setLocaleTimezoneMoment.setLocaleAndTimeZoneForMoment)(hooks);
    (0, _qunit.test)('check tfs flow', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var fetchStub;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                fetchStub = (0, _stubFetch.stubFetch)();
                fetchStub.withArgs('ticket_field_suggester/fetch_fields').returns(Promise.resolve({
                  "tfs_enabled": true,
                  "fields": [{
                    "id": "category",
                    "name": "Category",
                    "checked": true,
                    "disabled": false,
                    "message": "",
                    "label": "Category",
                    "current_confidence": 90,
                    "prediction_accuracy": null,
                    "feedback_accuracy": 67
                  }, {
                    "id": "priority",
                    "name": "Priority",
                    "checked": true,
                    "disabled": true,
                    "message": "Priority Matrix is turned on. Ticket's priority will be set by the Priority Matrix",
                    "label": "Priority"
                  }, {
                    "id": "urgency",
                    "name": "Urgency",
                    "checked": true,
                    "disabled": false,
                    "message": "",
                    "label": "Urgency"
                  }, {
                    "id": "sub_category",
                    "name": "Sub-Category",
                    "checked": true,
                    "disabled": false,
                    "message": "",
                    "label": "Sub-Category",
                    "current_confidence": 80,
                    "prediction_accuracy": null,
                    "feedback_accuracy": 33
                  }, {
                    "id": "group_id",
                    "name": "Group",
                    "checked": false,
                    "disabled": false,
                    "message": "",
                    "label": "Group",
                    "current_confidence": 95,
                    "prediction_accuracy": null,
                    "feedback_accuracy": 53
                  }, {
                    "id": "impact",
                    "name": "Impact",
                    "checked": false,
                    "disabled": false,
                    "message": "Impact of the associated asset(s) will be carried forward to the Ticket",
                    "label": "Impact"
                  }, {
                    "id": "item_category",
                    "name": "Item",
                    "checked": false,
                    "disabled": false,
                    "message": "",
                    "label": "Item",
                    "current_confidence": 85,
                    "prediction_accuracy": null,
                    "feedback_accuracy": 20
                  }]
                }));
                _context.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::Freddy::Tfs::Config></Admin::Freddy::Tfs::Config>
                */
                {
                  id: "2RgNLw7i",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/freddy/tfs/config\",[],[[],[]],{\"statements\":[],\"parameters\":[]}]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                assert.equal((0, _testHelpers.findAll)('[data-test-result="field"]').length, 7);
                fetchStub.withArgs('ticket_field_suggester/fetch_accuracy_for_all_confidence_thresholds?field=category').returns(Promise.resolve({
                  "current_confidence": 90,
                  "conf_50": {
                    "accurate_tickets": "8932",
                    "inaccurate_perc": 36,
                    "predicted_tickets": "13819",
                    "using_flag": "1",
                    "coverage": 86
                  },
                  "conf_55": {
                    "accurate_tickets": "8763",
                    "inaccurate_perc": 33,
                    "predicted_tickets": "13056",
                    "using_flag": "1",
                    "coverage": 81
                  },
                  "conf_60": {
                    "accurate_tickets": "8571",
                    "inaccurate_perc": 32,
                    "predicted_tickets": "12434",
                    "using_flag": "1",
                    "coverage": 77
                  },
                  "conf_65": {
                    "accurate_tickets": "8310",
                    "inaccurate_perc": 29,
                    "predicted_tickets": "11671",
                    "using_flag": "1",
                    "coverage": 73
                  },
                  "conf_70": {
                    "accurate_tickets": "8131",
                    "inaccurate_perc": 27,
                    "predicted_tickets": "11056",
                    "using_flag": "1",
                    "coverage": 69
                  },
                  "conf_75": {
                    "accurate_tickets": "7911",
                    "inaccurate_perc": 24,
                    "predicted_tickets": "10364",
                    "using_flag": "1",
                    "coverage": 64
                  },
                  "conf_80": {
                    "accurate_tickets": "7606",
                    "inaccurate_perc": 20,
                    "predicted_tickets": "9487",
                    "using_flag": "1",
                    "coverage": 59
                  },
                  "conf_85": {
                    "accurate_tickets": "6782",
                    "inaccurate_perc": 20,
                    "predicted_tickets": "8466",
                    "using_flag": "1",
                    "coverage": 52
                  },
                  "conf_90": {
                    "accurate_tickets": "5784",
                    "inaccurate_perc": 21,
                    "predicted_tickets": "7254",
                    "using_flag": "1",
                    "coverage": 45
                  },
                  "conf_95": {
                    "accurate_tickets": "4534",
                    "inaccurate_perc": 21,
                    "predicted_tickets": "5740",
                    "using_flag": "1",
                    "coverage": 35
                  },
                  "conf_100": {
                    "accurate_tickets": "2201",
                    "inaccurate_perc": 23,
                    "predicted_tickets": "2826",
                    "using_flag": "1",
                    "coverage": 17
                  }
                }));
                _context.next = 8;
                return (0, _testHelpers.click)('[data-test-edit="category"]');

              case 8:
                assert.equal((0, _testHelpers.find)('[data-test-slider="category"]').value, 90);
                assert.equal((0, _testHelpers.findAll)('[data-test-result="field"]').length, 7);
                fetchStub.withArgs('ticket_field_suggester/update_confidence_for_field').returns(Promise.resolve({
                  "success": true
                }));
                _context.next = 13;
                return (0, _testHelpers.click)('[data-test-save="category"]');

              case 13:
                (0, _testHelpers.find)("#toggle-switch-field-urgency").checked = false;
                _context.next = 16;
                return (0, _testHelpers.triggerEvent)('#field-urgency', 'change');

              case 16:
                assert.equal((0, _testHelpers.find)("#toggle-switch-field-urgency").checked, false);
                (0, _testHelpers.find)("#toggle-switch-toggle-tfs").checked = false;
                _context.next = 20;
                return (0, _testHelpers.triggerEvent)('#toggle-tfs', 'change');

              case 20:
                assert.equal((0, _testHelpers.find)("#toggle-switch-toggle-tfs").checked, false);

              case 21:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/admin/itom/alert-actions/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-current-account", "freshservice/mirage/fixtures/alert_rules", "freshservice/tests/pages/components/admin/itom/alert-rules"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _intl, _stubCurrentAccount, _alert_rules, _alertRules) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var TEST_ACCOUNT = {
    custom_translations: {
      "module_names": {
        "department": "department"
      }
    },
    features: ["alert_management"]
  };
  var TEST_ALERT_RULE = _alert_rules.default[0];
  var TEST_ALERT_RULE_1 = _alert_rules.default[1];

  function renderComponent() {
    return _renderComponent.apply(this, arguments);
  }

  function _renderComponent() {
    _renderComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <Admin::Itom::AlertActions
              	@model     			= {{this.model}}
              	@onUpdateModel 	= {{fn this.onUpdateModel}} />
              */
              {
                id: "FCuzanOp",
                block: "{\"symbols\":[],\"statements\":[[5,\"admin/itom/alert-actions\",[],[[\"@model\",\"@onUpdateModel\"],[[23,0,[\"model\"]],[28,\"fn\",[[23,0,[\"onUpdateModel\"]]],null]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));
    return _renderComponent.apply(this, arguments);
  }

  (0, _qunit.module)("Integration | Component | admin | alert-rule | view | alert-action", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    TEST_ALERT_RULE;
    hooks.beforeEach(function () {
      (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
      this.intl = this.owner.lookup("service:intl");
      var router = this.owner.lookup("router:main");
      router.setupRouter();
    });
    hooks.after(function () {
      this.owner.destroy("service:currentAccount");
    });
    (0, _qunit.test)("it should display the alert rule action incident option selected", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var model;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Arrange
                model = Ember.Object.extend({
                  changedAttributes: function changedAttributes() {
                    return {};
                  }
                });
                Ember.setProperties(this, {
                  model: model.create(TEST_ALERT_RULE),
                  onUpdateModel: function onUpdateModel() {}
                }); // Act

                _context.next = 4;
                return renderComponent();

              case 4:
                // Assert Keys
                assert.equal(_alertRules.default.actionDropDownChoiceSelectedText, "Create incident", "Alert Rule Action Options changed to incident.");

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("it should display the alert rule action alert fields", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                // Arrange
                Ember.setProperties(this, {
                  model: Ember.Object.create(TEST_ALERT_RULE_1),
                  onUpdateModel: function onUpdateModel() {}
                }); // Act

                _context2.next = 3;
                return renderComponent();

              case 3:
                // Assert Keys
                assert.equal(_alertRules.default.actionDropDownChoiceSelectedText, "Mark alert as Resolved", "Alert Rule Action Options changed to Alert - Mark alert as Resolved.");

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("it should display the alert rule action incident new fields on clicking on dropdown choice incident", /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var model;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                // Arrange
                model = Ember.Object.extend({
                  changedAttributes: function changedAttributes() {
                    return {};
                  }
                });
                Ember.setProperties(this, {
                  model: model.create(TEST_ALERT_RULE),
                  onUpdateModel: function onUpdateModel() {}
                }); // Act

                _context3.next = 4;
                return renderComponent();

              case 4:
                _context3.next = 6;
                return _alertRules.default.actionDropDownOpen();

              case 6:
                _context3.next = 8;
                return _alertRules.default.actionDropDownChoiceSelect();

              case 8:
                // Assert Keys
                assert.equal(_alertRules.default.actionDropDownChoiceSelectedText, "Mark alert as Resolved", "Alert Rule Action Options changed to incident.");

              case 9:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("it should display the alert rule action incident new fields on clicking on dropdown choice Alert", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                // Arrange
                Ember.setProperties(this, {
                  model: Ember.Object.create(TEST_ALERT_RULE),
                  onUpdateModel: function onUpdateModel() {}
                }); // Act

                _context4.next = 3;
                return renderComponent();

              case 3:
                _context4.next = 5;
                return _alertRules.default.actionDropDownOpen();

              case 5:
                _context4.next = 7;
                return _alertRules.default.actionDropDownChoiceSelect();

              case 7:
                // Assert Keys
                assert.equal(_alertRules.default.actionDropDownChoiceSelectedText, "Mark alert as Resolved", "Alert Rule Action Options changed to Alert.");

              case 8:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/admin/itom/alert-integrations/advanced-settings/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "sinon", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/intl", "freshservice/tests/pages/components/admin/itom/alert-integrations/advanced-settings"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _sinon, _sinonContext, _intl, _advancedSettings) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var ROUTER_STUB = {
    params: {
      integration_id: 1
    }
  };
  (0, _qunit.module)("Integration | Component | admin | alert-integrations | advance settings", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    hooks.beforeEach(function () {
      var router = this.owner.lookup("router:main");
      router.currentRoute = ROUTER_STUB;
      router.setupRouter();
    });
    (0, _qunit.test)("should render advanced settings with alert acknowledgment unchecked for alert integration", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var stub;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                stub = _sinon.default.stub();
                this.setProperties({
                  model: {
                    id: 1
                  },
                  navigateOnSuccess: stub,
                  navigateOnCancel: stub
                });
                _context.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::Itom::AlertIntegrations::Integrations::AdvancedSettings @model={{model}} @navigateOnSuccess={{navigateOnSuccess}} @navigateOnCancel={{navigateOnCancel}}/>
                */
                {
                  id: "IhM1crrT",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/itom/alert-integrations/integrations/advanced-settings\",[],[[\"@model\",\"@navigateOnSuccess\",\"@navigateOnCancel\"],[[22,\"model\"],[22,\"navigateOnSuccess\"],[22,\"navigateOnCancel\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context.next = 6;
                return (0, _testHelpers.waitFor)('.alert-integration-adv-settings', {
                  timeout: 2000
                });

              case 6:
                assert.equal(_advancedSettings.default.titleText, "Advanced settings | Applications Manager", "Advanced settings title rendered properly");
                assert.equal(_advancedSettings.default.subtitleText, "Freshservice aggregates alerts based on its resource and metric name. All similar alerts will be grouped together as one until it is resolved.", "Advanced settings helptext rendered properly");
                assert.equal(_advancedSettings.default.reopenTitleText, "Alert reopen interval", "Advanced settings reopen title rendered properly");
                assert.equal(_advancedSettings.default.reopenHelptext1Text, "Reopen an alert in Freshservice if the monitoring tool sends a new notification for the same issue within", "Advanced settings reopen helptext1 rendered properly");
                assert.equal(_advancedSettings.default.reopenHelptext2Text, "of resolution.", "Advanced settings reopen helptext2 rendered properly");
                assert.equal(_advancedSettings.default.reopenHelptext3Text, "Undo alert acknowledgment when an alert reopens.", "Advanced settings reopen helptext3 rendered properly");
                assert.equal(_advancedSettings.default.reopenIntervalText, "45 minutes", "Advanced settings reopen interval text rendered properly");
                assert.notOk(_advancedSettings.default.isReopenAckChecked, "Advanced settings reopen checkbox is unchecked");

              case 14:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("should render advanced settings with alert acknowledgment checked for alert integration", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var stub;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                stub = _sinon.default.stub();
                this.setProperties({
                  model: {
                    id: 1
                  },
                  navigateOnSuccess: stub,
                  navigateOnCancel: stub
                });
                _context2.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::Itom::AlertIntegrations::Integrations::AdvancedSettings @model={{model}} @navigateOnSuccess={{navigateOnSuccess}} @navigateOnCancel={{navigateOnCancel}}/>
                */
                {
                  id: "IhM1crrT",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/itom/alert-integrations/integrations/advanced-settings\",[],[[\"@model\",\"@navigateOnSuccess\",\"@navigateOnCancel\"],[[22,\"model\"],[22,\"navigateOnSuccess\"],[22,\"navigateOnCancel\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context2.next = 6;
                return (0, _testHelpers.waitFor)('.alert-integration-adv-settings', {
                  timeout: 2000
                });

              case 6:
                _context2.next = 8;
                return _advancedSettings.default.clickReopenCheckbox();

              case 8:
                assert.ok(_advancedSettings.default.isReopenAckChecked, "Advanced settings reopen checkbox is checked");

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("should render advanced settings with changing alert reopen interval for alert integration", /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var stub;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                stub = _sinon.default.stub();
                this.setProperties({
                  model: {
                    id: 1
                  },
                  navigateOnSuccess: stub,
                  navigateOnCancel: stub
                });
                _context3.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::Itom::AlertIntegrations::Integrations::AdvancedSettings @model={{model}} @navigateOnSuccess={{navigateOnSuccess}} @navigateOnCancel={{navigateOnCancel}}/>
                */
                {
                  id: "IhM1crrT",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/itom/alert-integrations/integrations/advanced-settings\",[],[[\"@model\",\"@navigateOnSuccess\",\"@navigateOnCancel\"],[[22,\"model\"],[22,\"navigateOnSuccess\"],[22,\"navigateOnCancel\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context3.next = 6;
                return (0, _testHelpers.waitFor)('.alert-integration-adv-settings', {
                  timeout: 2000
                });

              case 6:
                _context3.next = 8;
                return _advancedSettings.default.clickReopenDropdown();

              case 8:
                _context3.next = 10;
                return _advancedSettings.default.clickReopenDDFirstChoice();

              case 10:
                assert.equal(_advancedSettings.default.reopenIntervalText, "60 minutes", "Advanced settings reopen interval text rendered properly");

              case 11:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/admin/itom/alert-integrations/alert-payload/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "sinon", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/intl", "freshservice/tests/pages/components/admin/itom/alert-integrations/alert-payload", "freshservice/tests/pages/components/admin/itom/alert-integrations/custom-alert-payload"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _sinon, _sinonContext, _intl, _alertPayload, _customAlertPayload) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)("Integration | Component | admin | alert-integrations | alert payload", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _qunit.test)("should render alert payload for alert integration", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var router, stub;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                router = this.owner.lookup("router:main");
                router.currentRoute = {
                  params: {
                    integration_id: 1
                  }
                };
                router.setupRouter();
                stub = _sinon.default.stub();
                this.setProperties({
                  model: {
                    id: 1
                  },
                  navigateOnSuccess: stub,
                  navigateOnCancel: stub
                });
                _context.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::Itom::AlertIntegrations::Integrations::AlertPayload @model={{this.model}} @navigateOnSuccess={{this.navigateOnSuccess}} @navigateOnCancel={{this.navigateOnCancel}}/>
                */
                {
                  id: "WgQkfaFz",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/itom/alert-integrations/integrations/alert-payload\",[],[[\"@model\",\"@navigateOnSuccess\",\"@navigateOnCancel\"],[[23,0,[\"model\"]],[23,0,[\"navigateOnSuccess\"]],[23,0,[\"navigateOnCancel\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context.next = 9;
                return (0, _testHelpers.waitFor)('.alerts_admin_itom_integrations_payload', {
                  timeout: 2000
                });

              case 9:
                assert.equal(_alertPayload.default.titleText, "Alert payload | Applications Manager", "Alert payload title rendered properly");
                assert.equal(_alertPayload.default.integrationNameText, "Applications Manager", "Alert payload title rendered properly");
                assert.ok(_alertPayload.default.contentText, "Alert payload content rendered properly");

              case 12:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("should render custom alert payload for alert ingestion", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var router, stub;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                router = this.owner.lookup("router:main");
                router.currentRoute = {
                  params: {
                    integration_id: 2
                  }
                };
                router.setupRouter();
                stub = _sinon.default.stub();
                this.setProperties({
                  model: {
                    id: 2
                  },
                  navigateOnSuccess: stub,
                  navigateOnCancel: stub
                });
                _context2.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::Itom::AlertIntegrations::Integrations::AlertPayload @model={{this.model}} @navigateOnSuccess={{this.navigateOnSuccess}} @navigateOnCancel={{this.navigateOnCancel}}/>
                */
                {
                  id: "WgQkfaFz",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/itom/alert-integrations/integrations/alert-payload\",[],[[\"@model\",\"@navigateOnSuccess\",\"@navigateOnCancel\"],[[23,0,[\"model\"]],[23,0,[\"navigateOnSuccess\"]],[23,0,[\"navigateOnCancel\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context2.next = 9;
                return (0, _testHelpers.waitFor)('.admin_itom_integrations_custom_payload', {
                  timeout: 2000
                });

              case 9:
                assert.equal(_customAlertPayload.default.integrationNameText, "Webhook integration 1", "Config payload integration name rendered properly");
                assert.equal(_customAlertPayload.default.titleText, "Configure alert payload | Webhook integration 1", "Config payload title rendered properly");
                assert.equal(_customAlertPayload.default.helptext1Text, "Copy the alert payload sent from your monitoring tool and paste it below.", "Config payload helptext1 rendered properly");
                assert.equal(_customAlertPayload.default.helptext2Text, "Alert payload should be in JSON format.", "Config payload helptext2 rendered properly");
                assert.equal(_customAlertPayload.default.externalLinkText, "Learn how", "Config payload external link rendered properly");
                assert.ok(_customAlertPayload.default.contentText, "Config payload content rendered properly");

              case 15:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/admin/itom/alert-integrations/manage-integrations/component-test", ["qunit", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/sinon-context", "@ember/test-helpers", "sinon", "freshservice/tests/pages/components/admin/itom/alert-integrations/show"], function (_qunit, _emberQunit, _testSupport, _intl, _sinonContext, _testHelpers, _sinon, _show) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)("Integration | Component | admin | alert-integrations | view", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _qunit.test)("should render default integration view page", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var stub;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                stub = _sinon.default.stub();
                this.setProperties({
                  model: {
                    id: 3
                  },
                  navigateToAdvancedSettings: stub,
                  navigateToIntegrationsList: stub
                });
                _context.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::Itom::AlertIntegrations::Integrations::ManageIntegrations @model={{this.model}} @navigateToAdvancedSettings={{this.navigateToAdvancedSettings}} @navigateToIntegrationsList={{this.navigateToIntegrationsList}}></Admin::Itom::AlertIntegrations::Integrations::ManageIntegrations>
                */
                {
                  id: "X9fIpA5H",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/itom/alert-integrations/integrations/manage-integrations\",[],[[\"@model\",\"@navigateToAdvancedSettings\",\"@navigateToIntegrationsList\"],[[23,0,[\"model\"]],[23,0,[\"navigateToAdvancedSettings\"]],[23,0,[\"navigateToIntegrationsList\"]]]],{\"statements\":[],\"parameters\":[]}]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context.next = 6;
                return (0, _testHelpers.waitFor)('.alerts_admin_itom_alert_integration_show .content-wrapper', {
                  timeout: 2000
                });

              case 6:
                assert.equal(_show.default.pageTitle, "Amazon EC2 3", "Default Integration with name 'Amazon EC2 3' is rendered successfully");
                assert.equal(_show.default.integrationDesc, "Amazon ec2 instance", "Default Integration with description 'Amazon ec2 instance' is rendered successfully");

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/admin/itom/alert-integrations/onboarding/component-test", ["qunit", "ember-qunit", "freshservice/tests/lib/intl", "@ember/test-helpers", "freshservice/tests/pages/components/admin/itom/alert-integrations/onboarding"], function (_qunit, _emberQunit, _intl, _testHelpers, _onboarding) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)("Integration | Component | admin | alert-integrations | onboarding", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _qunit.test)("should render new onboarding for alert integration", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::Itom::AlertIntegrations::Integrations::Onboarding/>
                */
                {
                  id: "isqPCfTF",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/itom/alert-integrations/integrations/onboarding\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.equal(_onboarding.default.titleText, "Streamline your digital operations with alert management", "AMS onboarding title rendered properly");
                assert.equal(_onboarding.default.descriptionText, "Track and manage your infrastructure from a single pane, cut through alert noise and respond to critical issues on time.", "AMS onboarding description rendered properly");
                assert.equal(_onboarding.default.buttonText, "Enable alert management", "AMS onboarding button rendered properly");

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/admin/itom/alert-rule/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-current-account", "freshservice/mirage/fixtures/alert_rules", "freshservice/tests/pages/components/admin/itom/alert-rules"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _intl, _stubCurrentAccount, _alert_rules, _alertRules) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var TEST_ACCOUNT = {
    features: ["alert_management"],
    temp_features: ["feb_ams_enhancements"]
  };
  var TEST_ALERT_RULE = _alert_rules.default[0];

  function renderComponent() {
    return _renderComponent.apply(this, arguments);
  }

  function _renderComponent() {
    _renderComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <Admin::Itom::AlertRule @model={{model}} />
              */
              {
                id: "2QCWSYfx",
                block: "{\"symbols\":[],\"statements\":[[5,\"admin/itom/alert-rule\",[],[[\"@model\"],[[22,\"model\"]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
    return _renderComponent.apply(this, arguments);
  }

  (0, _qunit.module)("Integration | Component | admin | alert-rule | view", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    hooks.beforeEach(function () {
      (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
      this.intl = this.owner.lookup("service:intl");
      var router = this.owner.lookup("router:main");
      router.setupRouter();
    });
    hooks.after(function () {
      this.owner.destroy("service:current-account");
    });
    (0, _qunit.test)("it should display the alert rule name and description", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Arrange
                this.set("model", Ember.Object.create(TEST_ALERT_RULE)); // Act

                _context.next = 3;
                return renderComponent();

              case 3:
                // Assert
                assert.equal(_alertRules.default.titleText, "DataDog Staging Rule", "Alert Rule Title rendered properly");
                assert.equal(_alertRules.default.descriptionText, "DataDog APM for Staging", "Alert Rule Description rendered properly");

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/admin/itom/alert-rule/incidents/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-current-account", "freshservice/tests/lib/stub-current-user", "freshservice/mirage/fixtures/alert_rules", "freshservice/tests/pages/components/admin/itom/alert-rules"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _intl, _stubCurrentAccount, _stubCurrentUser, _alert_rules, _alertRules) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var TEST_ACCOUNT = {
    custom_translations: {
      "module_names": {
        "department": "department"
      }
    },
    features: ["alert_management"]
  };
  var TEST_MSP_ACCOUNT = {
    custom_translations: {
      "module_names": {
        "department": "department"
      }
    },
    features: ["alert_management", "msp_plugin"]
  };
  var TEST_USER = {
    language: "en"
  };
  var TEST_ALERT_RULE = _alert_rules.default[0];
  var TEST_ALERT_RULE_1 = _alert_rules.default[2];

  function renderComponent() {
    return _renderComponent.apply(this, arguments);
  }

  function _renderComponent() {
    _renderComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <Admin::Itom::AlertActions::Incidents
              	@model     			= {{this.model}}
              	@onUpdateModel 	= {{fn this.onUpdateModel}} />
              */
              {
                id: "dqR06h3J",
                block: "{\"symbols\":[],\"statements\":[[5,\"admin/itom/alert-actions/incidents\",[],[[\"@model\",\"@onUpdateModel\"],[[23,0,[\"model\"]],[28,\"fn\",[[23,0,[\"onUpdateModel\"]]],null]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));
    return _renderComponent.apply(this, arguments);
  }

  (0, _qunit.module)("Integration | Component | admin | alert-rule | view | alert-action | incidents", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    TEST_ALERT_RULE;
    hooks.beforeEach(function () {
      (0, _stubCurrentUser.stubCurrentUser)(TEST_USER);
      this.intl = this.owner.lookup("service:intl");
    });
    hooks.after(function () {
      this.owner.destroy("service:currentAccount");
    });
    (0, _qunit.test)("it should display the alert rule action incident all fields add action disabled", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Arrange
                (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
                Ember.setProperties(this, {
                  model: Ember.Object.create(TEST_ALERT_RULE),
                  onUpdateModel: function onUpdateModel() {}
                }); // Act

                _context.next = 4;
                return renderComponent();

              case 4:
                // Assert Keys
                assert.equal(_alertRules.default.actionIncidentAddActionIsDisabled, true, "Alert Rule Action Incident all fields present then add action diabled.");

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("it should display the alert rule action alert remove field row", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                //Arrange
                (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
                Ember.setProperties(this, {
                  model: Ember.Object.create(TEST_ALERT_RULE_1),
                  onUpdateModel: function onUpdateModel() {}
                });
                _context2.next = 4;
                return renderComponent();

              case 4:
                _context2.next = 6;
                return _alertRules.default.actionIncidentNoteRemoveRow();

              case 6:
                _context2.next = 8;
                return _alertRules.default.actionIncidentSearchInputFocus();

              case 8:
                //Assert Keys
                assert.equal(_alertRules.default.actionIncidentKeyDDChoicesIsOpened, true, "Alert Rule Action Incident empty field dropdown opened.");

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("it should display the alert rule action alert add new field row", /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                //Arrange
                (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
                Ember.setProperties(this, {
                  model: Ember.Object.create(TEST_ALERT_RULE_1),
                  onUpdateModel: function onUpdateModel() {}
                });
                _context3.next = 4;
                return renderComponent();

              case 4:
                _context3.next = 6;
                return _alertRules.default.actionIncidentAddAction();

              case 6:
                //Assert Keys
                assert.equal(_alertRules.default.actionIncidentKeyDDChoicesIsOpened, true, "Alert Rule Action Incident empty field dropdown opened.");

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("it should display the alert rule action alert add new field row and select a choice", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                //Arrange
                (0, _stubCurrentAccount.stubCurrentAccount)(TEST_MSP_ACCOUNT);
                Ember.setProperties(this, {
                  model: Ember.Object.create(TEST_ALERT_RULE_1),
                  onUpdateModel: function onUpdateModel() {}
                });
                _context4.next = 4;
                return renderComponent();

              case 4:
                _context4.next = 6;
                return _alertRules.default.actionIncidentAddAction();

              case 6:
                //Assert Keys
                assert.equal(_alertRules.default.actionIncidentKeyDDChoicesIsOpened, true, "Alert Rule Action Incident empty field dropdown opened.");
                _context4.next = 9;
                return _alertRules.default.actionIncidentKeyDDSelectFirstChoice();

              case 9:
                assert.equal(_alertRules.default.actionIncidentKeyDDChoicesIsOpened, false, "Alert Rule Action Incident empty field dropdown closed on choosing choice.");

              case 10:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/admin/itom/automation-settings/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-fetch", "freshservice/tests/lib/stub-current-account", "freshservice/mirage/fixtures/alert_automation_settings", "freshservice/mirage/fixtures/alert_intelligence", "freshservice/tests/pages/components/admin/itom/automation-settings"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _sinonContext, _intl, _stubFetch, _stubCurrentAccount, _alert_automation_settings, _alert_intelligence, _automationSettings) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var TEST_ACCOUNT = {
    features: ["alert_management", "display_alert_intelligence"],
    temp_features: ["alert_automation_settings"]
  };

  function renderComponent() {
    return _renderComponent.apply(this, arguments);
  }

  function _renderComponent() {
    _renderComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <Admin::Itom::AlertConfiguration::AutomationSettings />
              */
              {
                id: "8ulPHdW2",
                block: "{\"symbols\":[],\"statements\":[[5,\"admin/itom/alert-configuration/automation-settings\",[],[[],[]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));
    return _renderComponent.apply(this, arguments);
  }

  (0, _qunit.module)("Integration | Component | admin | automation-settings | view", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    hooks.beforeEach(function () {
      this.intl = this.owner.lookup("service:intl");
    });
    hooks.after(function () {
      this.owner.destroy("service:current-account");
    });
    (0, _qunit.test)("it should display the alert toggle button as enabled", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
                _context.next = 3;
                return renderComponent();

              case 3:
                assert.equal(_automationSettings.default.titleText, "Automated grouping is currently enabled for your account", "Automated Grouping enabled title rendered properly");
                assert.equal(_automationSettings.default.toggleBtn, "Disable automated grouping", "Automated grouping enabled button rendered properly");
                assert.notOk(_automationSettings.default.isAlertIntelligenceBtnDisabled, "'Automated grouping' button is enabled");

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("it should display the automation settings with both toggle enabled", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var fetchStub;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
                fetchStub = (0, _stubFetch.stubFetch)();
                fetchStub.withArgs('alert_intelligence').returns(Promise.resolve(_alert_intelligence.default[1]));
                fetchStub.withArgs('alert_automation_settings').returns(Promise.resolve(_alert_automation_settings.default[1]));
                _context2.next = 6;
                return renderComponent();

              case 6:
                _context2.next = 8;
                return (0, _testHelpers.waitFor)('.grouping-item-title', {
                  timeout: 1000
                });

              case 8:
                assert.notOk(_automationSettings.default.disabledChangePriority, "Change priority enabled as expected");

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/admin/itom/on-call-schedules/create/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "sinon", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/stub-current-user", "freshservice/mirage/fixtures/schedule", "freshservice/tests/pages/components/admin/itom/on-call-schedules/schedule", "ember-power-select/test-support/helpers", "ember-power-select/test-support"], function (_qunit, _emberQunit, _testHelpers, _sinon, _testSupport, _intl, _sinonContext, _stubCurrentUser, _schedule, _schedule2, _helpers, _testSupport2) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var TEST_USER = {
    privileges: ["view_schedules", "manage_schedules"]
  };
  (0, _qunit.module)('Integration | Component | admin/itom/on-call-schedules/create', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              (0, _stubCurrentUser.stubCurrentUser)(TEST_USER);
              Ember.set(this, 'store', this.owner.lookup('service:store'));

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    hooks.after(function () {
      this.owner.destroy("service:current-user");
    });
    (0, _qunit.test)('Should render new schedule with default fields', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                Ember.setProperties(this, {
                  saveSchedule: function saveSchedule() {
                    return true;
                  },
                  model: _schedule.default[0],
                  checkDescription: true,
                  newModalActive: true
                });

                this.model.copy = function () {
                  return _this.model;
                };

                _context2.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::Itom::OnCallSchedules::Create 
                			@createMode={{true}}
                			@modelSchema={{this.model}} 
                			@toggleModal={{this.newModalActive}}
                			@onSave = {{fn this.saveSchedule}}/>
                */
                {
                  id: "k7+k57KR",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/itom/on-call-schedules/create\",[],[[\"@createMode\",\"@modelSchema\",\"@toggleModal\",\"@onSave\"],[true,[23,0,[\"model\"]],[23,0,[\"newModalActive\"]],[28,\"fn\",[[23,0,[\"saveSchedule\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                assert.ok(_schedule2.default.newForm.exists);
                assert.ok(_schedule2.default.newForm.hasFieldName);
                assert.notOk(_schedule2.default.newForm.hasFieldDescription);
                _context2.next = 9;
                return _schedule2.default.newForm.addDescription();

              case 9:
                assert.ok(_schedule2.default.newForm.hasFieldDescription);

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render edit schedule with default fields', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                Ember.setProperties(this, {
                  saveSchedule: function saveSchedule() {
                    return true;
                  },
                  editModalActive: true,
                  model: _schedule.default[0]
                });

                this.model.copy = function () {
                  return _this2.model;
                };

                _context3.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::Itom::OnCallSchedules::Create 
                			@editAction={{true}}
                			@modelSchema={{this.model}} 
                			@toggleModal={{this.editModalActive}}
                			@onSave = {{fn this.saveSchedule}}/>
                */
                {
                  id: "O7+7MF9C",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/itom/on-call-schedules/create\",[],[[\"@editAction\",\"@modelSchema\",\"@toggleModal\",\"@onSave\"],[true,[23,0,[\"model\"]],[23,0,[\"editModalActive\"]],[28,\"fn\",[[23,0,[\"saveSchedule\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                assert.ok(_schedule2.default.newForm.exists);
                assert.ok(_schedule2.default.newForm.hasFieldName);
                assert.ok(_schedule2.default.newForm.hasFieldAgentGroupId);

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render validation errors on submit without data', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var _this3 = this;

        var model;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                model = this.store.createRecord('schedule', _schedule.default[0]);
                Ember.setProperties(this, {
                  saveSchedule: function saveSchedule() {
                    return true;
                  },
                  model: model,
                  checkDescription: true,
                  newModalActive: true
                });

                this.model.copy = function () {
                  return _this3.model;
                };

                Ember.set(this.model, 'agentGroupId', '');
                Ember.set(this.model, 'agentGroupName', '');
                _context4.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::Itom::OnCallSchedules::Create 
                			@createMode={{true}}
                			@modelSchema={{this.model}} 
                			@toggleModal={{this.newModalActive}}
                			@onSave = {{fn this.saveSchedule}}/>
                */
                {
                  id: "k7+k57KR",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/itom/on-call-schedules/create\",[],[[\"@createMode\",\"@modelSchema\",\"@toggleModal\",\"@onSave\"],[true,[23,0,[\"model\"]],[23,0,[\"newModalActive\"]],[28,\"fn\",[[23,0,[\"saveSchedule\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context4.next = 9;
                return _schedule2.default.newForm.save();

              case 9:
                assert.ok(_schedule2.default.newForm.hasErrorName);
                _context4.next = 12;
                return _schedule2.default.newForm.fillName('test1');

              case 12:
                _context4.next = 14;
                return _schedule2.default.newForm.save();

              case 14:
                assert.ok(_schedule2.default.newForm.hasErrorName);

              case 15:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should call save method when editing the schedule and click save', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var _this4 = this;

        var saveCallbackSpy, model;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                saveCallbackSpy = _sinon.default.spy();
                model = this.store.createRecord('schedule', _schedule.default[0]);
                Ember.setProperties(this, {
                  saveSchedule: saveCallbackSpy,
                  model: model,
                  checkDescription: true,
                  editModalActive: true
                });

                this.model.copy = function () {
                  return _this4.model;
                };

                _context5.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::Itom::OnCallSchedules::Create 
                			@editAction={{true}}
                			@modelSchema={{this.model}} 
                			@onCancel ={{this.cancelModal}} 
                			@toggleModal={{this.editModalActive}}
                			@onSave = {{fn this.saveSchedule}}/>
                */
                {
                  id: "LuqmlQNI",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/itom/on-call-schedules/create\",[],[[\"@editAction\",\"@modelSchema\",\"@onCancel\",\"@toggleModal\",\"@onSave\"],[true,[23,0,[\"model\"]],[23,0,[\"cancelModal\"]],[23,0,[\"editModalActive\"]],[28,\"fn\",[[23,0,[\"saveSchedule\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                _context5.next = 8;
                return _schedule2.default.newForm.fillName('test1');

              case 8:
                _context5.next = 10;
                return _schedule2.default.newForm.save();

              case 10:
                assert.ok(this.saveSchedule.called);

              case 11:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should close modal on cancel click edit/new', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                Ember.setProperties(this, {
                  saveSchedule: function saveSchedule() {
                    return true;
                  },
                  model: _schedule.default[0],
                  checkDescription: true,
                  editModalActive: true,
                  cancelModal: function cancelModal() {
                    return true;
                  }
                });

                this.model.rollbackAttributes = function () {
                  return _schedule.default[0];
                };

                _context6.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::Itom::OnCallSchedules::Create 
                			@editAction={{true}}
                			@modelSchema={{this.model}} 
                			@onCancel ={{this.cancelModal}} 
                			@toggleModal={{this.editModalActive}}
                			@onSave = {{fn this.saveSchedule}}/>
                */
                {
                  id: "LuqmlQNI",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/itom/on-call-schedules/create\",[],[[\"@editAction\",\"@modelSchema\",\"@onCancel\",\"@toggleModal\",\"@onSave\"],[true,[23,0,[\"model\"]],[23,0,[\"cancelModal\"]],[23,0,[\"editModalActive\"]],[28,\"fn\",[[23,0,[\"saveSchedule\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context6.next = 6;
                return _schedule2.default.newForm.cancel();

              case 6:
                assert.equal(this.saveSchedule.called);
                Ember.setProperties(this, {
                  saveSchedule: function saveSchedule() {
                    return true;
                  },
                  newModalActive: true,
                  model: _schedule.default[0],
                  cancelModal: function cancelModal() {
                    return true;
                  }
                });
                _context6.next = 10;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::Itom::OnCallSchedules::Create 
                			@createMode={{true}}
                			@modelSchema={{this.model}} 
                			@onCancel ={{this.cancelModal}} 
                			@toggleModal={{this.newModalActive}}
                			@onSave = {{fn this.saveSchedule}}/>
                */
                {
                  id: "A/fff2QB",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/itom/on-call-schedules/create\",[],[[\"@createMode\",\"@modelSchema\",\"@onCancel\",\"@toggleModal\",\"@onSave\"],[true,[23,0,[\"model\"]],[23,0,[\"cancelModal\"]],[23,0,[\"newModalActive\"]],[28,\"fn\",[[23,0,[\"saveSchedule\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 10:
                _context6.next = 12;
                return _schedule2.default.newForm.cancel();

              case 12:
                assert.equal(this.saveSchedule.called);

              case 13:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should test the powerselect by changing the values', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var _this5 = this;

        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                Ember.setProperties(this, {
                  saveSchedule: function saveSchedule() {
                    return true;
                  },
                  model: _schedule.default[0],
                  checkDescription: true,
                  newModalActive: true
                });

                this.model.copy = function () {
                  return _this5.model;
                };

                this.server.loadFixtures('agentsGroups');
                _context7.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::Itom::OnCallSchedules::Create 
                			@createMode={{true}}
                			@modelSchema={{this.model}} 
                			@toggleModal={{this.newModalActive}}
                			@onSave = {{fn this.saveSchedule}}/>
                */
                {
                  id: "k7+k57KR",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/itom/on-call-schedules/create\",[],[[\"@createMode\",\"@modelSchema\",\"@toggleModal\",\"@onSave\"],[true,[23,0,[\"model\"]],[23,0,[\"newModalActive\"]],[28,\"fn\",[[23,0,[\"saveSchedule\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                _context7.next = 7;
                return (0, _helpers.clickTrigger)();

              case 7:
                _context7.next = 9;
                return (0, _testSupport2.selectChoose)('.ember-power-select-trigger', 'Incident Team');

              case 9:
                assert.equal(this.model.agentGroupId, '1');
                _context7.next = 12;
                return (0, _testSupport2.selectChoose)('.ember-power-select-trigger', 'Change Team');

              case 12:
                assert.equal(this.model.agentGroupId, '1');

              case 13:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x6) {
        return _ref8.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/admin/itom/on-call-schedules/notification-rule/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/stub-current-account", "freshservice/mirage/fixtures/schedule-notification-rule", "freshservice/tests/pages/components/admin/itom/on-call-schedules/notification-rule"], function (_qunit, _emberQunit, _testHelpers, _intl, _stubCurrentUser, _stubCurrentAccount, _scheduleNotificationRule, _notificationRule) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var TEST_ACCOUNT = {
    customTranslations: {
      "module_names": {
        "incident": "incident",
        "incidents": "incidents",
        "agent": "agent",
        "agents": "agents"
      }
    }
  };
  var TEST_USER = {
    privileges: ["view_schedules", "manage_schedules"]
  };

  function renderComponent() {
    return _renderComponent.apply(this, arguments);
  }

  function _renderComponent() {
    _renderComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
      return regeneratorRuntime.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <Admin::Itom::OnCallSchedules::NotificationRule @model={{this.model}} />
              */
              {
                id: "5SwnBJjV",
                block: "{\"symbols\":[],\"statements\":[[5,\"admin/itom/on-call-schedules/notification-rule\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9);
    }));
    return _renderComponent.apply(this, arguments);
  }

  (0, _qunit.module)("Integration | Component | admin | itom | schedule | notification-rule | view", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      (0, _stubCurrentUser.stubCurrentUser)(TEST_USER);
      (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
      this.intl = this.owner.lookup("service:intl");
      this.store = this.owner.lookup('service:store');
    });
    hooks.after(function () {
      this.owner.destroy("service:current-user");
    });
    (0, _qunit.test)("it should display the notification rule description", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var scheduleModel, scheduleNotificationRulesModel;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Arrange
                scheduleModel = this.store.createRecord('schedule', _scheduleNotificationRule.default.schedule);
                scheduleNotificationRulesModel = this.store.createRecord('schedule-notification-rule', _scheduleNotificationRule.default.schedule.notificationRule);
                scheduleModel.notificationRule = scheduleNotificationRulesModel;
                this.set('model', scheduleModel); // Act

                _context.next = 6;
                return renderComponent();

              case 6:
                // Assert
                assert.equal(_notificationRule.default.textDesc, "When an incident is assigned to this agent group, agents configured in the escalation path can be notified in the following channels and will be assigned the incident on acknowledgement of the notifications.");

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("it should display the notification rule conditions Level action", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var scheduleModel, scheduleNotificationRulesModel;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                // Arrange
                scheduleModel = this.store.createRecord('schedule', _scheduleNotificationRule.default.schedule);
                scheduleNotificationRulesModel = this.store.createRecord('schedule-notification-rule', _scheduleNotificationRule.default.schedule.notificationRule);
                scheduleModel.notificationRule = scheduleNotificationRulesModel;
                this.set('model', scheduleModel); // Act

                _context2.next = 6;
                return renderComponent();

              case 6:
                // Assert
                assert.equal(_notificationRule.default.textHeaderUrgent, "Urgent", "Notify Rule condition Urgent title rendered properly");
                assert.equal(_notificationRule.default.textHeaderHigh, "High", "Notify Rule condition High title rendered properly");
                assert.equal(_notificationRule.default.textHeaderMedium, "Medium", "Notify Rule condition Medium title rendered properly");
                assert.equal(_notificationRule.default.textHeaderLow, "Low", "Notify Rule condition Low title rendered properly");
                assert.equal(_notificationRule.default.valueLevel1DefaultActionInterval, 1, "Notify Rule condition Urgent Level Default Action interval rendered properly");
                assert.true(_notificationRule.default.textLevel1DefaultActionChannelSelected[0].includes('Phone'), "Notify Rule condition Urgent Level Default Action Channel Phone rendered properly");
                assert.true(_notificationRule.default.textLevel1DefaultActionChannelSelected[1].includes('SMS'), "Notify Rule condition Urgent Level Default Action Channel SMS rendered properly");
                assert.true(_notificationRule.default.textLevel1DefaultActionChannelSelected[2].includes('Email'), "Notify Rule condition Urgent Level Default Action Channel Email rendered properly");

              case 14:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("Able to update interval and channel for notification rule conditions 1 Level 1 default action", /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var scheduleModel, scheduleNotificationRulesModel;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                // Arrange
                scheduleModel = this.store.createRecord('schedule', _scheduleNotificationRule.default.schedule);
                scheduleNotificationRulesModel = this.store.createRecord('schedule-notification-rule', _scheduleNotificationRule.default.schedule.notificationRule);
                scheduleModel.notificationRule = scheduleNotificationRulesModel;
                this.set('model', scheduleModel); // Act

                _context3.next = 6;
                return renderComponent();

              case 6:
                _context3.next = 8;
                return _notificationRule.default.removeLevel1DefautlActionChannelSelected1();

              case 8:
                // Assert 1
                assert.equal(_notificationRule.default.countLevel1DefaultActionChannelSelected, 2, "Notify Rule condition Urgent Level Default Action Channel SMS and Email able to update properly"); //Action 2

                _context3.next = 11;
                return _notificationRule.default.setValueLevel1DefaultActionInterval(12);

              case 11:
                // Assert 2
                assert.equal(_notificationRule.default.valueLevel1DefaultActionInterval, 12, "Notify Rule condition Urgent Level Default Action interval able able to update properly");

              case 12:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("Able to add and remove actions for notification rule conditions 1 Level 1", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var scheduleModel, scheduleNotificationRulesModel;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                // Arrange
                scheduleModel = this.store.createRecord('schedule', _scheduleNotificationRule.default.schedule);
                scheduleNotificationRulesModel = this.store.createRecord('schedule-notification-rule', _scheduleNotificationRule.default.schedule.notificationRule);
                scheduleModel.notificationRule = scheduleNotificationRulesModel;
                this.set('model', scheduleModel); // Act

                _context4.next = 6;
                return renderComponent();

              case 6:
                _context4.next = 8;
                return _notificationRule.default.removeLevel1Action2();

              case 8:
                // Assert 1
                assert.false(_notificationRule.default.isAddLevel1Action1Disabled, "Add button for condition 1 level 1 is enabled"); //Action 2

                _context4.next = 11;
                return _notificationRule.default.removeLevel1Action1();

              case 11:
                _context4.next = 13;
                return _notificationRule.default.addLevel1Action1();

              case 13:
                // Assert 2
                assert.equal(_notificationRule.default.countLevel1RemoveBtn, 1, "Able to add new action for condition 1 level 1");

              case 14:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("Able to see error messages for notification rule conditions 1 Level 1 default action", /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var scheduleModel, scheduleNotificationRulesModel;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                // Arrange
                scheduleModel = this.store.createRecord('schedule', _scheduleNotificationRule.default.schedule);
                scheduleNotificationRulesModel = this.store.createRecord('schedule-notification-rule', _scheduleNotificationRule.default.schedule.notificationRule);
                scheduleModel.notificationRule = scheduleNotificationRulesModel;
                this.set('model', scheduleModel); // Act

                _context5.next = 6;
                return renderComponent();

              case 6:
                _context5.next = 8;
                return _notificationRule.default.setValueLevel1DefaultActionInterval(-5);

              case 8:
                _context5.next = 10;
                return _notificationRule.default.setValueLevel1lAction1Interval(35);

              case 10:
                _context5.next = 12;
                return _notificationRule.default.removeLevel1DefautlActionChannelSelected1();

              case 12:
                _context5.next = 14;
                return _notificationRule.default.removeLevel1DefautlActionChannelSelected1();

              case 14:
                _context5.next = 16;
                return _notificationRule.default.removeLevel1DefautlActionChannelSelected1();

              case 16:
                _context5.next = 18;
                return _notificationRule.default.clickSaveBtn();

              case 18:
                //Assert 1
                assert.equal(_notificationRule.default.textLevel1DefautlActionIntervelValidError, 'Enter a valid input', "Action Interval negative value error message shown properly");
                assert.equal(_notificationRule.default.textLevel1DefaultActionChannelError, 'At least one notification channel is required for each level.', "Action Interval empty error message shown properly");

              case 20:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("Able to discard changes the changes", /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var scheduleModel, scheduleNotificationRulesModel;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                // Arrange
                scheduleModel = this.store.createRecord('schedule', _scheduleNotificationRule.default.schedule);
                scheduleNotificationRulesModel = this.store.createRecord('schedule-notification-rule', _scheduleNotificationRule.default.schedule.notificationRule);
                scheduleModel.notificationRule = scheduleNotificationRulesModel;
                this.set('model', scheduleModel); // Act

                _context6.next = 6;
                return renderComponent();

              case 6:
                _context6.next = 8;
                return _notificationRule.default.removeLevel1Action1();

              case 8:
                _context6.next = 10;
                return _notificationRule.default.clickDiscardBtn();

              case 10:
                _context6.next = 12;
                return _notificationRule.default.clickDiscardYesBtn();

              case 12:
                assert.equal(_notificationRule.default.isDisabledButtonExist, false, "Notify Rule discard changes, Discard button is removed");

              case 13:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x6) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("it should display toggle switch for disabling escalation", /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var scheduleModel, scheduleNotificationRulesModel;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                // Arrange
                scheduleModel = this.store.createRecord('schedule', _scheduleNotificationRule.default.schedule);
                scheduleNotificationRulesModel = this.store.createRecord('schedule-notification-rule', _scheduleNotificationRule.default.schedule.notificationRule);
                scheduleModel.notificationRule = scheduleNotificationRulesModel;
                this.set('model', scheduleModel); // Act

                _context7.next = 6;
                return renderComponent();

              case 6:
                //Action
                assert.equal(_notificationRule.default.isToggleSwitchTextExist, true);

              case 7:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x7) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("Able to see error banner alert for notification rule conditions exceeding 7 days", /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var scheduleModel, scheduleNotificationRulesModel;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                // Arrange
                scheduleModel = this.store.createRecord('schedule', _scheduleNotificationRule.default.schedule);
                scheduleNotificationRulesModel = this.store.createRecord('schedule-notification-rule', _scheduleNotificationRule.default.schedule.notificationRule);
                scheduleModel.notificationRule = scheduleNotificationRulesModel;
                this.set('model', scheduleModel); // Act

                _context8.next = 6;
                return renderComponent();

              case 6:
                _context8.next = 8;
                return _notificationRule.default.setValueLevel1DefaultActionInterval(20000);

              case 8:
                _context8.next = 10;
                return _notificationRule.default.setValueLevel1lAction1Interval(35);

              case 10:
                _context8.next = 12;
                return _notificationRule.default.clickSaveBtn();

              case 12:
                //Assert 1
                assert.equal(_notificationRule.default.isEscalationTimeBannerExist, true);

              case 13:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x8) {
        return _ref9.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/admin/itom/on-call-schedules/schedule/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/stub-current-user", "freshservice/mirage/fixtures/schedule", "freshservice/mirage/fixtures/schedule-notification-rule", "freshservice/mirage/fixtures/shift", "freshservice/tests/pages/components/admin/itom/on-call-schedules/schedule", "freshservice/tests/lib/spy-flash-message"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _intl, _sinonContext, _stubCurrentUser, _schedule, _scheduleNotificationRule, _shift, _schedule2, _spyFlashMessage) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var TEST_USER = {
    privileges: ["view_schedules", "manage_schedules"]
  };

  function renderComponent() {
    return _renderComponent.apply(this, arguments);
  }

  function _renderComponent() {
    _renderComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
      return regeneratorRuntime.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <Admin::Itom::OnCallSchedules::Schedule 
              						@model={{this.model}} />
              */
              {
                id: "cDlRvkHy",
                block: "{\"symbols\":[],\"statements\":[[5,\"admin/itom/on-call-schedules/schedule\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));
    return _renderComponent.apply(this, arguments);
  }

  (0, _qunit.module)('Integration | Component | admin/itom/on-call-schedules/schedule', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              (0, _stubCurrentUser.stubCurrentUser)(TEST_USER);
              Ember.set(this, 'store', this.owner.lookup('service:store'));

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    hooks.after(function () {
      this.owner.destroy("service:current-user");
    });
    (0, _qunit.test)('should test edit button triggers', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var schedule, shift, scheduleNotificationRulesModel;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.store.createRecord('schedule', _schedule.default[0]);

              case 2:
                schedule = _context2.sent;
                _context2.next = 5;
                return this.store.createRecord('shift', _shift.default[0]);

              case 5:
                shift = _context2.sent;
                scheduleNotificationRulesModel = this.store.createRecord('schedule-notification-rule', _scheduleNotificationRule.default.schedule.notificationRule);
                schedule.notificationRule = scheduleNotificationRulesModel;
                schedule.set('shift', shift);
                Ember.set(this, 'model', schedule);
                _context2.next = 12;
                return renderComponent();

              case 12:
                _context2.next = 14;
                return _schedule2.default.actions.edit();

              case 14:
                assert.ok(_schedule2.default.newForm.exists);

              case 15:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should test delete button triggers', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var schedule, scheduleNotificationRulesModel;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.store.createRecord('schedule', _schedule.default[0]);

              case 2:
                schedule = _context3.sent;
                scheduleNotificationRulesModel = this.store.createRecord('schedule-notification-rule', _scheduleNotificationRule.default.schedule.notificationRule);
                schedule.notificationRule = scheduleNotificationRulesModel;
                Ember.set(this, 'model', schedule);
                _context3.next = 8;
                return renderComponent();

              case 8:
                _context3.next = 10;
                return _schedule2.default.actions.delete();

              case 10:
                assert.dom('.ember-modal-dialog .ember-modal-header .title').hasText('Delete schedule');

              case 11:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should test the save method while editing schedule', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var schedule, scheduleNotificationRulesModel;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.store.createRecord('schedule', _schedule.default[0]);

              case 2:
                schedule = _context4.sent;
                scheduleNotificationRulesModel = this.store.createRecord('schedule-notification-rule', _scheduleNotificationRule.default.schedule.notificationRule);
                schedule.notificationRule = scheduleNotificationRulesModel;
                Ember.set(this, 'model', schedule);
                Ember.set(this, 'editModalActive', true);
                _context4.next = 9;
                return renderComponent();

              case 9:
                _context4.next = 11;
                return _schedule2.default.actions.edit();

              case 11:
                _schedule2.default.newForm.fillName('test1');

                _context4.next = 14;
                return _schedule2.default.newForm.save();

              case 14:
                assert.equal(_schedule2.default.scheduleName, 'Schedule name: test1');

              case 15:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should throw 500 error', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var dangerFlash, schedule, scheduleNotificationRulesModel;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                dangerFlash = (0, _spyFlashMessage.default)('danger');
                _context5.next = 3;
                return this.store.createRecord('schedule', _schedule.default[0]);

              case 3:
                schedule = _context5.sent;
                scheduleNotificationRulesModel = this.store.createRecord('schedule-notification-rule', _scheduleNotificationRule.default.schedule.notificationRule);
                schedule.notificationRule = scheduleNotificationRulesModel;
                Ember.set(this, 'model', schedule);
                Ember.set(this, 'editModalActive', true);
                _context5.next = 10;
                return renderComponent();

              case 10:
                _context5.next = 12;
                return _schedule2.default.actions.edit();

              case 12:
                _schedule2.default.newForm.fillName('500');

                _context5.next = 15;
                return _schedule2.default.newForm.save();

              case 15:
                assert.ok(dangerFlash.calledOnce);

              case 16:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should test cancel schedule while editing', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var schedule, scheduleNotificationRulesModel;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this.store.createRecord('schedule', _schedule.default[0]);

              case 2:
                schedule = _context6.sent;
                scheduleNotificationRulesModel = this.store.createRecord('schedule-notification-rule', _scheduleNotificationRule.default.schedule.notificationRule);
                schedule.notificationRule = scheduleNotificationRulesModel;
                Ember.set(this, 'model', schedule);
                Ember.set(this, 'editModalActive', true);
                _context6.next = 9;
                return renderComponent();

              case 9:
                _context6.next = 11;
                return _schedule2.default.actions.edit();

              case 11:
                _schedule2.default.newForm.fillName('500');

                _context6.next = 14;
                return _schedule2.default.newForm.cancel();

              case 14:
                assert.notOk(_schedule2.default.newForm.exists);

              case 15:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should test tab change', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var schedule, scheduleNotificationRulesModel;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                schedule = this.store.createRecord('schedule', _schedule.default[0]);
                scheduleNotificationRulesModel = this.store.createRecord('schedule-notification-rule', _scheduleNotificationRule.default.schedule.notificationRule);
                schedule.notificationRule = scheduleNotificationRulesModel;
                this.set('model', schedule);
                _context7.next = 6;
                return renderComponent();

              case 6:
                _context7.next = 8;
                return _schedule2.default.actions.tabShift();

              case 8:
                assert.ok(_schedule2.default.isShiftTabActive);
                _context7.next = 11;
                return _schedule2.default.actions.tabNotification();

              case 11:
                assert.ok(_schedule2.default.isNotificationTabActive);

              case 12:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x6) {
        return _ref8.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/admin/itom/on-call-schedules/shift/component-test", ["exports", "qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl", "ember-cli-mirage/test-support", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/stub-current-account", "freshservice/mirage/fixtures/schedule", "freshservice/mirage/fixtures/shift", "freshservice/tests/pages/components/admin/itom/on-call-schedules/shift/shift"], function (_exports, _qunit, _emberQunit, _testHelpers, _intl, _testSupport, _stubCurrentUser, _stubCurrentAccount, _schedule, _shift, _shift2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Rosters = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var Rosters = function Rosters(type, id) {
    _classCallCheck(this, Rosters);

    this.id = id;
    this.rosterType = type;
    this.rotationType = "DAILY";
    this.handOffDay = null;
    this.customRotationType = null;
    this.customRotationLength = 1;
    this.shiftRestrictionType = "";
    this.members = [];
    this.shiftTimes = [];
  };

  _exports.Rosters = Rosters;

  window.__CLASSIC_HAS_CONSTRUCTOR__.set(Rosters, true);

  window.__CLASSIC_OWN_CLASSES__.set(Rosters, true);

  var TEST_USER = {
    privileges: ["view_schedules", "manage_schedules"]
  };
  var TEST_ACCOUNT = {
    marketplace: {
      pod: 'poduseast1'
    }
  };

  function renderComponent() {
    return _renderComponent.apply(this, arguments);
  }

  function _renderComponent() {
    _renderComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <Admin::Itom::OnCallSchedules::Shift @model={{this.model}}></Admin::Itom::OnCallSchedules::Shift>
              */
              {
                id: "JR1Xv92p",
                block: "{\"symbols\":[],\"statements\":[[5,\"admin/itom/on-call-schedules/shift\",[],[[\"@model\"],[[23,0,[\"model\"]]]],{\"statements\":[],\"parameters\":[]}]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));
    return _renderComponent.apply(this, arguments);
  }

  (0, _qunit.module)('Integration | Component | admin| itom | on-call-schedules| shift', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    hooks.beforeEach(function () {
      (0, _stubCurrentUser.stubCurrentUser)(TEST_USER);
      (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
      this.intl = this.owner.lookup('service:intl');
      this.store = this.owner.lookup('service:store');
      this.dateTimeFormats = this.owner.lookup('service:dateTimeFormats');
    });
    hooks.after(function () {
      this.owner.destroy("service:current-user");
    });
    (0, _qunit.skip)('should test the shift takes user timezone by default', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var schedule, shift;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                Ember.setProperties(this.dateTimeFormats, {
                  currentUser: {
                    timeZone: 'Chennai'
                  }
                });
                _context.next = 3;
                return this.store.createRecord('schedule', _schedule.default[0]);

              case 3:
                schedule = _context.sent;
                _context.next = 6;
                return this.store.createRecord('shift', _shift.default[0]);

              case 6:
                shift = _context.sent;
                schedule.set('shift', shift);
                Ember.set(this, 'model', schedule);
                Ember.set(this.model.shift, 'timezone', null);
                _context.next = 12;
                return renderComponent();

              case 12:
                assert.equal(this.model.shift.timezone, 'Chennai');

              case 13:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.skip)('should test the saved rosters are available when changes happen and retain unsaved rosters', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var schedule, shift, primaryRoster;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.store.createRecord('schedule', _schedule.default[0]);

              case 2:
                schedule = _context2.sent;
                _context2.next = 5;
                return this.store.createRecord('shift', _shift.default[0]);

              case 5:
                shift = _context2.sent;
                schedule.set('shift', shift);
                Ember.set(this, 'model', schedule);
                _context2.next = 10;
                return this.store.createRecord('roster', _objectSpread({}, new Rosters('PRIMARY', 1)));

              case 10:
                primaryRoster = _context2.sent;
                Ember.set(this.model.shift, 'rosters', [primaryRoster]);
                Ember.set(this, 'tempRosters', Ember.A([]));
                _context2.next = 15;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::Itom::OnCallSchedules::Shift   @editAction={{true}} @model={{this.model}} />
                */
                {
                  id: "cvD5REug",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/itom/on-call-schedules/shift\",[],[[\"@editAction\",\"@model\"],[true,[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 15:
                assert.equal(this.model.shift.rosters.length, 3);

              case 16:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should show invalid agent phone banner', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var schedule, shift;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.store.createRecord('schedule', _schedule.default[0]);

              case 2:
                schedule = _context3.sent;
                _context3.next = 5;
                return this.store.createRecord('shift', _shift.default[0]);

              case 5:
                shift = _context3.sent;
                schedule.set('shift', shift);
                Ember.set(this, 'model', schedule);
                _context3.next = 10;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::Itom::OnCallSchedules::Shift   @editAction={{true}} @model={{this.model}} />
                */
                {
                  id: "cvD5REug",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/itom/on-call-schedules/shift\",[],[[\"@editAction\",\"@model\"],[true,[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 10:
                assert.ok(_shift2.default.isInvalidPhBannerExists);

              case 11:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/admin/itom/on-call-schedules/shift/escalation-path/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/mirage/fixtures/shift", "freshservice/tests/pages/components/admin/itom/on-call-schedules/shift/escalation-path"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _intl, _shift, _escalationPath) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var TEST_SHIFTS = _shift.default[0];

  function renderComponent() {
    return _renderComponent.apply(this, arguments);
  }

  function _renderComponent() {
    _renderComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <Admin::Itom::OnCallSchedules::Shift::EscalationPath @model={{this.model}} />
              */
              {
                id: "/k8QDnUW",
                block: "{\"symbols\":[],\"statements\":[[5,\"admin/itom/on-call-schedules/shift/escalation-path\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));
    return _renderComponent.apply(this, arguments);
  }

  (0, _qunit.module)('Integration | Component | admin | itom | on-call-schedules| shift | escalation-path', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    hooks.beforeEach(function () {
      this.intl = this.owner.lookup('service:intl');
      this.store = this.owner.lookup('service:store');
    });
    hooks.afterEach(function () {
      this.set('model', null);
      this.store.unloadAll('shift');
      this.store.unloadAll('roster');
    });
    (0, _qunit.test)('it renders the title and model data', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Arrange
                this.set('model', this.store.createRecord('shift', TEST_SHIFTS)); // Act

                _context.next = 3;
                return renderComponent();

              case 3:
                // Assert
                assert.equal(_escalationPath.default.headingText, 'Escalation path', 'Escalation path Title rendered properly');
                assert.equal(_escalationPath.default.rulesCount, 1, 'EP 1 levels rendered properly');
                assert.equal(_escalationPath.default.escalationPathRule.objectAt(0).level, 'Level 1', 'EP level text rendered properly');
                assert.equal(_escalationPath.default.repeatCount, 2, 'EP repeat count rendered properly');

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('add ep rule on clicking add another escalation level button', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                // Arrange
                this.set('model', this.store.createRecord('shift', TEST_SHIFTS)); // Act

                _context2.next = 3;
                return renderComponent();

              case 3:
                _context2.next = 5;
                return _escalationPath.default.addEpRule();

              case 5:
                // Assert
                assert.equal(_escalationPath.default.rulesCount, 2, 'EP add rule works properly');

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('ep rule deleted on clicking remove button', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                // Arrange
                this.set('model', this.store.createRecord('shift', TEST_SHIFTS)); // Act

                _context3.next = 3;
                return renderComponent();

              case 3:
                _context3.next = 5;
                return _escalationPath.default.addEpRule();

              case 5:
                _context3.next = 7;
                return _escalationPath.default.epRuleRow.objectAt(0).removeBtnClick();

              case 7:
                assert.equal(_escalationPath.default.rulesCount, 1, 'EP remove button works properly');

              case 8:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/admin/itom/on-call-schedules/shift/stakeholder/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/mirage/fixtures/shift", "freshservice/tests/pages/components/admin/itom/on-call-schedules/shift/stakeholder"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _intl, _shift, _stakeholder) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var TEST_SHIFT = _shift.default[0];

  function renderComponent() {
    return _renderComponent.apply(this, arguments);
  }

  function _renderComponent() {
    _renderComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <Admin::Itom::OnCallSchedules::Shift::Stakeholder @model={{this.model}} />
              */
              {
                id: "SsuIfNDU",
                block: "{\"symbols\":[],\"statements\":[[5,\"admin/itom/on-call-schedules/shift/stakeholder\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));
    return _renderComponent.apply(this, arguments);
  }

  (0, _qunit.module)('Integration | Component | admin | itom | on-call-schedules| shift | stakeholder', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    hooks.beforeEach(function () {
      this.intl = this.owner.lookup('service:intl');
      this.store = this.owner.lookup('service:store');
    });
    hooks.afterEach(function () {
      this.store.unloadAll('shift');
      this.store.unloadAll('roster');
    });
    (0, _qunit.test)('it renders the title and model data', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Arrange
                this.set('model', this.store.createRecord('shift', TEST_SHIFT)); // Act

                _context.next = 3;
                return renderComponent();

              case 3:
                // Assert
                assert.equal(_stakeholder.default.headingText, 'Stakeholder notification', 'Stakeholder notification Title rendered properly');
                assert.equal(_stakeholder.default.afterIntervelMins, 2, 'Stakeholder notification after interval rendered properly');
                assert.equal(_stakeholder.default.channelSelectedCount, 1, 'Stakeholder notification channel rendered properly');

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('add stakeholder notification channel', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                // Arrange
                this.set('model', this.store.createRecord('shift', TEST_SHIFT)); // Act

                _context2.next = 3;
                return renderComponent();

              case 3:
                _context2.next = 5;
                return _stakeholder.default.channelDropDownClick();

              case 5:
                _context2.next = 7;
                return _stakeholder.default.channelDropDownOptionClick();

              case 7:
                // Assert
                assert.equal(_stakeholder.default.channelSelectedCount, 2, 'Stakeholder notification channel rendered properly');

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/admin/itom/on-call-schedules/update-agent-phone/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "sinon", "freshservice/tests/lib/intl", "ember-cli-mirage/test-support", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/stub-current-user", "freshservice/tests/pages/components/admin/itom/on-call-schedules/update-agent-phone", "freshservice/mirage/fixtures/invalid_agents"], function (_qunit, _emberQunit, _testHelpers, _sinon, _intl, _testSupport, _sinonContext, _stubCurrentUser, _updateAgentPhone, _invalid_agents) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var TEST_USER = {
    privileges: ['view_schedules', 'manage_schedules', 'manage_users', 'manage_contacts']
  };

  function renderComponent() {
    return _renderComponent.apply(this, arguments);
  }

  function _renderComponent() {
    _renderComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
      return regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <Admin::Itom::OnCallSchedules::UpdateAgentPhone
              	@isInvalidPhModalOpen = {{this.isInvalidPhModalOpen}}
              	@invalidAgentPhList = {{this.agentList}}
              	@updateAgentContact = {{this.updateAgentContact}}
              />
              */
              {
                id: "8GVwnNMS",
                block: "{\"symbols\":[],\"statements\":[[5,\"admin/itom/on-call-schedules/update-agent-phone\",[],[[\"@isInvalidPhModalOpen\",\"@invalidAgentPhList\",\"@updateAgentContact\"],[[23,0,[\"isInvalidPhModalOpen\"]],[23,0,[\"agentList\"]],[23,0,[\"updateAgentContact\"]]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    }));
    return _renderComponent.apply(this, arguments);
  }

  (0, _qunit.module)('Integration | Component | admin| itom | on-call-schedules| update-agent-phone', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              (0, _stubCurrentUser.stubCurrentUser)(TEST_USER);
              Ember.set(this, 'store', this.owner.lookup('service:store'));

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    hooks.after(function () {
      this.owner.destroy("service:current-user");
    });
    (0, _qunit.test)('Should render invalid agent list', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                Ember.setProperties(this, {
                  updateAgentContact: function updateAgentContact() {
                    return true;
                  },
                  agentList: _invalid_agents.default,
                  isInvalidPhModalOpen: true
                });
                _context2.next = 3;
                return renderComponent();

              case 3:
                assert.ok(_updateAgentPhone.default.exists);

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should show agent download csv and requester download csv not visible', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                Ember.setProperties(this, {
                  updateAgentContact: function updateAgentContact() {
                    return true;
                  },
                  agentList: _invalid_agents.default,
                  isInvalidPhModalOpen: true
                });
                _context3.next = 3;
                return renderComponent();

              case 3:
                assert.ok(_updateAgentPhone.default.hasAgentLink);
                assert.notOk(_updateAgentPhone.default.hasRequesterLink);

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should click update agent contact save button', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var saveCallbackSpy;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                saveCallbackSpy = _sinon.default.spy();
                Ember.setProperties(this, {
                  updateAgentContact: saveCallbackSpy,
                  agentList: _invalid_agents.default,
                  isInvalidPhModalOpen: true
                });
                _context4.next = 4;
                return renderComponent();

              case 4:
                _context4.next = 6;
                return _updateAgentPhone.default.actions.save();

              case 6:
                assert.ok(this.updateAgentContact.called);

              case 7:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should close update agent contact modal on cancel button', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                Ember.setProperties(this, {
                  updateAgentContact: function updateAgentContact() {
                    return true;
                  },
                  agentList: _invalid_agents.default,
                  isInvalidPhModalOpen: true
                });
                _context5.next = 3;
                return renderComponent();

              case 3:
                _context5.next = 5;
                return _updateAgentPhone.default.actions.cancel();

              case 5:
                assert.notOk(_updateAgentPhone.default.exists);

              case 6:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/admin/module-workspaces/edit/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/spy-flash-message", "freshservice/tests/pages/components/admin/module-workspaces/edit"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _stubCurrentUser, _sinonContext, _spyFlashMessage, _edit) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-workspaces/edit', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.intl = this.owner.lookup("service:intl");
              this.store = this.owner.lookup('service:store');
              (0, _stubCurrentUser.stubCurrentUser)({
                isPlayGod: true
              });

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));

    function createFile(name, size, type) {
      var content = [Array(size)];
      var file = new Blob(content, {
        type: type
      }); // NOTE: `Blob` constructor takes array of content as first argument

      file.name = name;
      return file;
    }

    (0, _qunit.test)('should show primary workspace edit page', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var router, successToastrSpy, mockWorkspace, logo;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                router = this.owner.lookup("router:main");
                router.currentRoute = {
                  params: {
                    id: 8
                  }
                };
                router.setupRouter();
                successToastrSpy = (0, _spyFlashMessage.default)("success");
                _context2.next = 6;
                return this.store.findRecord('workspace', 8);

              case 6:
                mockWorkspace = _context2.sent;
                this.model = mockWorkspace;
                _context2.next = 10;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::ModuleWorkspaces::Edit @model={{this.model}}/>
                */
                {
                  id: "MCWg1/fn",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/module-workspaces/edit\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 10:
                assert.notOk(_edit.default.workspaceDelete);
                assert.ok(_edit.default.updateWorkspace);
                assert.notOk(_edit.default.updateDraftWorkspace);
                assert.notOk(_edit.default.publishWorkspace);
                logo = createFile("sample.svg", 30 * 1024, 'image/png'); // Generating file

                _context2.next = 17;
                return _edit.default.addAttachment(logo);

              case 17:
                _context2.next = 19;
                return _edit.default.fillName("HR Admin 1");

              case 19:
                _context2.next = 21;
                return _edit.default.fillDescription("HR Admin 1 for onboarding");

              case 21:
                _context2.next = 23;
                return _edit.default.updateWorkspaceBtn();

              case 23:
                assert.ok(successToastrSpy.calledWithExactly(this.intl.t("fs.workspaces.update_success")), "Success toastr message is displayed on successful update");

              case 24:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should show active and non-primary workspace edit page', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var successToastrSpy, mockWorkspace;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                successToastrSpy = (0, _spyFlashMessage.default)("success");
                _context3.next = 3;
                return this.store.findRecord('workspace', 12);

              case 3:
                mockWorkspace = _context3.sent;
                this.model = mockWorkspace;
                _context3.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::ModuleWorkspaces::Edit @model={{this.model}}/>
                */
                {
                  id: "MCWg1/fn",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/module-workspaces/edit\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                assert.ok(_edit.default.workspaceDelete);
                assert.ok(_edit.default.updateWorkspace);
                assert.notOk(_edit.default.updateDraftWorkspace);
                assert.notOk(_edit.default.publishWorkspace);
                _context3.next = 13;
                return _edit.default.workspaceDeleteBtn();

              case 13:
                _context3.next = 15;
                return _edit.default.workspaceDeleteConfirm();

              case 15:
                assert.ok(successToastrSpy.calledWithExactly(this.intl.t("fs.workspaces.workspace_deleted", {
                  workspace_name: this.model.name
                })), "Success toastr message is displayed on successful delete");

              case 16:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should show draft workspace edit page', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var mockWorkspace;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.store.findRecord('workspace', 23);

              case 2:
                mockWorkspace = _context4.sent;
                this.model = mockWorkspace;
                _context4.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::ModuleWorkspaces::Edit @model={{this.model}}/>
                */
                {
                  id: "MCWg1/fn",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/module-workspaces/edit\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                assert.ok(_edit.default.workspaceDelete);
                assert.notOk(_edit.default.updateWorkspace);
                assert.ok(_edit.default.updateDraftWorkspace);
                assert.ok(_edit.default.publishWorkspace);
                assert.ok(_edit.default.workspaceAdminsContainer);
                assert.ok(_edit.default.workspaceAgentsContainer);

              case 12:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should handle workspace name duplicate validation', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var router, failureToastrSpy, mockWorkspace;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                router = this.owner.lookup("router:main");
                router.currentRoute = {
                  params: {
                    id: 24
                  }
                };
                router.setupRouter();
                failureToastrSpy = (0, _spyFlashMessage.default)("danger");
                _context5.next = 6;
                return this.store.findRecord('workspace', 24);

              case 6:
                mockWorkspace = _context5.sent;
                this.model = mockWorkspace;
                _context5.next = 10;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::ModuleWorkspaces::Edit @model={{this.model}}/>
                */
                {
                  id: "MCWg1/fn",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/module-workspaces/edit\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 10:
                _context5.next = 12;
                return _edit.default.fillName("HR Admin");

              case 12:
                _context5.next = 14;
                return _edit.default.updateWorkspaceBtn();

              case 14:
                assert.ok(failureToastrSpy.calledWithExactly(this.intl.t("fs.workspaces.name_already_taken")), "Failure toastr message is displayed name duplicate");

              case 15:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should publish draft workspace', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var router, successToastrSpy;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                router = this.owner.lookup("router:main");
                router.currentRoute = {
                  params: {
                    id: 23
                  }
                };
                router.setupRouter();
                _context6.next = 5;
                return this.store.findRecord('workspace', 23);

              case 5:
                this.workspaceModel = _context6.sent;
                _context6.next = 8;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::ModuleWorkspaces::Edit @model={{this.workspaceModel}}/>
                */
                {
                  id: "V6soIL3T",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/module-workspaces/edit\",[],[[\"@model\"],[[23,0,[\"workspaceModel\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 8:
                successToastrSpy = (0, _spyFlashMessage.default)("success");
                _context6.next = 11;
                return _edit.default.publishWorkspaceBtn();

              case 11:
                assert.ok(_edit.default.publishWorkspaceConfirmBtn);
                _context6.next = 14;
                return _edit.default.publishWorkspaceConfirm();

              case 14:
                assert.ok(successToastrSpy.calledWithExactly(this.intl.t("fs.workspaces.publish_workspace_success", {
                  workspace_name: this.workspaceModel.name
                })), "Success toastr message is displayed on successful publish");

              case 15:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/admin/module-workspaces/edit/requesters/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/pages/components/admin/module-workspaces/requesters"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _requesters) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-workspaces/edit/requesters', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.intl = this.owner.lookup("service:intl");

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('should show workspace Requesters section', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::ModuleWorkspaces::Edit::Requesters/>
                */
                {
                  id: "BcFQCjuX",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/module-workspaces/edit/requesters\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.ok(_requesters.default.workspaceRequestersContainer);

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/admin/module-workspaces/list/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/sinon-context", "freshservice/tests/pages/components/admin/module-workspaces/list"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _stubCurrentUser, _sinonContext, _list) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-workspaces/list', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.intl = this.owner.lookup("service:intl");
              this.store = this.owner.lookup('service:store');
              (0, _stubCurrentUser.stubCurrentUser)({
                isPlayGod: true
              });
              _context.next = 5;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <Admin::ModuleWorkspaces::List/>
              */
              {
                id: "Uk62LPNh",
                block: "{\"symbols\":[],\"statements\":[[5,\"admin/module-workspaces/list\",[],[[],[]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('should show workspace list', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.equal(_list.default.workspacePrimaryCount, 1, 'should have only 1 primary workspace');

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('explore workspaces', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.ok(_list.default.exploreWSSection);
                assert.equal(_list.default.exploreWSListCount, 3, 'Must have 3 workspaces');
                _context3.next = 4;
                return _list.default.removeExploreWSBtn();

              case 4:
                assert.notOk(_list.default.exploreWSSection);

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/admin/module-workspaces/list/template/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/pages/components/admin/module-workspaces/template"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _template) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var TEMPLATE = {
    name: 'IT Team',
    description: 'Best for managing HR cases including employee onboarding and offboarding',
    template_type: 'it'
  };
  (0, _qunit.module)('Integration | Component | module-workspaces/list/template', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.intl = this.owner.lookup("service:intl");

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('should show workspace template', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.workspace = TEMPLATE;
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::ModuleWorkspaces::List::QuickAdd::WsTemplate @workspace={{this.workspace}}/>
                */
                {
                  id: "6wXv5yPU",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/module-workspaces/list/quick-add/ws-template\",[],[[\"@workspace\"],[[23,0,[\"workspace\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.ok(_template.default.templateName);
                assert.ok(_template.default.templateDescription);

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/admin/workload-management/component-test", ["freshservice/config/environment", "qunit", "@ember/test-helpers", "ember-qunit", "freshservice/tests/lib/intl"], function (_environment, _qunit, _testHelpers, _emberQunit, _intl) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var ROLES = [{
    "role": {
      "id": 399,
      "name": "Admin",
      "description": "Can configure all features through the Admin tab, but is restricted from viewing Account or Billing related information.",
      "default_role": true,
      "created_at": "2022-07-14T12:33:28+05:30",
      "updated_at": "2022-07-14T12:33:28+05:30",
      "scopes": 152137
    }
  }];

  var MOCK_ROLES = _objectSpread({
    json: function json() {
      return ROLES;
    }
  }, ROLES);

  var MOCK_FETCH_SERVICE = Ember.Service.extend({
    request: function request(path, options) {
      var response = null;
      this.setProperties({
        path: path,
        options: options
      });

      if (path === 'workload/settings' && options.method === 'PUT') {
        response = {
          'workload_settings': {
            'allocation_levels': {
              'low_workload': {
                'inclusive': options.body.allocation_levels.low_workload.inclusive,
                'percentage': options.body.allocation_levels.low_workload.percentage
              },
              'high_workload': {
                'inclusive': options.body.allocation_levels.high_workload.inclusive,
                'percentage': options.body.allocation_levels.high_workload.percentage
              }
            }
          }
        };
      } else if (path === 'workload/settings') {
        response = {
          'workload_settings': {
            'allocation_levels': {
              'low_workload': {
                'inclusive': false,
                'percentage': 80
              },
              'high_workload': {
                'inclusive': true,
                'percentage': 100
              }
            }
          }
        };
      } else if (path === '/admin/roles.json') {
        response = MOCK_ROLES;
      }

      return Ember.RSVP.resolve(response);
    },
    json: function json() {
      return [];
    },
    host: _environment.default.environment === 'development' ? "".concat(_environment.default.APP.hostURL, "/api/_/") : '/api/_/'
  });
  var MOCK_FAILURE_FETCH_SERVICE = Ember.Service.extend({
    request: function request() {
      throw new Error('Throwing error in mock service');
    }
  });
  var MOCK_PUT_FAILURE_FETCH_SERVICE = Ember.Service.extend({
    request: function request(path, options) {
      var response = null;
      this.setProperties({
        path: path,
        options: options
      });

      if (path === 'workload/settings' && options.method === 'PUT') {
        throw new Error('Throwing error in mock service');
      } else if (path === 'workload/settings') {
        response = {
          'workload_settings': {
            'allocation_levels': {
              'low_workload': {
                'inclusive': false,
                'percentage': 80
              },
              'high_workload': {
                'inclusive': true,
                'percentage': 100
              }
            }
          }
        };
      } else if (path === '/admin/roles.json') {
        response = MOCK_ROLES;
      }

      return Ember.RSVP.resolve(response);
    },
    json: function json() {
      return [];
    },
    host: _environment.default.environment === 'development' ? "".concat(_environment.default.APP.hostURL, "/api/_/") : '/api/_/'
  });
  (0, _qunit.module)('Integration | Component | admin/workload-management', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.router = this.owner.lookup('router:main');

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('it should render the header element', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var learnMore, link;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.owner.register('service:fetch', MOCK_FETCH_SERVICE);
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::WorkloadManagement />
                */
                {
                  id: "jMWyN05/",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/workload-management\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.dom('[data-test-id="wlm-settings-header"]').exists();
                learnMore = this.element.querySelector('.learn-more');
                link = learnMore.href.includes('support.freshservice.com/a/solutions/articles');
                assert.ok(link, 'Entity link matches');

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render the settings info content in the component', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this.owner.register('service:fetch', MOCK_FETCH_SERVICE);
                _context3.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::WorkloadManagement />
                */
                {
                  id: "jMWyN05/",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/workload-management\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.dom('[data-test-id="wlm-settings-info-card"]').exists();

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render the allocations section in the component', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                this.owner.register('service:fetch', MOCK_FETCH_SERVICE);
                _context4.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::WorkloadManagement />
                */
                {
                  id: "jMWyN05/",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/workload-management\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.dom('[data-test-id="wlm-settings-allocations-section"]').exists();

              case 4:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render the allocation cards in allocations section', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                this.owner.register('service:fetch', MOCK_FETCH_SERVICE);
                _context5.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::WorkloadManagement />
                */
                {
                  id: "jMWyN05/",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/workload-management\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.dom('[data-test-id="low-workload-card"]').exists();
                assert.dom('[data-test-id="high-workload-card"]').exists();
                assert.dom('[data-test-id="optimal-workload-card"]').exists();

              case 6:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should map the allocation values in allocation fields', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var lowWorkloadDropdown, lowWorkloadDropdownValue, lowWorkloadPercentField, lowWorkloadPercent, highWorkloadDropdown, highWorkloadDropdownValue, highWorkloadPercentField, highWorkloadPercent;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                this.owner.register('service:fetch', MOCK_FETCH_SERVICE);
                _context6.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::WorkloadManagement />
                */
                {
                  id: "jMWyN05/",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/workload-management\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                lowWorkloadDropdown = this.element.querySelector('[formserv-field-name="allocationLevels.low_workload.inclusive"]');
                lowWorkloadDropdownValue = lowWorkloadDropdown.querySelector('.ember-power-select-selected-item').innerText;
                assert.equal(lowWorkloadDropdownValue, 'Less than');
                lowWorkloadPercentField = this.element.querySelector('[formserv-field-name="allocationLevels.low_workload.percentage"]');
                lowWorkloadPercent = lowWorkloadPercentField.querySelector('input').value;
                assert.equal(lowWorkloadPercent, '80');
                highWorkloadDropdown = this.element.querySelector('[formserv-field-name="allocationLevels.high_workload.inclusive"]');
                highWorkloadDropdownValue = highWorkloadDropdown.querySelector('.ember-power-select-selected-item').innerText;
                assert.equal(highWorkloadDropdownValue, 'Greater than or equal to');
                highWorkloadPercentField = this.element.querySelector('[formserv-field-name="allocationLevels.high_workload.percentage"]');
                highWorkloadPercent = highWorkloadPercentField.querySelector('input').value;
                assert.equal(highWorkloadPercent, '100');

              case 15:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should change the allocation values in allocation fields', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var lowWorkloadPercentField, lowWorkloadPercent, highWorkloadPercentField, highWorkloadPercent;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                this.owner.register('service:fetch', MOCK_FETCH_SERVICE);
                _context7.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::WorkloadManagement />
                */
                {
                  id: "jMWyN05/",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/workload-management\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                lowWorkloadPercentField = this.element.querySelector('[formserv-field-name="allocationLevels.low_workload.percentage"]');
                lowWorkloadPercent = lowWorkloadPercentField.querySelector('input');
                _context7.next = 7;
                return (0, _testHelpers.fillIn)(lowWorkloadPercent, '50');

              case 7:
                highWorkloadPercentField = this.element.querySelector('[formserv-field-name="allocationLevels.high_workload.percentage"]');
                highWorkloadPercent = highWorkloadPercentField.querySelector('input');
                _context7.next = 11;
                return (0, _testHelpers.fillIn)(highWorkloadPercent, '50');

              case 11:
                assert.dom('[data-test-id="wlm-settings-save"]').exists();
                assert.dom('[data-test-id="wlm-settings-cancel"]').exists();
                assert.dom('[data-test-id="optimal-workload-card"]').doesNotExist();

              case 14:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x6) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should save the allocation values', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var lowWorkloadPercentField, lowWorkloadPercent, highWorkloadPercentField, highWorkloadPercent;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                this.owner.register('service:fetch', MOCK_FETCH_SERVICE);
                _context8.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::WorkloadManagement />
                */
                {
                  id: "jMWyN05/",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/workload-management\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                lowWorkloadPercentField = this.element.querySelector('[formserv-field-name="allocationLevels.low_workload.percentage"]');
                lowWorkloadPercent = lowWorkloadPercentField.querySelector('input');
                _context8.next = 7;
                return (0, _testHelpers.fillIn)(lowWorkloadPercent, '50');

              case 7:
                highWorkloadPercentField = this.element.querySelector('[formserv-field-name="allocationLevels.high_workload.percentage"]');
                highWorkloadPercent = highWorkloadPercentField.querySelector('input');
                _context8.next = 11;
                return (0, _testHelpers.fillIn)(highWorkloadPercent, '50');

              case 11:
                assert.dom('[data-test-id="wlm-settings-save"]').exists();
                assert.dom('[data-test-id="wlm-settings-cancel"]').exists();
                assert.dom('[data-test-id="optimal-workload-card"]').doesNotExist();
                _context8.next = 16;
                return (0, _testHelpers.click)('[data-test-id="wlm-settings-save"]');

              case 16:
                assert.ok('Settings applied and redirected test passed');

              case 17:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x7) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should change valid the allocation values in allocation fields', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        var lowWorkloadPercentField, lowWorkloadPercent, lowDropdown, inclusive, highWorkloadPercentField, highWorkloadPercent;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                this.owner.register('service:fetch', MOCK_FETCH_SERVICE);
                _context9.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::WorkloadManagement />
                */
                {
                  id: "jMWyN05/",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/workload-management\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                lowWorkloadPercentField = this.element.querySelector('[formserv-field-name="allocationLevels.low_workload.percentage"]');
                lowWorkloadPercent = lowWorkloadPercentField.querySelector('input');
                _context9.next = 7;
                return (0, _testHelpers.fillIn)(lowWorkloadPercent, '40');

              case 7:
                lowDropdown = this.element.querySelector('[formserv-field-name="allocationLevels.low_workload.inclusive"]');
                _context9.next = 10;
                return (0, _testHelpers.click)(lowDropdown.querySelector('.ember-power-select-trigger'));

              case 10:
                inclusive = this.element.querySelector('[data-option-index="1"]');
                _context9.next = 13;
                return (0, _testHelpers.click)(inclusive);

              case 13:
                highWorkloadPercentField = this.element.querySelector('[formserv-field-name="allocationLevels.high_workload.percentage"]');
                highWorkloadPercent = highWorkloadPercentField.querySelector('input');
                _context9.next = 17;
                return (0, _testHelpers.fillIn)(highWorkloadPercent, '51');

              case 17:
                assert.dom('[data-test-id="wlm-settings-save"]').exists();
                _context9.next = 20;
                return (0, _testHelpers.click)('[data-test-id="wlm-settings-save"]');

              case 20:
                assert.ok('Settings applied and redirected test passed');

              case 21:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x8) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should change invalid the allocation values in allocation fields', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var lowWorkloadPercentField, lowWorkloadPercent, lowDropdown, inclusive, highWorkloadPercentField, highWorkloadPercent;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                this.owner.register('service:fetch', MOCK_FETCH_SERVICE);
                _context10.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::WorkloadManagement />
                */
                {
                  id: "jMWyN05/",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/workload-management\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                lowWorkloadPercentField = this.element.querySelector('[formserv-field-name="allocationLevels.low_workload.percentage"]');
                lowWorkloadPercent = lowWorkloadPercentField.querySelector('input');
                _context10.next = 7;
                return (0, _testHelpers.fillIn)(lowWorkloadPercent, '50');

              case 7:
                lowDropdown = this.element.querySelector('[formserv-field-name="allocationLevels.low_workload.inclusive"]');
                _context10.next = 10;
                return (0, _testHelpers.click)(lowDropdown.querySelector('.ember-power-select-trigger'));

              case 10:
                inclusive = this.element.querySelector('[data-option-index="1"]');
                _context10.next = 13;
                return (0, _testHelpers.click)(inclusive);

              case 13:
                highWorkloadPercentField = this.element.querySelector('[formserv-field-name="allocationLevels.high_workload.percentage"]');
                highWorkloadPercent = highWorkloadPercentField.querySelector('input');
                _context10.next = 17;
                return (0, _testHelpers.fillIn)(highWorkloadPercent, '50');

              case 17:
                assert.dom('[data-test-id="wlm-settings-save"]').exists();
                _context10.next = 20;
                return (0, _testHelpers.click)('[data-test-id="wlm-settings-save"]');

              case 20:
                assert.ok('Settings is invalid test passed');

              case 21:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x9) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should change invalid the allocation values with empty number allocation fields', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        var lowWorkloadPercentField, lowWorkloadPercent, lowDropdown, inclusive, highWorkloadPercentField, highWorkloadPercent;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                this.owner.register('service:fetch', MOCK_FETCH_SERVICE);
                _context11.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::WorkloadManagement />
                */
                {
                  id: "jMWyN05/",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/workload-management\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                lowWorkloadPercentField = this.element.querySelector('[formserv-field-name="allocationLevels.low_workload.percentage"]');
                lowWorkloadPercent = lowWorkloadPercentField.querySelector('input');
                _context11.next = 7;
                return (0, _testHelpers.fillIn)(lowWorkloadPercent, '');

              case 7:
                lowDropdown = this.element.querySelector('[formserv-field-name="allocationLevels.low_workload.inclusive"]');
                _context11.next = 10;
                return (0, _testHelpers.click)(lowDropdown.querySelector('.ember-power-select-trigger'));

              case 10:
                inclusive = this.element.querySelector('[data-option-index="1"]');
                _context11.next = 13;
                return (0, _testHelpers.click)(inclusive);

              case 13:
                highWorkloadPercentField = this.element.querySelector('[formserv-field-name="allocationLevels.high_workload.percentage"]');
                highWorkloadPercent = highWorkloadPercentField.querySelector('input');
                _context11.next = 17;
                return (0, _testHelpers.fillIn)(highWorkloadPercent, '50');

              case 17:
                assert.dom('[data-test-id="wlm-settings-save"]').exists();
                _context11.next = 20;
                return (0, _testHelpers.click)('[data-test-id="wlm-settings-save"]');

              case 20:
                assert.ok('Settings is invalid test passed');

              case 21:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x10) {
        return _ref12.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should change invalid the allocation values with negative number allocation fields', /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        var lowWorkloadPercentField, lowWorkloadPercent, highWorkloadPercentField, highWorkloadPercent;
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                this.owner.register('service:fetch', MOCK_PUT_FAILURE_FETCH_SERVICE);
                _context12.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::WorkloadManagement />
                */
                {
                  id: "jMWyN05/",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/workload-management\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                lowWorkloadPercentField = this.element.querySelector('[formserv-field-name="allocationLevels.low_workload.percentage"]');
                lowWorkloadPercent = lowWorkloadPercentField.querySelector('input');
                _context12.next = 7;
                return (0, _testHelpers.fillIn)(lowWorkloadPercent, '-1');

              case 7:
                highWorkloadPercentField = this.element.querySelector('[formserv-field-name="allocationLevels.high_workload.percentage"]');
                highWorkloadPercent = highWorkloadPercentField.querySelector('input');
                _context12.next = 11;
                return (0, _testHelpers.fillIn)(highWorkloadPercent, '-1');

              case 11:
                assert.dom('[data-test-id="wlm-settings-save"]').exists();
                _context12.next = 14;
                return (0, _testHelpers.click)('[data-test-id="wlm-settings-save"]');

              case 14:
                assert.ok('Settings is invalid test passed');

              case 15:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x11) {
        return _ref13.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should cancel the allocation values', /*#__PURE__*/function () {
      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
        var lowWorkloadPercentField, lowWorkloadPercent, highWorkloadPercentField, highWorkloadPercent;
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                this.owner.register('service:fetch', MOCK_FETCH_SERVICE);
                _context13.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::WorkloadManagement />
                */
                {
                  id: "jMWyN05/",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/workload-management\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                lowWorkloadPercentField = this.element.querySelector('[formserv-field-name="allocationLevels.low_workload.percentage"]');
                lowWorkloadPercent = lowWorkloadPercentField.querySelector('input');
                _context13.next = 7;
                return (0, _testHelpers.fillIn)(lowWorkloadPercent, '50');

              case 7:
                highWorkloadPercentField = this.element.querySelector('[formserv-field-name="allocationLevels.high_workload.percentage"]');
                highWorkloadPercent = highWorkloadPercentField.querySelector('input');
                _context13.next = 11;
                return (0, _testHelpers.fillIn)(highWorkloadPercent, '50');

              case 11:
                assert.dom('[data-test-id="wlm-settings-save"]').exists();
                assert.dom('[data-test-id="wlm-settings-cancel"]').exists();
                assert.dom('[data-test-id="optimal-workload-card"]').doesNotExist();
                _context13.next = 16;
                return (0, _testHelpers.click)('[data-test-id="wlm-settings-cancel"]');

              case 16:
                assert.ok('Settings canceled and redirected test passed');

              case 17:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      return function (_x12) {
        return _ref14.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render the roles section in the component', /*#__PURE__*/function () {
      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {
        var roles, viewRoleLink, link;
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                this.owner.register('service:fetch', MOCK_FETCH_SERVICE);
                _context14.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::WorkloadManagement />
                */
                {
                  id: "jMWyN05/",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/workload-management\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                roles = this.element.querySelector('[data-test-id="wlm-settings-roles-section"]');
                assert.dom(roles).exists();
                viewRoleLink = roles.querySelector('.view-roles').firstElementChild.href;
                link = viewRoleLink.includes('admin/roles/');
                assert.ok(link, 'Entity link matches');

              case 8:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      return function (_x13) {
        return _ref15.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should open the admin role page', /*#__PURE__*/function () {
      var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {
        var roles;
        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                this.owner.register('service:fetch', MOCK_FETCH_SERVICE);
                _context15.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::WorkloadManagement />
                */
                {
                  id: "jMWyN05/",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/workload-management\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                roles = this.element.querySelector('[data-test-id="wlm-settings-roles-section"]');
                assert.dom(roles).exists();
                _context15.next = 7;
                return (0, _testHelpers.click)(roles.querySelector('.view-roles').firstElementChild);

              case 7:
                assert.ok('Admin roles edit page has been opened');

              case 8:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      return function (_x14) {
        return _ref16.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should handle failure', /*#__PURE__*/function () {
      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(assert) {
        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                this.owner.register('service:fetch', MOCK_FAILURE_FETCH_SERVICE);
                _context16.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <Admin::WorkloadManagement />
                */
                {
                  id: "jMWyN05/",
                  block: "{\"symbols\":[],\"statements\":[[5,\"admin/workload-management\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.ok('Settings failure handled');

              case 4:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      return function (_x15) {
        return _ref17.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/app-components/description/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/sinon-context", "freshservice/tests/pages/components/module-tickets/detail"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _sinonContext, _detail) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | app-components | description', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.intl = this.owner.lookup("service:intl");
              this.store = this.owner.lookup('service:store');
              this.owner.lookup('router:main').setupRouter();
              this.server.loadFixtures('tickets');
              this.server.loadFixtures("users");
              this.server.loadFixtures("requesters");

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('Show description component if ticket has description', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var mockTicket;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.store.findRecord('ticket', 17);

              case 2:
                mockTicket = _context2.sent;
                this.model = mockTicket;
                _context2.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::Description 
                                        @model              =   {{this.model}}
                                        @module				=	"tickets" />
                */
                {
                  id: "eWYoY9J7",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/description\",[],[[\"@model\",\"@module\"],[[23,0,[\"model\"]],\"tickets\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                assert.ok(_detail.default.descriptionContainerExists, "Ticket has description");

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Show description component if ticket has attachment', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var mockTicket;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.store.findRecord('ticket', 16);

              case 2:
                mockTicket = _context3.sent;
                this.model = mockTicket;
                _context3.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::Description 
                                        @model              =   {{this.model}}
                                        @module				=	"tickets" />
                */
                {
                  id: "eWYoY9J7",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/description\",[],[[\"@model\",\"@module\"],[[23,0,[\"model\"]],\"tickets\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                assert.ok(_detail.default.noDescriptionContent, "Ticket has no description data");
                assert.ok(_detail.default.attachmentContainerExists, "Ticket has attachments");
                assert.ok(_detail.default.descriptionContainerExists, "Ticket has description");

              case 9:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }()); // Tickets with source: 3

    (0, _qunit.test)('Show phone call data if ticket is created from freshcaller', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var mockTicket;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.store.findRecord('ticket', 13);

              case 2:
                mockTicket = _context4.sent;
                this.model = mockTicket;
                _context4.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::Description 
                                        @model              =   {{this.model}}
                                        @module				=	"tickets" />
                */
                {
                  id: "eWYoY9J7",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/description\",[],[[\"@model\",\"@module\"],[[23,0,[\"model\"]],\"tickets\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                assert.ok(_detail.default.phoneCallContainerExists, "Freshcaller ticket contains phone call data");

              case 7:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }()); // Tickets with source: 13

    (0, _qunit.test)('Show employee onboarding data if ticket is created for Employee onboarding', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var mockTicket;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this.store.findRecord('ticket', 20);

              case 2:
                mockTicket = _context5.sent;
                this.model = mockTicket;
                _context5.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::Description 
                                        @model              =   {{this.model}}
                                        @module				=	"tickets" />
                */
                {
                  id: "eWYoY9J7",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/description\",[],[[\"@model\",\"@module\"],[[23,0,[\"model\"]],\"tickets\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                assert.ok(_detail.default.eodContainerExists, "Employee onboarding ticket contains employee onboarding data");

              case 7:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("Hide description conatiner if ticket doesnt have description content/attachmnets/phone call data/ Employee onboarding data", /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var mockTicket;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this.store.findRecord('ticket', 369);

              case 2:
                mockTicket = _context6.sent;
                this.model = mockTicket;
                _context6.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::Description 
                                        @model              =   {{this.model}}
                                        @module				=	"tickets" />
                */
                {
                  id: "eWYoY9J7",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/description\",[],[[\"@model\",\"@module\"],[[23,0,[\"model\"]],\"tickets\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                assert.ok(_detail.default.descriptionContainerExists, "Ticket has no description/attachmnets/phone call data/ Employee onboarding data");

              case 7:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/app-components/native-integrations/jira/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/sinon-context", "freshservice/tests/pages/components/module-native-integrations/jira-integration", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-native-service"], function (_qunit, _emberQunit, _testHelpers, _sinonContext, _jiraIntegration, _testSupport, _intl, _stubNativeService) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | app-components | native-integrations | jira', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    hooks.beforeEach(function () {
      this.store = this.owner.lookup('service:store');
      this.server.loadFixtures("tickets");
      this.server.loadFixtures("users");
      var mockTicket = Ember.A(this.server.db.tickets).findBy("display_id", 375);
      var mockTicketData = {
        requesterId: mockTicket.requester_id,
        id: mockTicket.display_id,
        subject: mockTicket.subject,
        ticketId: mockTicket.ticket_id,
        stats: {
          ticketId: mockTicket.ticket_id
        }
      };
      this.set('model', mockTicketData);
    });
    (0, _qunit.test)('Should display jira component', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                (0, _stubNativeService.stubNativeService)(['jira']);
                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::NativeIntegrations::Jira 	@model = {{this.model}} />
                */
                {
                  id: "PlqJd3hn",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/native-integrations/jira\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.ok(_jiraIntegration.default.accordionIsVisible);

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should display link issue button', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                (0, _stubNativeService.stubNativeService)(['jira']);
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::NativeIntegrations::Jira 	@model = {{this.model}} />
                */
                {
                  id: "PlqJd3hn",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/native-integrations/jira\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.ok(_jiraIntegration.default.linkButtonIsVisible, "link button is visible");
                _context2.next = 6;
                return _jiraIntegration.default.clickLinkIssue();

              case 6:
                assert.ok(_jiraIntegration.default.createRdButtonIsVisible, "create radio button is visible");
                assert.ok(_jiraIntegration.default.linkRdButtonIsVisible, "link issue button is visible");
                assert.ok(_jiraIntegration.default.createFormIsVisible, "create jira issue form is visible");

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should display link issue form on clicking link radio button', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                (0, _stubNativeService.stubNativeService)(['jira']);
                _context3.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::NativeIntegrations::Jira 	@model = {{this.model}} />
                */
                {
                  id: "PlqJd3hn",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/native-integrations/jira\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.strictEqual(_jiraIntegration.default.linkButtonIsVisible, true, 'link button is visible');
                _context3.next = 6;
                return _jiraIntegration.default.clickLinkIssue();

              case 6:
                assert.strictEqual(_jiraIntegration.default.createRdButtonIsVisible, true, 'create radio button is visible');
                assert.strictEqual(_jiraIntegration.default.linkRdButtonIsVisible, true, 'link issue button is visible');
                _context3.next = 10;
                return _jiraIntegration.default.clickLinkIssueRadioBtn();

              case 10:
                assert.strictEqual(_jiraIntegration.default.linkFormIsVisible, true, 'link form is visible');

              case 11:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/app-components/native-integrations/logmein/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/pages/components/app-components/module-native-integrations/logmein", "freshservice/tests/lib/stub-native-service", "freshservice/tests/lib/stub-current-user"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _intl, _logmein, _stubNativeService, _stubCurrentUser) {
  "use strict";

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var PRIVILEGES = {
    scoped_privileges: {
      0: ['reply_ticket'],
      1: [],
      2: [],
      3: []
    },
    privileges: ['reply_ticket']
  };
  (0, _qunit.module)('Integration | Component | app-components | LogMeIn', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var mockTicket, mockTicketData, newMockTicket, newMockTicketData;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.store = this.owner.lookup('service:store');
              this.server.loadFixtures('tickets');
              this.moment = this.owner.lookup('service:moment');
              this.moment.setLocale('en');
              mockTicket = Ember.A(this.server.db.tickets).findBy("display_id", 375);
              mockTicketData = _objectSpread(_objectSpread({}, mockTicket), {}, {
                requesterId: mockTicket.requester_id
              });
              newMockTicket = Ember.A(this.server.db.tickets).findBy("display_id", 376);
              newMockTicketData = _objectSpread(_objectSpread({}, newMockTicket), {}, {
                requesterId: newMockTicket.requester_id
              });
              (0, _stubCurrentUser.stubCurrentUser)(PRIVILEGES);
              this.set('model', mockTicketData);
              this.set('newModel', newMockTicketData);
              this.set('mockFunction', function () {});

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('should render logmein component', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                (0, _stubNativeService.stubNativeService)(['logmein']);
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::NativeIntegrations::Logmein @model={{this.model}} @showConversationEditor={{this.mockFunction}} @updateTabPaneFn = {{this.mockFunction}}/>
                */
                {
                  id: "hwyhiO1A",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/native-integrations/logmein\",[],[[\"@model\",\"@showConversationEditor\",\"@updateTabPaneFn\"],[[23,0,[\"model\"]],[23,0,[\"mockFunction\"]],[23,0,[\"mockFunction\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.ok(_logmein.default.logMeInIsVisible, "LogMeIn Widget Visible");
                _context2.next = 6;
                return _logmein.default.clickLogMeInAccordion();

              case 6:
                assert.ok(_logmein.default.remoteBtnIsVisible, "New Remote Session Button Visible");
                assert.notOk(_logmein.default.errorTextVisible, "No error Message available");

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should generate pin code when clicking remote session button', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                (0, _stubNativeService.stubNativeService)(['logmein']);
                _context3.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::NativeIntegrations::Logmein @model={{this.model }} @showConversationEditor={{this.mockFunction}} @updateTabPaneFn = {{this.mockFunction}}/>
                */
                {
                  id: "hwyhiO1A",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/native-integrations/logmein\",[],[[\"@model\",\"@showConversationEditor\",\"@updateTabPaneFn\"],[[23,0,[\"model\"]],[23,0,[\"mockFunction\"]],[23,0,[\"mockFunction\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context3.next = 5;
                return _logmein.default.clickLogMeInAccordion();

              case 5:
                assert.notOk(_logmein.default.sessionIsVisible, 'No PinCode is Generated');
                assert.notOk(_logmein.default.resendInstructionIsVisible, 'Resend Instruction not visible');
                assert.ok(_logmein.default.launchConsoleIsVisible, 'Launch console is visible');
                _context3.next = 10;
                return _logmein.default.clickRemoteBtn();

              case 10:
                assert.ok(_logmein.default.sessionIsVisible, 'PinCode is Generated');
                assert.ok(_logmein.default.resendInstructionIsVisible, 'Resend Instruction visible');
                _context3.next = 14;
                return _logmein.default.clickConsole();

              case 14:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should render logmein error Message', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                (0, _stubNativeService.stubNativeService)(['logmein']);
                _context4.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::NativeIntegrations::Logmein @model={{this.newModel}} @showConversationEditor={{this.mockFunction}} @updateTabPaneFn = {{this.mockFunction}}/>
                */
                {
                  id: "SUAdwO9w",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/native-integrations/logmein\",[],[[\"@model\",\"@showConversationEditor\",\"@updateTabPaneFn\"],[[23,0,[\"newModel\"]],[23,0,[\"mockFunction\"]],[23,0,[\"mockFunction\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.ok(_logmein.default.logMeInIsVisible, "LogMeIn Widget Visible");
                assert.ok(_logmein.default.errorTextVisible, "Error Message available");

              case 5:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/app-components/native-integrations/pivotal-tracker/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/sinon-context", "freshservice/tests/pages/components/module-native-integrations/pivotal-tracker", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-native-service"], function (_qunit, _emberQunit, _testHelpers, _sinonContext, _pivotalTracker, _testSupport, _intl, _stubNativeService) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | app-components | native-integrations | pivotal', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    hooks.beforeEach(function () {
      // this.server.loadFixtures('pivotal-tracker');
      this.store = this.owner.lookup('service:store');
      this.server.loadFixtures("tickets");
      this.server.loadFixtures("users");
      var mockTicket = Ember.A(this.server.db.tickets).findBy("display_id", 375);
      var mockTicketData = {
        requesterId: mockTicket.requester_id,
        id: mockTicket.display_id,
        subject: mockTicket.subject,
        description: "Mondie was here",
        requester: {
          id: 1,
          value: 'Aaron',
          email: 'mondie@gmail.com'
        },
        stats: {
          ticketId: mockTicket.display_id
        }
      };
      this.set('model', mockTicketData);
    });
    (0, _qunit.test)('Should display pivotal tracker component', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                (0, _stubNativeService.stubNativeService)(['pivotal_tracker']);
                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::NativeIntegrations::PivotalTracker @model = {{this.model}} @moduleLocation="ticket_sidebar" />
                */
                {
                  id: "wL7T6slf",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/native-integrations/pivotal-tracker\",[],[[\"@model\",\"@moduleLocation\"],[[23,0,[\"model\"]],\"ticket_sidebar\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.ok(_pivotalTracker.default.accordionIsVisible);
                _context.next = 6;
                return _pivotalTracker.default.accordion();

              case 6:
                assert.ok(_pivotalTracker.default.ptItems, "Pivotal Tracker Items visible");
                assert.ok(_pivotalTracker.default.ptStoryStatus, "Pivotal Tracker Status is visible");
                (0, _testHelpers.clearRender)();

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should display create story button', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                (0, _stubNativeService.stubNativeService)(['pivotal_tracker']);
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::NativeIntegrations::PivotalTracker @model = {{this.model}} @moduleLocation="ticket_sidebar" />
                */
                {
                  id: "wL7T6slf",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/native-integrations/pivotal-tracker\",[],[[\"@model\",\"@moduleLocation\"],[[23,0,[\"model\"]],\"ticket_sidebar\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.ok(_pivotalTracker.default.createStoryButtonIsVisible, "link button is visible");
                _context2.next = 6;
                return _pivotalTracker.default.clickCreateStory();

              case 6:
                assert.ok(_pivotalTracker.default.submitButtonIsVisible, "submit button is visible");
                (0, _testHelpers.clearRender)();

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('pivotal component with no stories linked', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var mockTicket1, mockTicketData1;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                (0, _stubNativeService.stubNativeService)(['pivotal_tracker']);
                mockTicket1 = Ember.A(this.server.db.tickets).findBy("display_id", 374);
                mockTicketData1 = {
                  requesterId: mockTicket1.requester_id,
                  id: mockTicket1.display_id,
                  subject: mockTicket1.subject,
                  description: "Mondie was here",
                  requester: {
                    id: 1,
                    value: 'Aaron',
                    email: 'mondie@gmail.com'
                  },
                  stats: {
                    ticketId: mockTicket1.display_id
                  }
                };
                this.set('model1', mockTicketData1);
                _context3.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::NativeIntegrations::PivotalTracker @model = {{ this.model1 }} @moduleLocation="ticket_sidebar" />
                */
                {
                  id: "82I09HG7",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/native-integrations/pivotal-tracker\",[],[[\"@model\",\"@moduleLocation\"],[[23,0,[\"model1\"]],\"ticket_sidebar\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                assert.ok(_pivotalTracker.default.accordionIsVisible);
                _context3.next = 9;
                return _pivotalTracker.default.accordion();

              case 9:
                assert.ok(_pivotalTracker.default.emptyStory, "No stories linked text");
                assert.notOk(_pivotalTracker.default.ptItems, "Pivotal Tracker Items not visible");
                assert.notOk(_pivotalTracker.default.ptStoryStatus, "Pivotal Tracker Status is not visible");
                (0, _testHelpers.clearRender)();

              case 13:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }()); //   test('Should create a story', async function(assert){
    //     await render(hbs`<AppComponents::NativeIntegrations::PivotalTracker @model = {{this.model}} @moduleLocation="ticket_sidebar" />`);
    //     assert.ok(pivotalIntegration.createStoryButtonIsVisible, "link button is visible");
    //     await pivotalIntegration.clickCreateStory();
    //     assert.ok(pivotalIntegration.submitButtonIsVisible, "submit button is visible");
    //     await pivotalIntegration.projectDropdownClick();
    //     assert.equal(pivotalIntegration.dropDownText, 'freshworks');
    //     await selectChoose(pivotalIntegration.projectClickDropdown, 'freshworks');
    //     await pivotalIntegration.storyTypeDropdownClick();
    //     assert.equal(pivotalIntegration.dropDownText, 'Feature');
    //     await selectChoose(pivotalIntegration.storyTypeClickDropdown, 'Feature');
    //     // await pivotalIntegration.clickSubmitCreateStory();
    //     clearRender();
    //   });
  });
});
define("freshservice/tests/integration/components/app-components/native-integrations/time-entry-apps/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support"], function (_qunit, _emberQunit, _testHelpers, _testSupport) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | app-components | native-integrations | time-entry-apps', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.store = this.owner.lookup('service:store');
              this.server.loadFixtures("tickets");
              this.server.loadFixtures('nativeIntegrations');

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('checkbox should be checked when it is found is in getIntegratedResourcesData and actiontype is add', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.set('apps', ['freshbooks']);
                this.set('timeSheetModel', {
                  id: 1
                });
                this.set('model', {
                  id: '1'
                });
                _context2.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::NativeIntegrations::TimeEntryApps
                        @timeEntryModel={{this.timeSheetModel}} 
                        @model={{this.model}}
                        @actionType={{'add'}}
                        @moduleId={{1}}
                        @nativeApps={{this.apps}}/>
                */
                {
                  id: "+eeUUc34",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/native-integrations/time-entry-apps\",[],[[\"@timeEntryModel\",\"@model\",\"@actionType\",\"@moduleId\",\"@nativeApps\"],[[23,0,[\"timeSheetModel\"]],[23,0,[\"model\"]],\"add\",1,[23,0,[\"apps\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                assert.dom('.app-item').hasNoClass('selected');
                assert.dom('.native-app-item-content').hasClass('hide');

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('checkbox should not be checked when it is found is in getIntegratedResourcesData and actiontype is edit', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this.set('apps', ['freshbooks']);
                this.set('timeSheetModel', {
                  id: 1
                });
                this.set('model', {
                  id: '1'
                });
                _context3.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::NativeIntegrations::TimeEntryApps
                        @timeEntryModel={{this.timeSheetModel}} 
                        @model={{this.model}}
                        @actionType={{'edit'}}
                        @moduleId={{1}}
                        @nativeApps={{this.apps}}/>
                */
                {
                  id: "0ENHTCKZ",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/native-integrations/time-entry-apps\",[],[[\"@timeEntryModel\",\"@model\",\"@actionType\",\"@moduleId\",\"@nativeApps\"],[[23,0,[\"timeSheetModel\"]],[23,0,[\"model\"]],\"edit\",1,[23,0,[\"apps\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                assert.dom('.app-item').hasNoClass('selcted');
                assert.dom('.app-item').hasClass('hide');

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should show content on click of checkbox', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                this.set('apps', ['freshbooks']);
                this.set('timeSheetModel', {
                  id: 1
                });
                this.set('model', {
                  id: '1'
                });
                _context4.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::NativeIntegrations::TimeEntryApps
                        @timeEntryModel={{this.timeSheetModel}} 
                        @model={{this.model}}
                        @actionType={{'add'}}
                        @moduleId={{1}}
                        @nativeApps={{this.apps}}/>
                */
                {
                  id: "+eeUUc34",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/native-integrations/time-entry-apps\",[],[[\"@timeEntryModel\",\"@model\",\"@actionType\",\"@moduleId\",\"@nativeApps\"],[[23,0,[\"timeSheetModel\"]],[23,0,[\"model\"]],\"add\",1,[23,0,[\"apps\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                assert.dom('.app-item').hasNoClass('selcted');
                assert.dom('.native-app-item-content').hasClass('hide');
                _context4.next = 9;
                return (0, _testHelpers.click)('.native-app-item-header');

              case 9:
                assert.dom('.app-item').hasClass('selected');
                assert.dom('.native-app-item-content').hasNoClass('hide');

              case 11:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
  });
});
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

define("freshservice/tests/integration/components/app-components/requester-info/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/pages/components/app-components/requester-info/requester", "freshservice/mirage/fixtures/recent-tickets", "freshservice/tests/lib/stub-current-account", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/stub-native-service", "moment"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _intl, _requester, _recentTickets, _stubCurrentAccount, _sinonContext, _stubNativeService, _moment) {
  "use strict";

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var MockService1 = /*#__PURE__*/function (_Ember$Service) {
    _inherits(MockService1, _Ember$Service);

    var _super = _createSuper(MockService1);

    function MockService1() {
      var _this;

      _classCallCheck(this, MockService1);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _defineProperty(_assertThisInitialized(_this), "interfaceFormProperties", {
        ticket: {
          'skype-defaultApp': true
        }
      });

      return _this;
    }

    return MockService1;
  }(Ember.Service);

  window.__CLASSIC_OWN_CLASSES__.set(MockService1, true);

  var MockFieldsService = /*#__PURE__*/function (_Ember$Service2) {
    _inherits(MockFieldsService, _Ember$Service2);

    var _super2 = _createSuper(MockFieldsService);

    function MockFieldsService() {
      var _this2;

      _classCallCheck(this, MockFieldsService);

      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      _this2 = _super2.call.apply(_super2, [this].concat(args));

      _defineProperty(_assertThisInitialized(_this2), "ticketStatusActiveChoicesIds", [2, 3, 4]);

      return _this2;
    }

    return MockFieldsService;
  }(Ember.Service);

  window.__CLASSIC_OWN_CLASSES__.set(MockFieldsService, true);

  var DEF_TIME_FORMAT = 'h:mm A';
  var DEFAULT_START_TIME = '12:00 AM';
  var DEFAULT_END_TIME = '12:30 AM';
  var TEST_ACCOUNT = {
    full_domain: window.location.host
  }; //This wormhole element is not available in this component, so while testing ember wormhole throws error such as 
  //ember-wormhole failed to render because the element is not in the DOM, In order to prevent that we adding it in the 
  //wormhole element in the body element

  var appendWormholeElem = function appendWormholeElem() {
    var sfbContainer = document.createElement('div');
    sfbContainer.id = 'sfb-container-wrapper';
    var testingContainer = document.querySelector('#ember-testing');
    testingContainer.append(sfbContainer);
  }; //remove the above sfb-container-wrapper element


  var removeWormholeElem = function removeWormholeElem() {
    var sfbContainer = document.querySelector('#sfb-container-wrapper');
    var testingContainer = document.querySelector('#ember-testing');
    testingContainer.removeChild(sfbContainer);
  };

  (0, _qunit.module)('Integration | Component | app-components | requester-info', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var mockTicket, mockUser, mockTicketData, mockNewTicket, mockNewTicketData;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              appendWormholeElem();
              this.owner.register('service:marketplaceAdapter', MockService1);
              this.owner.register('service:moduleFields', MockFieldsService);
              (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
              this.store = this.owner.lookup('service:store');
              this.moment = this.owner.lookup('service:moment');
              this.moment.setLocale('en');
              this.server.loadFixtures("tickets");
              this.server.loadFixtures("users");
              mockTicket = Ember.A(this.server.db.tickets).findBy("display_id", 375);
              mockUser = Ember.A(this.server.db.users).findBy("id", mockTicket.requester_id.toString());
              mockTicketData = _objectSpread(_objectSpread({}, mockTicket), {}, {
                requesterId: mockTicket.requester_id
              });
              mockNewTicket = Ember.A(this.server.db.tickets).findBy("display_id", 16);
              mockNewTicketData = _objectSpread(_objectSpread({}, mockNewTicket), {}, {
                requesterId: mockNewTicket.requester_id
              });
              this.set('model', mockTicketData);
              this.set('user', mockUser);
              this.set('newModel', mockNewTicketData);
              this.set('currentDate', new Date(new Date().setHours(0, 0, 0, 0)));

            case 18:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    hooks.afterEach(function () {
      removeWormholeElem();
    });
    (0, _qunit.test)('should not open requester details page on load', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::RequesterInfo @ticketModel={{this.model}} @moduleLocation="ticket_sidebar" @listAppsFetched = {{true}}/>
                */
                {
                  id: "TYEGh8Rd",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/requester-info\",[],[[\"@ticketModel\",\"@moduleLocation\",\"@listAppsFetched\"],[[23,0,[\"model\"]],\"ticket_sidebar\",true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.notOk(_requester.default.isDetailsHidden);

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should not show skype button when no phone number available', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::RequesterInfo @ticketModel={{this.model }} @moduleLocation = "ticket_sidebar" @listAppsFetched = {{true}}/>
                */
                {
                  id: "TYEGh8Rd",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/requester-info\",[],[[\"@ticketModel\",\"@moduleLocation\",\"@listAppsFetched\"],[[23,0,[\"model\"]],\"ticket_sidebar\",true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context3.next = 4;
                return _requester.default.clickViewMoreBtn();

              case 4:
                assert.notOk(_requester.default.isSkypeBtnVisible, 'Skype Button not Visible');

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should show skype button when phone number available', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::RequesterInfo @ticketModel={{this.newModel}} @moduleLocation = "ticket_sidebar" @listAppsFetched = {{true}} />
                */
                {
                  id: "T0Q69nve",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/requester-info\",[],[[\"@ticketModel\",\"@moduleLocation\",\"@listAppsFetched\"],[[23,0,[\"newModel\"]],\"ticket_sidebar\",true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context4.next = 4;
                return _requester.default.clickViewMoreBtn();

              case 4:
                assert.ok(_requester.default.isSkypeBtnVisible, 'Skype Button Visible');

              case 5:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should remove details on clicking chevron', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::RequesterInfo @ticketModel={{this.model}} @moduleLocation="ticket_sidebar" @listAppsFetched = {{true}}/>
                */
                {
                  id: "TYEGh8Rd",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/requester-info\",[],[[\"@ticketModel\",\"@moduleLocation\",\"@listAppsFetched\"],[[23,0,[\"model\"]],\"ticket_sidebar\",true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                if (_requester.default.isDetailsHidden) {
                  _context5.next = 5;
                  break;
                }

                _context5.next = 5;
                return _requester.default.clickChevron();

              case 5:
                _context5.next = 7;
                return _requester.default.clickChevron();

              case 7:
                assert.strictEqual(_requester.default.isDetailsHidden, false, 'details are invisible on clicking the chevron'); // assert.strictEqual(Requester.requesterWidgetOpened, true);

              case 8:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should not show skype button when no phone number available', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::RequesterInfo @ticketModel={{this.model }} @moduleLocation = "ticket_sidebar" @listAppsFetched = {{true}} />
                */
                {
                  id: "TYEGh8Rd",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/requester-info\",[],[[\"@ticketModel\",\"@moduleLocation\",\"@listAppsFetched\"],[[23,0,[\"model\"]],\"ticket_sidebar\",true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context6.next = 4;
                return _requester.default.clickViewMoreBtn();

              case 4:
                assert.notOk(_requester.default.isSkypeBtnVisible, 'Skype Button not Visible');

              case 5:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should show skype button when phone number available', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::RequesterInfo @ticketModel={{this.newModel}} @moduleLocation = "ticket_sidebar" @listAppsFetched = {{true}}/>
                */
                {
                  id: "T0Q69nve",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/requester-info\",[],[[\"@ticketModel\",\"@moduleLocation\",\"@listAppsFetched\"],[[23,0,[\"newModel\"]],\"ticket_sidebar\",true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context7.next = 4;
                return _requester.default.clickViewMoreBtn();

              case 4:
                assert.ok(_requester.default.isSkypeBtnVisible, 'Skype Button Visible');

              case 5:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      return function (_x6) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should not show recent tickets link if recent tickets are not present', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                this.set("model.recentTickets", function () {
                  return [];
                });
                _context8.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::RequesterInfo @ticketModel={{this.model }}  @moduleLocation="ticket_sidebar" @listAppsFetched = {{true}}/>
                */
                {
                  id: "TYEGh8Rd",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/requester-info\",[],[[\"@ticketModel\",\"@moduleLocation\",\"@listAppsFetched\"],[[23,0,[\"model\"]],\"ticket_sidebar\",true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                if (_requester.default.isDetailsHidden) {
                  _context8.next = 6;
                  break;
                }

                _context8.next = 6;
                return _requester.default.clickChevron();

              case 6:
                _context8.next = 8;
                return _requester.default.clickChevron();

              case 8:
                assert.strictEqual(_requester.default.isRecentTicketsHidden, true, 'Recent Tickets link not visible when no recent tickest are present');

              case 9:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x7) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should open modal on click recent tickets', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                this.set("model.recentTickets", function () {
                  return _recentTickets.default;
                });
                _context9.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::RequesterInfo @ticketModel={{this.model }}  @moduleLocation="ticket_sidebar" @listAppsFetched = {{true}}/>
                */
                {
                  id: "TYEGh8Rd",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/requester-info\",[],[[\"@ticketModel\",\"@moduleLocation\",\"@listAppsFetched\"],[[23,0,[\"model\"]],\"ticket_sidebar\",true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context9.next = 5;
                return _requester.default.clickChevron();

              case 5:
                _context9.next = 7;
                return _requester.default.clickRecentTickets();

              case 7:
                assert.strictEqual(_requester.default.isRecentModalVisible, true, 'Modal opens on clicking the chevron');
                assert.strictEqual(_requester.default.isRecentTicketsVisible, true, 'Recent Tickets are visible');
                assert.equal(_requester.default.countRecentTickets, 5, "list 5 recent tickets.");

              case 10:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x8) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should show change CRM apps dropdown, if more then 1 CRM apps installed', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                (0, _stubNativeService.stubNativeService)(['salesforce']);
                _context10.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::RequesterInfo @ticketModel={{this.model}} @moduleLocation="ticket_sidebar" @listAppsFetched = {{true}} />
                */
                {
                  id: "TYEGh8Rd",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/requester-info\",[],[[\"@ticketModel\",\"@moduleLocation\",\"@listAppsFetched\"],[[23,0,[\"model\"]],\"ticket_sidebar\",true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.ok(_requester.default.isCrmSwitchDropdownVisible);

              case 4:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10);
      }));

      return function (_x9) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should hide change CRM apps dropdown, if only 1 CRM apps', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                (0, _stubNativeService.stubNativeService)([]);
                _context11.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::RequesterInfo @ticketModel={{this.model}} @moduleLocation="ticket_sidebar" @listAppsFetched = {{true}} />
                */
                {
                  id: "TYEGh8Rd",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/requester-info\",[],[[\"@ticketModel\",\"@moduleLocation\",\"@listAppsFetched\"],[[23,0,[\"model\"]],\"ticket_sidebar\",true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.notOk(_requester.default.isCrmSwitchDropdownVisible);

              case 4:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11);
      }));

      return function (_x10) {
        return _ref12.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should show schedule meeting link with requester', /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                (0, _stubNativeService.stubNativeService)(['office365']);
                _context12.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::RequesterInfo @ticketModel={{this.model}} @moduleLocation="ticket_sidebar" @listAppsFetched = {{true}} />
                */
                {
                  id: "TYEGh8Rd",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/requester-info\",[],[[\"@ticketModel\",\"@moduleLocation\",\"@listAppsFetched\"],[[23,0,[\"model\"]],\"ticket_sidebar\",true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context12.next = 5;
                return _requester.default.clickChevron();

              case 5:
                assert.ok(_requester.default.isOffice365BlockVisible, 'schedule meeting link is visible');

              case 6:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12);
      }));

      return function (_x11) {
        return _ref13.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('clicking meeting link should render office365 meeting times modal', /*#__PURE__*/function () {
      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                (0, _stubNativeService.stubNativeService)(['office365']);
                _context13.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::RequesterInfo @ticketModel={{this.model}} @moduleLocation="ticket_sidebar" @listAppsFetched = {{true}} />
                */
                {
                  id: "TYEGh8Rd",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/requester-info\",[],[[\"@ticketModel\",\"@moduleLocation\",\"@listAppsFetched\"],[[23,0,[\"model\"]],\"ticket_sidebar\",true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context13.next = 5;
                return _requester.default.clickChevron();

              case 5:
                _context13.next = 7;
                return _requester.default.clickScheduleMeetingLink();

              case 7:
                assert.ok(_requester.default.isOfficeCalendarModal, 'office365 calendar modal is visible');
                assert.ok(_requester.default.isDateFieldVisible);
                assert.ok(_requester.default.isStartTimeFieldVisible);
                assert.ok(_requester.default.isEndTimeFieldVisible);
                assert.ok(_requester.default.isMeetingSlotVisible);

              case 12:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13);
      }));

      return function (_x12) {
        return _ref14.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('check the scheduled date and time', /*#__PURE__*/function () {
      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {
        var startTime, endTime;
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                (0, _stubNativeService.stubNativeService)(['office365']);
                _context14.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::RequesterInfo @ticketModel={{this.model}} @moduleLocation="ticket_sidebar" @listAppsFetched = {{true}} />
                */
                {
                  id: "TYEGh8Rd",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/requester-info\",[],[[\"@ticketModel\",\"@moduleLocation\",\"@listAppsFetched\"],[[23,0,[\"model\"]],\"ticket_sidebar\",true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context14.next = 5;
                return _requester.default.clickChevron();

              case 5:
                _context14.next = 7;
                return _requester.default.clickScheduleMeetingLink();

              case 7:
                assert.equal(new Date(_requester.default.dateFieldValue).toDateString(), this.currentDate.toDateString(), "Scheduled Date is current date");
                startTime = (0, _moment.default)(_requester.default.startTimeValue, DEF_TIME_FORMAT).toDate().getMinutes();
                endTime = (0, _moment.default)(_requester.default.endTimeValue, DEF_TIME_FORMAT).toDate().getMinutes();
                assert.equal(Math.abs(startTime - endTime), 30, 'Time interval is 30');

              case 11:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      return function (_x13) {
        return _ref15.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should schedule a meeting with requester', /*#__PURE__*/function () {
      var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {
        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                (0, _stubNativeService.stubNativeService)(['office365']);
                _context15.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::RequesterInfo @ticketModel={{this.model}} @moduleLocation="ticket_sidebar" @listAppsFetched = {{true}}/>
                */
                {
                  id: "TYEGh8Rd",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/requester-info\",[],[[\"@ticketModel\",\"@moduleLocation\",\"@listAppsFetched\"],[[23,0,[\"model\"]],\"ticket_sidebar\",true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context15.next = 5;
                return _requester.default.clickChevron();

              case 5:
                _context15.next = 7;
                return _requester.default.clickScheduleMeetingLink();

              case 7:
                _context15.next = 9;
                return _requester.default.clickMeetingSlot();

              case 9:
                _context15.next = 11;
                return _requester.default.clickScheduleBtn();

              case 11:
                assert.ok(_requester.default.isMeetingScheduledLinkVisible, 'Meeting scheduled with Requester'); // await click('.view-btn')

                _context15.next = 14;
                return _requester.default.clickViewMoreBtn();

              case 14:
                assert.equal(new Date(_requester.default.meetingScheduledDateValue).toDateString(), this.currentDate.toDateString());
                assert.equal(_requester.default.meetingScheduledTimeValue, "".concat(DEFAULT_START_TIME, " - ").concat(DEFAULT_END_TIME));

              case 16:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      return function (_x14) {
        return _ref16.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('skype for business test case', /*#__PURE__*/function () {
      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(assert) {
        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                (0, _stubNativeService.stubNativeService)(['sfb']);
                _context16.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::RequesterInfo 
                            @ticketModel    = {{this.model}} 
                            @moduleLocation = "ticket_sidebar" 
                            @listAppsFetched = {{true}}
                        />
                */
                {
                  id: "TYEGh8Rd",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/requester-info\",[],[[\"@ticketModel\",\"@moduleLocation\",\"@listAppsFetched\"],[[23,0,[\"model\"]],\"ticket_sidebar\",true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context16.next = 5;
                return _requester.default.clickViewMoreBtn();

              case 5:
                _context16.next = 7;
                return (0, _testHelpers.waitFor)('.skype-block', {
                  timeout: 2000
                });

              case 7:
                assert.ok(_requester.default.isSfbBtnVisible, 'should show skype for business');
                _context16.next = 10;
                return _requester.default.clickSfbBtn();

              case 10:
                assert.ok(_requester.default.isSfbContainerVisible, 'skype for business chat bar is visible');
                assert.equal(_requester.default.chatReqNameValue, this.user.name);
                assert.ok(_requester.default.isSfbMinBtnVisible);
                assert.ok(_requester.default.isSfbCloseBtnVisible);
                _context16.next = 16;
                return _requester.default.clickSfbCloseBtn();

              case 16:
                assert.notOk(_requester.default.isSfbContainerVisible, 'skype for business chat bar is not visible after clicking close btn');
                assert.ok(_requester.default.isSkypeModalVisible, 'skype for business modal is visible');
                _context16.next = 20;
                return _requester.default.clickSfbBtn();

              case 20:
                _context16.next = 22;
                return _requester.default.clickSfbMinBtn();

              case 22:
                assert.notOk(_requester.default.isSfbContainerVisible, 'skype for business chat bar is not visible after clicking minimize btn');

              case 23:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      return function (_x15) {
        return _ref17.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/app-components/requester-info/salesforce-requester-info/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/pages/components/app-components/requester-info/requester", "freshservice/tests/lib/stub-native-service"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _intl, _requester, _stubNativeService) {
  "use strict";

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  //This wormhole element is not available in this component, so while testing ember wormhole throws error such as 
  //ember-wormhole failed to render because the element is not in the DOM, In order to prevent that we adding it in the 
  //wormhole element in the body element
  var appendWormholeElem = function appendWormholeElem() {
    var sfbContainer = document.createElement('div');
    sfbContainer.id = 'sfb-container-wrapper';
    var testingContainer = document.querySelector('#ember-testing');
    testingContainer.append(sfbContainer);
  }; //remove the above sfb-container-wrapper element


  var removeWormholeElem = function removeWormholeElem() {
    var sfbContainer = document.querySelector('#sfb-container-wrapper');
    var testingContainer = document.querySelector('#ember-testing');
    testingContainer.removeChild(sfbContainer);
  };

  (0, _qunit.module)('Integration | Component | app-components | requester-info | salesforce', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);

    function selectSalesforce() {
      return _selectSalesforce.apply(this, arguments);
    }

    function _selectSalesforce() {
      _selectSalesforce = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return _requester.default.clickCrmSwitchDropdown();

              case 2:
                _context7.next = 4;
                return _requester.default.clickCrmSalesforceItem();

              case 4:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));
      return _selectSalesforce.apply(this, arguments);
    }

    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var mockTicket, mockTicketData;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              appendWormholeElem();
              this.store = this.owner.lookup('service:store');
              this.server.loadFixtures("tickets");
              this.server.loadFixtures("users");
              mockTicket = Ember.A(this.server.db.tickets).findBy("display_id", 375);
              mockTicketData = _objectSpread(_objectSpread({}, mockTicket), {}, {
                requesterId: mockTicket.requester_id
              });
              this.set('model', mockTicketData);

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    hooks.afterEach(function () {
      removeWormholeElem();
    });
    (0, _qunit.test)('should load salesforce on selection and render initial UI', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                (0, _stubNativeService.stubNativeService)(['salesforce']); // salesforce

                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::RequesterInfo @ticketModel={{this.model }} @listAppsFetched = {{true}}/>
                */
                {
                  id: "mpS0zYGZ",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/requester-info\",[],[[\"@ticketModel\",\"@listAppsFetched\"],[[23,0,[\"model\"]],true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context2.next = 5;
                return selectSalesforce();

              case 5:
                assert.equal(_requester.default.salesforceSectionCount, 2);
                assert.equal(_requester.default.salesforceFields, 5);
                assert.notOk(_requester.default.isSalesforceViewMoreVisible);

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should show three salesforce section, and show more button', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var model;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                (0, _stubNativeService.stubNativeService)(['salesforce']); // salesforce

                model = this.get('model');
                this.set('model', _objectSpread(_objectSpread({}, model), {}, {
                  displayId: 2 // have 3 different salesforce sections

                }));
                _context3.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::RequesterInfo @ticketModel={{this.model}} @listAppsFetched = {{true}}/>
                */
                {
                  id: "mpS0zYGZ",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/requester-info\",[],[[\"@ticketModel\",\"@listAppsFetched\"],[[23,0,[\"model\"]],true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                _context3.next = 7;
                return selectSalesforce();

              case 7:
                assert.equal(_requester.default.salesforceSectionCount, 3);
                assert.ok(_requester.default.isSalesforceViewMoreHidden);

              case 9:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('show formatted address if address field in salesforce', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var model, lastField;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                (0, _stubNativeService.stubNativeService)(['salesforce']); // salesforce

                model = this.get('model');
                this.set('model', _objectSpread(_objectSpread({}, model), {}, {
                  displayId: 3
                }));
                _context4.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::RequesterInfo @ticketModel={{this.model }} @listAppsFetched = {{true}}/>
                */
                {
                  id: "mpS0zYGZ",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/requester-info\",[],[[\"@ticketModel\",\"@listAppsFetched\"],[[23,0,[\"model\"]],true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                _context4.next = 7;
                return selectSalesforce();

              case 7:
                assert.equal(_requester.default.salesforceFieldsContent.length, 6);
                lastField = _requester.default.salesforceFieldsContent[_requester.default.salesforceFieldsContent.length - 1];
                assert.equal(lastField.key, "Formatted Address");
                assert.equal(lastField.value, "MailingStreet, MailingState, MailingCity, MailingCountry");

              case 11:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('show user not in salesforce if data not in salesforce', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var model;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                (0, _stubNativeService.stubNativeService)(['salesforce']); // salesforce

                model = this.get('model');
                this.set('model', _objectSpread(_objectSpread({}, model), {}, {
                  displayId: 6 // no data 

                }));
                _context5.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::RequesterInfo @ticketModel={{this.model }} @listAppsFetched = {{true}}/>
                */
                {
                  id: "mpS0zYGZ",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/requester-info\",[],[[\"@ticketModel\",\"@listAppsFetched\"],[[23,0,[\"model\"]],true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                _context5.next = 7;
                return selectSalesforce();

              case 7:
                assert.equal(_requester.default.salesforceInfo, "Cannot find Praveen in Salesforce");

              case 8:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('show error section in salesforce, if there is error', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var model;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                (0, _stubNativeService.stubNativeService)(['salesforce']); // salesforce

                model = this.get('model');
                this.set('model', _objectSpread(_objectSpread({}, model), {}, {
                  displayId: 500
                }));
                _context6.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::RequesterInfo @ticketModel={{this.model }} @listAppsFetched = {{true}}/>
                */
                {
                  id: "mpS0zYGZ",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/requester-info\",[],[[\"@ticketModel\",\"@listAppsFetched\"],[[23,0,[\"model\"]],true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                _context6.next = 7;
                return selectSalesforce();

              case 7:
                assert.equal(_requester.default.salesforceError, "Unknown server error. Please contact support@freshservice.com.");

              case 8:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
  });
});
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

define("freshservice/tests/integration/components/app-components/subject/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/sinon-context", "freshservice/tests/pages/components/module-tickets/detail", "freshservice/constants/ticket"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _sinonContext, _detail, _ticket) {
  "use strict";

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | app-components | subject', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.intl = this.owner.lookup("service:intl");
              this.store = this.owner.lookup('service:store');
              this.owner.lookup('router:main').setupRouter();
              this.server.loadFixtures('tickets');
              this.server.loadFixtures("users");
              this.server.loadFixtures("requesters");

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('should show subject, ticket icon, requester details, source, cc email list', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var _TICKET_TYPE_MAPPING$;

        var mockTicket, sourceMap, MockService;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.store.findRecord('ticket', 17);

              case 2:
                mockTicket = _context2.sent;
                this.model = mockTicket;
                this.iconName = (_TICKET_TYPE_MAPPING$ = _ticket.TICKET_TYPE_MAPPING[this.model.type]) === null || _TICKET_TYPE_MAPPING$ === void 0 ? void 0 : _TICKET_TYPE_MAPPING$.icon;
                this.ticketSourceMapping = _ticket.TICKET_SOURCE_MAPPING;
                sourceMap = new Map();
                sourceMap.set(1, "Email").set(2, "Portal").set(3, "Phone").set(4, "Chat").set(5, "Feedback Widget");

                MockService = /*#__PURE__*/function (_Ember$Service) {
                  _inherits(MockService, _Ember$Service);

                  var _super = _createSuper(MockService);

                  function MockService() {
                    var _this;

                    _classCallCheck(this, MockService);

                    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                      args[_key] = arguments[_key];
                    }

                    _this = _super.call.apply(_super, [this].concat(args));

                    _defineProperty(_assertThisInitialized(_this), "showForm", true);

                    _defineProperty(_assertThisInitialized(_this), "ticketSourceFieldValuesMap", sourceMap);

                    _defineProperty(_assertThisInitialized(_this), "fetchModuleFields", Object.freeze({
                      isRunning: false
                    }));

                    return _this;
                  }

                  return MockService;
                }(Ember.Service);

                window.__CLASSIC_OWN_CLASSES__.set(MockService, true);

                this.owner.unregister('service:moduleFields');
                this.owner.register('service:moduleFields', MockService);
                _context2.next = 14;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::Subject 
                                        @model              =   {{this.model}}
                                        @module				=	"tickets"
                                        @sourceMapping		=	{{this.ticketSourceMapping}} 
                                        @iconName			= 	{{this.iconName}} />
                */
                {
                  id: "h68oyIMy",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/subject\",[],[[\"@model\",\"@module\",\"@sourceMapping\",\"@iconName\"],[[23,0,[\"model\"]],\"tickets\",[23,0,[\"ticketSourceMapping\"]],[23,0,[\"iconName\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 14:
                assert.ok(_detail.default.ticketIcon, "Ticket icon is visible");
                assert.ok(_detail.default.ticketSubject, "Ticket subject is visible");
                assert.ok(_detail.default.ticketSource, "Ticket source is visible");
                assert.ok(_detail.default.ticketRequester, "Ticket requester is visible");

              case 18:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.skip)('should show requester hover card on hovering on requester name', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var _TICKET_TYPE_MAPPING$2;

        var mockTicket;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.store.findRecord('ticket', 17);

              case 2:
                mockTicket = _context3.sent;
                this.model = mockTicket;
                this.iconName = (_TICKET_TYPE_MAPPING$2 = _ticket.TICKET_TYPE_MAPPING[this.model.type]) === null || _TICKET_TYPE_MAPPING$2 === void 0 ? void 0 : _TICKET_TYPE_MAPPING$2.icon;
                this.ticketSourceMapping = _ticket.TICKET_SOURCE_MAPPING;
                this.requesterURL = "/users/".concat(this.model.requesterId);
                _context3.next = 9;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::Subject 
                                        @model              =   {{this.model}}
                                        @module				=	"tickets"
                                        @sourceMapping		=	{{this.ticketSourceMapping}} 
                                        @iconName			= 	{{this.iconName}} />
                */
                {
                  id: "h68oyIMy",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/subject\",[],[[\"@model\",\"@module\",\"@sourceMapping\",\"@iconName\"],[[23,0,[\"model\"]],\"tickets\",[23,0,[\"ticketSourceMapping\"]],[23,0,[\"iconName\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 9:
                _context3.next = 11;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleItilCommon::EmberTableComponents::RequesterCell
                                        @row            =   {{this.model}}
                                        @hasHoverTarget =   {{true}} 
                                        @field          =	"requester"
                                        @fieldId        =	"requesterId">
                                        <a href={{this.requesterURL}} class="requester-name link" target="_blank" rel="noopener noreferrer" data-test-id="requester-name"> {{this.model.requester.name}} </a> 
                                    </ModuleItilCommon::EmberTableComponents::RequesterCell>
                */
                {
                  id: "S00IaGxB",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-itil-common/ember-table-components/requester-cell\",[],[[\"@row\",\"@hasHoverTarget\",\"@field\",\"@fieldId\"],[[23,0,[\"model\"]],true,\"requester\",\"requesterId\"]],{\"statements\":[[0,\"\\n                        \"],[7,\"a\",true],[11,\"href\",[23,0,[\"requesterURL\"]]],[10,\"class\",\"requester-name link\"],[10,\"target\",\"_blank\"],[10,\"rel\",\"noopener noreferrer\"],[10,\"data-test-id\",\"requester-name\"],[8],[0,\" \"],[1,[23,0,[\"model\",\"requester\",\"name\"]],false],[0,\" \"],[9],[0,\" \\n                    \"]],\"parameters\":[]}]],\"hasEval\":false}",
                  meta: {}
                }));

              case 11:
                _context3.next = 13;
                return _detail.default.showRequesterHoverCard();

              case 13:
                assert.ok(_detail.default.requesterHoverCardVisible, 'Requester Hover card is visible');

              case 14:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should show SR icon and "Requested for" value for Service requests', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var _TICKET_TYPE_MAPPING$3;

        var mockTicket;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.store.findRecord('ticket', 16);

              case 2:
                mockTicket = _context4.sent;
                this.model = mockTicket;
                this.iconName = (_TICKET_TYPE_MAPPING$3 = _ticket.TICKET_TYPE_MAPPING[this.model.type]) === null || _TICKET_TYPE_MAPPING$3 === void 0 ? void 0 : _TICKET_TYPE_MAPPING$3.icon;
                this.ticketSourceMapping = _ticket.TICKET_SOURCE_MAPPING;
                _context4.next = 8;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::Subject 
                                        @model              =   {{this.model}}
                                        @module				=	"tickets"
                                        @sourceMapping		=	{{this.ticketSourceMapping}} 
                                        @iconName			= 	{{this.iconName}} />
                */
                {
                  id: "h68oyIMy",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/subject\",[],[[\"@model\",\"@module\",\"@sourceMapping\",\"@iconName\"],[[23,0,[\"model\"]],\"tickets\",[23,0,[\"ticketSourceMapping\"]],[23,0,[\"iconName\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 8:
                assert.ok(_detail.default.SRIconVisible, 'SR Icon is visible');
                assert.notOk(_detail.default.INCIconVisible, 'Incident Icon is not visible');

                if (this.model.requester.vipUser) {
                  assert.ok(_detail.default.requesterVIPBadge, 'Requester VIP icon is visible');
                } else {
                  assert.notOk(_detail.default.requesterVIPBadge, 'Requester VIP icon is not visible');
                }

                assert.ok(_detail.default.ticketRequestedForContainer, "Requested for is visible");

                if (this.model.requesterId === this.model.requestedForId) {
                  assert.equal(_detail.default.ticketRequestedForName, 'Self', 'Requested for name is Self');
                } else {
                  assert.notEqual(_detail.default.ticketRequestedForName, 'Self', 'Requested for name is not Self');
                }

                if (this.model.requestedFor.vipUser) {
                  assert.ok(_detail.default.requesterForVIPBadge, 'Requested for VIP icon is visible');
                } else {
                  assert.notOk(_detail.default.requesterForVIPBadge, 'Requested for VIP icon is not visible');
                }

              case 14:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.skip)('Show restore spam button for spam ticket', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var _TICKET_TYPE_MAPPING$4;

        var mockTicket;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this.store.findRecord('ticket', 19);

              case 2:
                mockTicket = _context5.sent;
                this.model = mockTicket;
                this.iconName = (_TICKET_TYPE_MAPPING$4 = _ticket.TICKET_TYPE_MAPPING[this.model.type]) === null || _TICKET_TYPE_MAPPING$4 === void 0 ? void 0 : _TICKET_TYPE_MAPPING$4.icon;
                this.ticketSourceMapping = _ticket.TICKET_SOURCE_MAPPING;
                _context5.next = 8;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::Subject 
                                        @model              =   {{this.model}}
                                        @module				=	"tickets"
                                        @sourceMapping		=	{{this.ticketSourceMapping}} 
                                        @iconName			= 	{{this.iconName}} />
                */
                {
                  id: "h68oyIMy",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/subject\",[],[[\"@model\",\"@module\",\"@sourceMapping\",\"@iconName\"],[[23,0,[\"model\"]],\"tickets\",[23,0,[\"ticketSourceMapping\"]],[23,0,[\"iconName\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 8:
                assert.ok(_detail.default.restoreSpamBadge, 'Unspam button is visible');
                assert.ok(_detail.default.ticketIconDisabled, 'Ticket icon garyed for Spammed ticket');
                _context5.next = 12;
                return _detail.default.restoreSpamBtnClick();

              case 12:
                assert.notOk(_detail.default.restoreSpamBadge, 'Unspam button is not visible');
                assert.notOk(_detail.default.ticketIconDisabled, 'Ticket icon grey removed for restored ticket');

              case 14:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.skip)('Show restore delete button for deleted ticket', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var _TICKET_TYPE_MAPPING$5;

        var mockTicket;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this.store.findRecord('ticket', 18);

              case 2:
                mockTicket = _context6.sent;
                this.model = mockTicket;
                this.iconName = (_TICKET_TYPE_MAPPING$5 = _ticket.TICKET_TYPE_MAPPING[this.model.type]) === null || _TICKET_TYPE_MAPPING$5 === void 0 ? void 0 : _TICKET_TYPE_MAPPING$5.icon;
                this.ticketSourceMapping = _ticket.TICKET_SOURCE_MAPPING;
                _context6.next = 8;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::Subject 
                                        @model              =   {{this.model}}
                                        @module				=	"tickets"
                                        @sourceMapping		=	{{this.ticketSourceMapping}} 
                                        @iconName			= 	{{this.iconName}} />
                */
                {
                  id: "h68oyIMy",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/subject\",[],[[\"@model\",\"@module\",\"@sourceMapping\",\"@iconName\"],[[23,0,[\"model\"]],\"tickets\",[23,0,[\"ticketSourceMapping\"]],[23,0,[\"iconName\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 8:
                assert.ok(_detail.default.restoreDeleteBadge, 'Restore delete button is visible');
                assert.ok(_detail.default.ticketIconDisabled, 'Ticket icon garyed for Deleted ticket');
                _context6.next = 12;
                return _detail.default.restoreDeleteBtnClick();

              case 12:
                assert.notOk(_detail.default.restoreDeleteBadge, 'Restore delete button is not visible');
                assert.notOk(_detail.default.ticketIconDisabled, 'Ticket icon gray removed for restored ticket');

              case 14:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/form-fields/textarea-field/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-page-object", "freshservice/constants/tickets/common"], function (_qunit, _emberQunit, _testHelpers, _emberCliPageObject, _common) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var PAGE = (0, _emberCliPageObject.create)({
    countText: (0, _emberCliPageObject.text)('[data-test-id=count]'),
    isCountVisible: (0, _emberCliPageObject.isVisible)('[data-test-id=count]')
  });
  var CONTENT = 'Test Data';
  var EXPECTED_TEXT = "".concat(CONTENT.length, " / ").concat(_common.MINI_PARA_MAX_CHAR);
  (0, _qunit.module)('Integration | Component | form-fields/textarea-field', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('Should show character count for mini paragraphs', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.setProperties({
                  object: {
                    test_para: CONTENT
                  },
                  propertyName: 'test_para',
                  schema: {
                    isMiniPara: true,
                    maxChar: _common.MINI_PARA_MAX_CHAR
                  }
                });
                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <FormFields::TextareaField 
                			@object			=	{{this.object}}
                			@schema			=	{{this.schema}}
                			@propertyName	=	{{this.propertyName}}
                		/>
                */
                {
                  id: "71hQ+dyJ",
                  block: "{\"symbols\":[],\"statements\":[[5,\"form-fields/textarea-field\",[],[[\"@object\",\"@schema\",\"@propertyName\"],[[23,0,[\"object\"]],[23,0,[\"schema\"]],[23,0,[\"propertyName\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.equal(PAGE.countText, EXPECTED_TEXT, 'count text visible for mini para with expected content');
                this.set('schema', 'isMiniPara', false);
                assert.notOk(PAGE.isCountVisible, 'count text hidden for regular para');

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/froala-editor-extended/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "sinon", "ember-local-storage/test-support/reset-storage", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-fetch", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/utils", "freshservice/constants/froala-editor/article", "freshservice/constants/froala-editor/with-canned-response", "freshservice/constants/tickets/bulk-actions", "freshservice/mirage/fixtures/canned-responses-with-details", "freshservice/mirage/fixtures/canned-response-folders", "freshservice/tests/pages/components/froala-editor/froala-editor-extended"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _sinon, _resetStorage, _intl, _stubFetch, _sinonContext, _utils, _article, _withCannedResponse, _bulkActions, _cannedResponsesWithDetails, _cannedResponseFolders, _froalaEditorExtended) {
  "use strict";

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var MOCK_DATA = {
    codeToInsert: 'Sample Code which will be inserted into froala editor',
    cannedResponseSearchText: 'sample',
    folderText: _cannedResponseFolders.default[1].name + ' (' + _cannedResponseFolders.default[1].responses_count + ')',
    emptyCannedResponse: {
      canned_responses: [],
      meta: {
        editable_ids: []
      }
    }
  };

  var getFieldOptions = function getFieldOptions() {
    return JSON.parse(JSON.stringify(_withCannedResponse.FROALA_TOOLBAR_OPTIONS_DEFAULT));
  };

  (0, _qunit.module)('Integration | Component | froala-editor-extended', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              Ember.set(this, 'store', this.owner.lookup('service:store')); // Mandatory to resolve such third party dependencies before rendering the component.

              _context.next = 3;
              return emberAutoImportDynamic("froala-editor");

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    hooks.afterEach(function () {
      window.localStorage.removeItem('storage:tickets/canned-response');
      (0, _resetStorage.default)();
    });
    (0, _qunit.test)('Should render froala editor', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var fieldOptions, model;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                fieldOptions = _article.FROALA_TOOLBAR_OPTIONS_ARTICLE_FORM.fieldOptions;
                model = this.store.createRecord('article');
                Ember.setProperties(this, {
                  model: model,
                  fieldOptions: fieldOptions
                });
                _context2.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<FormFields::TextareaField
                				@propertyName="description"
                				@object={{this.model}}
                				@fieldOptions={{this.fieldOptions}}
                		/>
                */
                {
                  id: "F7WP/civ",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\"],[5,\"form-fields/textarea-field\",[],[[\"@propertyName\",\"@object\",\"@fieldOptions\"],[\"description\",[23,0,[\"model\"]],[23,0,[\"fieldOptions\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                assert.ok(_froalaEditorExtended.default.hasFroalaEditor);

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should show canned response button when insertCannedResponse is present in toolbar buttons', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var _getFieldOptions, fieldOptions, model;

        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _getFieldOptions = getFieldOptions(), fieldOptions = _getFieldOptions.fieldOptions;
                fieldOptions.toolbarButtons.rightButtons.buttons = ['insertCannedResponse'];
                model = this.store.createRecord('ticket');
                Ember.setProperties(this, {
                  model: model,
                  fieldOptions: fieldOptions
                });
                _context3.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<FormFields::TextareaField
                				@propertyName="description"
                				@object={{this.model}}
                				@fieldOptions={{this.fieldOptions}}
                		/>
                */
                {
                  id: "F7WP/civ",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\"],[5,\"form-fields/textarea-field\",[],[[\"@propertyName\",\"@object\",\"@fieldOptions\"],[\"description\",[23,0,[\"model\"]],[23,0,[\"fieldOptions\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                _context3.next = 8;
                return (0, _utils.default)();

              case 8:
                assert.ok(_froalaEditorExtended.default.hasCannedResponseButton);

              case 9:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should not show canned response button when insertCannedResponse is not present in toolbar buttons', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var _getFieldOptions2, fieldOptions, model;

        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _getFieldOptions2 = getFieldOptions(), fieldOptions = _getFieldOptions2.fieldOptions;
                fieldOptions.toolbarButtons.rightButtons.buttons = [];
                model = this.store.createRecord('ticket');
                Ember.setProperties(this, {
                  model: model,
                  fieldOptions: fieldOptions
                });
                _context4.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<FormFields::TextareaField
                				@propertyName="description"
                				@object={{this.model}}
                				@fieldOptions={{this.fieldOptions}}
                		/>
                */
                {
                  id: "F7WP/civ",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\"],[5,\"form-fields/textarea-field\",[],[[\"@propertyName\",\"@object\",\"@fieldOptions\"],[\"description\",[23,0,[\"model\"]],[23,0,[\"fieldOptions\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                _context4.next = 8;
                return (0, _utils.default)();

              case 8:
                assert.notOk(_froalaEditorExtended.default.hasCannedResponseButton);

              case 9:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('On click of canned response should open side panel', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var _getFieldOptions3, fieldOptions, model;

        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _getFieldOptions3 = getFieldOptions(), fieldOptions = _getFieldOptions3.fieldOptions;
                fieldOptions.toolbarButtons.rightButtons.buttons = ['insertCannedResponse'];
                fieldOptions.backButtonText = 'fs.common.back';
                model = this.store.createRecord('ticket');
                Ember.setProperties(this, {
                  model: model,
                  fieldOptions: fieldOptions
                });
                _context5.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<FormFields::TextareaField
                				@propertyName="description"
                				@object={{this.model}}
                				@fieldOptions={{this.fieldOptions}}
                		/>
                */
                {
                  id: "F7WP/civ",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\"],[5,\"form-fields/textarea-field\",[],[[\"@propertyName\",\"@object\",\"@fieldOptions\"],[\"description\",[23,0,[\"model\"]],[23,0,[\"fieldOptions\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context5.next = 9;
                return (0, _utils.default)();

              case 9:
                _context5.next = 11;
                return _froalaEditorExtended.default.openCannedResponseModal();

              case 11:
                assert.ok(_froalaEditorExtended.default.hasCannedResponseModal);

              case 12:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should call callback when custom event is true and callback is passed', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var fieldOptions, model;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                fieldOptions = _objectSpread(_objectSpread({}, getFieldOptions().fieldOptions), {}, {
                  hasCustomEvents: true,
                  customEventsArray: [{
                    event: _bulkActions.EVENT_INSERT_CANNED_RESPONSE,
                    callback: _sinon.default.spy()
                  }],
                  backButtonText: 'fs.common.back'
                });
                fieldOptions.toolbarButtons.rightButtons.buttons = ['insertCannedResponse'];
                model = this.store.createRecord('ticket');
                Ember.setProperties(this, {
                  model: model,
                  fieldOptions: fieldOptions
                });
                _context6.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<FormFields::TextareaField
                				@propertyName="description"
                				@object={{this.model}}
                				@fieldOptions={{this.fieldOptions}}
                		/>
                */
                {
                  id: "F7WP/civ",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\"],[5,\"form-fields/textarea-field\",[],[[\"@propertyName\",\"@object\",\"@fieldOptions\"],[\"description\",[23,0,[\"model\"]],[23,0,[\"fieldOptions\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                _context6.next = 8;
                return (0, _utils.default)();

              case 8:
                _context6.next = 10;
                return _froalaEditorExtended.default.openCannedResponseModal();

              case 10:
                _context6.next = 12;
                return _froalaEditorExtended.default.insertCannedResponseContent();

              case 12:
                assert.ok(fieldOptions.customEventsArray[0].callback.calledOnce);

              case 13:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should be able to close the canned response modal', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var _getFieldOptions4, fieldOptions, model;

        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _getFieldOptions4 = getFieldOptions(), fieldOptions = _getFieldOptions4.fieldOptions;
                fieldOptions.toolbarButtons.rightButtons.buttons = ['insertCannedResponse'];
                fieldOptions.backButtonText = 'fs.common.back';
                model = this.store.createRecord('ticket');
                Ember.setProperties(this, {
                  model: model,
                  fieldOptions: fieldOptions
                });
                _context7.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<FormFields::TextareaField
                				@propertyName="description"
                				@object={{this.model}}
                				@fieldOptions={{this.fieldOptions}}
                		/>
                */
                {
                  id: "F7WP/civ",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\"],[5,\"form-fields/textarea-field\",[],[[\"@propertyName\",\"@object\",\"@fieldOptions\"],[\"description\",[23,0,[\"model\"]],[23,0,[\"fieldOptions\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context7.next = 9;
                return (0, _utils.default)();

              case 9:
                _context7.next = 11;
                return _froalaEditorExtended.default.openCannedResponseModal();

              case 11:
                assert.ok(_froalaEditorExtended.default.hasCannedResponseModal);
                _context7.next = 14;
                return _froalaEditorExtended.default.closeCannedResponseModal();

              case 14:
                assert.notOk(_froalaEditorExtended.default.hasCannedResponseModal);

              case 15:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x6) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should show recently used canned responses from second time onwards', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var _getFieldOptions5, fieldOptions, model;

        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _getFieldOptions5 = getFieldOptions(), fieldOptions = _getFieldOptions5.fieldOptions;
                fieldOptions.toolbarButtons.rightButtons.buttons = ['insertCannedResponse'];
                fieldOptions.backButtonText = 'fs.common.back';
                model = this.store.createRecord('ticket');
                Ember.setProperties(this, {
                  model: model,
                  fieldOptions: fieldOptions
                });
                _context8.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<FormFields::TextareaField
                				@propertyName="description"
                				@object={{this.model}}
                				@fieldOptions={{this.fieldOptions}}
                		/>
                */
                {
                  id: "F7WP/civ",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\"],[5,\"form-fields/textarea-field\",[],[[\"@propertyName\",\"@object\",\"@fieldOptions\"],[\"description\",[23,0,[\"model\"]],[23,0,[\"fieldOptions\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context8.next = 9;
                return (0, _utils.default)();

              case 9:
                _context8.next = 11;
                return _froalaEditorExtended.default.openCannedResponseModal();

              case 11:
                assert.notOk(_froalaEditorExtended.default.hasRecentCannedResponses);
                _context8.next = 14;
                return _froalaEditorExtended.default.insertCannedResponseContent();

              case 14:
                _context8.next = 16;
                return _froalaEditorExtended.default.openCannedResponseModal();

              case 16:
                assert.ok(_froalaEditorExtended.default.hasRecentCannedResponses);

              case 17:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x7) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should be able load selected canned response details when canned response is selected', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        var _getFieldOptions6, fieldOptions, model, selectedCannedResponseContent;

        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _getFieldOptions6 = getFieldOptions(), fieldOptions = _getFieldOptions6.fieldOptions;
                fieldOptions.toolbarButtons.rightButtons.buttons = ['insertCannedResponse'];
                fieldOptions.backButtonText = 'fs.common.back';
                model = this.store.createRecord('ticket');
                Ember.setProperties(this, {
                  model: model,
                  fieldOptions: fieldOptions
                });
                _context9.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<FormFields::TextareaField
                				@propertyName="description"
                				@object={{this.model}}
                				@fieldOptions={{this.fieldOptions}}
                		/>
                */
                {
                  id: "F7WP/civ",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\"],[5,\"form-fields/textarea-field\",[],[[\"@propertyName\",\"@object\",\"@fieldOptions\"],[\"description\",[23,0,[\"model\"]],[23,0,[\"fieldOptions\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context9.next = 9;
                return (0, _utils.default)();

              case 9:
                _context9.next = 11;
                return _froalaEditorExtended.default.openCannedResponseModal();

              case 11:
                _context9.next = 13;
                return _froalaEditorExtended.default.toggleSelectedCannedResponse();

              case 13:
                selectedCannedResponseContent = _froalaEditorExtended.default.selectedCannedResponseContent.objectAt(0).content;
                assert.equal(selectedCannedResponseContent, _cannedResponsesWithDetails.default[0].content);

              case 15:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x8) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should be able to close the selected canned response details section ofter its opened', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var _getFieldOptions7, fieldOptions, model, selectedCannedResponseContent;

        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _getFieldOptions7 = getFieldOptions(), fieldOptions = _getFieldOptions7.fieldOptions;
                fieldOptions.toolbarButtons.rightButtons.buttons = ['insertCannedResponse'];
                fieldOptions.backButtonText = 'fs.common.back';
                model = this.store.createRecord('ticket');
                Ember.setProperties(this, {
                  model: model,
                  fieldOptions: fieldOptions
                });
                _context10.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<FormFields::TextareaField
                				@propertyName="description"
                				@object={{this.model}}
                				@fieldOptions={{this.fieldOptions}}
                		/>
                */
                {
                  id: "F7WP/civ",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\"],[5,\"form-fields/textarea-field\",[],[[\"@propertyName\",\"@object\",\"@fieldOptions\"],[\"description\",[23,0,[\"model\"]],[23,0,[\"fieldOptions\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context10.next = 9;
                return (0, _utils.default)();

              case 9:
                _context10.next = 11;
                return _froalaEditorExtended.default.openCannedResponseModal();

              case 11:
                _context10.next = 13;
                return _froalaEditorExtended.default.toggleSelectedCannedResponse();

              case 13:
                selectedCannedResponseContent = _froalaEditorExtended.default.selectedCannedResponseContent.objectAt(0);
                assert.equal(selectedCannedResponseContent.content, _cannedResponsesWithDetails.default[0].content);
                _context10.next = 17;
                return _froalaEditorExtended.default.toggleSelectedCannedResponse();

              case 17:
                assert.equal(selectedCannedResponseContent.content, '');

              case 18:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x9) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should be able to search canned response', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        var _getFieldOptions8, fieldOptions, model;

        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _getFieldOptions8 = getFieldOptions(), fieldOptions = _getFieldOptions8.fieldOptions;
                fieldOptions.toolbarButtons.rightButtons.buttons = ['insertCannedResponse'];
                fieldOptions.backButtonText = 'fs.common.back';
                model = this.store.createRecord('ticket');
                Ember.setProperties(this, {
                  model: model,
                  fieldOptions: fieldOptions
                });
                _context11.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<FormFields::TextareaField
                				@propertyName="description"
                				@object={{this.model}}
                				@fieldOptions={{this.fieldOptions}}
                		/>
                */
                {
                  id: "F7WP/civ",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\"],[5,\"form-fields/textarea-field\",[],[[\"@propertyName\",\"@object\",\"@fieldOptions\"],[\"description\",[23,0,[\"model\"]],[23,0,[\"fieldOptions\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context11.next = 9;
                return (0, _utils.default)();

              case 9:
                _context11.next = 11;
                return _froalaEditorExtended.default.openCannedResponseModal();

              case 11:
                assert.ok(_froalaEditorExtended.default.hasCannedResponseModal);
                _context11.next = 14;
                return _froalaEditorExtended.default.fillCannedResponseSearch(MOCK_DATA.cannedResponseSearchText);

              case 14:
                _context11.next = 16;
                return _froalaEditorExtended.default.searchCannedResponse();

              case 16:
                assert.ok(_froalaEditorExtended.default.hasRecentCannedResponseItemsCount > 0);

              case 17:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x10) {
        return _ref12.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should show empty state when search results are empty', /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        var _getFieldOptions9, fieldOptions, model, fetchStub;

        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                _getFieldOptions9 = getFieldOptions(), fieldOptions = _getFieldOptions9.fieldOptions;
                fieldOptions.toolbarButtons.rightButtons.buttons = ['insertCannedResponse'];
                fieldOptions.backButtonText = 'fs.common.back';
                model = this.store.createRecord('ticket');
                Ember.setProperties(this, {
                  model: model,
                  fieldOptions: fieldOptions
                });
                fetchStub = (0, _stubFetch.stubFetch)();
                fetchStub.withArgs('canned_responses/search?search_string=' + MOCK_DATA.cannedResponseSearchText).returns(Promise.resolve(MOCK_DATA.emptyCannedResponse));
                fetchStub.withArgs('canned_response_folders/1/canned_responses?insert_to_ticket=true').returns(Promise.resolve(MOCK_DATA.emptyCannedResponse));
                _context12.next = 10;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<FormFields::TextareaField
                				@propertyName="description"
                				@object={{this.model}}
                				@fieldOptions={{this.fieldOptions}}
                		/>
                */
                {
                  id: "F7WP/civ",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\"],[5,\"form-fields/textarea-field\",[],[[\"@propertyName\",\"@object\",\"@fieldOptions\"],[\"description\",[23,0,[\"model\"]],[23,0,[\"fieldOptions\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 10:
                _context12.next = 12;
                return (0, _utils.default)();

              case 12:
                _context12.next = 14;
                return _froalaEditorExtended.default.openCannedResponseModal();

              case 14:
                assert.ok(_froalaEditorExtended.default.hasCannedResponseModal);
                _context12.next = 17;
                return _froalaEditorExtended.default.fillCannedResponseSearch(MOCK_DATA.cannedResponseSearchText);

              case 17:
                _context12.next = 19;
                return _froalaEditorExtended.default.searchCannedResponse();

              case 19:
                assert.notOk(_froalaEditorExtended.default.hasCannedResponseItems);
                assert.ok(_froalaEditorExtended.default.hasEmptyCannedResponses);

              case 21:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x11) {
        return _ref13.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should open legacy url when click on new canned response when search results are empty', /*#__PURE__*/function () {
      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
        var _getFieldOptions10, fieldOptions, model, sinon, fetchStub;

        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                _getFieldOptions10 = getFieldOptions(), fieldOptions = _getFieldOptions10.fieldOptions;
                fieldOptions.toolbarButtons.rightButtons.buttons = ['insertCannedResponse'];
                fieldOptions.backButtonText = 'fs.common.back';
                model = this.store.createRecord('ticket');
                Ember.setProperties(this, {
                  model: model,
                  fieldOptions: fieldOptions
                });
                sinon = (0, _sinonContext.getSinonContext)();
                sinon.stub(window, 'open');
                fetchStub = (0, _stubFetch.stubFetch)();
                fetchStub.withArgs('canned_responses/search?search_string=' + MOCK_DATA.cannedResponseSearchText).returns(Promise.resolve(MOCK_DATA.emptyCannedResponse));
                fetchStub.withArgs('canned_response_folders/1/canned_responses?insert_to_ticket=true').returns(Promise.resolve(MOCK_DATA.emptyCannedResponse));
                _context13.next = 12;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<FormFields::TextareaField
                				@propertyName="description"
                				@object={{this.model}}
                				@fieldOptions={{this.fieldOptions}}
                		/>
                */
                {
                  id: "F7WP/civ",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\"],[5,\"form-fields/textarea-field\",[],[[\"@propertyName\",\"@object\",\"@fieldOptions\"],[\"description\",[23,0,[\"model\"]],[23,0,[\"fieldOptions\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 12:
                _context13.next = 14;
                return (0, _utils.default)();

              case 14:
                _context13.next = 16;
                return _froalaEditorExtended.default.openCannedResponseModal();

              case 16:
                assert.ok(_froalaEditorExtended.default.hasCannedResponseModal);
                _context13.next = 19;
                return _froalaEditorExtended.default.fillCannedResponseSearch(MOCK_DATA.cannedResponseSearchText);

              case 19:
                _context13.next = 21;
                return _froalaEditorExtended.default.searchCannedResponse();

              case 21:
                assert.notOk(_froalaEditorExtended.default.hasCannedResponseItems);
                assert.ok(_froalaEditorExtended.default.hasEmptyCannedResponses);
                _context13.next = 25;
                return _froalaEditorExtended.default.newCannedResponse();

              case 25:
                assert.ok(window.open.calledWithMatch('helpdesk/canned_responses/folders'));

              case 26:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      return function (_x12) {
        return _ref14.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should open legacy url when click on new canned response from header', /*#__PURE__*/function () {
      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {
        var _getFieldOptions11, fieldOptions, model, sinon, fetchStub;

        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                _getFieldOptions11 = getFieldOptions(), fieldOptions = _getFieldOptions11.fieldOptions;
                fieldOptions.toolbarButtons.rightButtons.buttons = ['insertCannedResponse'];
                fieldOptions.backButtonText = 'fs.common.back';
                model = this.store.createRecord('ticket');
                Ember.setProperties(this, {
                  model: model,
                  fieldOptions: fieldOptions
                });
                sinon = (0, _sinonContext.getSinonContext)();
                sinon.stub(window, 'open');
                fetchStub = (0, _stubFetch.stubFetch)();
                fetchStub.withArgs('canned_response_folders/1/canned_responses?insert_to_ticket=true').returns(Promise.resolve(MOCK_DATA.emptyCannedResponse));
                _context14.next = 11;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<FormFields::TextareaField
                				@propertyName="description"
                				@object={{this.model}}
                				@fieldOptions={{this.fieldOptions}}
                		/>
                */
                {
                  id: "F7WP/civ",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\"],[5,\"form-fields/textarea-field\",[],[[\"@propertyName\",\"@object\",\"@fieldOptions\"],[\"description\",[23,0,[\"model\"]],[23,0,[\"fieldOptions\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 11:
                _context14.next = 13;
                return (0, _utils.default)();

              case 13:
                _context14.next = 15;
                return _froalaEditorExtended.default.openCannedResponseModal();

              case 15:
                assert.ok(_froalaEditorExtended.default.hasCannedResponseModal);
                _context14.next = 18;
                return _froalaEditorExtended.default.newCannedResponseFromHeader();

              case 18:
                assert.ok(window.open.calledWithMatch('helpdesk/canned_responses/folders'));

              case 19:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      return function (_x13) {
        return _ref15.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should be able to select folder from dropdown', /*#__PURE__*/function () {
      var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {
        var _getFieldOptions12, fieldOptions, model;

        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                _getFieldOptions12 = getFieldOptions(), fieldOptions = _getFieldOptions12.fieldOptions;
                fieldOptions.toolbarButtons.rightButtons.buttons = ['insertCannedResponse'];
                fieldOptions.backButtonText = 'fs.common.back';
                model = this.store.createRecord('ticket');
                Ember.setProperties(this, {
                  model: model,
                  fieldOptions: fieldOptions
                });
                _context15.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<FormFields::TextareaField
                				@propertyName="description"
                				@object={{this.model}}
                				@fieldOptions={{this.fieldOptions}}
                		/>
                */
                {
                  id: "F7WP/civ",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\"],[5,\"form-fields/textarea-field\",[],[[\"@propertyName\",\"@object\",\"@fieldOptions\"],[\"description\",[23,0,[\"model\"]],[23,0,[\"fieldOptions\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context15.next = 9;
                return (0, _utils.default)();

              case 9:
                _context15.next = 11;
                return _froalaEditorExtended.default.openCannedResponseModal();

              case 11:
                _context15.next = 13;
                return _froalaEditorExtended.default.folderDropdownTrigger();

              case 13:
                _context15.next = 15;
                return _froalaEditorExtended.default.actionChoiceSelectFromFolderDropdown.objectAt(1).click();

              case 15:
                assert.equal(_froalaEditorExtended.default.selectFolderText, MOCK_DATA.folderText);

              case 16:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      return function (_x14) {
        return _ref16.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should show code insert button when codeInsert is present in toolbar buttons', /*#__PURE__*/function () {
      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(assert) {
        var _getFieldOptions13, fieldOptions, model;

        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                _getFieldOptions13 = getFieldOptions(), fieldOptions = _getFieldOptions13.fieldOptions;
                fieldOptions.toolbarButtons = ['codeInsert'];
                model = this.store.createRecord('ticket');
                Ember.setProperties(this, {
                  model: model,
                  fieldOptions: fieldOptions
                });
                _context16.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<FormFields::TextareaField
                				@propertyName="description"
                				@object={{this.model}}
                				@fieldOptions={{this.fieldOptions}}
                		/>
                */
                {
                  id: "F7WP/civ",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\"],[5,\"form-fields/textarea-field\",[],[[\"@propertyName\",\"@object\",\"@fieldOptions\"],[\"description\",[23,0,[\"model\"]],[23,0,[\"fieldOptions\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                _context16.next = 8;
                return (0, _utils.default)();

              case 8:
                assert.ok(_froalaEditorExtended.default.hasCodeInsertToolbarItem);

              case 9:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      return function (_x15) {
        return _ref17.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should not show code insert button when codeInsert is not present in toolbar buttons', /*#__PURE__*/function () {
      var _ref18 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(assert) {
        var _getFieldOptions14, fieldOptions, model;

        return regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                _getFieldOptions14 = getFieldOptions(), fieldOptions = _getFieldOptions14.fieldOptions;
                fieldOptions.toolbarButtons = [];
                model = this.store.createRecord('ticket');
                Ember.setProperties(this, {
                  model: model,
                  fieldOptions: fieldOptions
                });
                _context17.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<FormFields::TextareaField
                				@propertyName="description"
                				@object={{this.model}}
                				@fieldOptions={{this.fieldOptions}}
                		/>
                */
                {
                  id: "F7WP/civ",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\"],[5,\"form-fields/textarea-field\",[],[[\"@propertyName\",\"@object\",\"@fieldOptions\"],[\"description\",[23,0,[\"model\"]],[23,0,[\"fieldOptions\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                _context17.next = 8;
                return (0, _utils.default)();

              case 8:
                assert.notOk(_froalaEditorExtended.default.hasCodeInsertToolbarItem);

              case 9:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      return function (_x16) {
        return _ref18.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('On click of insert code menu item should open modal to insert code', /*#__PURE__*/function () {
      var _ref19 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(assert) {
        var _getFieldOptions15, fieldOptions, model;

        return regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                _getFieldOptions15 = getFieldOptions(), fieldOptions = _getFieldOptions15.fieldOptions;
                fieldOptions.toolbarButtons = ['codeInsert'];
                model = this.store.createRecord('ticket');
                Ember.setProperties(this, {
                  model: model,
                  fieldOptions: fieldOptions
                });
                _context18.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<FormFields::TextareaField
                				@propertyName="description"
                				@object={{this.model}}
                				@fieldOptions={{this.fieldOptions}}
                		/>
                */
                {
                  id: "F7WP/civ",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\"],[5,\"form-fields/textarea-field\",[],[[\"@propertyName\",\"@object\",\"@fieldOptions\"],[\"description\",[23,0,[\"model\"]],[23,0,[\"fieldOptions\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                _context18.next = 8;
                return (0, _utils.default)();

              case 8:
                _context18.next = 10;
                return _froalaEditorExtended.default.openCodeInsertModal();

              case 10:
                assert.ok(_froalaEditorExtended.default.hasCodeInsertModal);

              case 11:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      return function (_x17) {
        return _ref19.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should be able to close the code insert modal', /*#__PURE__*/function () {
      var _ref20 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19(assert) {
        var _getFieldOptions16, fieldOptions, model;

        return regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                _getFieldOptions16 = getFieldOptions(), fieldOptions = _getFieldOptions16.fieldOptions;
                fieldOptions.toolbarButtons = ['codeInsert'];
                model = this.store.createRecord('ticket');
                Ember.setProperties(this, {
                  model: model,
                  fieldOptions: fieldOptions
                });
                _context19.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<FormFields::TextareaField
                				@propertyName="description"
                				@object={{this.model}}
                				@fieldOptions={{this.fieldOptions}}
                		/>
                */
                {
                  id: "F7WP/civ",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\"],[5,\"form-fields/textarea-field\",[],[[\"@propertyName\",\"@object\",\"@fieldOptions\"],[\"description\",[23,0,[\"model\"]],[23,0,[\"fieldOptions\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                _context19.next = 8;
                return (0, _utils.default)();

              case 8:
                _context19.next = 10;
                return _froalaEditorExtended.default.openCodeInsertModal();

              case 10:
                assert.ok(_froalaEditorExtended.default.hasCodeInsertModal);
                _context19.next = 13;
                return _froalaEditorExtended.default.closeCodeInsertModal();

              case 13:
                assert.notOk(_froalaEditorExtended.default.hasCodeInsertModal);

              case 14:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19, this);
      }));

      return function (_x18) {
        return _ref20.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should be able to insert code into editor', /*#__PURE__*/function () {
      var _ref21 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20(assert) {
        var _getFieldOptions17, fieldOptions, model;

        return regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                _getFieldOptions17 = getFieldOptions(), fieldOptions = _getFieldOptions17.fieldOptions;
                fieldOptions.toolbarButtons = ['codeInsert'];
                model = this.store.createRecord('ticket');
                Ember.setProperties(this, {
                  model: model,
                  fieldOptions: fieldOptions
                });
                _context20.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<FormFields::TextareaField
                				@propertyName="description"
                				@object={{this.model}}
                				@fieldOptions={{this.fieldOptions}}
                		/>
                */
                {
                  id: "F7WP/civ",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\"],[5,\"form-fields/textarea-field\",[],[[\"@propertyName\",\"@object\",\"@fieldOptions\"],[\"description\",[23,0,[\"model\"]],[23,0,[\"fieldOptions\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                _context20.next = 8;
                return (0, _utils.default)();

              case 8:
                _context20.next = 10;
                return _froalaEditorExtended.default.openCodeInsertModal();

              case 10:
                assert.ok(_froalaEditorExtended.default.hasCodeInsertModal);
                _context20.next = 13;
                return _froalaEditorExtended.default.enterCode(MOCK_DATA.codeToInsert);

              case 13:
                _context20.next = 15;
                return _froalaEditorExtended.default.saveCodetoEditor();

              case 15:
                assert.equal(_froalaEditorExtended.default.editorContent, MOCK_DATA.codeToInsert);

              case 16:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20, this);
      }));

      return function (_x19) {
        return _ref21.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should be able to open code insert modal with selected code box', /*#__PURE__*/function () {
      var _ref22 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21(assert) {
        var _getFieldOptions18, fieldOptions, model;

        return regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                _getFieldOptions18 = getFieldOptions(), fieldOptions = _getFieldOptions18.fieldOptions;
                fieldOptions.toolbarButtons = ['codeInsert'];
                model = this.store.createRecord('ticket');
                Ember.setProperties(this, {
                  model: model,
                  fieldOptions: fieldOptions
                });
                _context21.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<FormFields::TextareaField
                				@propertyName="description"
                				@object={{this.model}}
                				@fieldOptions={{this.fieldOptions}}
                		/>
                */
                {
                  id: "F7WP/civ",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\"],[5,\"form-fields/textarea-field\",[],[[\"@propertyName\",\"@object\",\"@fieldOptions\"],[\"description\",[23,0,[\"model\"]],[23,0,[\"fieldOptions\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                _context21.next = 8;
                return (0, _utils.default)();

              case 8:
                _context21.next = 10;
                return _froalaEditorExtended.default.openCodeInsertModal();

              case 10:
                assert.ok(_froalaEditorExtended.default.hasCodeInsertModal);
                _context21.next = 13;
                return _froalaEditorExtended.default.enterCode(MOCK_DATA.codeToInsert);

              case 13:
                _context21.next = 15;
                return _froalaEditorExtended.default.saveCodetoEditor();

              case 15:
                assert.equal(_froalaEditorExtended.default.editorContent, MOCK_DATA.codeToInsert);
                _context21.next = 18;
                return _froalaEditorExtended.default.clickHightedCodeFromEditor();

              case 18:
                assert.ok(_froalaEditorExtended.default.hasCodeInsertModal);

              case 19:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21, this);
      }));

      return function (_x20) {
        return _ref22.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should be able to delete selected code box', /*#__PURE__*/function () {
      var _ref23 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22(assert) {
        var _getFieldOptions19, fieldOptions, model;

        return regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                _getFieldOptions19 = getFieldOptions(), fieldOptions = _getFieldOptions19.fieldOptions;
                fieldOptions.toolbarButtons = ['codeInsert'];
                model = this.store.createRecord('ticket');
                Ember.setProperties(this, {
                  model: model,
                  fieldOptions: fieldOptions
                });
                _context22.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<FormFields::TextareaField
                				@propertyName="description"
                				@object={{this.model}}
                				@fieldOptions={{this.fieldOptions}}
                		/>
                */
                {
                  id: "F7WP/civ",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\"],[5,\"form-fields/textarea-field\",[],[[\"@propertyName\",\"@object\",\"@fieldOptions\"],[\"description\",[23,0,[\"model\"]],[23,0,[\"fieldOptions\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                _context22.next = 8;
                return (0, _utils.default)();

              case 8:
                _context22.next = 10;
                return _froalaEditorExtended.default.openCodeInsertModal();

              case 10:
                assert.ok(_froalaEditorExtended.default.hasCodeInsertModal);
                _context22.next = 13;
                return _froalaEditorExtended.default.enterCode(MOCK_DATA.codeToInsert);

              case 13:
                _context22.next = 15;
                return _froalaEditorExtended.default.saveCodetoEditor();

              case 15:
                assert.equal(_froalaEditorExtended.default.editorContent, MOCK_DATA.codeToInsert);
                _context22.next = 18;
                return _froalaEditorExtended.default.clickHightedCodeFromEditor();

              case 18:
                _context22.next = 20;
                return _froalaEditorExtended.default.deleteSelectedCodeFromEditor();

              case 20:
                assert.notOk(_froalaEditorExtended.default.hasCodeInsertModal);
                assert.notOk(_froalaEditorExtended.default.hasHightedCodeFromEditor);

              case 22:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22, this);
      }));

      return function (_x21) {
        return _ref23.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-agent-approval/list/component-test", ["qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "ember-qunit", "freshservice/tests/lib/sinon-context", "freshservice/tests/pages/components/module-agent-approval/approvals"], function (_qunit, _testHelpers, _testSupport, _intl, _emberQunit, _sinonContext, _approvals) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function renderComponent() {
    return _renderComponent.apply(this, arguments);
  }

  function _renderComponent() {
    _renderComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleAgentApproval::List />
              */
              {
                id: "mlsO9uCJ",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-agent-approval/list\",[],[[],[]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));
    return _renderComponent.apply(this, arguments);
  }

  (0, _qunit.module)('Integration | Component | module-agent-approval | list', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.server.createList('approval', 10);

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('checking the default approval title', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleAgentApproval::List />
                */
                {
                  id: "mlsO9uCJ",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-agent-approval/list\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.equal(_approvals.default.allApprovals, "My Approvals");

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('on click of historic tab change, ', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var router;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                router = this.owner.lookup("router:main");
                router.location = {
                  concreteImplementation: {
                    location: {
                      hash: '#historical_approvals'
                    }
                  },
                  onUpdateURL: function onUpdateURL() {}
                };
                router.setupRouter();
                _context3.next = 5;
                return renderComponent();

              case 5:
                _context3.next = 7;
                return _approvals.default.historicApproval();

              case 7:
                assert.ok(_approvals.default.checkActiveClass);

              case 8:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-ams/bulk-actions/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "sinon", "ember-cli-mirage/test-support", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/spy-flash-message", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/stub-current-account", "freshservice/mirage/fixtures/alerts", "freshservice/tests/pages/components/module-ams/bulk-actions", "freshservice/constants/ticket", "freshservice/mirage/fixtures/tickets-search-results"], function (_qunit, _emberQunit, _testHelpers, _sinon, _testSupport, _sinonContext, _spyFlashMessage, _intl, _stubCurrentUser, _stubCurrentAccount, _alerts, _bulkActions, _ticket, _ticketsSearchResults) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

  function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  var TICKET_PRIORITY_DROPDOWN = {
    LOW: 0,
    MEDIUM: 1,
    HIGH: 2,
    URGENT: 3
  };
  var TICKET_STATUS_DROPDOWN = {
    OPEN: 0,
    PENDING: 1,
    RESOLVED: 2,
    CLOSED: 3
  };

  var GET_TEST_ALERTS = function GET_TEST_ALERTS() {
    var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    var filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (a) {
      return a;
    };
    return Ember.A(_toConsumableArray(_alerts.default.filter(filter).slice(0, count).map(function (alert) {
      return Ember.Object.create(alert);
    })));
  };

  function renderComponent() {
    return _renderComponent.apply(this, arguments);
  }

  function _renderComponent() {
    _renderComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16() {
      return regeneratorRuntime.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              _context16.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleAms::BulkActions
              		@enabled									  = {{enabled}}
              		@ticketStatuses             = {{ticketStatuses}}
              		@dropdownHorizontalPosition = "left"
              		@bulkActionsCallback 				= {{bulkActionsCallback}}
              		@model 								 		  = {{selectedRows}}
              		@showResolve								= {{true}}
              	/>
              */
              {
                id: "MbsqU0Uo",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-ams/bulk-actions\",[],[[\"@enabled\",\"@ticketStatuses\",\"@dropdownHorizontalPosition\",\"@bulkActionsCallback\",\"@model\",\"@showResolve\"],[[22,\"enabled\"],[22,\"ticketStatuses\"],\"left\",[22,\"bulkActionsCallback\"],[22,\"selectedRows\"],true]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16);
    }));
    return _renderComponent.apply(this, arguments);
  }

  function createNewIncident() {
    return _createNewIncident.apply(this, arguments);
  } // module("Integration | Component | module-ams | bulk-actions", function (hooks) {


  function _createNewIncident() {
    _createNewIncident = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {
      return regeneratorRuntime.wrap(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              _context17.next = 2;
              return renderComponent();

            case 2:
              _context17.next = 4;
              return _bulkActions.default.clickNewIncRadio();

            case 4:
              _context17.next = 6;
              return _bulkActions.default.fillNewIncSubject("New test incident");

            case 6:
              _context17.next = 8;
              return _bulkActions.default.fillDescription("New test incident description");

            case 8:
              _context17.next = 10;
              return _bulkActions.default.formUtils.selectSingle("priority", TICKET_PRIORITY_DROPDOWN.LOW);

            case 10:
              _context17.next = 12;
              return _bulkActions.default.formUtils.selectSingle("status", TICKET_STATUS_DROPDOWN.OPEN);

            case 12:
              _context17.next = 14;
              return _bulkActions.default.clickNewIncAssociateBtn();

            case 14:
            case "end":
              return _context17.stop();
          }
        }
      }, _callee17);
    }));
    return _createNewIncident.apply(this, arguments);
  }

  (0, _qunit.skip)("Integration | Component | module-ams | bulk-actions", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    hooks.beforeEach(function () {
      (0, _stubCurrentUser.stubCurrentUser)();
      (0, _stubCurrentAccount.stubCurrentAccount)();
      this.server.loadFixtures("tickets_search_results");
      this.owner.register("service:modal", Ember.Service.extend({
        showAssociationModal: true
      }));
      this.intl = this.owner.lookup("service:intl");
    });
    hooks.afterEach(function () {
      this.owner.destroy("service:current-user");
      this.owner.destroy("service:current-account");
      this.owner.destroy("service:modal");
    }); // 1. Render test

    (0, _qunit.test)("it should render basic page elements and check radio toggle", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var stub, recentIncidentsListCount;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Arrange
                stub = _sinon.default.stub();
                recentIncidentsListCount = _ticketsSearchResults.default.results.filter(function (r) {
                  return r.source === 14;
                }).length;
                this.setProperties({
                  enabled: true,
                  ticketStatuses: _ticket.TICKET_STATUSES,
                  bulkActionsCallback: stub,
                  selectedRows: GET_TEST_ALERTS(1)
                }); // Act

                _context.next = 5;
                return renderComponent();

              case 5:
                // Assert
                assert.equal(_bulkActions.default.modalTitleText, "Associate Incident", "Modal title is present");
                assert.ok(_bulkActions.default.isExistingIncRadioVisible, "Existing incident radio btn is present");
                assert.ok(_bulkActions.default.isNewIncRadioVisible, "New incident radio btn is present");
                assert.notOk(_bulkActions.default.isNewIncRadioChecked, "New incident radio is not checked by default");
                assert.ok(_bulkActions.default.isExistingIncRadioChecked, "Existing incident radio btn is checked by default");
                assert.ok(_bulkActions.default.isSearchInputVisible, "Search input is present");
                assert.ok(_bulkActions.default.isCancelButtonVisible, "'Cancel' button is present");
                assert.ok(_bulkActions.default.isExistingIncAssociateBtnVisible, "Existing incident 'Associate' button is present");
                assert.notOk(_bulkActions.default.isNewIncAssociateBtnVisible, "New incident 'Associate' button is not present");
                assert.equal(_bulkActions.default.sectionTitle, "Recent incidents", "Recent incident list title is present");
                assert.equal(_bulkActions.default.numIncidentCards, recentIncidentsListCount, "Recent incidents list with ".concat(recentIncidentsListCount, " cards are present")); // Act - toggle radio

                _context.next = 18;
                return _bulkActions.default.clickNewIncRadio();

              case 18:
                // Assert
                assert.ok(_bulkActions.default.isNewIncRadioChecked, "[after toggle] New incident radio is checked");
                assert.notOk(_bulkActions.default.isExistingIncRadioChecked, "[after toggle] Existing incident radio btn is not checked");
                assert.ok(_bulkActions.default.isNewIncFormVisible, "[after toggle] New incident form is present");
                assert.notOk(_bulkActions.default.isExistingIncAssociateBtnVisible, "[after toggle] Existing incident 'Associate' button is not present");
                assert.ok(_bulkActions.default.isNewIncAssociateBtnVisible, "[after toggle] New incident 'Associate' button is present");

              case 23:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }()); // 2. Existing incident association

    (0, _qunit.test)("it should check existing incident association via search input", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var bulkActionsCallbackSpy, successToastrSpy, SEARCH_TERM, searchResults, searchResultsCount, EXPECTED_TOASTR_MSG, EXPECTED_PARAMS;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                // Arrange
                bulkActionsCallbackSpy = _sinon.default.spy();
                successToastrSpy = (0, _spyFlashMessage.default)("success");
                SEARCH_TERM = "Response"; // matches entry in fixtures

                searchResults = _ticketsSearchResults.default.results.filter(function (r) {
                  return r.subject.indexOf(SEARCH_TERM) > -1;
                });
                searchResultsCount = searchResults.length;
                EXPECTED_TOASTR_MSG = this.intl.t("fs.ams.bulk_actions.success.existing_incident_association_with_alert");
                EXPECTED_PARAMS = {
                  operation: "existing_incident",
                  values: [searchResults[0].display_id]
                };
                this.setProperties({
                  enabled: true,
                  ticketStatuses: _ticket.TICKET_STATUSES,
                  bulkActionsCallback: bulkActionsCallbackSpy,
                  selectedRows: GET_TEST_ALERTS(1)
                }); // Act - render, trigger search

                _context2.next = 10;
                return renderComponent();

              case 10:
                _context2.next = 12;
                return _bulkActions.default.fillSearchInput(SEARCH_TERM);

              case 12:
                _context2.next = 14;
                return _bulkActions.default.triggerKeyUpOnSearchInput({
                  which: 13
                });

              case 14:
                // enter key action
                // Assert
                assert.equal(_bulkActions.default.sectionTitle, "".concat(searchResultsCount, " results found"), "Search results found");
                assert.equal(_bulkActions.default.numIncidentCards, searchResultsCount, "Search results ".concat(searchResultsCount, " incident cards are present")); // Act - select incident card

                _context2.next = 18;
                return _bulkActions.default.clickOnIncidentCardToSelect();

              case 18:
                // Assert
                assert.ok(_bulkActions.default.isIncidentCardActive, "[on click] Incident card is active"); // Act - submit

                _context2.next = 21;
                return _bulkActions.default.clickOnExistingIncAssociateBtn();

              case 21:
                // Assert
                assert.ok(bulkActionsCallbackSpy.calledWithExactly(EXPECTED_PARAMS), "[on submit] Callback was called with expected params");
                assert.ok(successToastrSpy.calledOnceWithExactly(EXPECTED_TOASTR_MSG), "[on submit] Expected success toastr is shown");
                assert.equal(successToastrSpy.displayName, "success", "[on submit] Displayed toastr is of type 'success' as expected");

              case 24:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }()); // 3. Try to associate existing incident without selecting one

    (0, _qunit.test)("it should close modal and exit, in case of clicking Associate button without selecting any existing incident card", /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var stub;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                // Arrange
                stub = _sinon.default.stub();
                this.setProperties({
                  enabled: true,
                  ticketStatuses: _ticket.TICKET_STATUSES,
                  bulkActionsCallback: stub,
                  selectedRows: GET_TEST_ALERTS(1)
                }); // Act

                _context3.next = 4;
                return renderComponent();

              case 4:
                _context3.next = 6;
                return _bulkActions.default.clickOnExistingIncAssociateBtn();

              case 6:
                // Assert
                assert.notOk(_bulkActions.default.isAssociationModalVisible, "Association modal is not visible");

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }()); // 4. Partial success in existing incident association

    (0, _qunit.test)("it should throw error toastr with details about failed alert ids, when associating multiple alerts with an existing incident", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var stub, failureToastrSpy, SEARCH_TERM, pickNonAssociated, NON_ASSOCIATED_TEST_ALERTS, incidentSearchResult, EXPECTED_TOASTR_MSG, EXPECTED_INCIDENT_ID, failedAlert, successAlerts;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                // Arrange
                stub = _sinon.default.stub();
                failureToastrSpy = (0, _spyFlashMessage.default)("danger");
                this.server.put("/alerts/bulk_update", {
                  failed_alert_ids: [116]
                }, 200);
                SEARCH_TERM = "Response"; // matches entry in fixtures

                pickNonAssociated = function pickNonAssociated(a) {
                  return Ember.isEmpty(a.incident_id);
                };

                NON_ASSOCIATED_TEST_ALERTS = GET_TEST_ALERTS(5, pickNonAssociated);
                incidentSearchResult = _ticketsSearchResults.default.results.filter(function (r) {
                  return r.subject.indexOf(SEARCH_TERM) > -1;
                })[0];
                EXPECTED_TOASTR_MSG = this.intl.t("fs.ams.bulk_actions.failure.existing_incident_association_with_alerts", {
                  ids: [116]
                });
                EXPECTED_INCIDENT_ID = incidentSearchResult.id;
                this.setProperties({
                  enabled: true,
                  ticketStatuses: _ticket.TICKET_STATUSES,
                  bulkActionsCallback: stub,
                  selectedRows: NON_ASSOCIATED_TEST_ALERTS
                }); // Act - render, trigger search

                _context4.next = 12;
                return renderComponent();

              case 12:
                _context4.next = 14;
                return _bulkActions.default.fillSearchInput(SEARCH_TERM);

              case 14:
                _context4.next = 16;
                return _bulkActions.default.triggerKeyUpOnSearchInput({
                  which: 13
                });

              case 16:
                _context4.next = 18;
                return _bulkActions.default.clickOnIncidentCardToSelect();

              case 18:
                _context4.next = 20;
                return _bulkActions.default.clickOnExistingIncAssociateBtn();

              case 20:
                // associate
                // Assert
                failedAlert = NON_ASSOCIATED_TEST_ALERTS.filter(function (a) {
                  return a.id === 116;
                });
                successAlerts = NON_ASSOCIATED_TEST_ALERTS.filter(function (a) {
                  return a.id !== 116;
                });
                assert.notOk(failedAlert.incidentId, "Failed alert doesnt have incident id associated");
                assert.ok(successAlerts.every(function (a) {
                  return a.incidentId === EXPECTED_INCIDENT_ID;
                }), "Succeeded alerts have expected incident id associated");
                assert.equal(failureToastrSpy.firstCall.firstArg, EXPECTED_TOASTR_MSG, "Expected failure toastr is shown");
                assert.equal(failureToastrSpy.displayName, "danger", "Displayed toastr is of type 'success' as expected");

              case 26:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }()); // 5. Resolve multiple alerts

    (0, _qunit.test)("it should check resolving multiple alerts", /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var successsToastrSpy, EXPECTED_TOASTR_MSG;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                // Arrange
                successsToastrSpy = (0, _spyFlashMessage.default)("success");
                EXPECTED_TOASTR_MSG = this.intl.t("fs.ams.bulk_actions.success.resolve_alerts");
                this.setProperties({
                  enabled: true,
                  ticketStatuses: _ticket.TICKET_STATUSES,
                  bulkActionsCallback: _sinon.default.stub(),
                  selectedRows: GET_TEST_ALERTS(2)
                }); // Act - render, trigger search

                _context5.next = 5;
                return renderComponent();

              case 5:
                _context5.next = 7;
                return _bulkActions.default.clickMarkAsResolved();

              case 7:
                // Assert
                assert.ok(successsToastrSpy.calledOnceWithExactly(EXPECTED_TOASTR_MSG), "Expected success toastr is shown on success resolving");
                assert.equal(successsToastrSpy.displayName, "success", "Displayed toastr is of type 'success' as expected");

              case 9:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }()); // 6. Bulkupdate call failure

    (0, _qunit.test)("it should throw error toastr in case of bulkUpdate call failure, when resolving an alert", /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var failureToastrSpy, EXPECTED_TOASTR_MSG;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                // Arrange
                failureToastrSpy = (0, _spyFlashMessage.default)("danger");
                EXPECTED_TOASTR_MSG = this.intl.t("fs.errors.something_went_wrong");
                this.server.put('/alerts/bulk_update', {
                  error: ["Error"]
                }, 500);
                this.setProperties({
                  enabled: true,
                  ticketStatuses: _ticket.TICKET_STATUSES,
                  bulkActionsCallback: _sinon.default.stub(),
                  selectedRows: GET_TEST_ALERTS(1)
                }); // Act - render, trigger search

                _context6.next = 6;
                return renderComponent();

              case 6:
                _context6.next = 8;
                return _bulkActions.default.clickMarkAsResolved();

              case 8:
                // Assert
                assert.ok(failureToastrSpy.calledOnceWithExactly(EXPECTED_TOASTR_MSG), "Expected failure toastr is shown");
                assert.equal(failureToastrSpy.displayName, "danger", "Displayed toastr is of type 'danger' as expected");

              case 10:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x6) {
        return _ref7.apply(this, arguments);
      };
    }()); // 7. Partial success in alert resolving

    (0, _qunit.test)("it should throw error toastr with details about failed alert ids, when resolving an alert", /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var stub, failureToastrSpy, EXPECTED_TOASTR_MSG;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                // Arrange
                stub = _sinon.default.stub();
                failureToastrSpy = (0, _spyFlashMessage.default)("danger");
                EXPECTED_TOASTR_MSG = this.intl.t("fs.ams.bulk_actions.failure.resolve_alert");
                this.server.put('/alerts/bulk_update', {
                  failed_alert_ids: [117]
                }, 200);
                this.setProperties({
                  enabled: true,
                  ticketStatuses: _ticket.TICKET_STATUSES,
                  bulkActionsCallback: stub,
                  selectedRows: GET_TEST_ALERTS(1)
                }); // Act - render, resolve alert

                _context7.next = 7;
                return renderComponent();

              case 7:
                _context7.next = 9;
                return _bulkActions.default.clickMarkAsResolved();

              case 9:
                // Assert
                assert.equal(failureToastrSpy.firstCall.firstArg, EXPECTED_TOASTR_MSG, "Expected failure toastr is shown");
                assert.equal(failureToastrSpy.displayName, "danger", "Displayed toastr is of type 'danger' as expected");

              case 11:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x7) {
        return _ref8.apply(this, arguments);
      };
    }()); // 8. Modal close check

    (0, _qunit.test)("it should check modal elements and close action", /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var stub, modalService;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                // Arrange
                stub = _sinon.default.stub();
                modalService = this.owner.lookup("service:modal");
                Ember.set(modalService, "showAssociationModal", false); // modal closed on load

                this.setProperties({
                  enabled: true,
                  ticketStatuses: _ticket.TICKET_STATUSES,
                  bulkActionsCallback: stub,
                  selectedRows: GET_TEST_ALERTS(1)
                }); // Act - render

                _context8.next = 6;
                return renderComponent();

              case 6:
                _context8.next = 8;
                return _bulkActions.default.clickAssociateInc();

              case 8:
                // Assert
                assert.ok(modalService.get("showAssociationModal"), "Modal is open as expected"); // Act

                _context8.next = 11;
                return _bulkActions.default.clickModalClose();

              case 11:
                // Assert
                assert.notOk(modalService.get("showAssociationModal"), "Modal is closed as expected");

              case 12:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x8) {
        return _ref9.apply(this, arguments);
      };
    }()); // 9. Recent incident call failure

    (0, _qunit.test)("it should not display any incident cards in case of recent incident call failure", /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        var stub;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                // Arrange
                stub = _sinon.default.stub();
                this.server.get("/search/tickets", {
                  errors: ["Error"]
                }, 500);
                this.setProperties({
                  enabled: true,
                  ticketStatuses: _ticket.TICKET_STATUSES,
                  bulkActionsCallback: stub,
                  selectedRows: GET_TEST_ALERTS(1)
                }); // Act

                _context9.next = 5;
                return renderComponent();

              case 5:
                // Assert
                assert.notOk(_bulkActions.default.isSectionTitlePresent, "Recent incident list title is not present");
                assert.equal(_bulkActions.default.numIncidentCards, 0, "Recent incidents list doesnot have any cards");

              case 7:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x9) {
        return _ref10.apply(this, arguments);
      };
    }()); // 10. Tickets search call failure

    (0, _qunit.test)("it should display 'No results found', in case of search call failure", /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var stub, EXPECTED_TEXT;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                // Arrange
                stub = _sinon.default.stub();
                this.server.get("/search/tickets_global_search", {
                  errors: ["Error"]
                }, 500);
                this.setProperties({
                  enabled: true,
                  ticketStatuses: _ticket.TICKET_STATUSES,
                  bulkActionsCallback: stub,
                  selectedRows: GET_TEST_ALERTS(1)
                });
                EXPECTED_TEXT = this.intl.t("fs.ams.bulk_actions.no_results_found"); // Act

                _context10.next = 6;
                return renderComponent();

              case 6:
                _context10.next = 8;
                return _bulkActions.default.fillSearchInput("Response");

              case 8:
                _context10.next = 10;
                return _bulkActions.default.triggerKeyUpOnSearchInput({
                  which: 13
                });

              case 10:
                // enter key action
                // Assert
                assert.notOk(_bulkActions.default.isSectionTitlePresent, "Search results count text is not present");
                assert.ok(_bulkActions.default.noResultsText, EXPECTED_TEXT, "'No results found' text is present");

              case 12:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x10) {
        return _ref11.apply(this, arguments);
      };
    }()); // 11. Search input clear

    (0, _qunit.test)("it should clear search input text on clicking x icon", /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        var stub;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                // Arrange
                stub = _sinon.default.stub();
                this.setProperties({
                  enabled: true,
                  ticketStatuses: _ticket.TICKET_STATUSES,
                  bulkActionsCallback: stub,
                  selectedRows: GET_TEST_ALERTS(1)
                }); // Act

                _context11.next = 4;
                return renderComponent();

              case 4:
                _context11.next = 6;
                return _bulkActions.default.fillSearchInput("Response");

              case 6:
                // Assert
                assert.equal(_bulkActions.default.searchInputValue, "Response", "Search input is entered");
                assert.equal(_bulkActions.default.numIncidentCards, 0, "Recent incidents list is cleared"); // Act

                _context11.next = 10;
                return _bulkActions.default.clickSearchClear();

              case 10:
                assert.notOk(_bulkActions.default.searchInputValue, "Search input is cleared");
                assert.ok(_bulkActions.default.numIncidentCards > 0, "Recent incidents list is displayed");

              case 12:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x11) {
        return _ref12.apply(this, arguments);
      };
    }()); // 12. New incident association

    (0, _qunit.test)("it should check new incident association", /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        var successToastrSpy, TEST_ALERTS, EXPECTED_TOASTR_MESSAGE, EXPECTED_INCIDENT_ID, areAllAlertsAssociated;
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                // Arrange
                successToastrSpy = (0, _spyFlashMessage.default)("success");
                TEST_ALERTS = GET_TEST_ALERTS(2);
                this.setProperties({
                  enabled: true,
                  ticketStatuses: _ticket.TICKET_STATUSES,
                  selectedRows: TEST_ALERTS
                });
                EXPECTED_TOASTR_MESSAGE = this.intl.t("fs.ams.bulk_actions.success.new_incident_association_with_alerts");
                EXPECTED_INCIDENT_ID = 200415; // Act

                _context12.next = 7;
                return createNewIncident();

              case 7:
                // Assert
                areAllAlertsAssociated = TEST_ALERTS.every(function (a) {
                  return a.incidentId === EXPECTED_INCIDENT_ID;
                });
                assert.ok(areAllAlertsAssociated, "Selected alerts have been associated with the new incident");
                assert.ok(successToastrSpy.calledWithExactly(EXPECTED_TOASTR_MESSAGE), "Success toastr message is displayed on successful association");

              case 10:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x12) {
        return _ref13.apply(this, arguments);
      };
    }()); // 13. New incident creation failure

    (0, _qunit.test)("it should show error toastr in case of new incident creation failure", /*#__PURE__*/function () {
      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
        var stub, failureToastrSpy, EXPECTED_TOASTR_MESSAGE;
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                // Arrange
                stub = _sinon.default.stub();
                failureToastrSpy = (0, _spyFlashMessage.default)("danger");
                this.server.post("/alerts/ticket", {
                  errors: ["Error"]
                }, 500);
                this.setProperties({
                  enabled: true,
                  ticketStatuses: _ticket.TICKET_STATUSES,
                  bulkActionsCallback: stub,
                  selectedRows: GET_TEST_ALERTS(1)
                });
                EXPECTED_TOASTR_MESSAGE = this.intl.t("fs.errors.something_went_wrong"); // Act

                _context13.next = 7;
                return createNewIncident();

              case 7:
                // Assert
                assert.ok(failureToastrSpy.calledWithExactly(EXPECTED_TOASTR_MESSAGE), "Failure toastr message is displayed on incident creation failure");

              case 8:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      return function (_x13) {
        return _ref14.apply(this, arguments);
      };
    }()); // 14. New incident form validation test

    (0, _qunit.test)("it should throw validation errors if required fields are not filled, in new incident creation form", /*#__PURE__*/function () {
      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {
        var stub, EXPECTED_VALIDATION_ERROR;
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                // Arrange
                stub = _sinon.default.stub();
                this.setProperties({
                  enabled: true,
                  ticketStatuses: _ticket.TICKET_STATUSES,
                  bulkActionsCallback: stub,
                  selectedRows: GET_TEST_ALERTS(1)
                });
                EXPECTED_VALIDATION_ERROR = this.intl.t("fs.validation.required"); // Act

                _context14.next = 5;
                return renderComponent();

              case 5:
                _context14.next = 7;
                return _bulkActions.default.clickNewIncRadio();

              case 7:
                _context14.next = 9;
                return _bulkActions.default.fillNewIncSubject("");

              case 9:
                _context14.next = 11;
                return _bulkActions.default.fillDescription("");

              case 11:
                _context14.next = 13;
                return _bulkActions.default.clickNewIncAssociateBtn();

              case 13:
                // Assert
                assert.equal(_bulkActions.default.subjectValidationError, EXPECTED_VALIDATION_ERROR, "[Subject] Expected required field error is present");
                assert.equal(_bulkActions.default.descriptionValidationError, EXPECTED_VALIDATION_ERROR, "[Description] Expected required field error is present");
                assert.equal(_bulkActions.default.statusValidationError, EXPECTED_VALIDATION_ERROR, "[Status] Expected required field error is present");

              case 16:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      return function (_x14) {
        return _ref15.apply(this, arguments);
      };
    }()); // 15. New incident form subject check with single alert selection

    (0, _qunit.test)("it should check if new incident form subject field entry matches alert message, if singular", /*#__PURE__*/function () {
      var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {
        var stub, TEST_ALERTS, EXPECTED_SUBJECT;
        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                // Arrange
                stub = _sinon.default.stub();
                TEST_ALERTS = GET_TEST_ALERTS(1);
                this.setProperties({
                  enabled: true,
                  ticketStatuses: _ticket.TICKET_STATUSES,
                  bulkActionsCallback: stub,
                  selectedRows: TEST_ALERTS[0]
                });
                EXPECTED_SUBJECT = TEST_ALERTS[0].message; // Act

                _context15.next = 6;
                return renderComponent();

              case 6:
                _context15.next = 8;
                return _bulkActions.default.clickNewIncRadio();

              case 8:
                // Assert
                assert.ok(_bulkActions.default.subjectFieldValue, EXPECTED_SUBJECT, "Subject matches alert message as expected");

              case 9:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      return function (_x15) {
        return _ref16.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-ams/details/alert-activities/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/set-locale-timezone-moment", "freshservice/tests/pages/components/module-ams/alert-activities"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _intl, _setLocaleTimezoneMoment, _alertActivities) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function renderComponent() {
    return _renderComponent.apply(this, arguments);
  }

  function _renderComponent() {
    _renderComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleAms::Details::AlertActivities @alert = {{this.model}}/>
              */
              {
                id: "khm69V2q",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-ams/details/alert-activities\",[],[[\"@alert\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
    return _renderComponent.apply(this, arguments);
  }

  (0, _qunit.module)("Integration | Component | module-ams | alert-details | activities", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _setLocaleTimezoneMoment.setLocaleAndTimeZoneForMoment)(hooks);
    hooks.beforeEach(function () {
      this.intl = this.owner.lookup("service:intl");
    });
    (0, _qunit.test)("it should display the alert activities", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Arrange
                this.set("model", Ember.Object.create({
                  id: 1
                })); // Act

                _context.next = 3;
                return renderComponent();

              case 3:
                // Assert
                assert.equal(_alertActivities.default.alertCreateText, "Created alert, set status to Open", "Alert Created text present as expected");
                assert.equal(_alertActivities.default.alertStatusChange, "Set status to Resolved", "Alert status resolved text present as expected"), assert.equal(_alertActivities.default.alertReopenedUnacknowledge, "Reopened alert, Alert unacknowledged", "Alert reopened and unacknowledged text present as expected"), assert.equal(_alertActivities.default.alertAcknowledgeChange, "Acknowledged alert", "Alert acknowledged text present as expected"), assert.equal(_alertActivities.default.alertIncidentAssociation, "Associated incident #INC-10", "Alert associated to incident text present as expected"), assert.equal(_alertActivities.default.alertNoteCreate, "Added a note", "Alert note added text present as expected"), assert.equal(_alertActivities.default.alertNoteUpdate, "Updated a note", "Alert note updated text present as expected"), assert.equal(_alertActivities.default.alertNoteDestroy, "Deleted a note", "Alert note deleted text present as expected"), assert.equal(_alertActivities.default.alertRuleExecution, "Executed Default Rule", "Executed alert rule text present as expected");

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-ams/details/alert-association/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/set-locale-timezone-moment", "freshservice/tests/lib/spy-flash-message", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/stub-current-account", "freshservice/tests/pages/components/module-ams/alert-details", "freshservice/constants/ticket", "freshservice/constants/app-constants", "freshservice/utils/time-util"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _intl, _setLocaleTimezoneMoment, _spyFlashMessage, _sinonContext, _stubCurrentUser, _stubCurrentAccount, _alertDetails, _ticket, _appConstants, _timeUtil) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var TEST_USER = {
    privileges: ["manage_alerts"]
  };
  var TEST_ACCOUNT = {
    features: ["alert_management"]
  };
  var TEST_ALERT = {
    id: 117,
    resource: "CPU 84",
    metricName: "RAM 84",
    node: "SWITCH 84",
    severity: "error",
    message: "Sample Message 84",
    state: "resolved",
    tags: ["tag1", "tag2", "tag3"],
    additionalInfo: {},
    incidentId: "375",
    // has a matching tickets entry in fixtures
    metricValue: "100%",
    createdAt: "2020-07-17T12:09:24Z",
    updatedAt: "2020-07-30T15:14:55Z",
    occurrenceTime: "2020-05-02T18:30:00Z",
    integrationId: 1,
    subject: "Sample Message 84",
    description: "Sample Description 44",
    integrationName: "CI 1",
    sourceName: "Webhook"
  };
  var TEST_ALERT_WITHOUT_INCIDENT_ID = {
    id: 117,
    resource: "CPU 84",
    metricName: "RAM 84",
    node: "SWITCH 84",
    severity: "error",
    message: "Sample Message 84",
    state: "resolved",
    tags: ["tag1", "tag2", "tag3"],
    additionalInfo: {},
    incidentId: null,
    metricValue: "100%",
    createdAt: "2020-07-17T12:09:24Z",
    updatedAt: "2020-07-30T15:14:55Z",
    occurrenceTime: "2020-05-02T18:30:00Z",
    integrationId: 1,
    subject: "Sample Message 84",
    description: "Sample Description 44",
    integrationName: "CI 1",
    sourceName: "Webhook"
  };
  var FAILURE_TOASTR_MESSAGE = "Something went wrong. Please try again later.";

  function renderComponent() {
    return _renderComponent.apply(this, arguments);
  } // module("Integration | Component | module-ams | details | alert-association",
  // 	function (hooks) {


  function _renderComponent() {
    _renderComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleAms::Details::AlertAssociation
              		@model={{model}}
              		@ticketStatuses={{ticketStatuses}}
              	/>
              */
              {
                id: "Rpz8H6Ys",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-ams/details/alert-association\",[],[[\"@model\",\"@ticketStatuses\"],[[22,\"model\"],[22,\"ticketStatuses\"]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));
    return _renderComponent.apply(this, arguments);
  }

  (0, _qunit.skip)("Integration | Component | module-ams | details | alert-association", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _setLocaleTimezoneMoment.setLocaleAndTimeZoneForMoment)(hooks);
    hooks.beforeEach(function () {
      (0, _stubCurrentUser.stubCurrentUser)(TEST_USER);
      (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
      this.server.loadFixtures("tickets");
      this.server.loadFixtures("users");
    });
    hooks.afterEach(function () {
      this.owner.destroy("service:current-user");
      this.owner.destroy("service:current-account");
    }); // 1. Basic render test

    (0, _qunit.test)("it renders the incident card in expected format", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var store, moment, intl, storeRecord, mockTicket, mockUser, mockTicketData;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Arrange
                store = this.owner.lookup("service:store");
                moment = this.owner.lookup("service:moment");
                intl = this.owner.lookup("service:intl");
                storeRecord = store.createRecord("alert", TEST_ALERT);
                mockTicket = Ember.A(this.server.db.tickets).findBy("display_id", +TEST_ALERT.incidentId);
                mockUser = Ember.A(this.server.db.users).findBy("id", mockTicket.requester_id + "");
                mockTicketData = {
                  url: "/helpdesk/tickets/".concat(mockTicket.id),
                  displayId: "".concat(_appConstants.INCIDENT_ID_PREFIX).concat(mockTicket.id),
                  dueBy: intl.t("fs.ams.bulk_actions.ticket_date", {
                    due_by: _timeUtil.default.getRelativeDateToNow(mockTicket.due_by, moment)
                  }),
                  createdAtRelative: _timeUtil.default.getRelativeDateFromNow(mockTicket.created_at, moment),
                  priority: intl.t(_ticket.TICKET_PRIORITY_BY_KEY[mockTicket.priority]),
                  status: _ticket.TICKET_STATUSES[mockTicket.status],
                  subject: mockTicket.subject
                };
                this.set("model", storeRecord);
                this.set("ticketStatuses", _ticket.TICKET_STATUSES); // Act

                _context.next = 11;
                return renderComponent();

              case 11:
                // Assert
                assert.ok(_alertDetails.default.isIncidentAssociationCardVisible, "Associated incident card is visible");
                assert.equal(_alertDetails.default.associationIncDisplayIdText, mockTicketData.displayId, "Incident id is displayed in expected format");
                assert.equal(_alertDetails.default.associationIncSubjectText, mockTicketData.subject, "Subject is displayed as expected");
                assert.equal(_alertDetails.default.associationIncPriorityext, mockTicketData.priority, "Priority is displayed as expected");
                assert.equal(_alertDetails.default.associationIncStatusText, mockTicketData.status, "Status is displayed as expected");
                assert.equal(_alertDetails.default.associationIncRequesterText, mockUser.name, "Requester name is displayed as expected");
                assert.equal(_alertDetails.default.associationIncCreatedAtDateText.replace(",", ""), mockTicketData.createdAtRelative, "Incident created at date is displayed as expected");
                assert.equal(_alertDetails.default.associationIncDueByDateText, mockTicketData.dueBy, "Incident due by date is displayed as expected");

              case 19:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }()); // 2. fetchUser call failure toastr check

    (0, _qunit.test)("it should display error toastr in case of fetchUser call failure", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var store, storeRecord, failureToastrSpy, EXPECTED_TOASTR_MSG;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                // Arrange
                store = this.owner.lookup("service:store");
                storeRecord = store.createRecord("alert", TEST_ALERT);
                failureToastrSpy = (0, _spyFlashMessage.default)("danger");
                EXPECTED_TOASTR_MSG = FAILURE_TOASTR_MESSAGE;
                this.server.get("/users/:id", {
                  errors: ["Error"]
                }, 500);
                this.set("model", storeRecord);
                this.set("ticketStatuses", _ticket.TICKET_STATUSES); // Act

                _context2.next = 9;
                return renderComponent();

              case 9:
                // Assert
                assert.ok(failureToastrSpy.calledOnceWithExactly(EXPECTED_TOASTR_MSG), "Expected failure toastr is shown");
                assert.equal(failureToastrSpy.displayName, "danger", "Displayed toastr is of type 'danger' as expected");

              case 11:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }()); // 3. fetchTicket call failure toastr check

    (0, _qunit.test)("it should display error toastr in case of fetchTicket call failure", /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var store, storeRecord, failureToastrSpy, EXPECTED_TOASTR_MSG;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                // Arrange
                store = this.owner.lookup("service:store");
                storeRecord = store.createRecord("alert", TEST_ALERT);
                failureToastrSpy = (0, _spyFlashMessage.default)("danger");
                EXPECTED_TOASTR_MSG = FAILURE_TOASTR_MESSAGE;
                this.server.get("/tickets/:id", {
                  errors: ["Error"]
                }, 500);
                this.set("model", storeRecord);
                this.set("ticketStatuses", _ticket.TICKET_STATUSES); // Act

                _context3.next = 9;
                return renderComponent();

              case 9:
                // Assert
                assert.ok(failureToastrSpy.calledOnceWithExactly(EXPECTED_TOASTR_MSG), "Expected failure toastr is shown");
                assert.equal(failureToastrSpy.displayName, "danger", "Displayed toastr is of type 'danger' as expected");

              case 11:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }()); // 4. empty case check

    (0, _qunit.test)("it should not break when there is no incident id in the alert", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var store, storeRecord;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                // Arrange
                store = this.owner.lookup("service:store");
                storeRecord = store.createRecord("alert", TEST_ALERT_WITHOUT_INCIDENT_ID);
                this.set("model", storeRecord);
                this.set("ticketStatuses", _ticket.TICKET_STATUSES); // Act

                _context4.next = 6;
                return renderComponent();

              case 6:
                // Assert
                assert.equal(_alertDetails.default.associationCardText, "", "Parent container is empty as expected");

              case 7:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-ams/details/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "sinon", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/spy-flash-message", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/stub-current-account", "freshservice/mirage/fixtures/alerts", "freshservice/tests/pages/components/module-ams/alert-details", "freshservice/constants/ams/common"], function (_qunit, _emberQunit, _testHelpers, _sinon, _testSupport, _intl, _spyFlashMessage, _sinonContext, _stubCurrentUser, _stubCurrentAccount, _alerts, _alertDetails, _common) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var TEST_USER = {
    privileges: ["manage_alerts"]
  };
  var TEST_ACCOUNT = {
    features: ["alert_management"]
  };

  var TEST_ALERT_WITH_NO_INCIDENT_ID = _alerts.default.filter(function (a) {
    return !a.incident_id;
  }).slice(0, 1).map(function (a) {
    return Ember.Object.create(a);
  })[0];

  var FAILURE_TOASTR_MESSAGE = "Something went wrong. Please try again later.";

  function renderComponent() {
    return _renderComponent.apply(this, arguments);
  } // module("Integration | Component | module-ams | details", function (hooks) {


  function _renderComponent() {
    _renderComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
      return regeneratorRuntime.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleAms::Details
              		@model={{model}}
              	/>
              */
              {
                id: "Bb9IYx+S",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-ams/details\",[],[[\"@model\"],[[22,\"model\"]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11);
    }));
    return _renderComponent.apply(this, arguments);
  }

  (0, _qunit.skip)("Integration | Component | module-ams | details", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    hooks.beforeEach(function () {
      (0, _stubCurrentUser.stubCurrentUser)(TEST_USER);
      (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
    });
    hooks.afterEach(function () {
      this.owner.destroy("service:current-user");
      this.owner.destroy("service:current-account");
    }); // 1. Basic render

    (0, _qunit.test)("it should render page elements and check for basic elements", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var TEST_ALERT;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Arrange
                this.server.createList("alert", 1);
                TEST_ALERT = Ember.Object.create(this.server.db.alerts[0]);
                this.set("model", TEST_ALERT);
                this.set("model.fetchLogs", function () {
                  return {
                    logs: []
                  };
                });
                this.set("showSidebar", true); // Act

                _context.next = 7;
                return renderComponent();

              case 7:
                // Assert
                assert.equal(_alertDetails.default.breadcrumbTitle, "#Alert-1", "Breadcrumb has '#Alert-1' as expected");
                assert.ok(_alertDetails.default.isSubjectVisible, "Subject is present as expected");
                assert.ok(_alertDetails.default.isDateTimeDetailsVisible, "Date time details are present as expected");
                assert.ok(_alertDetails.default.isDescriptionVisible, "Description is present as expected");
                assert.ok(_alertDetails.default.isAssociationBtnVisible, "Association button is present as expected");
                assert.ok(_alertDetails.default.isAlertPropertiesVisible, "Alert properties sidepane is present as expected");
                assert.ok(_alertDetails.default.isToggleButtonActive, "Properties sidebar toggle button is active as expected");
                assert.equal(_alertDetails.default.tabs.length, 2, "Two tabs are present as expected");
                assert.ok(_alertDetails.default.isAlertLogsTabActive, "Alert logs tab is active as expected");
                assert.ok(_alertDetails.default.isAlertLogsTableVisible, "Alert logs table is present as expected");

              case 17:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }()); // 2. Associate button - disabled

    (0, _qunit.test)("it should disable the 'Associate Incident' button if when alert is already associated with an incident", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var stub, TEST_ALERT;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                // Arrange
                this.server.createList("alert", 1);
                stub = _sinon.default.stub();
                TEST_ALERT = Ember.Object.create(this.server.db.alerts[0]);
                this.set("model", TEST_ALERT);
                this.set("model.fetchLogs", stub); // Act

                _context2.next = 7;
                return renderComponent();

              case 7:
                // Assert
                assert.ok(_alertDetails.default.isAssociateBtnDisabled, "'Associate Incident' button is disabled");

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }()); // 3. Associate button - enabled

    (0, _qunit.test)("it should enable the 'Associate Incident' button when the alert is not associated with an incident", /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var store, storeRecord, stub;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                // Arrange
                store = this.owner.lookup("service:store");
                storeRecord = store.createRecord("alert", TEST_ALERT_WITH_NO_INCIDENT_ID);
                stub = _sinon.default.stub();
                this.set("model", storeRecord);
                this.set("model.fetchLogs", stub); // Act

                _context3.next = 7;
                return renderComponent();

              case 7:
                // Assert
                assert.notOk(_alertDetails.default.isAssociateBtnDisabled, "'Associate Incident' button is enabled");

              case 8:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }()); // 4. Associate button presence check without priv

    (0, _qunit.test)("it should not display 'Associate Incident' button without 'manage_alerts' privilege", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var store, storeRecord, stub;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                // Arrange
                (0, _stubCurrentUser.stubCurrentUser)(); // no 'manage_alerts' priv

                store = this.owner.lookup("service:store");
                storeRecord = store.createRecord("alert", TEST_ALERT_WITH_NO_INCIDENT_ID);
                stub = _sinon.default.stub();
                this.set("model", storeRecord);
                this.set("model.fetchLogs", stub); // Act

                _context4.next = 8;
                return renderComponent();

              case 8:
                // Assert
                assert.ok(_alertDetails.default.isAssociateBtnNotVisible, "'Associate Incident' button is hidden");

              case 9:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }()); // 5. Toggle button check

    (0, _qunit.test)("it should toggle properties sidepane when toggle button is clicked", /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var stub, TEST_ALERT;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                // Arrange
                this.server.createList("alert", 1);
                stub = _sinon.default.stub();
                TEST_ALERT = Ember.Object.create(this.server.db.alerts[0]);
                this.set("model", TEST_ALERT);
                this.set("model.fetchLogs", stub); // Act

                _context5.next = 7;
                return renderComponent();

              case 7:
                // Assert
                assert.ok(_alertDetails.default.isToggleButtonActive, "Before toggle: Sidepane toggle button is active");
                assert.ok(_alertDetails.default.isAlertPropertiesVisible, "Before toggle: Properties sidepane is visible");
                assert.notOk(_alertDetails.default.isSeverityBadgeVisible, "Before toggle: Severity badge is not visible in title bar"); // Act

                _context5.next = 12;
                return _alertDetails.default.togglePropertiesSidepane();

              case 12:
                // Assert
                assert.notOk(_alertDetails.default.isToggleButtonActive, "After toggle: Sidepane toggle button is not active");
                assert.notOk(_alertDetails.default.isAlertPropertiesVisible, "After toggle: Properties sidepane is hidden");
                assert.ok(_alertDetails.default.isSeverityBadgeVisible, "After toggle: Severity badge is visible in title bar");

              case 15:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }()); // 6. Properties sidepane elements check

    (0, _qunit.test)("it should check for basic elements in sidepane", /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var stub, intl, TEST_ALERT;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                // Arrange
                this.server.createList("alert", 1);
                stub = _sinon.default.stub();
                intl = this.owner.lookup('service:intl');
                TEST_ALERT = Ember.Object.create(this.server.db.alerts[0]);
                this.set("model", TEST_ALERT);
                this.set("model.fetchLogs", stub); // Act

                _context6.next = 8;
                return renderComponent();

              case 8:
                // Assert
                assert.ok(_alertDetails.default.isToggleButtonActive, "Toggle button is active as expected");
                assert.ok(_alertDetails.default.isAlertPropertiesVisible, "Sidepane is visible as expected");
                assert.equal(_alertDetails.default.alertPropertiesTitleText, "Alert Properties", "Title is present as expected");
                assert.equal(_alertDetails.default.alertPropertiesSeverityText, TEST_ALERT.severity, "Severity is present as expected");
                assert.equal(_alertDetails.default.formUtils.getBasicDropdownSelectedText("status-dropdown"), intl.t(_common.ALERT_STATES[TEST_ALERT.state]), "State is present as expected");
                assert.equal(_alertDetails.default.alertPropertiesIntegrationNameText, TEST_ALERT.integrationName, "Integration name is present as expected");
                assert.equal(_alertDetails.default.alertPropertiesSourceNameText, TEST_ALERT.sourceName, "Source name is present as expected");
                assert.equal(_alertDetails.default.alertPropertiesNodeNameText, TEST_ALERT.node, "Node name is present as expected");
                assert.equal(_alertDetails.default.alertPropertiesResourceNameText, TEST_ALERT.resource, "Resource name is present as expected");
                assert.equal(_alertDetails.default.alertPropertiesMetricNameText, TEST_ALERT.metricName, "Metric name is present as expected");
                assert.equal(_alertDetails.default.alertPropertiesTagsText, TEST_ALERT.tags.join(' '), "Tags is present as expected");

              case 19:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x6) {
        return _ref7.apply(this, arguments);
      };
    }()); // 7. Failure toastr check in case ticket status call failure

    (0, _qunit.test)("it should show error toastr, on failure of fetch ticket_statuses call", /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var TEST_ALERT, stub, failureToastrSpy, EXPECTED_TOASTR_MSG;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                // Arrange
                this.server.createList("alert", 1);
                this.server.get('/ticket_statuses', {
                  error: ["Error"]
                }, 500);
                TEST_ALERT = Ember.Object.create(this.server.db.alerts[0]);
                stub = _sinon.default.stub();
                failureToastrSpy = (0, _spyFlashMessage.default)('danger');
                EXPECTED_TOASTR_MSG = FAILURE_TOASTR_MESSAGE;
                this.set("model", TEST_ALERT);
                this.set("model.fetchLogs", stub); // Act

                _context7.next = 10;
                return renderComponent();

              case 10:
                // Assert
                assert.ok(failureToastrSpy.calledOnceWithExactly(EXPECTED_TOASTR_MSG), "Expected failure toastr is shown");
                assert.equal(failureToastrSpy.displayName, "danger", "Displayed toastr is of type 'danger' as expected"); // Cleanups
                // this.owner.destroy("service:fetch");

              case 12:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x7) {
        return _ref8.apply(this, arguments);
      };
    }()); // 8. Resolve alert via sidepane status dropdown

    (0, _qunit.test)("it should check for success toastr and state value, on resolving the current alert via sidepane dropdown", /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var TEST_ALERT, stub, successToastrSpy, EXPECTED_TOASTR_MSG, EXPECTED_STATE;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                // Arrange
                this.server.createList("alert", 1);
                TEST_ALERT = Ember.Object.create(this.server.db.alerts[0]);
                stub = _sinon.default.stub();
                successToastrSpy = (0, _spyFlashMessage.default)("success");
                EXPECTED_TOASTR_MSG = "Alert has been resolved successfully.";
                EXPECTED_STATE = _common.ALERT_RESOLVED;
                this.set("model", TEST_ALERT);
                this.set("model.fetchLogs", stub); // Act

                _context8.next = 10;
                return renderComponent();

              case 10:
                _context8.next = 12;
                return _alertDetails.default.formUtils.selectBasicDropdown("status-dropdown", "Resolved");

              case 12:
                // Assert
                assert.equal(this.model.state, EXPECTED_STATE, "Alert is in resolved state as expected");
                assert.ok(successToastrSpy.calledOnceWithExactly(EXPECTED_TOASTR_MSG), "Success toastr is shown as expected");

              case 14:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x8) {
        return _ref9.apply(this, arguments);
      };
    }()); // 9. Failure toastr check in case alert resolving call failure

    (0, _qunit.test)("it should show error toastr, on resolving failure of the current alert via sidepane dropdown", /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        var TEST_ALERT, stub, failureToastrSpy, EXPECTED_TOASTR_MSG;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                // Arrange
                this.server.createList("alert", 1);
                this.server.put('/alerts/bulk_update', {
                  error: ["Error"]
                }, 500);
                TEST_ALERT = Ember.Object.create(this.server.db.alerts[0]);
                stub = _sinon.default.stub();
                failureToastrSpy = (0, _spyFlashMessage.default)("danger");
                EXPECTED_TOASTR_MSG = FAILURE_TOASTR_MESSAGE;
                this.set("model", TEST_ALERT);
                this.set("model.fetchLogs", stub); // Act

                _context9.next = 10;
                return renderComponent();

              case 10:
                _context9.next = 12;
                return _alertDetails.default.formUtils.selectBasicDropdown("status-dropdown", "Resolved");

              case 12:
                // Assert
                assert.ok(failureToastrSpy.calledOnceWithExactly(EXPECTED_TOASTR_MSG), "Expected failure toastr is shown");
                assert.equal(failureToastrSpy.displayName, "danger", "Displayed toastr is of type 'danger' as expected"); // Cleanups

                this.owner.destroy("service:fetch");

              case 15:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x9) {
        return _ref10.apply(this, arguments);
      };
    }()); // 10. Empty model check

    (0, _qunit.test)("it should not break when no model is present", /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                // Arrange
                this.set("model", null); // Act

                _context10.next = 3;
                return renderComponent();

              case 3:
                // Assert
                assert.ok(true);

              case 4:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x10) {
        return _ref11.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-ams/list-filter/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "sinon", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/stub-current-account", "freshservice/mirage/fixtures/alerts", "freshservice/tests/pages/components/module-ams/alert-list", "freshservice/utils/common"], function (_qunit, _emberQunit, _testHelpers, _sinon, _testSupport, _intl, _stubCurrentUser, _stubCurrentAccount, _alerts, _alertList, _common) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var TEST_ALERT = _alerts.default.slice(0, 1).map(function (a) {
    return Ember.Object.create(a);
  })[0];

  var MOCK_CREATED_DATE = "Today";
  var MOCK_UPDATED_DATE = "Today";
  var MOCK_SEVERITY = ["warning"];
  var MOCK_RESOURCE = [TEST_ALERT.resource];
  var TEST_USER = {
    privileges: ["manage_alerts"]
  };
  var TEST_ACCOUNT = {
    features: ["alert_management"]
  };

  var fakeSearchProps = _sinon.default.fake.returns({
    results: [TEST_ALERT.resource]
  });

  function renderComponent() {
    return _renderComponent.apply(this, arguments);
  }

  function _renderComponent() {
    _renderComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
      return regeneratorRuntime.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleAms::ListFilter
              		@model					  = {{model}}
              		@filter						= {{_filter}}
              		@toggleSideBar    = {{toggleSidebar}}
              		@applyFilter			= {{applyFilter}}
              		@resetFilter			= {{resetFilter}}
              	/>
              */
              {
                id: "O50wqvM/",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-ams/list-filter\",[],[[\"@model\",\"@filter\",\"@toggleSideBar\",\"@applyFilter\",\"@resetFilter\"],[[22,\"model\"],[22,\"_filter\"],[22,\"toggleSidebar\"],[22,\"applyFilter\"],[22,\"resetFilter\"]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9);
    }));
    return _renderComponent.apply(this, arguments);
  }

  (0, _qunit.module)("Integration | Component | module-ams | list-filter", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      (0, _stubCurrentUser.stubCurrentUser)(TEST_USER);
      (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
    });
    hooks.afterEach(function () {
      this.owner.destroy("service:current-user");
      this.owner.destroy("service:current-account");
    }); // 1. Basic render check via prefilled data object

    (0, _qunit.skip)("it renders the given filter params", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var stub, mockFilterParams, getActualValue, severityValues, resourceValues;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Arrange - prefill via code
                stub = _sinon.default.stub();
                mockFilterParams = JSON.stringify([{
                  condition: "created_at",
                  operator: "is_greater_than",
                  value: MOCK_CREATED_DATE.toLowerCase()
                }, {
                  condition: "updated_at",
                  operator: "is_greater_than",
                  value: MOCK_UPDATED_DATE.toLowerCase()
                }, {
                  condition: "severity",
                  operator: "is_in",
                  value: MOCK_SEVERITY
                }, {
                  condition: "resource",
                  operator: "is_in",
                  value: MOCK_RESOURCE
                }]);
                this.setProperties({
                  model: TEST_ALERT,
                  _filter: mockFilterParams,
                  toggleSidebar: stub,
                  applyFilter: stub,
                  resetFilter: stub
                }); // Act

                _context.next = 5;
                return renderComponent();

              case 5:
                // Assert
                getActualValue = function getActualValue(value) {
                  return value.text.replace("× ", "");
                };

                severityValues = _alertList.default.filterFieldSeverity.map(getActualValue);
                resourceValues = _alertList.default.filterFieldResource.map(getActualValue);
                assert.equal(_alertList.default.filterFieldCreatedOn, MOCK_CREATED_DATE, "'Created On' dropdown filter is set as expected");
                assert.equal(_alertList.default.filterFieldUpdatedOn, MOCK_UPDATED_DATE, "'Updated On' dropdown filter is set as expected");
                assert.deepEqual(severityValues, MOCK_SEVERITY, "'Severity' dropdown filter is set as expected");
                assert.deepEqual(resourceValues, MOCK_RESOURCE, "'Resource' dropdown filter is set as expected");

              case 12:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }()); // 2. Basic render check via UI

    (0, _qunit.skip)("it should have expected filter params when selected via UI", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var stub, getActualValue, severityValues, resourceValues;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                // Arrange
                stub = _sinon.default.stub();
                this.server.create("alert", {
                  resource: TEST_ALERT.resource
                });
                this.setProperties({
                  model: TEST_ALERT,
                  _filter: null,
                  toggleSidebar: stub,
                  applyFilter: stub,
                  resetFilter: stub
                }); // Act - select via ui

                _context2.next = 5;
                return renderComponent();

              case 5:
                _context2.next = 7;
                return _alertList.default.formUtils.selectBasicDropdownByClassName("filter-field-created_at", MOCK_CREATED_DATE);

              case 7:
                _context2.next = 9;
                return _alertList.default.formUtils.selectBasicDropdownByClassName("filter-field-updated_at", MOCK_UPDATED_DATE);

              case 9:
                _context2.next = 11;
                return _alertList.default.formUtils.autocompleteSelectMultipleWithoutSearch("filter-field-severity", 1);

              case 11:
                _context2.next = 13;
                return _alertList.default.formUtils.autocompleteSelectMultiple("filter-field-resource", TEST_ALERT.resource, 1);

              case 13:
                // Assert
                getActualValue = function getActualValue(value) {
                  return value.text.replace("× ", "");
                };

                severityValues = _alertList.default.filterFieldSeverity.map(getActualValue);
                resourceValues = _alertList.default.filterFieldResource.map(getActualValue);
                assert.equal(_alertList.default.filterFieldCreatedOn, MOCK_CREATED_DATE, "'Created On' dropdown filter is set as expected");
                assert.equal(_alertList.default.filterFieldUpdatedOn, MOCK_UPDATED_DATE, "'Updated On' dropdown filter is set as expected");
                assert.deepEqual(severityValues, MOCK_SEVERITY, "'Severity' dropdown filter is set as expected");
                assert.deepEqual(resourceValues, MOCK_RESOURCE, "'Resource' dropdown filter is set as expected");

              case 20:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }()); // 3. Value check in Autocomplete field - Resource

    (0, _qunit.test)("it should fill the given value in 'Resource' autocomplete field", /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var SEARCH_TERM, stub, getActualValue, resourceValues;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                // Arrange
                SEARCH_TERM = TEST_ALERT.resource;
                stub = _sinon.default.stub();
                this.server.create("alert", {
                  resource: TEST_ALERT.resource
                });
                this.setProperties({
                  model: TEST_ALERT,
                  _filter: null,
                  toggleSidebar: stub,
                  applyFilter: stub,
                  resetFilter: stub
                }); // Act

                _context3.next = 6;
                return renderComponent();

              case 6:
                _context3.next = 8;
                return _alertList.default.formUtils.autocompleteSelectMultiple("filter-field-resource", SEARCH_TERM, 0);

              case 8:
                // Assert
                getActualValue = function getActualValue(value) {
                  return value.text.replace("× ", "");
                };

                resourceValues = _alertList.default.filterFieldResource.map(getActualValue);
                assert.deepEqual(resourceValues, MOCK_RESOURCE, "'Resource' filter value is set as expected");

              case 11:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }()); // 4. Empty term in Autocomplete field - Resource

    (0, _qunit.test)("it should return not set value when search term is empty in a autocomplete field", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var EMPTY_SEARCH_TERM, spy, stub, resourceValues;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                // Arrange
                EMPTY_SEARCH_TERM = " ";
                spy = _sinon.default.spy();
                stub = _sinon.default.stub();
                this.setProperties({
                  model: TEST_ALERT,
                  _filter: null,
                  toggleSidebar: stub,
                  applyFilter: stub,
                  resetFilter: stub,
                  searchOptions: spy
                }); // Act

                _context4.next = 6;
                return renderComponent();

              case 6:
                _context4.next = 8;
                return _alertList.default.formUtils.autocompleteSelectMultiple("filter-field-resource", EMPTY_SEARCH_TERM, 1);

              case 8:
                // Assert
                resourceValues = _alertList.default.filterFieldResource.map(function (value) {
                  return value.text;
                });
                assert.equal(spy.callCount, 0, "'searchOptions()' was not called for empty params as expected");
                assert.equal(resourceValues.length, 0, "'Resource' filter is set to empty as expected");

              case 11:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }()); // 5. Empty response autocomplete url

    (0, _qunit.test)("it should show 'No results found' when autocomplete url returns empty response", /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var SEARCH_TERM, stub;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                // Arrange
                SEARCH_TERM = TEST_ALERT.resource;
                stub = _sinon.default.stub();
                this.setProperties({
                  model: TEST_ALERT,
                  _filter: null,
                  toggleSidebar: stub,
                  applyFilter: stub,
                  resetFilter: stub
                }); // Act

                _context5.next = 5;
                return renderComponent();

              case 5:
                _context5.next = 7;
                return _alertList.default.formUtils.autocompleteSelectMultiple("filter-field-resource", SEARCH_TERM, 0);

              case 7:
                // Assert
                assert.equal(_alertList.default.noResultsFoundText, "No results found", "'No results found' appears as expected");

              case 8:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }()); // 6. Apply filter

    (0, _qunit.skip)("it should apply the selected filter", /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var spy, stub, filterParams;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                // Arrange
                spy = _sinon.default.spy();
                stub = _sinon.default.stub();
                this.server.create("alert", {
                  resource: TEST_ALERT.resource
                });
                this.setProperties({
                  model: TEST_ALERT,
                  _filter: null,
                  toggleSidebar: stub,
                  applyFilter: spy,
                  resetFilter: stub
                }); // Act - select filter fields via ui

                _context6.next = 6;
                return renderComponent();

              case 6:
                _context6.next = 8;
                return _alertList.default.formUtils.selectBasicDropdownByClassName("filter-field-created_at", MOCK_CREATED_DATE);

              case 8:
                _context6.next = 10;
                return _alertList.default.formUtils.selectBasicDropdownByClassName("filter-field-updated_at", MOCK_UPDATED_DATE);

              case 10:
                _context6.next = 12;
                return _alertList.default.formUtils.autocompleteSelectMultipleWithoutSearch("filter-field-severity", 1);

              case 12:
                _context6.next = 14;
                return _alertList.default.formUtils.autocompleteSelectMultiple("filter-field-resource", TEST_ALERT.resource, 1);

              case 14:
                _context6.next = 16;
                return _alertList.default.clickFilterApply();

              case 16:
                // Assert
                filterParams = (0, _common.jsonStringify)([{
                  condition: "created_at",
                  operator: "is_greater_than",
                  value: "today"
                }, {
                  condition: "updated_at",
                  operator: "is_greater_than",
                  value: "today"
                }, {
                  condition: "severity",
                  operator: "is_in",
                  value: ["warning"]
                }, {
                  condition: "resource",
                  operator: "is_in",
                  value: ["CPU 84"]
                }]);
                assert.ok(spy.calledOnceWith(filterParams), "'applyFilter()' was called with expected filter params on 'Apply' click");

              case 18:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x6) {
        return _ref7.apply(this, arguments);
      };
    }()); // 7. Apply with empty filter params

    (0, _qunit.test)("it should call the given resetFilter() when 'Apply' button is clicked with empty filter params", /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var stub, applyFilterSpy, resetFilterSpy;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                // Arrange - prefill filter fields
                stub = _sinon.default.stub();
                applyFilterSpy = _sinon.default.spy();
                resetFilterSpy = _sinon.default.spy();
                this.setProperties({
                  model: TEST_ALERT,
                  _filter: null,
                  toggleSidebar: stub,
                  applyFilter: applyFilterSpy,
                  resetFilter: resetFilterSpy
                }); // Act

                _context7.next = 6;
                return renderComponent();

              case 6:
                _context7.next = 8;
                return _alertList.default.clickFilterApply();

              case 8:
                // Assert
                assert.ok(applyFilterSpy.notCalled, "applyFilter() was not called as expected");
                assert.ok(resetFilterSpy.calledOnce, "resetFilter() was called as expected");

              case 10:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x7) {
        return _ref8.apply(this, arguments);
      };
    }()); // 8. Clear filter

    (0, _qunit.skip)("it should clear the given filter params on 'Clear All' button click", /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var stub, spy, mockFilterParams;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                // Arrange - prefill filter fields
                stub = _sinon.default.stub();
                spy = _sinon.default.spy();
                mockFilterParams = JSON.stringify([{
                  condition: "created_at",
                  operator: "is_greater_than",
                  value: MOCK_CREATED_DATE.toLowerCase()
                }, {
                  condition: "updated_at",
                  operator: "is_greater_than",
                  value: MOCK_UPDATED_DATE.toLowerCase()
                }, {
                  condition: "severity",
                  operator: "is_in",
                  value: MOCK_SEVERITY
                }]);
                Ember.set(TEST_ALERT, "searchProps", fakeSearchProps);
                this.setProperties({
                  model: TEST_ALERT,
                  _filter: mockFilterParams,
                  toggleSidebar: stub,
                  applyFilter: stub,
                  resetFilter: spy
                }); // Act

                _context8.next = 7;
                return renderComponent();

              case 7:
                _context8.next = 9;
                return _alertList.default.formUtils.autocompleteSelectMultiple("filter-field-resource", MOCK_RESOURCE[0], 1);

              case 9:
                _context8.next = 11;
                return _alertList.default.clickFilterCancel();

              case 11:
                // Assert
                assert.ok(spy.calledOnce, "'resetFilter()' was called");
                assert.notOk(_alertList.default.hasFilterFieldCreatedOn, "'Created on' filter is cleared");
                assert.notOk(_alertList.default.hasFilterFieldUpdatedOn, "'Updated on' filter is cleared");
                assert.notOk(_alertList.default.hasFilterFieldSeverity, "'Severity' filter is cleared");
                assert.notOk(_alertList.default.hasFilterFieldResource, "'Resource' filter is cleared");

              case 16:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x8) {
        return _ref9.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-ams/list/add-integrations/component-test", ["qunit", "ember-qunit", "freshservice/tests/lib/intl", "@ember/test-helpers", "freshservice/tests/pages/components/module-ams/add-integrations"], function (_qunit, _emberQunit, _intl, _testHelpers, _addIntegrations) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)("Integration | Component | module-ams | list | add-integrations", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _qunit.test)("should render add integration card", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleAms::List::AddIntegrations/>
                */
                {
                  id: "hFJ+2u/g",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-ams/list/add-integrations\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.equal(_addIntegrations.default.titleText, "There are no alerts yet!", "Add monitoring tool title rendered properly");
                assert.equal(_addIntegrations.default.subtitleText, "Set up your monitoring tool to receive alerts.", "Add monitoring tool subtitle rendered properly");
                assert.equal(_addIntegrations.default.linkText, "Add monitoring tool", "Add monitoring tool link rendered properly");
                assert.equal(_addIntegrations.default.externalLinkText, "Know more", "Add monitoring tool external link rendered properly");

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

define("freshservice/tests/integration/components/module-ams/list/auto-refresh/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "sinon", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/stub-current-account", "freshservice/tests/pages/components/module-ams/alert-list"], function (_qunit, _emberQunit, _testHelpers, _sinon, _testSupport, _intl, _stubCurrentUser, _stubCurrentAccount, _alertList) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var MockSocketsAlertAutoRefreshRtsService = /*#__PURE__*/function (_Ember$Service) {
    _inherits(MockSocketsAlertAutoRefreshRtsService, _Ember$Service);

    var _super = _createSuper(MockSocketsAlertAutoRefreshRtsService);

    function MockSocketsAlertAutoRefreshRtsService() {
      var _this;

      _classCallCheck(this, MockSocketsAlertAutoRefreshRtsService);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _defineProperty(_assertThisInitialized(_this), "createdAlerts", Ember.A([]));

      _defineProperty(_assertThisInitialized(_this), "updatedAlerts", Ember.A([]));

      _defineProperty(_assertThisInitialized(_this), "resetAlertsWasCalled", false);

      return _this;
    }

    _createClass(MockSocketsAlertAutoRefreshRtsService, [{
      key: "initializeRTSConnection",
      value: function initializeRTSConnection() {}
    }, {
      key: "closeRTSConnection",
      value: function closeRTSConnection() {}
    }, {
      key: "resetAlerts",
      value: function resetAlerts() {
        this.resetAlertsWasCalled = true;
      }
    }]);

    return MockSocketsAlertAutoRefreshRtsService;
  }(Ember.Service);

  window.__CLASSIC_OWN_CLASSES__.set(MockSocketsAlertAutoRefreshRtsService, true);

  function renderComponent() {
    return _renderComponent.apply(this, arguments);
  }

  function _renderComponent() {
    _renderComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
      return regeneratorRuntime.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleAms::List::AutoRefresh
              		@onAutoRefreshReload={{onAutoRefreshReload}}
              	/>
              */
              {
                id: "K5F8rgMo",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-ams/list/auto-refresh\",[],[[\"@onAutoRefreshReload\"],[[22,\"onAutoRefreshReload\"]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));
    return _renderComponent.apply(this, arguments);
  }

  (0, _qunit.module)("Integration | Component | module-ams | list | auto-refresh", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      (0, _stubCurrentUser.stubCurrentUser)();
      (0, _stubCurrentAccount.stubCurrentAccount)();
      this.owner.register("service:socket-actions-rts", Ember.Service.extend({}));
      this.owner.register("service:sockets.alert-auto-refresh-rts", MockSocketsAlertAutoRefreshRtsService);
    });
    hooks.afterEach(function () {
      this.owner.destroy("service:current-user");
      this.owner.destroy("service:current-account");
      this.owner.destroy("service:socket-actions-rts");
      this.owner.destroy("service:sockets.alert-auto-refresh-rts");
    }); // 1. Basic render - single notification

    (0, _qunit.test)("it should render single notification", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var stub, service, EXPECTED_TEXT;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Arrange
                stub = _sinon.default.stub();
                service = this.owner.lookup("service:sockets.alert-auto-refresh-rts");
                EXPECTED_TEXT = "1 New alert";
                this.set("onAutoRefreshReload", stub);
                Ember.set(service, "createdAlerts", Ember.A(["CPU 1"])); // Act

                _context.next = 7;
                return renderComponent();

              case 7:
                // Assert
                assert.equal(_alertList.default.autoRefreshNotificationText.toLowerCase(), EXPECTED_TEXT.toLowerCase(), "Alert notification appears as expected (1 New alert)");

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }()); // 2. Render multiple notification

    (0, _qunit.test)("it should render multiple notifications", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var stub, service, EXPECTED_TEXT;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                // Arrange
                stub = _sinon.default.stub();
                service = this.owner.lookup("service:sockets.alert-auto-refresh-rts");
                EXPECTED_TEXT = "3 New alerts";
                Ember.set(this, "onAutoRefreshReload", stub);
                Ember.set(service, "createdAlerts", Ember.A(["CPU 1", "CPU 2", "CPU 3"])); // Act

                _context2.next = 7;
                return renderComponent();

              case 7:
                // Assert
                assert.equal(_alertList.default.autoRefreshNotificationText.toLowerCase(), EXPECTED_TEXT.toLowerCase(), "Alert notification appears as expected (3 New alerts)");

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }()); // 3. Action check

    (0, _qunit.test)("it should call handler on clicking on the notification", /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var spy, service;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                // Arrange
                spy = _sinon.default.spy();
                service = this.owner.lookup("service:sockets.alert-auto-refresh-rts");
                this.set("onAutoRefreshReload", spy);
                Ember.set(service, "createdAlerts", Ember.A(["CPU 1"])); // Act

                _context3.next = 6;
                return renderComponent();

              case 6:
                _context3.next = 8;
                return _alertList.default.clickAutoRefreshNotification();

              case 8:
                // Assert
                assert.ok(spy.calledOnce, "Notification click handler was called once as expected");
                assert.ok(service.resetAlertsWasCalled, "'resetAlerts()' was called on 'SocketsAlertAutoRefreshRtsService' as expected");

              case 10:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }()); // 4. Basic render - single alert update notification

    (0, _qunit.test)("it should render single alert update notification", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var stub, service, EXPECTED_TEXT;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                // Arrange
                stub = _sinon.default.stub();
                service = this.owner.lookup("service:sockets.alert-auto-refresh-rts");
                EXPECTED_TEXT = "1 alert updated";
                this.set("onAutoRefreshReload", stub);
                Ember.set(service, "updatedAlerts", Ember.A([11])); // Act

                _context4.next = 7;
                return renderComponent();

              case 7:
                // Assert
                assert.equal(_alertList.default.autoRefreshNotificationText.toLowerCase(), EXPECTED_TEXT.toLowerCase(), "Alert notification appears as expected (1 alert updated)");

              case 8:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }()); // 5. Render multiple alert updated notification

    (0, _qunit.test)("it should render multiple alert updated notifications", /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var stub, service, EXPECTED_TEXT;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                // Arrange
                stub = _sinon.default.stub();
                service = this.owner.lookup("service:sockets.alert-auto-refresh-rts");
                EXPECTED_TEXT = "3 alerts updated";
                Ember.set(this, "onAutoRefreshReload", stub);
                Ember.set(service, "updatedAlerts", Ember.A([11, 12, 13])); // Act

                _context5.next = 7;
                return renderComponent();

              case 7:
                // Assert
                assert.equal(_alertList.default.autoRefreshNotificationText.toLowerCase(), EXPECTED_TEXT.toLowerCase(), "Alert notification appears as expected (3 alerts updated)");

              case 8:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }()); // 6. Render multiple alert created and updated notification

    (0, _qunit.test)("it should render multiple alert created and updated notifications", /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var stub, service, EXPECTED_TEXT;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                // Arrange
                stub = _sinon.default.stub();
                service = this.owner.lookup("service:sockets.alert-auto-refresh-rts");
                EXPECTED_TEXT = "2 new alerts 3 alerts updated";
                Ember.set(this, "onAutoRefreshReload", stub);
                Ember.set(service, "createdAlerts", Ember.A(["CPU 1", "CPU 2"]));
                Ember.set(service, "updatedAlerts", Ember.A([11, 12, 13])); // Act

                _context6.next = 8;
                return renderComponent();

              case 8:
                // Assert
                assert.equal(_alertList.default.autoRefreshNotificationText.toLowerCase(), EXPECTED_TEXT.toLowerCase(), "Alert notification appears as expected (2 new alerts 3 alerts updated)");

              case 9:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x6) {
        return _ref7.apply(this, arguments);
      };
    }());
  });
});
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

define("freshservice/tests/integration/components/module-ams/list/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "sinon", "ember-cli-mirage/test-support", "ember-local-storage/local/object", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/spy-flash-message", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/stub-current-account", "freshservice/mirage/fixtures/alerts", "freshservice/tests/pages/components/module-ams/alert-list", "freshservice/utils/common", "freshservice/constants/ams/list-filter", "freshservice/constants/ams/common"], function (_qunit, _emberQunit, _testHelpers, _sinon, _testSupport, _object, _sinonContext, _spyFlashMessage, _intl, _stubCurrentUser, _stubCurrentAccount, _alerts, _alertList, _common, _listFilter, _common2) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

  function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var MockSocketsAlertAutoRefreshRtsService = /*#__PURE__*/function (_Ember$Service) {
    _inherits(MockSocketsAlertAutoRefreshRtsService, _Ember$Service);

    var _super = _createSuper(MockSocketsAlertAutoRefreshRtsService);

    function MockSocketsAlertAutoRefreshRtsService() {
      var _this;

      _classCallCheck(this, MockSocketsAlertAutoRefreshRtsService);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _defineProperty(_assertThisInitialized(_this), "createdAlerts", Ember.A([]));

      _defineProperty(_assertThisInitialized(_this), "updatedAlerts", Ember.A([]));

      return _this;
    }

    _createClass(MockSocketsAlertAutoRefreshRtsService, [{
      key: "initializeRTSConnection",
      value: function initializeRTSConnection() {}
    }, {
      key: "closeRTSConnection",
      value: function closeRTSConnection() {}
    }, {
      key: "resetAlerts",
      value: function resetAlerts() {}
    }]);

    return MockSocketsAlertAutoRefreshRtsService;
  }(Ember.Service);

  window.__CLASSIC_OWN_CLASSES__.set(MockSocketsAlertAutoRefreshRtsService, true);

  var TEST_ALERTS = Ember.A(_toConsumableArray(_alerts.default.slice(0, 30).map(function (a) {
    return Ember.Object.create(a);
  })));
  var NON_ASSOCIATED_TEST_ALERTS = Ember.A(_toConsumableArray(_alerts.default.filter(function (a) {
    return Ember.isEmpty(a.incident_id);
  }).slice(0, 30).map(function (a) {
    return Ember.Object.create(a);
  })));
  var ASSOCIATED_NON_RESOLVED_TEST_ALERTS = Ember.A(_toConsumableArray(_alerts.default.filter(function (a) {
    return a.severity !== "ok" && Ember.isPresent(a.incident_id) && a.state !== "open";
  }).slice(0, 5).map(function (a) {
    a.incidentId = a.incident_id;
    return Ember.Object.create(a);
  })));
  var ASSOCIATED_RESOLVED_TEST_ALERT = Ember.A(_toConsumableArray(_alerts.default.filter(function (a) {
    return a.severity === "ok" && Ember.isPresent(a.incident_id);
  }).slice(0, 1).map(function (a) {
    a.incidentId = a.incident_id;
    return Ember.Object.create(a);
  })));
  var FAILURE_TOASTR_MESSAGE = "Something went wrong. Please try again later.";
  var TEST_USER = {
    privileges: ["manage_alerts"]
  };
  var TEST_ACCOUNT = {
    features: ["alert_management"]
  };

  function renderComponent() {
    return _renderComponent.apply(this, arguments);
  }

  function _renderComponent() {
    _renderComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {
      return regeneratorRuntime.wrap(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              _context17.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleAms::List
              			@model             = {{model}}
              			@meta              = {{meta}}
              			@page              = {{page}}
              			@dir               = {{dir}}
              			@orderBy           = {{sortBy}}
              			@filter            = {{filter}}
              			@isSidebarEnabled  = {{isSidebarEnabled}}
              			@toggleSidebar     = {{toggleSidebar}}
              			@setPageNav        = {{setPageNav}}
              			@sortPaginate      = {{sortPaginate}}
              			@applyFilter       = {{applyFilter}}
              			@resetFilter       = {{resetFilter}}
              			@setColumns        = {{setColumns}}
              			@resetQPToDefaults = {{resetQPToDefaults}}
              			@localStoreKeys    = {{hash qpLocalStoreKey="qp:1:1" colCustLocalStoreKey="cols:1:1"}}
              		/>
              */
              {
                id: "eh1SXbfw",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-ams/list\",[],[[\"@model\",\"@meta\",\"@page\",\"@dir\",\"@orderBy\",\"@filter\",\"@isSidebarEnabled\",\"@toggleSidebar\",\"@setPageNav\",\"@sortPaginate\",\"@applyFilter\",\"@resetFilter\",\"@setColumns\",\"@resetQPToDefaults\",\"@localStoreKeys\"],[[22,\"model\"],[22,\"meta\"],[22,\"page\"],[22,\"dir\"],[22,\"sortBy\"],[22,\"filter\"],[22,\"isSidebarEnabled\"],[22,\"toggleSidebar\"],[22,\"setPageNav\"],[22,\"sortPaginate\"],[22,\"applyFilter\"],[22,\"resetFilter\"],[22,\"setColumns\"],[22,\"resetQPToDefaults\"],[28,\"hash\",null,[[\"qpLocalStoreKey\",\"colCustLocalStoreKey\"],[\"qp:1:1\",\"cols:1:1\"]]]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
            case "end":
              return _context17.stop();
          }
        }
      }, _callee17);
    }));
    return _renderComponent.apply(this, arguments);
  }

  (0, _qunit.module)("Integration | Component | module-ams | list", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    hooks.beforeEach(function () {
      (0, _stubCurrentUser.stubCurrentUser)(TEST_USER);
      (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
      var router = this.owner.lookup("router:main");
      router.setupRouter();
      this.owner.register("service:socket-actions-rts", Ember.Service.extend({}));
      this.owner.register("service:sockets.alert-auto-refresh-rts", MockSocketsAlertAutoRefreshRtsService);

      var mockStorage = _object.default.extend();

      mockStorage.reopenClass({
        initialState: function initialState() {
          return {
            "qp:1:1": {
              _dir: "desc",
              _page: 1,
              _sort_by: "updated_at"
            },
            "cols:1:1": {
              isSelected: false,
              id: false,
              formattedMessage: false,
              severity: false,
              updatedAt: false,
              createdAt: false,
              incidentId: false,
              tags: true,
              resource: false
            }
          };
        }
      });
      this.owner.register("storage:alerts", mockStorage);
    });
    hooks.afterEach(function () {
      this.owner.destroy("service:current-user");
      this.owner.destroy("service:current-account");
      localStorage.removeItem("storage:alerts");
    }); // 1. Priv check

    (0, _qunit.test)("it should not display checkboxes/bulk actions without 'manage_alerts' privilege", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var stub;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Arrange
                stub = _sinon.default.stub();
                (0, _stubCurrentUser.stubCurrentUser)({
                  privileges: ["view_alerts"]
                });
                this.setProperties({
                  model: TEST_ALERTS,
                  meta: {
                    current: 1,
                    next: 2,
                    prev: null,
                    last: 2,
                    total_count: 31,
                    count: 31
                  },
                  page: 1,
                  dir: "desc",
                  sortBy: "updated_at",
                  filter: null,
                  isSidebarEnabled: false,
                  toggleSidebar: stub,
                  setPageNav: stub,
                  sortPaginate: stub,
                  applyFilter: stub,
                  resetFilter: stub,
                  setColumns: stub,
                  resetQPToDefaults: stub
                }); // Act

                _context.next = 5;
                return renderComponent();

              case 5:
                assert.ok(_alertList.default.hasNoSelectAllCheckbox, "Has no SelectAll checkbox");
                assert.equal(_alertList.default.allCheckboxes.length, 0, "Has no checkbox in each table row");

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }()); // 2. Empty state check

    (0, _qunit.test)("it should show empty state when no alert is present", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var stub;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                // Arrange
                stub = _sinon.default.stub();
                this.setProperties({
                  model: Ember.A([]),
                  meta: {
                    current: 1,
                    next: null,
                    prev: null,
                    last: 1,
                    total_count: 0,
                    count: 0
                  },
                  page: 1,
                  dir: "desc",
                  sortBy: "updated_at",
                  filter: null,
                  toggleSidebar: stub,
                  isSidebarEnabled: false,
                  setPageNav: stub,
                  sortPaginate: stub,
                  applyFilter: stub,
                  resetFilter: stub,
                  setColumns: stub,
                  resetQPToDefaults: stub
                }); // Act

                _context2.next = 4;
                return renderComponent();

              case 4:
                // Assert
                assert.ok(_alertList.default.isTableEmpty, "Alerts table has default/empty state text displayed");
                assert.equal(_alertList.default.topNavText, "Showing 0 to 0 of 0", "Alerts table top nav text 'Showing 0 to 0 of 0' is present");
                assert.ok(_alertList.default.isTopNavPrevBtnDisabled, "Alerts table top page nav previous button is disabled");
                assert.ok(_alertList.default.isTopNavNextBtnDisabled, "Alerts table top page nav next button is disabled");
                assert.ok(_alertList.default.hasNoPagination, "Alerts table pagination is not present");

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }()); // 3. Basic elements render check

    (0, _qunit.test)("it should render table with filter icon, pagination bar and top nav", /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var stub;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                // Arrange
                stub = _sinon.default.stub();
                this.setProperties({
                  model: TEST_ALERTS,
                  meta: {
                    current: 1,
                    next: 2,
                    prev: null,
                    last: 2,
                    total_count: 31,
                    count: 31
                  },
                  page: 1,
                  dir: "desc",
                  sortBy: "updated_at",
                  filter: null,
                  toggleSidebar: stub,
                  isSidebarEnabled: false,
                  setPageNav: stub,
                  sortPaginate: stub,
                  applyFilter: stub,
                  resetFilter: stub,
                  setColumns: stub,
                  resetQPToDefaults: stub
                }); // Act

                _context3.next = 4;
                return renderComponent();

              case 4:
                // Assert
                assert.ok(_alertList.default.hasTable, "Alerts table is present");
                assert.ok(_alertList.default.hasFilterIcon, "Alerts table filter icon is present");
                assert.ok(_alertList.default.hasTopNavText, "Alerts table top nav text ('Showing x to y of z') is present");
                assert.ok(_alertList.default.hasTopNavBtns, "Alerts table top nav page buttons are present");
                assert.ok(_alertList.default.hasPagination, "Alerts table has pagination");
                assert.equal(_alertList.default.numRows, 30, "Alerts table has 30 rows");

              case 10:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }()); // 4. Top nav transition check

    (0, _qunit.test)("it should trigger page transition with proper page params on top navigation", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var spy, stub, prePageParams, nxtPageParams;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                // Arrange
                spy = _sinon.default.spy();
                stub = _sinon.default.stub(); // page should be 1 and 3 in prePageParams and nxtPageParams as current page is passed as 2

                prePageParams = {
                  page: 1
                };
                nxtPageParams = {
                  page: 3
                };
                this.setProperties({
                  model: TEST_ALERTS,
                  meta: {
                    current: 2,
                    next: 3,
                    prev: 1,
                    last: 3,
                    total_count: 90,
                    count: 90
                  },
                  page: 2,
                  dir: "desc",
                  sortBy: "updated_at",
                  filter: null,
                  toggleSidebar: stub,
                  isSidebarEnabled: false,
                  setPageNav: spy,
                  sortPaginate: stub,
                  applyFilter: stub,
                  resetFilter: stub,
                  setColumns: stub,
                  resetQPToDefaults: stub
                }); // Act

                _context4.next = 7;
                return renderComponent();

              case 7:
                _context4.next = 9;
                return _alertList.default.navigateToNext().navigateToPrev();

              case 9:
                // Assert
                assert.ok(spy.calledTwice, "setPageNav was called twice, (once for next button and once for previous button)");
                assert.ok(spy.calledWithMatch(prePageParams), "setPageNav was called with {page:1} when previous button is clicked");
                assert.ok(spy.calledWithMatch(nxtPageParams), "setPageNav was called with {page:3} when next button is clicked");

              case 12:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }()); // 5. Sort check

    (0, _qunit.test)("it should trigger sort transition with proper sort params on table column sort", /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var sortPaginateSpy, stub, sortByIdAscParams, sortByIdDescParams;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                // Arrange
                sortPaginateSpy = _sinon.default.spy();
                stub = _sinon.default.stub();
                sortByIdAscParams = {
                  page: 1,
                  dir: "asc",
                  sort_by: "id"
                };
                sortByIdDescParams = {
                  page: 1,
                  dir: "desc",
                  sort_by: "id"
                };
                this.setProperties({
                  model: TEST_ALERTS,
                  meta: {
                    current: 1,
                    next: 2,
                    prev: null,
                    last: 3,
                    total_count: 90,
                    count: 90
                  },
                  page: 1,
                  dir: "desc",
                  sortBy: "updated_at",
                  filter: null,
                  toggleSidebar: stub,
                  isSidebarEnabled: false,
                  setPageNav: stub,
                  sortPaginate: sortPaginateSpy,
                  applyFilter: stub,
                  resetFilter: stub,
                  setColumns: stub,
                  resetQPToDefaults: stub
                });
                _context5.next = 7;
                return renderComponent();

              case 7:
                _context5.next = 9;
                return _alertList.default.sortByAlertId();

              case 9:
                // asc
                // Assert
                assert.ok(sortPaginateSpy.firstCall.calledWith(sortByIdAscParams), "[sort asc] sortPaginate was called with asc sort params on id column click"); // Act

                _context5.next = 12;
                return _alertList.default.sortByAlertId();

              case 12:
                // desc
                // Assert
                assert.ok(sortPaginateSpy.secondCall.calledWith(sortByIdDescParams), "[sort desc] sortPaginate was called with desc sort params on id column click");

              case 13:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }()); // 6. Empty table sort check

    (0, _qunit.test)("it should not trigger sort transition in a empty table column sort", /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var stub, sortPaginateSpy;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                // Arrange
                stub = _sinon.default.stub();
                sortPaginateSpy = _sinon.default.spy();
                this.setProperties({
                  model: Ember.A([]),
                  meta: {
                    current: 1,
                    next: null,
                    prev: null,
                    last: 1,
                    total_count: 0,
                    count: 0
                  },
                  page: 1,
                  dir: "desc",
                  sortBy: "updated_at",
                  filter: null,
                  toggleSidebar: stub,
                  isSidebarEnabled: false,
                  setPageNav: stub,
                  sortPaginate: sortPaginateSpy,
                  applyFilter: stub,
                  resetFilter: stub,
                  setColumns: stub,
                  resetQPToDefaults: stub
                }); // Act

                _context6.next = 5;
                return renderComponent();

              case 5:
                _context6.next = 7;
                return _alertList.default.sortByAlertId();

              case 7:
                // Assert
                assert.notOk(sortPaginateSpy.calledOnce);

              case 8:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x6) {
        return _ref7.apply(this, arguments);
      };
    }()); // 7. Select all rows check

    (0, _qunit.test)("it should select all rows when SelectAll is clicked, with non-associated alerts", /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var stub;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                // Arrange
                stub = _sinon.default.stub();
                this.setProperties({
                  model: Ember.A(NON_ASSOCIATED_TEST_ALERTS.slice(0, 5)),
                  meta: {
                    current: 1,
                    next: 2,
                    prev: null,
                    last: 3,
                    total_count: 90,
                    count: 90
                  },
                  page: 1,
                  dir: "desc",
                  sortBy: "updated_at",
                  filter: null,
                  toggleSidebar: stub,
                  isSidebarEnabled: false,
                  setPageNav: stub,
                  sortPaginate: stub,
                  applyFilter: stub,
                  resetFilter: stub,
                  setColumns: stub,
                  resetQPToDefaults: stub
                }); // Act

                _context7.next = 4;
                return renderComponent();

              case 4:
                _context7.next = 6;
                return _alertList.default.clickSelectAll();

              case 6:
                // Assert
                assert.ok(_alertList.default.allCheckboxesChecked.every(function (v) {
                  return v === true;
                }), "[on select all check] All checkboxes are checked as expected"); // Act

                _context7.next = 9;
                return _alertList.default.clickSelectAll();

              case 9:
                // Assert
                assert.ok(_alertList.default.allCheckboxesChecked.every(function (v) {
                  return v === false;
                }), "[on select all uncheck] All checkboxes are unchecked as expected");

              case 10:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x7) {
        return _ref8.apply(this, arguments);
      };
    }()); // 8. Select all rows check

    (0, _qunit.test)("it should select all rows when SelectAll is clicked, with non-resolved alerts", /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var stub;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                // Arrange
                stub = _sinon.default.stub();
                this.setProperties({
                  model: ASSOCIATED_NON_RESOLVED_TEST_ALERTS,
                  meta: {
                    current: 1,
                    next: 2,
                    prev: null,
                    last: 3,
                    total_count: 90,
                    count: 90
                  },
                  page: 1,
                  dir: "desc",
                  sortBy: "updated_at",
                  filter: null,
                  toggleSidebar: stub,
                  isSidebarEnabled: false,
                  setPageNav: stub,
                  sortPaginate: stub,
                  applyFilter: stub,
                  resetFilter: stub,
                  setColumns: stub,
                  resetQPToDefaults: stub
                }); // Act

                _context8.next = 4;
                return renderComponent();

              case 4:
                _context8.next = 6;
                return _alertList.default.clickSelectAll();

              case 6:
                // Assert
                assert.ok(_alertList.default.allCheckboxesChecked.every(function (v) {
                  return v === true;
                }), "[on select all check] All checkboxes are checked as expected"); // Act

                _context8.next = 9;
                return _alertList.default.clickSelectAll();

              case 9:
                // Assert
                assert.ok(_alertList.default.allCheckboxesChecked.every(function (v) {
                  return v === false;
                }), "[on select all uncheck] All checkboxes are unchecked as expected");

              case 10:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x8) {
        return _ref9.apply(this, arguments);
      };
    }()); // 9. Select all rows check with disabled rows

    (0, _qunit.test)("it should not select rows when SelectAll is clicked, with associated-resolved alerts", /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        var stub;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                // Arrange
                stub = _sinon.default.stub();
                this.setProperties({
                  model: ASSOCIATED_RESOLVED_TEST_ALERT,
                  meta: {
                    current: 1,
                    next: 2,
                    prev: null,
                    last: 3,
                    total_count: 90,
                    count: 90
                  },
                  page: 1,
                  dir: "desc",
                  sortBy: "updated_at",
                  filter: null,
                  toggleSidebar: stub,
                  isSidebarEnabled: false,
                  setPageNav: stub,
                  sortPaginate: stub,
                  applyFilter: stub,
                  resetFilter: stub,
                  setColumns: stub,
                  resetQPToDefaults: stub
                }); // Act

                _context9.next = 4;
                return renderComponent();

              case 4:
                _context9.next = 6;
                return _alertList.default.clickSelectAll();

              case 6:
                // Assert
                assert.notOk(_alertList.default.isCheckboxDisabled, "Checkbox is not disabled as expected");
                assert.ok(_alertList.default.allCheckboxesChecked.every(function (v) {
                  return v === true;
                }), "All checkbox are checked as expected");

              case 8:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x9) {
        return _ref10.apply(this, arguments);
      };
    }()); // 10. Filter sidepane render check

    (0, _qunit.skip)("it should render filter side panel when filter icon is clicked and check elements", /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var stub, fake, visibleFilterFieldsCount;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                // Arrange
                stub = _sinon.default.stub();
                fake = _sinon.default.fake(function () {
                  this.set("isSidebarEnabled", true);
                }.bind(this));
                this.setProperties({
                  model: TEST_ALERTS,
                  meta: {
                    current: 1,
                    next: 2,
                    prev: null,
                    last: 2,
                    total_count: 31,
                    count: 31
                  },
                  page: 1,
                  dir: "desc",
                  sortBy: "updated_at",
                  filter: null,
                  toggleSidebar: fake,
                  isSidebarEnabled: this.isSidebarEnabled || false,
                  setPageNav: stub,
                  sortPaginate: stub,
                  applyFilter: stub,
                  resetFilter: stub,
                  setColumns: stub,
                  resetQPToDefaults: stub
                }); // Act

                _context10.next = 5;
                return renderComponent();

              case 5:
                _context10.next = 7;
                return _alertList.default.clickFilterIcon();

              case 7:
                _context10.next = 9;
                return _alertList.default.formUtils.selectBasicDropdown("filter-row-acknowledged", "Acknowledged");

              case 9:
                // Assert
                visibleFilterFieldsCount = _alertList.default.allFilterRows.filter(function (r) {
                  return r.isVisible;
                }).length;
                assert.ok(fake.calledOnce, "'toggleSidebar()' was called when filter icon was clicked");
                assert.ok(this.isSidebarEnabled, "Filter sidebar is enabled");
                assert.equal(visibleFilterFieldsCount, _listFilter.LIST_FILTER_ATTRS.length, "Total visible filter fields = ".concat(_listFilter.LIST_FILTER_ATTRS.length));
                assert.ok(_alertList.default.isFilterApplyBtnVisible, "Apply button is visible in filter section");
                assert.ok(_alertList.default.isFilterCancelBtnVisible, "Cancel button is visible in filter section");

              case 15:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x10) {
        return _ref11.apply(this, arguments);
      };
    }()); // 11. Fetch ticket status call failure

    (0, _qunit.skip)("it should throw error toastr in case of failure in fetching ticket statuses", /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        var stub, failureToastrSpy, EXPECTED_TOASTR_MSG;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                // Arrange
                stub = _sinon.default.stub();
                failureToastrSpy = (0, _spyFlashMessage.default)("danger");
                EXPECTED_TOASTR_MSG = FAILURE_TOASTR_MESSAGE;
                this.server.get("/ticket_statuses", {
                  errors: ["Error"]
                }, 500);
                this.setProperties({
                  model: TEST_ALERTS,
                  meta: {
                    current: 1,
                    next: 2,
                    prev: null,
                    last: 2,
                    total_count: 31,
                    count: 31
                  },
                  page: 1,
                  dir: "desc",
                  sortBy: "updated_at",
                  filter: null,
                  toggleSidebar: stub,
                  isSidebarEnabled: false,
                  setPageNav: stub,
                  sortPaginate: stub,
                  applyFilter: stub,
                  resetFilter: stub,
                  setColumns: stub,
                  resetQPToDefaults: stub
                }); // Act

                _context11.next = 7;
                return renderComponent();

              case 7:
                // Assert
                assert.ok(failureToastrSpy.calledOnceWithExactly(EXPECTED_TOASTR_MSG), "Expected failure toastr is shown");
                assert.equal(failureToastrSpy.displayName, "danger", "Displayed toastr is of type 'danger' as expected");

              case 9:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x11) {
        return _ref12.apply(this, arguments);
      };
    }()); // 12. Individual row selection check

    (0, _qunit.test)("it should select the row on checkbox click and make bulk actions visible", /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        var stub;
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                // Arrange - test alert has incident id but severity as warning, so checkbox will be enabled
                stub = _sinon.default.stub();
                this.setProperties({
                  model: Ember.A([TEST_ALERTS.firstObject]),
                  meta: {
                    current: 1,
                    next: null,
                    prev: null,
                    last: 1,
                    total_count: 1,
                    count: 1
                  },
                  page: 1,
                  dir: "desc",
                  sortBy: "updated_at",
                  filter: null,
                  toggleSidebar: stub,
                  isSidebarEnabled: false,
                  setPageNav: stub,
                  sortPaginate: stub,
                  applyFilter: stub,
                  resetFilter: stub,
                  setColumns: stub,
                  resetQPToDefaults: stub
                }); // Act - render single alert in the table

                _context12.next = 4;
                return renderComponent();

              case 4:
                _context12.next = 6;
                return _alertList.default.clickCheckbox();

              case 6:
                // Assert
                assert.ok(_alertList.default.isRowSelected, "[on check] The row is in selection state as expected");
                assert.ok(_alertList.default.isSelectAllChecked, "[on check] Select all checkbox is in checked state as expected");
                assert.ok(_alertList.default.isBulkActionOptionsVisible, "[on check Bulk action options are visible as expected"); // Act

                _context12.next = 11;
                return _alertList.default.clickCheckbox();

              case 11:
                // Assert
                assert.notOk(_alertList.default.isRowSelected, "[on uncheck] The row is not selection state as expected");
                assert.notOk(_alertList.default.isSelectAllChecked, "[on uncheck] Select all checkbox is in checked state as expected");
                assert.notOk(_alertList.default.isBulkActionOptionsVisible, "[on uncheck] Bulk action options are visible as expected");

              case 14:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x12) {
        return _ref13.apply(this, arguments);
      };
    }()); // 13. Apply/cancel filter check

    (0, _qunit.test)("it should check applying a filter and clearing the same", /*#__PURE__*/function () {
      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
        var applyFilterSpy, resetFilterSpy, stub, EXPECTED_FILTER_APPLY_PARAMS, severityOnApply, severityOnReset;
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                // Arrange
                applyFilterSpy = _sinon.default.spy();
                resetFilterSpy = _sinon.default.spy();
                stub = _sinon.default.stub();
                EXPECTED_FILTER_APPLY_PARAMS = {
                  filter: (0, _common.jsonStringify)([{
                    condition: "severity",
                    operator: "is_in",
                    value: ["warning"]
                  }])
                };
                this.setProperties({
                  model: TEST_ALERTS,
                  meta: {
                    current: 1,
                    next: null,
                    prev: null,
                    last: 1,
                    total_count: 1,
                    count: 1
                  },
                  page: 1,
                  dir: "desc",
                  sortBy: "updated_at",
                  filter: null,
                  toggleSidebar: stub,
                  isSidebarEnabled: true,
                  setPageNav: stub,
                  sortPaginate: stub,
                  applyFilter: applyFilterSpy,
                  resetFilter: resetFilterSpy,
                  setColumns: stub,
                  resetQPToDefaults: stub
                }); // Act - render and set severity filter

                _context13.next = 7;
                return renderComponent();

              case 7:
                _context13.next = 9;
                return _alertList.default.formUtils.autocompleteSelectMultipleWithoutSearch("filter-field-severity", 1);

              case 9:
                _context13.next = 11;
                return _alertList.default.clickFilterApply();

              case 11:
                // Assert
                severityOnApply = _alertList.default.formUtils.getBasicDropdownSelectedText("filter-row-severity");
                severityOnApply = severityOnApply.replace("×", "").trim();
                assert.equal(severityOnApply, "warning", "Filter field is set as expected");
                assert.ok(applyFilterSpy.calledOnceWith(EXPECTED_FILTER_APPLY_PARAMS), "'applyFilter()' was called with expected filter params on 'Apply' click"); // Act

                _context13.next = 17;
                return _alertList.default.clickFilterCancel();

              case 17:
                // Assert
                severityOnReset = _alertList.default.formUtils.getBasicDropdownSelectedText("filter-row-severity");
                assert.equal(severityOnReset, "", "Filter field is cleared as expected");
                assert.ok(resetFilterSpy.calledOnce, "'resetFilter()' was called on 'Clear All' click");

              case 20:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      return function (_x13) {
        return _ref14.apply(this, arguments);
      };
    }()); // 14. Check indeterminate state for selectall checkbox

    (0, _qunit.test)("it should render 'Select All' checkbox in indeterminate state when only few rows are selected", /*#__PURE__*/function () {
      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {
        var stub;
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                // Arrange
                stub = _sinon.default.stub();
                this.setProperties({
                  model: Ember.A(NON_ASSOCIATED_TEST_ALERTS.slice(0, 5)),
                  meta: {
                    current: 1,
                    next: 2,
                    prev: null,
                    last: 3,
                    total_count: 90,
                    count: 90
                  },
                  page: 1,
                  dir: "desc",
                  sortBy: "updated_at",
                  filter: null,
                  toggleSidebar: stub,
                  isSidebarEnabled: false,
                  setPageNav: stub,
                  sortPaginate: stub,
                  applyFilter: stub,
                  resetFilter: stub,
                  setColumns: stub,
                  resetQPToDefaults: stub
                }); // Act

                _context14.next = 4;
                return renderComponent();

              case 4:
                _context14.next = 6;
                return _alertList.default.clickFirstCheckBox();

              case 6:
                // Assert
                assert.ok(_alertList.default.isSelectAllCheckboxIndeterminate, "'SelectAll' checkbox is indeterminate as expected");

              case 7:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      return function (_x14) {
        return _ref15.apply(this, arguments);
      };
    }()); // 15. Check mark as resolved action

    (0, _qunit.test)("it should check for mark as resolved action and success toastr", /*#__PURE__*/function () {
      var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {
        var stub, successToastrSpy, EXPECTED_TOASTR_MSG, OPEN_TEST_ALERT;
        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                // Arrange
                stub = _sinon.default.stub();
                successToastrSpy = (0, _spyFlashMessage.default)("success");
                EXPECTED_TOASTR_MSG = "Selected alert has been resolved successfully.";
                OPEN_TEST_ALERT = Ember.A(_toConsumableArray(_alerts.default.filter(function (a) {
                  return a.state !== _common2.ALERT_RESOLVED;
                }).slice(0, 1).map(function (alert) {
                  return Ember.Object.create(alert);
                })));
                this.setProperties({
                  model: OPEN_TEST_ALERT,
                  meta: {
                    current: 1,
                    next: 2,
                    prev: null,
                    last: 3,
                    total_count: 90,
                    count: 90
                  },
                  page: 1,
                  dir: "desc",
                  sortBy: "updated_at",
                  filter: null,
                  toggleSidebar: stub,
                  isSidebarEnabled: false,
                  setPageNav: stub,
                  sortPaginate: stub,
                  applyFilter: stub,
                  resetFilter: stub,
                  setColumns: stub,
                  resetQPToDefaults: stub
                }); // Act

                _context15.next = 7;
                return renderComponent();

              case 7:
                _context15.next = 9;
                return _alertList.default.clickFirstCheckBox();

              case 9:
                _context15.next = 11;
                return _alertList.default.clickMarkAsResolved();

              case 11:
                // Assert
                assert.ok(successToastrSpy.calledWith(EXPECTED_TOASTR_MSG), "Expected success toastr is shown");
                assert.equal(successToastrSpy.displayName, "success", "Displayed toastr is of type 'success' as expected");

              case 13:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      return function (_x15) {
        return _ref16.apply(this, arguments);
      };
    }()); //16. Check alerts table, 'alert_management' is enabled

    (0, _qunit.test)("it should render add integration card, if table is empty", /*#__PURE__*/function () {
      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(assert) {
        var stub;
        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                // Arrange
                stub = _sinon.default.stub();
                (0, _stubCurrentAccount.stubCurrentAccount)({
                  features: ['alert_management']
                });
                this.setProperties({
                  model: Ember.A([]),
                  meta: {
                    current: 1,
                    next: null,
                    prev: null,
                    last: 1,
                    total_count: 0,
                    count: 0
                  },
                  page: 1,
                  dir: "desc",
                  sortBy: "updated_at",
                  filter: null,
                  toggleSidebar: stub,
                  isSidebarEnabled: false,
                  setPageNav: stub,
                  sortPaginate: stub,
                  applyFilter: stub,
                  resetFilter: stub,
                  setColumns: stub,
                  resetQPToDefaults: stub
                }); // Act

                _context16.next = 5;
                return renderComponent();

              case 5:
                assert.ok(_alertList.default.isTableEmpty, "Alerts table has default/empty state displayed.");
                assert.ok(_alertList.default.isAlertsTableDisabled, "Alerts table is disabled.");
                assert.ok(_alertList.default.hasAddIntegrationsCard, "Add integrations card is rendered as expected.");

              case 8:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      return function (_x16) {
        return _ref17.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-ams/list/enable-ams/component-test", ["qunit", "ember-qunit", "freshservice/tests/lib/intl", "@ember/test-helpers", "freshservice/tests/pages/components/module-ams/enable-ams"], function (_qunit, _emberQunit, _intl, _testHelpers, _enableAms) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)("Integration | Component | module-ams | list | enable-ams", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _qunit.test)("should render enable ams card", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleAms::List::EnableAms/>
                */
                {
                  id: "/XxxAVHh",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-ams/list/enable-ams\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.equal(_enableAms.default.titleText, "There are no alerts yet!", "Enable ams title rendered properly");
                assert.equal(_enableAms.default.subtitleText, "Enable alert management to integrate with your monitoring tools to view alerts here.", "Enable ams subtitle rendered properly");
                assert.equal(_enableAms.default.buttonText, "Enable alert management", "Enable ams button rendered properly");
                assert.equal(_enableAms.default.externalLinkText, "Know more", "Enable ams external link rendered properly");

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-ams/list/light-table-components/checkbox-cell/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "sinon", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/pages/components/module-ams/alert-list", "freshservice/constants/ams/common"], function (_qunit, _emberQunit, _testHelpers, _sinon, _testSupport, _intl, _alertList, _common) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function renderComponent() {
    return _renderComponent.apply(this, arguments);
  }

  function _renderComponent() {
    _renderComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
      return regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleAms::List::LightTableComponents::CheckboxCell
              		@row  = {{row}}
              		@tableActions = {{tableActions}}
              	/>
              */
              {
                id: "D+MHwPHX",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-ams/list/light-table-components/checkbox-cell\",[],[[\"@row\",\"@tableActions\"],[[22,\"row\"],[22,\"tableActions\"]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    }));
    return _renderComponent.apply(this, arguments);
  }

  (0, _qunit.module)("Integration | Component | module-ams | list | light-table-components | checkbox-cell", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks); // 1. Disabled checkbox

    (0, _qunit.test)("it should render disabled checkbox when incident id and 'ok' state is passed", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var stub;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Arrange
                stub = _sinon.default.stub();
                this.setProperties({
                  row: Ember.Object.create({
                    incidentId: "99999",
                    state: _common.ALERT_RESOLVED
                  }),
                  tableActions: {
                    selectRow: stub
                  }
                }); // Act

                _context.next = 4;
                return renderComponent();

              case 4:
                // Assert
                assert.notOk(_alertList.default.isCheckboxDisabled, "Not disabled as expected");

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }()); // 2. Enabled checkbox

    (0, _qunit.test)("it should render enabled checkbox when incident id is not passed", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var stub;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                // Arrange
                stub = _sinon.default.stub();
                this.setProperties({
                  row: Ember.Object.create({
                    incidentId: null
                  }),
                  tableActions: {
                    selectRow: stub
                  }
                }); // Act

                _context2.next = 4;
                return renderComponent();

              case 4:
                // Assert
                assert.notOk(_alertList.default.isCheckboxDisabled, "Enabled as expected");

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }()); // 3. Enabled checkbox

    (0, _qunit.test)("it should render enabled checkbox when severity is not 'ok'", /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var stub;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                // Arrange
                stub = _sinon.default.stub();
                this.setProperties({
                  row: Ember.Object.create({
                    severity: "warning"
                  }),
                  tableActions: {
                    selectRow: stub
                  }
                }); // Act

                _context3.next = 4;
                return renderComponent();

              case 4:
                // Assert
                assert.notOk(_alertList.default.isCheckboxDisabled, "Enabled as expected");

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }()); // 4. Action handler check when clicked

    (0, _qunit.test)("it should invoke click action handler when clicked", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var spy;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                // Arrange
                spy = _sinon.default.spy();
                this.setProperties({
                  row: Ember.Object.create({
                    severity: "warning"
                  }),
                  tableActions: {
                    selectRow: spy
                  }
                }); // Act

                _context4.next = 4;
                return renderComponent();

              case 4:
                _context4.next = 6;
                return _alertList.default.clickCheckbox();

              case 6:
                // Assert
                assert.notOk(_alertList.default.isCheckboxDisabled, "Enabled as expected");
                assert.ok(spy.calledOnceWith(this.row), "Action handler was with expected params");

              case 8:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }()); // 5.

    (0, _qunit.test)("it should render in checked state based on the 'isSelected' input", /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var spy;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                // Arrange
                spy = _sinon.default.spy();
                this.setProperties({
                  row: Ember.Object.create({
                    severity: "warning",
                    isSelected: true
                  }),
                  tableActions: {
                    selectRow: spy
                  }
                }); // Act

                _context5.next = 4;
                return renderComponent();

              case 4:
                // Assert
                assert.equal(_alertList.default.checkBoxValue, "on", "Checked as expected");

              case 5:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-ams/list/light-table-components/date-cell/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "moment", "freshservice/tests/lib/intl", "freshservice/tests/pages/components/module-ams/alert-list"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _moment, _intl, _alertList) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function renderComponent() {
    return _renderComponent.apply(this, arguments);
  }

  function _renderComponent() {
    _renderComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleAms::List::LightTableComponents::DateCell
              		@value = {{value}}
              	/>
              */
              {
                id: "G3icOaw0",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-ams/list/light-table-components/date-cell\",[],[[\"@value\"],[[22,\"value\"]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));
    return _renderComponent.apply(this, arguments);
  }

  (0, _qunit.module)("Integration | Component | module-ams | list | light-table-components | date-cell", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks); // 1. Current year

    (0, _qunit.test)("it displays date without year, for a current year date", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var ACTUAL_DATE, EXPECTED_DATE;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Arrange
                ACTUAL_DATE = new Date();
                EXPECTED_DATE = (0, _moment.default)(ACTUAL_DATE).format("ddd, D MMM h:mm:ss A");
                this.set("value", ACTUAL_DATE); // Act

                _context.next = 5;
                return renderComponent();

              case 5:
                // Assert
                assert.equal(_alertList.default.dateCellText, EXPECTED_DATE);

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }()); // 2. Non-current year

    (0, _qunit.test)("it displays date with year, for a non-current year date", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var ACTUAL_DATE, EXPECTED_DATE;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                // Arrange
                ACTUAL_DATE = new Date(2014, 1, 21); // Freshservice product launch date ;-)

                EXPECTED_DATE = (0, _moment.default)(ACTUAL_DATE).format("ddd, D MMM YYYY h:mm:ss A");
                this.set("value", ACTUAL_DATE); // Act

                _context2.next = 5;
                return renderComponent();

              case 5:
                // Assert
                assert.equal(_alertList.default.dateCellText, EXPECTED_DATE);

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-ams/list/light-table-components/print-json/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _intl) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function renderComponent() {
    return _renderComponent.apply(this, arguments);
  }

  function _renderComponent() {
    _renderComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleAms::List::LightTableComponents::PrintJson
              		@value = {{value}}
              	/>
              */
              {
                id: "nloHBkI4",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-ams/list/light-table-components/print-json\",[],[[\"@value\"],[[22,\"value\"]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));
    return _renderComponent.apply(this, arguments);
  }

  (0, _qunit.module)("Integration | Component | module-ams | list | light-table-components | print-json", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks); // 1. Empty input test

    (0, _qunit.test)("it should render '-' in case of empty input", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var ACTUAL, EXPECTED;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Arrange
                ACTUAL = null;
                EXPECTED = "-";
                this.set("value", ACTUAL); // Act

                _context.next = 5;
                return renderComponent();

              case 5:
                // Assert
                assert.equal(this.element.innerText, EXPECTED);

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }()); // 2. Basic render test

    (0, _qunit.skip)("it should render given object as space separated string", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var ACTUAL, EXPECTED;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                // Arrange
                ACTUAL = {
                  custom_attribute1: "attr1",
                  custom_attribute2: "attr2",
                  custom_attribute3: "attr3"
                };
                EXPECTED = "custom_attribute1:attr1 custom_attribute2:attr2 custom_attribute3:attr3";
                this.set("value", ACTUAL); // Act

                _context2.next = 5;
                return renderComponent();

              case 5:
                // Assert
                assert.equal(this.element.innerText, EXPECTED);

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-ams/list/light-table-components/severity-cell-detail/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/pages/components/module-ams/alert-details", "freshservice/constants/ams/details"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _intl, _alertDetails, _details) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function renderComponent() {
    return _renderComponent.apply(this, arguments);
  }

  function _renderComponent() {
    _renderComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleAms::List::LightTableComponents::SeverityCellDetail
              		@value = {{value}}
              	/>
              */
              {
                id: "B6zcYVb9",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-ams/list/light-table-components/severity-cell-detail\",[],[[\"@value\"],[[22,\"value\"]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
    return _renderComponent.apply(this, arguments);
  }

  (0, _qunit.module)("Integration | Component | module-ams | list | light-table-components | severity-cell-detail", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _qunit.test)("it renders the expected badge for the given severity", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var ACTUAL_ALERT_SEVERITY, EXPECTED_CLASSNAMES, EXPECTED_SEVERITY_TEXT;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Arrange
                ACTUAL_ALERT_SEVERITY = "ok";
                EXPECTED_CLASSNAMES = "ember-badge ember-badge-".concat(_details.SEVERITY_COLOR_MAP["ok"], " severity-ok");
                EXPECTED_SEVERITY_TEXT = "ok";
                this.set("value", ACTUAL_ALERT_SEVERITY); // Act

                _context.next = 6;
                return renderComponent();

              case 6:
                // Assert
                assert.equal(_alertDetails.default.severityBadgeClassNames, EXPECTED_CLASSNAMES);
                assert.equal(_alertDetails.default.severityBadgeText, EXPECTED_SEVERITY_TEXT);

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-ams/services/details/activities/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "sinon", "ember-cli-mirage/test-support", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-current-account", "freshservice/mirage/fixtures/services", "freshservice/mirage/fixtures/service-activities", "freshservice/tests/pages/components/module-ams/services/activities"], function (_qunit, _emberQunit, _testHelpers, _sinon, _testSupport, _sinonContext, _intl, _stubCurrentAccount, _services, _serviceActivities, _activities) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var TEST_ACCOUNT = {
    features: ['service_awareness']
  };
  var TEST_SERVICE = _services.default[0];

  function renderComponent() {
    return _renderComponent.apply(this, arguments);
  }

  function _renderComponent() {
    _renderComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleAms::Services::Details::Activities @model={{this.model}}/>
              */
              {
                id: "aP4jO6VQ",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-ams/services/details/activities\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));
    return _renderComponent.apply(this, arguments);
  }

  (0, _qunit.module)('Integration | Component | module-ams | services | details | activities', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    hooks.beforeEach(function () {
      (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
      String.prototype.parseQuery = _sinon.default.stub();
      String.prototype.parseQuery.returns(_serviceActivities.default[1].meta.start_token);
    });
    hooks.afterEach(function () {
      this.owner.destroy('service:current-user');
      this.owner.destroy('service:current-account');
      delete String.prototype.parseQuery;
    }); // 1. Empty state check

    (0, _qunit.test)('it should display empty state if no activities', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var model;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                model = Ember.Object.extend({
                  fetchAllActivities: function fetchAllActivities() {
                    return {
                      activities: []
                    };
                  }
                });
                this.set("model", model.create(TEST_SERVICE));
                _context.next = 4;
                return renderComponent();

              case 4:
                assert.ok(_activities.default.isEmpty, 'Empty state is displayed successfully');

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }()); // 2. Display records

    (0, _qunit.test)('it should display list of activities', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var model;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                model = Ember.Object.extend({
                  fetchAllActivities: function fetchAllActivities() {
                    return _serviceActivities.default[0];
                  }
                });
                this.set("model", model.create(TEST_SERVICE));
                _context2.next = 4;
                return renderComponent();

              case 4:
                assert.equal(_activities.default.numEntries, 4, 'Service activities are displayed successfully');

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }()); // 3. Lazy loading

    (0, _qunit.test)('it should display list of activities with lazy loading', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var model, container, loader;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                model = Ember.Object.extend({
                  fetchAllActivities: function fetchAllActivities() {
                    return _serviceActivities.default[1];
                  }
                });
                this.set("model", model.create(TEST_SERVICE));
                _context3.next = 4;
                return renderComponent();

              case 4:
                container = this.element.querySelector('.itom_service_activities');
                container.scrollTop = container.scrollHeight - 50;
                _context3.next = 8;
                return _activities.default.scrollList();

              case 8:
                _context3.next = 10;
                return (0, _testHelpers.find)('.infinity-loader');

              case 10:
                loader = _context3.sent;
                _context3.next = 13;
                return loader === null || loader === void 0 ? void 0 : loader.scrollIntoView();

              case 13:
                assert.ok(_activities.default.lazyLoaderExist, 'Loader is displayed');

              case 14:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-ams/services/details/alert-configurations/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/pages/components/module-ams/alert-configurations", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/stub-current-account"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _alertConfigurations, _sinonContext, _intl, _stubCurrentUser, _stubCurrentAccount) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var TEST_USER = {
    privileges: [],
    preferences: {
      shortcuts_enabled: false
    }
  };
  var TEST_ACCOUNT = {
    features: ['service_awareness']
  };

  function renderComponent() {
    return _renderComponent.apply(this, arguments);
  }

  function _renderComponent() {
    _renderComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleAms::Services::Details::AlertConfigurations
              		@model = {{this.model}} />
              */
              {
                id: "f6Na1OwW",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-ams/services/details/alert-configurations\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));
    return _renderComponent.apply(this, arguments);
  }

  (0, _qunit.module)('Integration | Component | module-ams | services | details | alert-configurations', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    hooks.beforeEach(function () {
      this.intl = this.owner.lookup("service:intl");
      this.store = this.owner.lookup('service:store');
      (0, _stubCurrentUser.stubCurrentUser)(TEST_USER);
      (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
    });
    hooks.afterEach(function () {
      this.owner.destroy('service:current-user');
      this.owner.destroy('service:current-account');
    }); // 1. Empty state check

    (0, _qunit.test)('Alert configuration tab with no integrations mapped', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var serviceId, mockServiceData;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                serviceId = 101;
                _context.next = 3;
                return this.store.findRecord('service', serviceId);

              case 3:
                mockServiceData = _context.sent;
                this.setProperties({
                  model: mockServiceData
                });
                _context.next = 7;
                return renderComponent();

              case 7:
                assert.equal(_alertConfigurations.default.tabTitle, 'Integrations mapped to the service', 'Integration list title has been displayed');
                assert.equal(_alertConfigurations.default.emptyText, 'Triage your real-time alerts in a single pane.', 'No integrations were mapped for this particular service');

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }()); //2. Alert configuration tab with service mapped

    (0, _qunit.test)('Alert configuration tab with integrations mapped with given service id', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var serviceId, mockServiceData;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                serviceId = 102;
                _context2.next = 3;
                return this.store.findRecord('service', serviceId);

              case 3:
                mockServiceData = _context2.sent;
                this.setProperties({
                  model: mockServiceData
                });
                _context2.next = 7;
                return renderComponent();

              case 7:
                assert.equal(_alertConfigurations.default.tabTitle, 'Integrations mapped to the service', 'Integration list title has been displayed');
                assert.equal(_alertConfigurations.default.integrationLinkName, 'Amazon EC2 4', 'Integration "Amazon EC2 4" were mapped for this particular service and listed');

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-ams/services/details/contract/component-test", ["qunit", "ember-qunit", "freshservice/tests/lib/intl", "ember-cli-mirage/test-support", "@ember/test-helpers", "freshservice/mirage/fixtures/services", "freshservice/tests/pages/components/module-ams/service-details"], function (_qunit, _emberQunit, _intl, _testSupport, _testHelpers, _services, _serviceDetails) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-ams | services | details | contract', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks); // 1. Empty state

    (0, _qunit.skip)('should render empty state if contract is empty', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.set('model', _services.default[0]);
                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleAms::Services::Details::Contract @model={{this.model}}/>
                */
                {
                  id: "zkJE4Ujw",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-ams/services/details/contract\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.ok(_serviceDetails.default.emptyContract, 'Empty state is visible');
                assert.equal(_serviceDetails.default.contracts, 0, 'No contracts created yet');

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }()); // 2. Basic render test

    (0, _qunit.skip)('it renders and displays contract in expected format', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.set('model', _services.default[1]);
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleAms::Services::Details::Contract @model={{this.model}}/>
                */
                {
                  id: "zkJE4Ujw",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-ams/services/details/contract\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.ok(_serviceDetails.default.isContractIdVisible, "Id is present as expected");
                assert.ok(_serviceDetails.default.isContractNameVisible, "Name is present as expected");
                assert.ok(_serviceDetails.default.isContractTypeVisible, "Type is present as expected");
                assert.ok(_serviceDetails.default.isContractStatusVisible, "Status is present as expected");
                assert.equal(_serviceDetails.default.contracts, 3, 'Service has 3 associated contracts');

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-ams/services/details/delete-service-modal/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/pages/components/module-ams/delete-service", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-current-account"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _deleteService, _sinonContext, _intl, _stubCurrentAccount) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var TEST_ACCOUNT = {
    features: ['service_awareness'],
    temp_features: ['service_health']
  };
  (0, _qunit.module)('Integration | Component | module-ams | services | details | delete-service-modal', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    hooks.beforeEach(function () {
      (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
      this.intl = this.owner.lookup("service:intl");
      this.server.loadFixtures('services');
    });
    (0, _qunit.test)('it should delete the service if it has integration mapping', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.setProperties({
                  model: {
                    id: 1
                  }
                });
                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleAms::Services::Details @model={{this.model}}/>
                */
                {
                  id: "Z58eUPo+",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-ams/services/details\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context.next = 5;
                return (0, _testHelpers.waitFor)('.services-details', {
                  timeout: 4000
                });

              case 5:
                assert.ok(_deleteService.default.isDetailsVisible, "Service details page rendered successfully");
                _context.next = 8;
                return _deleteService.default.clickIntegrationTab();

              case 8:
                _context.next = 10;
                return (0, _testHelpers.waitFor)('.integration-list', {
                  timeout: 8000
                });

              case 10:
                _context.next = 12;
                return _deleteService.default.clickDropDownBtn();

              case 12:
                _context.next = 14;
                return (0, _testHelpers.waitFor)('.ember-basic-dropdown-content', {
                  timeout: 4000
                });

              case 14:
                assert.ok(_deleteService.default.isDropDownVisible, "Dropdown rendered successfully");
                _context.next = 17;
                return _deleteService.default.clickDeleteBtn();

              case 17:
                _context.next = 19;
                return (0, _testHelpers.waitFor)('.service-delete-modal', {
                  timeout: 4000
                });

              case 19:
                _context.next = 21;
                return _deleteService.default.clickDeleteService();

              case 21:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should delete the service if no integration mapping', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.setProperties({
                  model: {
                    id: 101
                  }
                });
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleAms::Services::Details @model={{this.model}}/>
                */
                {
                  id: "Z58eUPo+",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-ams/services/details\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context2.next = 5;
                return (0, _testHelpers.waitFor)('.services-details', {
                  timeout: 4000
                });

              case 5:
                assert.ok(_deleteService.default.isDetailsVisible, "Service details page rendered successfully");
                _context2.next = 8;
                return _deleteService.default.clickIntegrationTab();

              case 8:
                _context2.next = 10;
                return (0, _testHelpers.waitFor)('.default-content', {
                  timeout: 8000
                });

              case 10:
                _context2.next = 12;
                return _deleteService.default.clickDropDownBtn();

              case 12:
                _context2.next = 14;
                return (0, _testHelpers.waitFor)('.ember-basic-dropdown-content', {
                  timeout: 4000
                });

              case 14:
                assert.ok(_deleteService.default.isDropDownVisible, "Dropdown rendered successfully");
                _context2.next = 17;
                return _deleteService.default.clickDeleteBtn();

              case 17:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-ams/services/list/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "sinon", "ember-cli-mirage/test-support", "freshservice/tests/pages/components/module-ams/service-list", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/stub-current-account"], function (_qunit, _emberQunit, _testHelpers, _sinon, _testSupport, _serviceList, _sinonContext, _intl, _stubCurrentUser, _stubCurrentAccount) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var TEST_USER = {
    privileges: [],
    preferences: {
      shortcuts_enabled: false
    }
  };
  var TEST_ACCOUNT = {
    features: ['service_awareness']
  };

  function renderComponent() {
    return _renderComponent.apply(this, arguments);
  }

  function _renderComponent() {
    _renderComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleAms::Services::List
              		@modelParams = {{this.model.params}}
              		@updateIndexPage = {{this.updateIndexPage}}
              		@resetViewQueryParams = {{this.resetViewQueryParams}} />
              */
              {
                id: "jiNq0r5n",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-ams/services/list\",[],[[\"@modelParams\",\"@updateIndexPage\",\"@resetViewQueryParams\"],[[23,0,[\"model\",\"params\"]],[23,0,[\"updateIndexPage\"]],[23,0,[\"resetViewQueryParams\"]]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));
    return _renderComponent.apply(this, arguments);
  }

  (0, _qunit.module)('Integration | Component | module-ams | services | list', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    hooks.beforeEach(function () {
      (0, _stubCurrentUser.stubCurrentUser)(TEST_USER);
      (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
    });
    hooks.afterEach(function () {
      this.owner.destroy('service:current-user');
      this.owner.destroy('service:current-account');
    }); // 1. Empty state check

    (0, _qunit.test)('it should not display checkboxes/bulk actions if no service', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var stub;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Arrange
                stub = _sinon.default.stub();
                this.setProperties({
                  model: {
                    params: {
                      page: 0
                    }
                  },
                  updateIndexPage: stub,
                  resetViewQueryParams: stub
                }); // Act

                _context.next = 4;
                return renderComponent();

              case 4:
                assert.ok(_serviceList.default.hasNoSelectAllCheckbox, 'Has no SelectAll checkbox');
                assert.equal(_serviceList.default.allCheckboxes.length, 0, 'Has no checkbox in each table row');

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }()); // 2. Display records

    (0, _qunit.test)('it should display checkboxes/bulk actions with "manage_services" privilege', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var stub;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                // Arrange
                stub = _sinon.default.stub();
                this.setProperties({
                  model: {
                    params: {
                      page: 1
                    }
                  },
                  updateIndexPage: stub,
                  resetViewQueryParams: stub
                }); // Act

                _context2.next = 4;
                return renderComponent();

              case 4:
                assert.equal(_serviceList.default.numRows, 30, 'Service table has 30 rows');

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }()); // 3. Add column through columns customization

    (0, _qunit.skip)('it should display department column on adding through column customization', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var stub;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                // Arrange
                stub = _sinon.default.stub();
                this.setProperties({
                  model: {
                    params: {
                      page: 1
                    }
                  },
                  updateIndexPage: stub,
                  resetViewQueryParams: stub
                }); // Act

                _context3.next = 4;
                return renderComponent();

              case 4:
                _context3.next = 6;
                return _serviceList.default.openColumnCustomizer();

              case 6:
                _context3.next = 8;
                return _serviceList.default.selectColumnFromCC();

              case 8:
                _context3.next = 10;
                return _serviceList.default.updateColumnCustomization();

              case 10:
                assert.equal(_serviceList.default.numColumns, 9, 'Service table has 30 rows');

              case 11:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-business-objects/fields-generator/component-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-business-objects/fields-generator', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.skip)('it renders', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{module-business-objects/fields-generator}}
                */
                {
                  id: "LAWrcsZ5",
                  block: "{\"symbols\":[],\"statements\":[[1,[22,\"module-business-objects/fields-generator\"],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.equal(this.element.textContent.trim(), ''); // Template block usage:

                _context.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                      {{#module-business-objects/fields-generator}}
                        template block text
                      {{/module-business-objects/fields-generator}}
                    
                */
                {
                  id: "zxa/HxDw",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\"],[4,\"module-business-objects/fields-generator\",null,null,{\"statements\":[[0,\"        template block text\\n\"]],\"parameters\":[]},null],[0,\"    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                assert.equal(this.element.textContent.trim(), 'template block text');

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-business-objects/light-table-components/bo-inline-editor/component-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-business-objects/light-table-components/bo-inline-editor', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.skip)('it renders', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{module-business-objects/light-table-components/bo-inline-editor}}
                */
                {
                  id: "5JlOPvCn",
                  block: "{\"symbols\":[],\"statements\":[[1,[22,\"module-business-objects/light-table-components/bo-inline-editor\"],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.equal(this.element.textContent.trim(), ''); // Template block usage:

                _context.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                      {{#module-business-objects/light-table-components/bo-inline-editor}}
                        template block text
                      {{/module-business-objects/light-table-components/bo-inline-editor}}
                    
                */
                {
                  id: "IL2axLLP",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\"],[4,\"module-business-objects/light-table-components/bo-inline-editor\",null,null,{\"statements\":[[0,\"        template block text\\n\"]],\"parameters\":[]},null],[0,\"    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                assert.equal(this.element.textContent.trim(), 'template block text');

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-business-objects/light-table-components/checkbox-cell/component-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-business-objects/light-table-components/checkbox-cell', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.skip)('it renders', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{module-business-objects/light-table-components/checkbox-cell}}
                */
                {
                  id: "gGSdg5Cz",
                  block: "{\"symbols\":[],\"statements\":[[1,[22,\"module-business-objects/light-table-components/checkbox-cell\"],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.equal(this.element.textContent.trim(), ''); // Template block usage:

                _context.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                      {{#module-business-objects/light-table-components/checkbox-cell}}
                        template block text
                      {{/module-business-objects/light-table-components/checkbox-cell}}
                    
                */
                {
                  id: "6cY/EQX+",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\"],[4,\"module-business-objects/light-table-components/checkbox-cell\",null,null,{\"statements\":[[0,\"        template block text\\n\"]],\"parameters\":[]},null],[0,\"    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                assert.equal(this.element.textContent.trim(), 'template block text');

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-business-objects/records-form/component-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-business-objects/records-form', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.skip)('it renders', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{module-business-objects/records-form}}
                */
                {
                  id: "Q4Lncdsa",
                  block: "{\"symbols\":[],\"statements\":[[1,[22,\"module-business-objects/records-form\"],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.equal(this.element.textContent.trim(), ''); // Template block usage:

                _context.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                      {{#module-business-objects/records-form}}
                        template block text
                      {{/module-business-objects/records-form}}
                    
                */
                {
                  id: "E+p7XXrK",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\"],[4,\"module-business-objects/records-form\",null,null,{\"statements\":[[0,\"        template block text\\n\"]],\"parameters\":[]},null],[0,\"    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                assert.equal(this.element.textContent.trim(), 'template block text');

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-business-objects/records-list/component-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-business-objects/records-list', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.skip)('it renders', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{module-business-objects/records-list}}
                */
                {
                  id: "hiYcg6+9",
                  block: "{\"symbols\":[],\"statements\":[[1,[22,\"module-business-objects/records-list\"],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.equal(this.element.textContent.trim(), ''); // Template block usage:

                _context.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                      {{#module-business-objects/records-list}}
                        template block text
                      {{/module-business-objects/records-list}}
                    
                */
                {
                  id: "JEbtaAi8",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\"],[4,\"module-business-objects/records-list\",null,null,{\"statements\":[[0,\"        template block text\\n\"]],\"parameters\":[]},null],[0,\"    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                assert.equal(this.element.textContent.trim(), 'template block text');

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-compare-plan/goal-selection/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-current-account"], function (_qunit, _emberQunit, _testHelpers, _intl, _stubCurrentAccount) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var TEST_ACCOUNT = {
    subscription: {
      subscription_plan: 'Starter'
    }
  };
  (0, _qunit.module)('Integration | Component | module-compare-plan/goal-selection', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.intl = this.owner.lookup("service:intl");

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    hooks.after(function () {
      this.owner.destroy("service:intl");
    });
    (0, _qunit.test)('it renders', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT); // Act

                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleComparePlan::GoalSelection />
                */
                {
                  id: "mibCq2yA",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-compare-plan/goal-selection\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                // Assert
                assert.dom('.expore-head').exists('').hasTagName('h4').hasText(this.intl.t("thp_plan.explore_head"));

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('only first goal is selected by default', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var goals;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT); // Act

                _context3.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleComparePlan::GoalSelection />
                */
                {
                  id: "mibCq2yA",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-compare-plan/goal-selection\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                goals = this.element.querySelectorAll('.explore-item'); // Assert

                assert.dom(goals[0]).exists('first goal exists').hasClass('selected', "first goal is selected by default");
                assert.dom(goals[1]).exists('second goal exists').doesNotHaveClass('selected', "second goal is not selected by default");

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('only first goal is disabled', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var goals;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT); // Act

                _context4.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleComparePlan::GoalSelection />
                */
                {
                  id: "mibCq2yA",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-compare-plan/goal-selection\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                goals = this.element.querySelectorAll('.explore-item'); // Assert

                assert.dom(goals[0]).exists('first goal exists').hasClass('default', "first goal is disabled");
                assert.dom(goals[1]).exists('second goal exists').doesNotHaveClass('default', "second goal is not disabled");

              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('unselected goal is selected on clicking', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var goals;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT); // Act

                _context5.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleComparePlan::GoalSelection />
                */
                {
                  id: "mibCq2yA",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-compare-plan/goal-selection\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                goals = this.element.querySelectorAll('.explore-item'); // Assert

                assert.dom(goals[1]).doesNotHaveClass('selected', "currently goal is unselected"); // Act

                _context5.next = 7;
                return (0, _testHelpers.click)(goals[1]);

              case 7:
                // Assert
                assert.dom(goals[1]).hasClass('selected', "unselected goal is selected on clicking");

              case 8:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('selected goal is unselected on clicking', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var goals;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT); // Act

                _context6.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleComparePlan::GoalSelection />
                */
                {
                  id: "mibCq2yA",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-compare-plan/goal-selection\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                goals = this.element.querySelectorAll('.explore-item'); // Assert

                assert.dom(goals[1]).hasClass('selected', "currently goal is selected"); // Act

                _context6.next = 7;
                return (0, _testHelpers.click)(goals[1]);

              case 7:
                // Assert
                assert.dom(goals[1]).doesNotHaveClass('selected', "unselected goal is unselected on clicking");

              case 8:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('background images are changing on hovering goals', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var goals, lastIndex;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT); // Act

                _context7.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleComparePlan::GoalSelection />
                */
                {
                  id: "mibCq2yA",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-compare-plan/goal-selection\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                goals = this.element.querySelectorAll('.explore-item');
                lastIndex = this.element.querySelectorAll('.explore-item').length - 1; // Act

                _context7.next = 7;
                return (0, _testHelpers.triggerEvent)(goals[lastIndex], 'mouseover');

              case 7:
                // Assert
                assert.dom('.goal-image').exists().hasClass('optimize_it_operations');

              case 8:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x6) {
        return _ref8.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-dashboard/year-in-review-banner/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-current-user"], function (_qunit, _emberQunit, _testHelpers, _intl, _stubCurrentUser) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-dashboard/year-in-review-banner', function (hooks) {
    // Arrange
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              (0, _stubCurrentUser.stubCurrentUser)();
              this.intl = this.owner.lookup("service:intl");
              this.currentUser = this.owner.lookup("service:current-user");

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    hooks.after(function () {
      this.owner.destroy("service:intl");
      this.owner.destroy("service:current-user");
    });
    (0, _qunit.test)('it renders', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleDashboard::YearInReviewBanner />
                */
                {
                  id: "ZX3kKxf7",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-dashboard/year-in-review-banner\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                // Assert
                assert.dom('.year-in-review').exists();
                assert.dom('.review-title').exists().hasTagName('h4').hasText(this.intl.t('fs.dashboard.year_in_review.title'));
                assert.dom('.review-desc').exists().hasTagName('p').hasText(this.intl.t('fs.dashboard.year_in_review.body'));
                assert.dom('#watch-video').exists().hasTagName('button').hasAria('label', this.intl.t('fs.dashboard.year_in_review.watch_video')).hasText(this.intl.t('fs.dashboard.year_in_review.watch_video'));

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it renders video modal on click of watch video', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleDashboard::YearInReviewBanner />
                */
                {
                  id: "ZX3kKxf7",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-dashboard/year-in-review-banner\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                // Assert
                assert.dom('#watch-video').exists(); // Act

                _context3.next = 5;
                return (0, _testHelpers.click)('#watch-video').then(function () {
                  assert.step("Watch Video is Clicked");
                });

              case 5:
                // Assert
                assert.verifySteps(["Watch Video is Clicked"]);
                assert.dom('.ember-modal-body').exists();
                assert.dom('.video-player video').exists().hasTagName('video');
                assert.dom('.video-player video source').exists().hasAttribute('src', this.currentUser.yirVideoUrl);
                assert.dom('#downloadYIRVideo').exists().hasTagName('a').hasText(this.intl.t('fs.dashboard.year_in_review.download'));

              case 10:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it closes video modal on click outside of yir video modal', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleDashboard::YearInReviewBanner />
                */
                {
                  id: "ZX3kKxf7",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-dashboard/year-in-review-banner\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                // Assert
                assert.dom('#watch-video').exists(); // Act

                _context4.next = 5;
                return (0, _testHelpers.click)('#watch-video').then(function () {
                  assert.step("Watch Video is Clicked");
                });

              case 5:
                // Assert
                assert.verifySteps(["Watch Video is Clicked"]);
                assert.dom('.ember-modal-body').exists();
                assert.dom('.video-player video').exists(); // Act

                _context4.next = 10;
                return (0, _testHelpers.click)('.ember-modal-overlay').then(function () {
                  assert.step("Clicked outside yir video modal");
                });

              case 10:
                // Assert
                assert.verifySteps(["Clicked outside yir video modal"]);
                assert.dom('.ember-modal-body').doesNotExist();
                assert.dom('.video-player video').doesNotExist();

              case 13:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.skip)('it shows downloading text when download link clicked in yir video modal', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleDashboard::YearInReviewBanner />
                */
                {
                  id: "ZX3kKxf7",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-dashboard/year-in-review-banner\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context5.next = 4;
                return (0, _testHelpers.click)('#watch-video').then(function () {
                  assert.step("Watch Video is Clicked");
                });

              case 4:
                // Assert
                assert.verifySteps(["Watch Video is Clicked"]);
                assert.dom('.ember-modal-body').exists();
                assert.dom('.video-player video').exists(); // Act

                _context5.next = 9;
                return (0, _testHelpers.click)('#downloadYIRVideo').then(function () {
                  // Assert
                  assert.step("Download link is clicked");
                });

              case 9:
                _context5.next = 11;
                return new Promise(function (resolve) {
                  setTimeout(resolve, 3000);
                });

              case 11:
                // Assert
                assert.dom('.download-progress').exists();
                assert.dom('.download-progress').containsText("Downloading"); // Wait for hundred millisecond

                _context5.next = 15;
                return new Promise(function (resolve) {
                  setTimeout(resolve, 100);
                });

              case 15:
                // Assert
                assert.verifySteps(["Download link is clicked"]);

              case 16:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
  });
});
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

define("freshservice/tests/integration/components/module-itil-common/add-new-requester/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/pages/components/module-tickets/new-ticket", "freshservice/mirage/fixtures/ticket-form-fields", "freshservice/tests/lib/stub-current-account", "freshservice/mirage/fixtures/autocomplete-departments", "freshservice/tests/pages/components/utils/form-fields"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _intl, _newTicket, _ticketFormFields, _stubCurrentAccount, _autocompleteDepartments, _formFields) {
  "use strict";

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

  function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var MockModuleFieldsService = /*#__PURE__*/function (_Ember$Service) {
    _inherits(MockModuleFieldsService, _Ember$Service);

    var _super = _createSuper(MockModuleFieldsService);

    function MockModuleFieldsService() {
      var _this;

      _classCallCheck(this, MockModuleFieldsService);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _defineProperty(_assertThisInitialized(_this), "ticketFormFields", Ember.A(_toConsumableArray(_ticketFormFields.default)));

      return _this;
    }

    _createClass(MockModuleFieldsService, [{
      key: "getFormField",
      value: function getFormField(fieldName) {
        return this.ticketFormFields.find(function (f) {
          return f.name === fieldName;
        });
      }
    }]);

    return MockModuleFieldsService;
  }(Ember.Service);

  window.__CLASSIC_OWN_CLASSES__.set(MockModuleFieldsService, true);

  var TEST_ACCOUNT = {
    isFreshidV2Account: true
  };
  var MOCK_DATA = {
    requester: {
      name: 'new_requester',
      email: 'new_requester@gmail.com',
      mobile: '+91 984442 93212'
    },
    errors: {
      firstName: 'This field can\'t be blank',
      otherFields: 'Please fill at least 1 of these fields.'
    }
  };
  (0, _qunit.module)('Integration | Component | module-itil-common/add-new-requester', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      var _this2 = this;

      this.server.loadFixtures('ticketFormFields'); // Since the actual parent is supposed to do prerequisite-invoke of `this.moduleFieldsService.fetchModuleFields.perform()`,
      // mocking the service and data, just for the sake of testing this component

      this.owner.register('service:module-fields', MockModuleFieldsService);
      this.set('requester', {});
      this.set('onRequesterSubmit', function (data) {
        _this2.requester = data;
      });
    }); //V0 endpoint

    (0, _qunit.test)('Should create new requester in V0 endpoint', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var isExpected;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleItilCommon::AddNewRequester
                		@showCreateRequesterModal = {{true}}
                		@onNewRequesterSubmit			= {{this.onRequesterSubmit}}  />
                */
                {
                  id: "QVdJiVA4",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-itil-common/add-new-requester\",[],[[\"@showCreateRequesterModal\",\"@onNewRequesterSubmit\"],[true,[23,0,[\"onRequesterSubmit\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.ok(document.querySelector('.add-new-requester-modal'));
                assert.notOk(_newTicket.default.requesterMobilePhone); // mobile field is not present in V0

                _context.next = 6;
                return _newTicket.default.fillRequesterModalFirstName(MOCK_DATA.requester.name);

              case 6:
                _context.next = 8;
                return _newTicket.default.fillRequesterModalEmail(MOCK_DATA.requester.email);

              case 8:
                _context.next = 10;
                return _newTicket.default.requesterModalCreateButton();

              case 10:
                isExpected = this.requester.firstName === MOCK_DATA.requester.name && this.requester.primaryEmail === MOCK_DATA.requester.email;
                assert.ok(isExpected, "Expected Requester was created");

              case 12:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }()); //V0 endpoint

    (0, _qunit.test)('Should throws error when one of these fields email, mobile field are not submitted in V0', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var errorField;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleItilCommon::AddNewRequester
                		@showCreateRequesterModal = {{true}}
                		@onNewRequesterSubmit			= {{this.onRequesterSubmit}}/>
                */
                {
                  id: "QVdJiVA4",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-itil-common/add-new-requester\",[],[[\"@showCreateRequesterModal\",\"@onNewRequesterSubmit\"],[true,[23,0,[\"onRequesterSubmit\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context2.next = 4;
                return _newTicket.default.requesterModalCreateButton();

              case 4:
                // checking firstName field
                errorField = document.querySelector('[data-test-field-name="firstName"] .form-field--errors').innerText;
                assert.equal(errorField, MOCK_DATA.errors.firstName);
                _context2.next = 8;
                return _newTicket.default.fillRequesterModalFirstName(MOCK_DATA.requester.name);

              case 8:
                errorField = document.querySelector('[data-test-field-name="firstName"] .form-field--errors').innerText;
                assert.equal(errorField, ""); // checking other fields

                errorField = document.querySelector('[data-test-field-name="primaryEmail"] .form-field--errors').innerText;
                assert.equal(errorField, MOCK_DATA.errors.otherFields);
                _context2.next = 14;
                return _newTicket.default.fillRequesterModalEmail(MOCK_DATA.requester.email);

              case 14:
                errorField = document.querySelector('[data-test-field-name="primaryEmail"] .form-field--errors').innerText;
                assert.equal(errorField, "");

              case 16:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }()); //V2 endpoint

    (0, _qunit.test)('Should create new requester in V2 endpoint ', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var isExpected;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
                _context3.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleItilCommon::AddNewRequester
                		@showCreateRequesterModal = {{true}}
                		@onNewRequesterSubmit			= {{this.onRequesterSubmit}}  />
                */
                {
                  id: "QVdJiVA4",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-itil-common/add-new-requester\",[],[[\"@showCreateRequesterModal\",\"@onNewRequesterSubmit\"],[true,[23,0,[\"onRequesterSubmit\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.ok(_newTicket.default.requesterMobilePhone);
                _context3.next = 6;
                return _newTicket.default.fillRequesterModalFirstName(MOCK_DATA.requester.name);

              case 6:
                _context3.next = 8;
                return _newTicket.default.fillRequesterMobilePhone(MOCK_DATA.requester.mobile);

              case 8:
                _context3.next = 10;
                return _newTicket.default.requesterModalCreateButton();

              case 10:
                isExpected = this.requester.firstName === MOCK_DATA.requester.name && this.requester.mobile === MOCK_DATA.requester.mobile;
                assert.ok(isExpected, "Expected Requester was created");

              case 12:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }()); //V2 endpoint

    (0, _qunit.test)('Should throws error when one of these fields email, mobile, work phone field are not submitted in V2', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var errorField;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
                _context4.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleItilCommon::AddNewRequester
                		@showCreateRequesterModal = {{true}}
                		@onNewRequesterSubmit			= {{this.onRequesterSubmit}}  />
                */
                {
                  id: "QVdJiVA4",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-itil-common/add-new-requester\",[],[[\"@showCreateRequesterModal\",\"@onNewRequesterSubmit\"],[true,[23,0,[\"onRequesterSubmit\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context4.next = 5;
                return _newTicket.default.requesterModalCreateButton();

              case 5:
                // checking firstName field
                errorField = document.querySelector('[data-test-field-name="firstName"] .form-field--errors').innerText;
                assert.equal(errorField, MOCK_DATA.errors.firstName);
                _context4.next = 9;
                return _newTicket.default.fillRequesterModalFirstName(MOCK_DATA.requester.name);

              case 9:
                errorField = document.querySelector('[data-test-field-name="firstName"] .form-field--errors').innerText;
                assert.equal(errorField, ""); // checking other fields

                errorField = document.querySelector('[data-test-field-name="mobile"] .form-field--errors').innerText;
                assert.equal(errorField, MOCK_DATA.errors.otherFields);
                _context4.next = 15;
                return _newTicket.default.fillRequesterModalEmail(MOCK_DATA.requester.mobile);

              case 15:
                errorField = document.querySelector('[data-test-field-name="mobile"] .form-field--errors').innerText;
                assert.equal(errorField, "");

              case 17:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should be able select department field when rendered as auto complete field', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var accountWithDepartmentSearchEnabled, department, departmentField;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                accountWithDepartmentSearchEnabled = _objectSpread(_objectSpread({}, TEST_ACCOUNT), {}, {
                  features: ['department_search']
                });
                (0, _stubCurrentAccount.stubCurrentAccount)(accountWithDepartmentSearchEnabled);
                _context5.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleItilCommon::AddNewRequester @showCreateRequesterModal={{true}}
                  @onNewRequesterSubmit={{this.onRequesterSubmit}} />
                */
                {
                  id: "QVdJiVA4",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-itil-common/add-new-requester\",[],[[\"@showCreateRequesterModal\",\"@onNewRequesterSubmit\"],[true,[23,0,[\"onRequesterSubmit\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                department = _autocompleteDepartments.default.departments[0];
                _context5.next = 7;
                return _formFields.default.autocompleteSelectMultiple('departmentId', department.value, '0');

              case 7:
                _context5.next = 9;
                return _formFields.default.getDataForField('departmentId', true);

              case 9:
                departmentField = _context5.sent;
                assert.equal(departmentField.selected, department.value, '[Department] field is selected');

              case 11:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-itil-common/ember-table-componets/requester-cell/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl", "ember-cli-mirage/test-support", "freshservice/mirage/fixtures/requesters"], function (_qunit, _emberQunit, _testHelpers, _intl, _testSupport, _requesters) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | Requester-cell', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.server.loadFixtures('tickets');
              Ember.set(this, 'store', this.owner.lookup('service:store'));

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('Should render Requester Cell Component', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var fetchedTickets;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.store.findAll('ticket');

              case 2:
                fetchedTickets = _context2.sent;
                this.set('currentTicket', fetchedTickets.firstObject);
                this.set('newRequesters', {
                  "requesters": _requesters.default
                });
                this.store.pushPayload(this.newRequesters);
                _context2.next = 8;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleItilCommon::EmberTableComponents::RequesterCell
                            @row = {{this.currentTicket}}
                        />
                */
                {
                  id: "zYiQCMtI",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-itil-common/ember-table-components/requester-cell\",[],[[\"@row\"],[[23,0,[\"currentTicket\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 8:
                assert.dom('.requester-card-wrapper').exists({
                  count: 1
                });

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-itil-common/ember-table-componets/subject-cell/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl", "ember-cli-mirage/test-support"], function (_qunit, _emberQunit, _testHelpers, _intl, _testSupport) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | Subject-cell', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.owner.register("service:current-user", Ember.Service.extend({
                preferences: Object.freeze({
                  "ticket_ui_preference'": "compact"
                })
              }));
              this.server.loadFixtures('tickets');
              Ember.set(this, 'store', this.owner.lookup('service:store'));

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('Should render Subject Cell Component', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var fetchedTickets;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.store.findAll('ticket');

              case 2:
                fetchedTickets = _context2.sent;
                fetchedTickets.firstObject.descriptionText = fetchedTickets.firstObject.description;
                this.set('currentTicket', fetchedTickets.firstObject);
                _context2.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleItilCommon::EmberTableComponents::SubjectCell
                            @row = {{this.currentTicket}}
                        />
                */
                {
                  id: "7Hkf4JM8",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-itil-common/ember-table-components/subject-cell\",[],[[\"@row\"],[[23,0,[\"currentTicket\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                assert.dom('.subject-card-wrapper').exists({
                  count: 1
                });

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-kanban-board/board-view/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-power-select/test-support/helpers", "ember-drag-drop-sort/test-support/drag", "freshservice/tests/lib/intl", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/stub-current-account", "ember-cli-mirage/test-support", "freshservice/tests/pages/components/module-kanban-board/board", "freshservice/tests/pages/components/utils/form-fields"], function (_qunit, _emberQunit, _testHelpers, _helpers, _drag, _intl, _sinonContext, _stubCurrentUser, _stubCurrentAccount, _testSupport, _board, _formFields) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)("integration | component | module-kanban-board | board-view", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var curUser;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              curUser = {
                scoped_privileges: {
                  0: ['edit_ticket_properties', 'manage_users', 'reply_ticket', 'forward_ticket'],
                  1: [],
                  2: [],
                  3: []
                },
                privileges: ['edit_ticket_properties', 'manage_users', 'reply_ticket', 'forward_ticket']
              };
              (0, _stubCurrentUser.stubCurrentUser)(curUser);
              (0, _stubCurrentAccount.stubCurrentAccount)();
              this.server.loadFixtures('boards');
              this.server.loadFixtures('tickets');
              Ember.set(this, 'store', this.owner.lookup('service:store'));

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));

    function renderComponent() {
      return _renderComponent.apply(this, arguments);
    }

    function _renderComponent() {
      _renderComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {
        return regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                _context17.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<div id="header-page-title-container"></div>
                			<ModuleKanbanBoard::BoardView
                				@model={{this.model}}/>
                */
                {
                  id: "AJQcpI0N",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\"],[7,\"div\",true],[10,\"id\",\"header-page-title-container\"],[8],[9],[0,\"\\n\\t\\t\\t\"],[5,\"module-kanban-board/board-view\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17);
      }));
      return _renderComponent.apply(this, arguments);
    }

    (0, _qunit.test)('Should render a board with its main properties', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var board;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.store.findRecord('board', 2);

              case 2:
                board = _context2.sent;
                this.set('model', board); // Act

                _context2.next = 6;
                return renderComponent();

              case 6:
                //Assert
                assert.equal(_board.default.visibilityType, "All agents");
                assert.equal(_board.default.boardName, board.name);

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should be able to edit basic board properties', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var board;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.store.findRecord('board', 2);

              case 2:
                board = _context3.sent;
                this.set('model', board); // Act

                _context3.next = 6;
                return renderComponent();

              case 6:
                //Assert
                assert.equal(_board.default.visibilityType, "All agents");
                assert.equal(_board.default.boardName, board.name);
                _context3.next = 10;
                return _formFields.default.selectBasicDropdown('board-options', 'Edit');

              case 10:
                _context3.next = 12;
                return (0, _testHelpers.waitFor)('.edit-board-modal');

              case 12:
                assert.ok(_board.default.editBoardModalExists);
                _context3.next = 15;
                return (0, _testHelpers.fillIn)('.board-name input', 'My Board 2.1');

              case 15:
                _context3.next = 17;
                return _board.default.clickMyselfVisibilityRadio();

              case 17:
                _context3.next = 19;
                return (0, _testHelpers.click)('.board-modal-submit');

              case 19:
                assert.equal(_board.default.boardName, 'My Board 2.1');
                assert.equal(_board.default.visibilityType, "Only me");

              case 21:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Renders boards list sidebar with all the boards', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var selectedBoard;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.store.findRecord('board', 2);

              case 2:
                selectedBoard = _context4.sent;
                this.set('model', selectedBoard); // Act

                _context4.next = 6;
                return renderComponent();

              case 6:
                _context4.next = 8;
                return (0, _testHelpers.click)(document.querySelector('.menu-trigger'));

              case 8:
                assert.dom('[data-test-id="board-item"]').exists({
                  count: 4
                });

              case 9:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('New board click renders new-board modal', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var selectedBoard;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this.store.findRecord('board', 2);

              case 2:
                selectedBoard = _context5.sent;
                this.set('model', selectedBoard); // Act

                _context5.next = 6;
                return renderComponent();

              case 6:
                _context5.next = 8;
                return (0, _testHelpers.click)(document.querySelector('.menu-trigger'));

              case 8:
                _context5.next = 10;
                return _board.default.newBoardBtn();

              case 10:
                _context5.next = 12;
                return (0, _testHelpers.waitFor)('.new-board-modal');

              case 12:
                assert.ok(_board.default.newBoardModalExists);
                _context5.next = 15;
                return _board.default.modalCancel();

              case 15:
                assert.notOk(_board.default.newBoardModalExists);

              case 16:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Update wip limit for a column', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var selectedBoard;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this.store.findRecord('board', 2);

              case 2:
                selectedBoard = _context6.sent;
                this.set('model', selectedBoard); //Create wip limit
                // Act

                _context6.next = 6;
                return renderComponent();

              case 6:
                _context6.next = 8;
                return _formFields.default.selectBasicDropdownByClassName('kanban-board--column[column-id="3"] .kanban-column-options', 'Set column limit');

              case 8:
                _context6.next = 10;
                return (0, _testHelpers.waitFor)('.kanban-board-column-limit-modal');

              case 10:
                assert.ok(_board.default.columnLimitModalExists);
                _context6.next = 13;
                return (0, _testHelpers.fillIn)('.kanban-board-column-limit--input', 200);

              case 13:
                assert.ok(_board.default.columnLimitErrorExists);
                _context6.next = 16;
                return (0, _testHelpers.fillIn)('.kanban-board-column-limit--input', -1);

              case 16:
                assert.ok(_board.default.columnLimitErrorExists);
                _context6.next = 19;
                return (0, _testHelpers.fillIn)('.kanban-board-column-limit--input', 2);

              case 19:
                _context6.next = 21;
                return _board.default.modalSubmit();

              case 21:
                _context6.next = 23;
                return (0, _testHelpers.settled)();

              case 23:
                //Assert
                assert.equal(_board.default.pendingColumnLimit.split(" / ")[1], "2"); //Update wip limit
                //Act

                _context6.next = 26;
                return _formFields.default.selectBasicDropdownByClassName('kanban-board--column[column-id="3"] .kanban-column-options', 'Set column limit');

              case 26:
                _context6.next = 28;
                return (0, _testHelpers.waitFor)('.kanban-board-column-limit-modal');

              case 28:
                assert.ok(_board.default.columnLimitModalExists);
                _context6.next = 31;
                return (0, _testHelpers.fillIn)('.kanban-board-column-limit--input', 3);

              case 31:
                _context6.next = 33;
                return _board.default.modalSubmit();

              case 33:
                _context6.next = 35;
                return (0, _testHelpers.settled)();

              case 35:
                //Assert
                assert.equal(_board.default.pendingColumnLimit.split(" / ")[1], "3");

              case 36:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Remove wip limit for a column', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var selectedBoard;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return this.store.findRecord('board', 2);

              case 2:
                selectedBoard = _context7.sent;
                this.set('model', selectedBoard); // Act

                _context7.next = 6;
                return renderComponent();

              case 6:
                _context7.next = 8;
                return _formFields.default.selectBasicDropdownByClassName('kanban-board--column[column-id="3"] .kanban-column-options', 'Set column limit');

              case 8:
                _context7.next = 10;
                return (0, _testHelpers.waitFor)('.kanban-board-column-limit-modal');

              case 10:
                assert.ok(_board.default.columnLimitModalExists);
                _context7.next = 13;
                return (0, _testHelpers.fillIn)('.kanban-board-column-limit--input', '');

              case 13:
                _context7.next = 15;
                return _board.default.modalSubmit();

              case 15:
                //Assert
                assert.notOk(_board.default.pendingColumnLimit.split(" / ")[1]);

              case 16:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x6) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Update column position of a column(pending)', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var selectedBoard;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return this.store.findRecord('board', 2);

              case 2:
                selectedBoard = _context8.sent;
                this.set('model', selectedBoard); // Act

                _context8.next = 6;
                return renderComponent();

              case 6:
                _context8.next = 8;
                return _formFields.default.selectBasicDropdownByClassName('kanban-board--column[column-id="3"] .kanban-column-options', 'Change column position');

              case 8:
                _context8.next = 10;
                return _board.default.columnPosDropDownOpen();

              case 10:
                _context8.next = 12;
                return (0, _helpers.selectChoose)('.kanban-board--column-props-pos-input', '1');

              case 12:
                _context8.next = 14;
                return _board.default.columnPosSubmit();

              case 14:
                assert.ok(true);
                _context8.next = 17;
                return _formFields.default.selectBasicDropdownByClassName('kanban-board--column[column-id="3"] .kanban-column-options', 'Change column position');

              case 17:
                //Assert
                assert.equal(_board.default.columnPosDropDownChoiceSelectedText, '1');
                _context8.next = 20;
                return _board.default.columnPosCancel();

              case 20:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x7) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.skip)('Moving card from one column to another', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        var selectedBoard, openColumnCountBeforeDrag, pendingColumnCountBeforeDrag;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return this.store.findRecord('board', 2);

              case 2:
                selectedBoard = _context9.sent;
                this.set('model', selectedBoard); // Act

                _context9.next = 6;
                return renderComponent();

              case 6:
                _context9.next = 8;
                return (0, _testHelpers.waitFor)('.kanban-board--column[column-id="2"] [entity-id="11"]');

              case 8:
                openColumnCountBeforeDrag = +_board.default.openColumnCount.split(" / ")[0];
                pendingColumnCountBeforeDrag = +_board.default.pendingColumnCount.split(" / ")[0];
                _context9.next = 12;
                return (0, _drag.drag)('mouse', '.kanban-board--column[column-id="2"] [entity-id="11"]', function () {
                  return {
                    dy: -250,
                    dx: 80
                  };
                }, {
                  beforedragend: function beforedragend() {//   assert.ok(boardView.cardIsBeingDragged)// 'card cloned and being dragged'
                    //   assert.ok(boardView.pendingColumnIsBeingHovered)// 'hover class being applied properly'
                  }
                });

              case 12:
                assert.equal(+_board.default.openColumnCount.split(" / ")[0], openColumnCountBeforeDrag - 1);
                assert.equal(+_board.default.pendingColumnCount.split(" / ")[0], pendingColumnCountBeforeDrag + 1);

              case 14:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x8) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Change status of a ticket through card dropdown', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var selectedBoard, openColumnCountBeforeDrag;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return this.store.findRecord('board', 2);

              case 2:
                selectedBoard = _context10.sent;
                this.set('model', selectedBoard); // Act

                _context10.next = 6;
                return renderComponent();

              case 6:
                _context10.next = 8;
                return (0, _testHelpers.waitFor)('.kanban-board--column[column-id="2"] [entity-id="11"]');

              case 8:
                assert.ok(_board.default.ticketCardStatusDDExists);
                openColumnCountBeforeDrag = +_board.default.openColumnCount.split(" / ")[0];
                _context10.next = 12;
                return _formFields.default.selectBasicDropdownByClassName('kanban-board--column[column-id="2"] [entity-id="11"] .ticket-card--footer .status-list-wrapper .ember-basic-dropdown', 'Pending');

              case 12:
                assert.equal(+_board.default.openColumnCount.split(" / ")[0], openColumnCountBeforeDrag - 1);
                assert.equal(_board.default.ticketCardStatus, 'Pending', 'Card has new stauts in the new column');

              case 14:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x9) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Change priority of a ticket through card dropdown', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        var selectedBoard;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _context11.next = 2;
                return this.store.findRecord('board', 2);

              case 2:
                selectedBoard = _context11.sent;
                this.set('model', selectedBoard); // Act

                _context11.next = 6;
                return renderComponent();

              case 6:
                _context11.next = 8;
                return (0, _testHelpers.waitFor)('.kanban-board--column[column-id="2"] [entity-id="11"]');

              case 8:
                assert.ok(_board.default.ticketCardPriorityDDExists);
                assert.equal(_board.default.ticketCardPriority, "Medium");
                _context11.next = 12;
                return _formFields.default.selectBasicDropdownByClassName('kanban-board--column[column-id="2"] [entity-id="11"] .ticket-card--footer .priority-list-wrapper .ember-basic-dropdown', 'Urgent');

              case 12:
                assert.equal(_board.default.ticketCardPriority, "Urgent");

              case 13:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x10) {
        return _ref12.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should be able to apply filters and discard them', /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        var board;
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                _context12.next = 2;
                return this.store.findRecord('board', 2);

              case 2:
                board = _context12.sent;
                this.set('model', board); // Act

                _context12.next = 6;
                return renderComponent();

              case 6:
                //Assert
                assert.notOk(_board.default.discardBtnExists);
                _context12.next = 9;
                return _board.default.queryForm.overdueCheckbox();

              case 9:
                _context12.next = 11;
                return _board.default.queryForm.applyFilter();

              case 11:
                assert.ok(_board.default.discardBtnExists);
                _context12.next = 14;
                return _board.default.discardBoardChanges();

              case 14:
                assert.notOk(_board.default.discardBtnExists);

              case 15:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x11) {
        return _ref13.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should be able to apply filters and edit the board', /*#__PURE__*/function () {
      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
        var board;
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                _context13.next = 2;
                return this.store.findRecord('board', 2);

              case 2:
                board = _context13.sent;
                this.set('model', board); // Act

                _context13.next = 6;
                return renderComponent();

              case 6:
                //Assert
                assert.notOk(_board.default.saveBtnExists);
                _context13.next = 9;
                return _board.default.queryForm.overdueCheckbox();

              case 9:
                _context13.next = 11;
                return _board.default.queryForm.applyFilter();

              case 11:
                assert.ok(_board.default.saveBtnExists);
                _context13.next = 14;
                return _board.default.saveBoard();

              case 14:
                assert.notOk(_board.default.saveBtnExists);

              case 15:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      return function (_x12) {
        return _ref14.apply(this, arguments);
      };
    }());
    (0, _qunit.skip)('Should be able to scroll and load more tickets in a column', /*#__PURE__*/function () {
      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {
        var board, renderedEntityList;
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                this.server.createList('ticket', 100, {
                  status: 2,
                  source: 2,
                  priority: 2
                }); //Arrange

                _context14.next = 3;
                return this.store.findRecord('board', 2);

              case 3:
                board = _context14.sent;
                this.set('model', board); // Act

                _context14.next = 7;
                return renderComponent();

              case 7:
                //Assert
                renderedEntityList = (0, _testHelpers.findAll)('.kanban-board--column[column-id="2"] .kanban-board--column-card');
                assert.equal(renderedEntityList.length, 30);
                renderedEntityList[renderedEntityList.length - 1].scrollIntoView();
                _context14.next = 12;
                return (0, _testHelpers.waitFor)('.kanban-board--column-load-more');

              case 12:
                _context14.next = 14;
                return (0, _testHelpers.settled)();

              case 14:
                renderedEntityList = (0, _testHelpers.findAll)('.kanban-board--column[column-id="2"] .kanban-board--column-card');
                assert.equal(renderedEntityList.length, 60, 'new items loaded');

              case 16:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      return function (_x13) {
        return _ref15.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Changing sort order back to date created at', /*#__PURE__*/function () {
      var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {
        var board;
        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                _context15.next = 2;
                return this.store.findRecord('board', 4);

              case 2:
                board = _context15.sent;
                this.set('model', board); // Act

                _context15.next = 6;
                return renderComponent();

              case 6:
                //Assert
                assert.equal(_board.default.boardSortOrderVal, 'None');
                _context15.next = 9;
                return _formFields.default.selectBasicDropdown('board-sort-order', 'Date created');

              case 9:
                assert.equal(_board.default.boardSortOrderVal, 'Date created');

              case 10:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      return function (_x14) {
        return _ref16.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should be able toggle and close the filter sidebar', /*#__PURE__*/function () {
      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(assert) {
        var board;
        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                _context16.next = 2;
                return this.store.findRecord('board', 2);

              case 2:
                board = _context16.sent;
                this.set('model', board); // Act

                _context16.next = 6;
                return renderComponent();

              case 6:
                //Assert
                assert.ok(_board.default.boardFilterCompExists);
                _context16.next = 9;
                return _board.default.boardFilterToggle();

              case 9:
                _context16.next = 11;
                return (0, _testHelpers.settled)();

              case 11:
                assert.notOk(_board.default.boardFilterCompExists);
                _context16.next = 14;
                return _board.default.boardFilterToggle();

              case 14:
                _context16.next = 16;
                return (0, _testHelpers.settled)();

              case 16:
                assert.ok(_board.default.boardFilterCompExists);

              case 17:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      return function (_x15) {
        return _ref17.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-kanban-board/ticket-summary-modal/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/stub-current-account", "ember-cli-mirage/test-support", "freshservice/tests/pages/components/module-kanban-board/board", "freshservice/tests/pages/components/utils/form-fields"], function (_qunit, _emberQunit, _testHelpers, _intl, _sinonContext, _stubCurrentUser, _stubCurrentAccount, _testSupport, _board, _formFields) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)("integration | component | module-kanban-board | board-view", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var curUser;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              curUser = {
                scoped_privileges: {
                  0: ['edit_ticket_properties', 'manage_users', 'reply_ticket', 'forward_ticket'],
                  1: [],
                  2: [],
                  3: []
                },
                privileges: ['edit_ticket_properties', 'manage_users', 'reply_ticket', 'forward_ticket']
              };
              (0, _stubCurrentUser.stubCurrentUser)(curUser);
              (0, _stubCurrentAccount.stubCurrentAccount)();
              this.server.loadFixtures('boards');
              this.server.loadFixtures('tickets');
              Ember.set(this, 'store', this.owner.lookup('service:store'));

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));

    function renderComponent() {
      return _renderComponent.apply(this, arguments);
    }

    function _renderComponent() {
      _renderComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<div id="header-page-title-container"></div>
                			<ModuleKanbanBoard::BoardView
                				@model={{this.model}}/>
                */
                {
                  id: "AJQcpI0N",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\"],[7,\"div\",true],[10,\"id\",\"header-page-title-container\"],[8],[9],[0,\"\\n\\t\\t\\t\"],[5,\"module-kanban-board/board-view\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }));
      return _renderComponent.apply(this, arguments);
    }

    (0, _qunit.test)('Click of ticket card opens summary modal', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var selectedBoard;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.server.loadFixtures('conversations');
                this.server.loadFixtures('attachments');
                _context2.next = 4;
                return this.store.findRecord('board', 2);

              case 4:
                selectedBoard = _context2.sent;
                this.set('model', selectedBoard); // Act

                _context2.next = 8;
                return renderComponent();

              case 8:
                _context2.next = 10;
                return (0, _testHelpers.waitFor)('.kanban-board--column[column-id="2"] [entity-id="11"]');

              case 10:
                _context2.next = 12;
                return _board.default.ticketCard();

              case 12:
                _context2.next = 14;
                return (0, _testHelpers.settled)();

              case 14:
                _context2.next = 16;
                return (0, _testHelpers.waitFor)('.ticket-summary-modal');

              case 16:
                assert.ok(_board.default.ticketSummaryModalExists);

              case 17:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Status update via summary modal works fine', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var selectedBoard, openColumnCountBeforeDrag;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.store.findRecord('board', 2);

              case 2:
                selectedBoard = _context3.sent;
                this.set('model', selectedBoard); // Act

                _context3.next = 6;
                return renderComponent();

              case 6:
                _context3.next = 8;
                return (0, _testHelpers.waitFor)('.kanban-board--column[column-id="2"] [entity-id="11"]');

              case 8:
                openColumnCountBeforeDrag = +_board.default.openColumnCount.split(" / ")[0];
                _context3.next = 11;
                return _board.default.srCard();

              case 11:
                _context3.next = 13;
                return (0, _testHelpers.waitFor)('.ticket-summary-modal');

              case 13:
                assert.ok(_board.default.ticketSummaryModalExists);
                _context3.next = 16;
                return _formFields.default.selectBasicDropdownByClassName('ticket-summary-modal .ticket-summary-modal-top-actions .status-list-wrapper .ember-basic-dropdown', 'Pending');

              case 16:
                _context3.next = 18;
                return (0, _testHelpers.settled)();

              case 18:
                assert.equal(+_board.default.openColumnCount.split(" / ")[0], openColumnCountBeforeDrag - 1);
                assert.equal(_board.default.srCardStatus, 'Pending', 'Card has new stauts in the new column');

              case 20:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Conversations load more works properly in ticket summary modal', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var selectedBoard;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                this.server.loadFixtures('conversations');
                _context4.next = 3;
                return this.store.findRecord('board', 2);

              case 3:
                selectedBoard = _context4.sent;
                this.set('model', selectedBoard); // Act

                _context4.next = 7;
                return renderComponent();

              case 7:
                _context4.next = 9;
                return (0, _testHelpers.waitFor)('.kanban-board--column[column-id="2"] [entity-id="13"]');

              case 9:
                _context4.next = 11;
                return _board.default.convPhoneTicketCard();

              case 11:
                _context4.next = 13;
                return (0, _testHelpers.waitFor)('.ticket-summary-modal');

              case 13:
                assert.ok(_board.default.loadMorConvBtnExists);
                assert.ok(_board.default.noOfConversations, 3);
                _context4.next = 17;
                return _board.default.loadMoreConv();

              case 17:
                assert.ok(_board.default.noOfConversations > 3);

              case 18:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('View quoted text works fine in ticket summary modal', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var selectedBoard;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                this.server.loadFixtures('conversations');
                _context5.next = 3;
                return this.store.findRecord('board', 2);

              case 3:
                selectedBoard = _context5.sent;
                this.set('model', selectedBoard); // Act

                _context5.next = 7;
                return renderComponent();

              case 7:
                _context5.next = 9;
                return (0, _testHelpers.waitFor)('.kanban-board--column[column-id="2"] [entity-id="13"]');

              case 9:
                _context5.next = 11;
                return _board.default.convPhoneTicketCard();

              case 11:
                _context5.next = 13;
                return (0, _testHelpers.waitFor)('.ticket-summary-modal');

              case 13:
                assert.ok(_board.default.loadMorConvBtnExists);
                _context5.next = 16;
                return _board.default.loadMoreConv();

              case 16:
                assert.ok(_board.default.quotedTextIsHidden);
                _context5.next = 19;
                return _board.default.viewQuotedText();

              case 19:
                assert.notOk(_board.default.quotedTextIsHidden);

              case 20:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('SR requested items are loaded', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var reqItems, noOfSRReqItems, selectedBoard;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                this.server.loadFixtures('requestedItems');
                reqItems = this.server.db.requestedItems.where({
                  'service_request_id': 12
                });
                noOfSRReqItems = reqItems.length;
                _context6.next = 5;
                return this.store.findRecord('board', 2);

              case 5:
                selectedBoard = _context6.sent;
                this.set('model', selectedBoard); // Act

                _context6.next = 9;
                return renderComponent();

              case 9:
                _context6.next = 11;
                return (0, _testHelpers.waitFor)('.kanban-board--column[column-id="2"] [entity-id="12"]');

              case 11:
                _context6.next = 13;
                return _board.default.srCard();

              case 13:
                _context6.next = 15;
                return (0, _testHelpers.waitFor)('.ticket-summary-modal');

              case 15:
                _context6.next = 17;
                return (0, _testHelpers.waitFor)('.ticket-summary-modal--requested-item');

              case 17:
                assert.dom('.ticket-summary-modal--requested-item').exists({
                  count: noOfSRReqItems
                });

              case 18:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('ticket Summary modal redirection buttons check', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var selectedBoard;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                this.server.loadFixtures('conversations');
                _context7.next = 3;
                return this.store.findRecord('board', 2);

              case 3:
                selectedBoard = _context7.sent;
                this.set('model', selectedBoard); // Act

                _context7.next = 7;
                return renderComponent();

              case 7:
                _context7.next = 9;
                return (0, _testHelpers.waitFor)('.kanban-board--column[column-id="2"] [entity-id="13"]');

              case 9:
                _context7.next = 11;
                return _board.default.ticketCard();

              case 11:
                _context7.next = 13;
                return (0, _testHelpers.waitFor)('.ticket-summary-modal');

              case 13:
                assert.ok(_board.default.ticketSummaryModalExists); //only triggering the clicks here to cover lines. need to revamp when view_feedback slider/ticket details are done in ember

                _context7.next = 16;
                return _board.default.viewFeedback();

              case 16:
                _context7.next = 18;
                return _board.default.ticketReplyBtn();

              case 18:
                _context7.next = 20;
                return _board.default.tickerForwardBtn();

              case 20:
                _context7.next = 22;
                return _board.default.tickerAddNoteBtn();

              case 22:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x6) {
        return _ref8.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-sam/details/allocation-overview/component-test", ["qunit", "ember-qunit", "freshservice/tests/lib/intl", "@ember/test-helpers", "freshservice/tests/pages/components/module-sam/sam-details"], function (_qunit, _emberQunit, _intl, _testHelpers, _samDetails) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var SAAS = 'saas';
  var MOBILE = 'mobile';
  var USERS = 'Users';
  var INSTALLS = 'Installs';
  var AVAILABLE = 'Available';
  (0, _qunit.module)('Integration | Component | module-sam | details | allocation-overview', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _qunit.test)('it should render allocation overview with the user details for a saas app', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var allocationConfig, model;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Arrange
                allocationConfig = {
                  licenses_purchased: 10,
                  user_count: 4
                };
                model = {
                  applicationType: SAAS
                };
                this.set('allocationConfig', allocationConfig);
                this.set('model', model); // Act

                _context.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::allocationOverview
                			@data 	= {{this.allocationConfig}}
                			@model 	= {{model}}
                		/>
                */
                {
                  id: "a2KDtFMH",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/allocation-overview\",[],[[\"@data\",\"@model\"],[[23,0,[\"allocationConfig\"]],[22,\"model\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                // Assert
                assert.ok(_samDetails.default.isChartVisible);
                assert.equal(_samDetails.default.totalCount, allocationConfig.licenses_purchased);
                assert.equal(_samDetails.default.firstSectionLabel, "".concat(USERS, "(").concat(allocationConfig.user_count, ")"));
                assert.equal(_samDetails.default.secondSectionLabel, "".concat(AVAILABLE, "(").concat(allocationConfig.licenses_purchased - allocationConfig.user_count, ")"));

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render allocation overview with the installation details for a desktop/mobile app', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var allocationConfig, model;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                // Arrange
                allocationConfig = {
                  licenses_purchased: 10,
                  installation_count: 4
                };
                model = {
                  applicationType: MOBILE
                };
                this.set('allocationConfig', allocationConfig);
                this.set('model', model); // Act

                _context2.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::allocationOverview
                			@data 	= {{this.allocationConfig}}
                			@model 	= {{model}}
                		/>
                */
                {
                  id: "a2KDtFMH",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/allocation-overview\",[],[[\"@data\",\"@model\"],[[23,0,[\"allocationConfig\"]],[22,\"model\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                // Assert
                assert.ok(_samDetails.default.isChartVisible);
                assert.equal(_samDetails.default.totalCount, allocationConfig.licenses_purchased);
                assert.equal(_samDetails.default.firstSectionLabel, "".concat(INSTALLS, "(").concat(allocationConfig.installation_count, ")"));
                assert.equal(_samDetails.default.secondSectionLabel, "".concat(AVAILABLE, "(").concat(allocationConfig.licenses_purchased - allocationConfig.installation_count, ")"));

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-sam/details/app-data-visualisation/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/utils/common", "sinon", "freshservice/mirage/fixtures/sams", "freshservice/tests/pages/components/module-sam/sam-details", "freshservice/tests/lib/intl", "freshservice/tests/lib/sinon-context"], function (_qunit, _emberQunit, _testHelpers, _common, _sinon, _sams, _samDetails, _intl, _sinonContext) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var PROGRESS_BAR_COUNT = {
    left: 3,
    right: 2
  };
  var ZOOM_DATA = {
    'overview': [{
      'key': 'account_type',
      'value': 'base'
    }, {
      'key': 'account_plan',
      'value': 'monthly'
    }],
    'graph_data': [{
      'name': 'zoom_rooms',
      'description': '1000_participants',
      'type': 'line',
      'data': [18, 10],
      'metric': 'hosts'
    }],
    'last_sync_date': '2020-02-10T08:28:29Z'
  };
  var ZOOM_PRO_DATA = {
    'overview': [{
      'key': 'account_type',
      'value': 'base'
    }, {
      'key': 'account_plan',
      'value': 'monthly'
    }],
    'graph_data': [{
      'name': 'Base Plan',
      'description': '1000_participants',
      'type': 'line',
      'data': [18, 10],
      'metric': 'hosts'
    }, {
      'name': 'Zoom Room Plans',
      'description': '500_participants',
      'type': 'line',
      'data': [10, 10],
      'metric': ''
    }, {
      'name': 'Webinar Plans',
      'description': '1000_participants',
      'type': 'line',
      'data': [18, 20],
      'metric': 'hosts'
    }, {
      'name': 'Large Meeting Plans',
      'description': '',
      'type': 'line',
      'data': [100, 98],
      'metric': ''
    }, {
      'name': 'Free Storage',
      'description': '',
      'type': 'line',
      'data': [100, 98],
      'metric': ''
    }],
    'last_sync_date': '2020-02-10T08:28:29Z'
  };
  (0, _qunit.module)('Integration | Component | module-sam | details | app-data-visualisation', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _qunit.test)('it should render a card with progress chart when proper data is passed to the component', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Arrange
                this.set('data', ZOOM_DATA); // Act

                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::AppDataVisualisation 
                      @data =	{{this.data}}
                    />
                */
                {
                  id: "Py/5ecYc",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/app-data-visualisation\",[],[[\"@data\"],[[23,0,[\"data\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                // Assert
                assert.ok(_samDetails.default.progressChart.isChartVisible);
                assert.ok(_samDetails.default.isLeftColVisible);
                assert.notOk(_samDetails.default.isRightColVisible);

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should split the data into two and render in two columns when number of bars to draw is more than 4', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                // Arrange
                this.set('data', ZOOM_PRO_DATA); // Act

                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::AppDataVisualisation 
                      @data =	{{this.data}}
                    />
                */
                {
                  id: "Py/5ecYc",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/app-data-visualisation\",[],[[\"@data\"],[[23,0,[\"data\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                // Assert
                assert.ok(_samDetails.default.isLeftColVisible);
                assert.ok(_samDetails.default.isRightColVisible);
                assert.equal(_samDetails.default.leftProgressBars.length, PROGRESS_BAR_COUNT.left);
                assert.equal(_samDetails.default.rightProgressBars.length, PROGRESS_BAR_COUNT.right);

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should display view more option only if the number of records are more than 12', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var data;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                // Arrange
                data = _sams.default.find(function (app) {
                  return app.id === 3;
                }).additional_data;
                this.set('data', data.graph_data.slice(0, 12)); // Act

                _context3.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::AppDataVisualisation @data =	{{this.data}}/>
                */
                {
                  id: "Py/5ecYc",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/app-data-visualisation\",[],[[\"@data\"],[[23,0,[\"data\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                // Assert
                assert.notOk(_samDetails.default.isViewMoreButtonVisible, 'View more button should not be visible');
                this.set('data', data);
                assert.ok(_samDetails.default.isViewMoreButtonVisible, 'View more button should be visible');

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should display all the records on sidepane view', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var data;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                data = _sams.default.find(function (app) {
                  return app.id === 3;
                }).additional_data;
                this.set('data', data);
                _context4.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                      <UiComponents::UiModal
                				@toggleModal        = {{true}}
                				@closeOnEscape      = {{true}}
                				@showSubmit         = {{false}}
                				@defaultModal       = {{false}}
                				@modalClassBindings = 'sam license-plan-metric-modal'
                				@sideModalDirection = 'right'
                				@ariaLabel          = {{t 'fs.dashboard.announcements.title'}}
                				@closeOnOutsideClick= {{false}} as |modal|>
                				<ModuleSam::Details::appDataVisualisation
                					@data				=	{{this.data}}
                					@displayAllRecords	=	{{true}}
                					@modalView			=	{{modal}}/>
                			</UiComponents::UiModal>
                    
                */
                {
                  id: "+JuQ2M0f",
                  block: "{\"symbols\":[\"modal\"],\"statements\":[[0,\"\\n      \"],[5,\"ui-components/ui-modal\",[],[[\"@toggleModal\",\"@closeOnEscape\",\"@showSubmit\",\"@defaultModal\",\"@modalClassBindings\",\"@sideModalDirection\",\"@ariaLabel\",\"@closeOnOutsideClick\"],[true,true,false,false,\"sam license-plan-metric-modal\",\"right\",[28,\"t\",[\"fs.dashboard.announcements.title\"],null],false]],{\"statements\":[[0,\"\\n\\t\\t\\t\\t\"],[5,\"module-sam/details/app-data-visualisation\",[],[[\"@data\",\"@displayAllRecords\",\"@modalView\"],[[23,0,[\"data\"]],true,[23,1,[]]]]],[0,\"\\n\\t\\t\\t\"]],\"parameters\":[1]}],[0,\"\\n    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                assert.ok(_samDetails.default.licenseMetricProgressBars, this.data.graph_data.length, 'All the items should be rendered');

              case 5:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should be able to navigate to user view when clicking on a row if feature flag is enabled', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var onClickSpy, data, queryParams;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                onClickSpy = _sinon.default.spy();
                data = _sams.default.find(function (app) {
                  return app.id === 3;
                }).additional_data;
                queryParams = {
                  filter: (0, _common.jsonStringify)([{
                    condition: 'license_type',
                    operator: 'is_in',
                    value: data.graph_data[0].name
                  }]),
                  page: 1,
                  per_page: 20,
                  view_name: 'all',
                  view_override: null
                };
                this.setProperties({
                  data: data,
                  navigateToUserView: onClickSpy
                });
                _context5.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::AppDataVisualisation @data = {{this.data}} @navigateToUserView = {{this.navigateToUserView}}/>
                */
                {
                  id: "pXaOoNYV",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/app-data-visualisation\",[],[[\"@data\",\"@navigateToUserView\"],[[23,0,[\"data\"]],[23,0,[\"navigateToUserView\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                _context5.next = 8;
                return _samDetails.default.graphItems[0].click();

              case 8:
                assert.ok(onClickSpy.calledOnceWith(queryParams), "On clicking progress bar event should be triggered and args should match");

              case 9:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("should trigger view more action on clicking view more button", /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var onViewMoreSpy, data;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                onViewMoreSpy = _sinon.default.spy();
                data = _sams.default.find(function (app) {
                  return app.id === 3;
                }).additional_data;
                this.setProperties({
                  data: data,
                  onViewMore: onViewMoreSpy
                });
                _context6.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::AppDataVisualisation @data = {{this.data}} @onViewMore = {{this.onViewMore}}/>
                */
                {
                  id: "7xNWVEZm",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/app-data-visualisation\",[],[[\"@data\",\"@onViewMore\"],[[23,0,[\"data\"]],[23,0,[\"onViewMore\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                _context6.next = 7;
                return _samDetails.default.viewMoreButton();

              case 7:
                assert.ok(onViewMoreSpy.calledOnce, "On clicking view more button onViewMore action is triggered");

              case 8:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x6) {
        return _ref7.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-sam/details/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-current-account", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/spy-flash-message", "freshservice/mirage/fixtures/sams", "freshservice/tests/pages/components/module-sam/sam-details"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _intl, _stubCurrentAccount, _stubCurrentUser, _sinonContext, _spyFlashMessage, _sams, _samDetails) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var SLACK = _sams.default.find(function (app) {
    return app.id === 3;
  });

  var ADMIN_USER = {
    privileges: ["admin_tasks", "manage_ci", "view_ci"]
  };
  var CI_MANAGER = {
    privileges: ["manage_ci", "view_ci"]
  };
  var ROUTER_STUB = {
    parent: {
      params: {
        sam_id: SLACK.id
      }
    }
  };
  var ACCOUNT_STUB = {
    features: ['saas_app_management'],
    subscription: {}
  };
  (0, _qunit.module)('Integration | Component | module-sam | details ', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var router;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              router = this.owner.lookup("router:main");
              router.currentRoute = ROUTER_STUB;
              router.setupRouter();
              this.server.create('sam', SLACK);
              this.server.loadFixtures('applicationFields');

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.skip)('on clicking view more description it should display full description', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details/>
                */
                {
                  id: "GkrJUAdz",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                //Asert if show more description button is visible for long texts
                assert.ok(_samDetails.default.isViewMoreDescVisible); //Act

                _context2.next = 5;
                return _samDetails.default.descShowMore();

              case 5:
                //Asert if full description is shown after click of descShowMore
                assert.ok(_samDetails.default.isFullDescVisible);

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('clicking on insight enable toggler should toggle the insight for that particular software', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                (0, _stubCurrentAccount.stubCurrentAccount)(ACCOUNT_STUB);
                this.store = this.owner.lookup('service:store');
                /*
                	This step is needed here as in sam details component, model is initialised from within the component. and
                	as application is not  bootstrapped in integration and unit tests, the state of the model does not change
                	on save resulting in  "inFlight error on model save"
                	ref: https://stackoverflow.com/questions/46485508/ember-component-integration-test-inflight-error-on-model-save
                */

                this.store.scheduleSave = function (context, resolver) {
                  resolver.resolve(context);
                }; // Act


                _context3.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details/>
                */
                {
                  id: "GkrJUAdz",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                _context3.next = 7;
                return _samDetails.default.toggleInsight();

              case 7:
                assert.ok(_samDetails.default.isInsightEnabled, 'insight enabled');
                _context3.next = 10;
                return _samDetails.default.toggleInsight();

              case 10:
                assert.notOk(_samDetails.default.isInsightEnabled, 'insight disabled');

              case 11:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('It should display error toaster in case user tries to access a deleted app', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var intl, errorFlashSpy, expectedMsg;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                intl = this.owner.lookup("service:intl");
                errorFlashSpy = (0, _spyFlashMessage.default)('danger');
                expectedMsg = intl.t('fs.errors.generic_error'); // application show api

                this.server.get('/api/_/applications/:id', function () {
                  return {
                    errors: [{
                      status: 404
                    }]
                  };
                }, 500); // Act

                _context4.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details/>
                */
                {
                  id: "GkrJUAdz",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                _context4.t0 = assert;
                _context4.next = 9;
                return errorFlashSpy.calledWith(expectedMsg);

              case 9:
                _context4.t1 = _context4.sent;

                _context4.t0.ok.call(_context4.t0, _context4.t1);

              case 11:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should display integration banner if mkp app is present', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details/>
                */
                {
                  id: "GkrJUAdz",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.ok(_samDetails.default.isIntegrationBannerVisible);

              case 3:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should display app name in integration banner if banner is shown', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details/>
                */
                {
                  id: "GkrJUAdz",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.equal(_samDetails.default.nameTextInBanner, "How about integrating ".concat(SLACK.name, " directly"));

              case 3:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should display helptext with Continue in integration banner if user is admin', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var intl, expectedMsg, continueMsg;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                intl = this.owner.lookup("service:intl");
                expectedMsg = intl.t('fs.applications.detail.admin_integration_text');
                continueMsg = intl.t('fs.common.continue');
                (0, _stubCurrentUser.stubCurrentUser)(ADMIN_USER);
                _context7.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details/>
                */
                {
                  id: "GkrJUAdz",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                assert.equal(_samDetails.default.userBasedTextInBanner, "".concat(expectedMsg, " ").concat(continueMsg));

              case 7:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x6) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should display helptext to contact Admin in integration banner if user is not admin', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var intl, expectedMsg;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                intl = this.owner.lookup("service:intl");
                (0, _stubCurrentUser.stubCurrentUser)(CI_MANAGER);
                expectedMsg = intl.t('fs.applications.detail.user_integration_text');
                _context8.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details/>
                */
                {
                  id: "GkrJUAdz",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                assert.equal(_samDetails.default.userBasedTextInBanner, "".concat(expectedMsg));

              case 6:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x7) {
        return _ref9.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-sam/details/installations/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/sinon-context", "sinon", "freshservice/tests/lib/spy-flash-message", "freshservice/tests/pages/components/module-sam/sam-installations", "freshservice/mirage/fixtures/sams", "freshservice/mirage/fixtures/application-installations"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _intl, _stubCurrentUser, _sinonContext, _sinon, _spyFlashMessage, _samInstallations, _sams, _applicationInstallations) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  // Freshservice details from sams fixture is used here
  var FRESHSERVICE = _sams.default.find(function (app) {
    return app.id === 2;
  });

  var MACBOOK = _applicationInstallations.default.find(function (inst) {
    return inst.id === 1;
  });

  var LAPTOP_ASSET = _applicationInstallations.default.find(function (inst) {
    return inst.id === 2;
  });

  var FIRST_INSTALLATION = 'Apple macbook';
  var LAST_INSTALLATION = 'Zen Laptop';
  var PAGE_INFO_SECOND = 'Showing 21 to 22 of 22';
  var PAGE_INFO_FIRST = 'Showing 1 to 20 of 22';

  function renderComponent() {
    return _renderComponent.apply(this, arguments);
  }

  function _renderComponent() {
    _renderComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
      return regeneratorRuntime.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleSam::Details::Installations
              			@model = {{this.model}}
              			@refreshSummary	= {{this.refreshSummary}}
              	/>
              */
              {
                id: "Bk7sHdn1",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/installations\",[],[[\"@model\",\"@refreshSummary\"],[[23,0,[\"model\"]],[23,0,[\"refreshSummary\"]]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));
    return _renderComponent.apply(this, arguments);
  }

  (0, _qunit.module)('Integration | Component | module-sam | details | installations', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var store, storeRecord, model, refreshSummary;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              store = this.owner.lookup('service:store');
              storeRecord = store.createRecord('sam', FRESHSERVICE);
              model = {
                sam: storeRecord
              };

              refreshSummary = function refreshSummary() {};

              this.set('model', model);
              this.set('refreshSummary', refreshSummary);

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('add installation button should be shown only if user has manage_ci permission', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var curUser;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                // Arrange-Only view_ci, no manage_ci permission
                curUser = {
                  privileges: ['view_ci']
                };
                (0, _stubCurrentUser.stubCurrentUser)(curUser); // Act

                _context2.next = 4;
                return renderComponent();

              case 4:
                assert.notOk(_samInstallations.default.isAddInstallationVisible);

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('clicking on the name header should sort the table based on installaiton name', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                // Arrange
                this.server.loadFixtures('applicationInstallations'); // Act

                _context3.next = 3;
                return renderComponent();

              case 3:
                _context3.next = 5;
                return _samInstallations.default.sortByName();

              case 5:
                // Assert - name sorted in asc order
                assert.equal(_samInstallations.default.tableRows.objectAt(0).name, FIRST_INSTALLATION);
                _context3.next = 8;
                return _samInstallations.default.sortByName();

              case 8:
                // Assert - name sorted in desc order
                assert.equal(_samInstallations.default.tableRows.objectAt(0).name, LAST_INSTALLATION);

              case 9:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('next and prev button in the pagination should render respective pages', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                // Arrange
                this.server.loadFixtures('applicationInstallations'); // Act

                _context4.next = 3;
                return renderComponent();

              case 3:
                _context4.next = 5;
                return _samInstallations.default.navigateToNext();

              case 5:
                // Assert
                assert.equal(_samInstallations.default.pageInfo, PAGE_INFO_SECOND);
                _context4.next = 8;
                return _samInstallations.default.navigateToPrev();

              case 8:
                // Assert
                assert.equal(_samInstallations.default.pageInfo, PAGE_INFO_FIRST);

              case 9:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('adding an installation should show success message, list the installation in the table and refresh the summary', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var successFlashSpy, spy;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                // Arrange
                successFlashSpy = (0, _spyFlashMessage.default)();
                spy = _sinon.default.spy();
                this.set('refreshSummary', spy); // Act

                _context5.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::Installations
                			@model = {{this.model}}
                			@refreshSummary = {{this.refreshSummary}}
                		/>
                */
                {
                  id: "Bk7sHdn1",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/installations\",[],[[\"@model\",\"@refreshSummary\"],[[23,0,[\"model\"]],[23,0,[\"refreshSummary\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                _context5.next = 7;
                return _samInstallations.default.addInstallation();

              case 7:
                _context5.next = 9;
                return _samInstallations.default.formUtils.autocompleteSelectMultiple('deviceId', FIRST_INSTALLATION, 1);

              case 9:
                _context5.next = 11;
                return _samInstallations.default.confirmSubmit();

              case 11:
                _context5.t0 = assert;
                _context5.next = 14;
                return successFlashSpy.calledOnce;

              case 14:
                _context5.t1 = _context5.sent;

                _context5.t0.ok.call(_context5.t0, _context5.t1);

                _context5.t2 = assert;
                _context5.next = 19;
                return spy.calledOnce;

              case 19:
                _context5.t3 = _context5.sent;

                _context5.t2.ok.call(_context5.t2, _context5.t3);

                assert.equal(_samInstallations.default.tableRows.objectAt(0).name, FIRST_INSTALLATION);

              case 22:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('adding an existing installation should throw error message', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var errorFlashSpy;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                // Arrange
                errorFlashSpy = (0, _spyFlashMessage.default)('danger'); // Mocking the api to throw error

                this.server.post('/api/_/applications/:id/installations', function () {
                  return {
                    errors: [{
                      message: 'Installation already present',
                      detail: {
                        code: 'application_installation_present'
                      }
                    }]
                  };
                }, 500); // Act

                _context6.next = 4;
                return renderComponent();

              case 4:
                _context6.next = 6;
                return _samInstallations.default.addInstallation();

              case 6:
                _context6.next = 8;
                return _samInstallations.default.formUtils.autocompleteSelectMultiple('deviceId', FIRST_INSTALLATION, 1);

              case 8:
                _context6.next = 10;
                return _samInstallations.default.confirmSubmit();

              case 10:
                _context6.t0 = assert;
                _context6.next = 13;
                return errorFlashSpy.calledOnce;

              case 13:
                _context6.t1 = _context6.sent;

                _context6.t0.ok.call(_context6.t0, _context6.t1);

              case 15:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('deleting an installation should show success message, remove the installation from the table and refresh the summary', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var successFlashSpy, spy;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                // Arrange
                successFlashSpy = (0, _spyFlashMessage.default)();
                spy = _sinon.default.spy();
                this.server.create('applicationInstallation', MACBOOK);
                this.set('refreshSummary', spy); // Act

                _context7.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::Installations
                			@model = {{this.model}}
                			@refreshSummary = {{this.refreshSummary}}
                		/>
                */
                {
                  id: "Bk7sHdn1",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/installations\",[],[[\"@model\",\"@refreshSummary\"],[[23,0,[\"model\"]],[23,0,[\"refreshSummary\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                _context7.next = 8;
                return _samInstallations.default.selectRows().deleteInstallations().confirmSubmit();

              case 8:
                _context7.t0 = assert;
                _context7.next = 11;
                return successFlashSpy.calledOnce;

              case 11:
                _context7.t1 = _context7.sent;

                _context7.t0.ok.call(_context7.t0, _context7.t1);

                assert.ok(_samInstallations.default.isTableEmpty);
                _context7.t2 = assert;
                _context7.next = 17;
                return spy.calledOnce;

              case 17:
                _context7.t3 = _context7.sent;

                _context7.t2.ok.call(_context7.t2, _context7.t3);

              case 19:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x6) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('deleting an installation should show error toaster if the api throws error', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var errorFlashSpy;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                // Arrange
                errorFlashSpy = (0, _spyFlashMessage.default)('danger');
                this.server.create('applicationInstallation', MACBOOK); // Mocking the api to throw error

                this.server.delete('/api/_/applications/:id/installations', function () {
                  return {
                    errors: [{
                      message: 'Installation cannot be deleted'
                    }]
                  };
                }, 500); // Act

                _context8.next = 5;
                return renderComponent();

              case 5:
                _context8.next = 7;
                return _samInstallations.default.selectRows().deleteInstallations().confirmSubmit();

              case 7:
                _context8.t0 = assert;
                _context8.next = 10;
                return errorFlashSpy.calledOnce;

              case 10:
                _context8.t1 = _context8.sent;

                _context8.t0.ok.call(_context8.t0, _context8.t1);

              case 12:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x7) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('clicking on the select all button should select all the rows', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                // Arrange
                this.server.create('applicationInstallation', MACBOOK);
                this.server.create('applicationInstallation', LAPTOP_ASSET); // Act

                _context9.next = 4;
                return renderComponent();

              case 4:
                _context9.next = 6;
                return _samInstallations.default.selectAll();

              case 6:
                // Assert
                _samInstallations.default.tableRows.forEach(function (row) {
                  assert.ok(row.isSelected);
                });

              case 7:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x8) {
        return _ref10.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-sam/details/license-overview/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-current-account", "freshservice/tests/lib/set-locale-timezone-moment", "freshservice/tests/pages/components/module-sam/sam-details"], function (_qunit, _emberQunit, _testHelpers, _intl, _stubCurrentAccount, _setLocaleTimezoneMoment, _samDetails) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var EXPIRY = 'Upcoming Expiry';
  var RENEWAL = 'Upcoming Renewal';
  var REFDATE = '2020-03-18';
  var REFDATEFORMATED = '18 Mar, 2020';
  var MILISECINADAY = 86400000;
  var EXPIRYNOTE = 'in 15 days'; // Stub currentAccount service

  var CURRENT_ACCOUNT_STUB = {
    currencySymbol: '$',
    dateFormat: '1',
    // US Date format
    timeFormat: '12h'
  };
  (0, _qunit.module)('Integration | Component | module-sam | details | license-overview', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _setLocaleTimezoneMoment.setLocaleAndTimeZoneForMoment)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              (0, _stubCurrentAccount.stubCurrentAccount)(CURRENT_ACCOUNT_STUB);

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    })));
    (0, _qunit.test)('it should render license overview with total contract value and next expiry/renewal date depending on contract state', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var licenseConfig;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                // Arrange
                licenseConfig = {
                  total_contract_value: 1000.0,
                  exp_or_renewal_type: 'expiry',
                  exp_or_renewal_date: REFDATE
                };
                this.set('licenseConfig', licenseConfig); // Act

                _context2.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::licenseOverview
                			@data = {{this.licenseConfig}}
                		/>
                */
                {
                  id: "O3E7djRC",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/license-overview\",[],[[\"@data\"],[[23,0,[\"licenseConfig\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                // Assertassert.ok(samDetails.chart.isChartVisible);
                assert.equal(_samDetails.default.contractValueText, '$1000');
                assert.equal(_samDetails.default.expLabelText, EXPIRY);
                assert.equal(_samDetails.default.expDateText, REFDATEFORMATED); // Arrange (modifications)

                this.set('licenseConfig.exp_or_renewal_type', 'renewal'); // Assert

                assert.equal(_samDetails.default.expLabelText, RENEWAL);

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should display expiry note only if the expiry date is in 30 days from current date', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var licenseConfig;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                // Arrange
                licenseConfig = {
                  total_contract_value: 1000.0,
                  exp_or_renewal_type: 'expiry',
                  exp_or_renewal_date: new Date(new Date().getTime() + MILISECINADAY * 15) // 15 days from current date

                };
                this.set('licenseConfig', licenseConfig); // Act

                _context3.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::licenseOverview
                			@data = {{this.licenseConfig}}
                		/>
                */
                {
                  id: "O3E7djRC",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/license-overview\",[],[[\"@data\"],[[23,0,[\"licenseConfig\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                // Assert
                assert.equal(_samDetails.default.expDateText.split('(')[1], "".concat(EXPIRYNOTE, ")")); // Arrange (modifications)

                this.set('licenseConfig.exp_or_renewal_date', new Date(new Date().getTime() + MILISECINADAY * 31)); // 31 days from current date
                // Assert

                assert.notOk(_samDetails.default.expDateText.split('(')[1]);

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-sam/details/licenses/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-current-user", "freshservice/mirage/fixtures/sams", "freshservice/tests/pages/components/module-sam/sam-licenses"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _intl, _stubCurrentUser, _sams, _samLicenses) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  // Freshservice details from sams fixture is used here
  var FRESHSERVICE = _sams.default.find(function (app) {
    return app.id === 2;
  });

  var FIRST_LICENSE_NAME = 'Amazon License';
  var LAST_LICENSE_NAME = 'Zoom License';
  var PAGE_INFO_SECOND = 'Showing 21 to 22 of 22';
  var PAGE_INFO_FIRST = 'Showing 1 to 20 of 22';
  (0, _qunit.module)('Integration | Component | module-sam | details | licenses', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var store, storeRecord, model;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              store = this.owner.lookup('service:store');
              storeRecord = store.createRecord('sam', FRESHSERVICE);
              model = {
                sam: storeRecord
              };
              this.set('model', model);

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('add contract button should be shown only if user has manageContracts permission', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var curUser;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                // Arrange-Only view_ci, no manage_contract permission
                curUser = {
                  privileges: ['view_ci']
                };
                (0, _stubCurrentUser.stubCurrentUser)(curUser); // Act

                _context2.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::Licenses
                			@model = {{model}}
                		/>
                */
                {
                  id: "RwP4bjuh",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/licenses\",[],[[\"@model\"],[[22,\"model\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                assert.notOk(_samLicenses.default.isAddLicenseVisible);

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('clicking on the name header should sort the table based on license name', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                // Arrange
                this.server.loadFixtures('applicationLicenses'); // Act

                _context3.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::Licenses
                			@model = {{model}}
                		/>
                */
                {
                  id: "RwP4bjuh",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/licenses\",[],[[\"@model\"],[[22,\"model\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context3.next = 5;
                return _samLicenses.default.sortByName();

              case 5:
                // Assert - name sorted in desc order
                assert.equal(_samLicenses.default.tableRows.objectAt(0).name, LAST_LICENSE_NAME);
                _context3.next = 8;
                return _samLicenses.default.sortByName();

              case 8:
                // Assert - aname sorted in asc order
                assert.equal(_samLicenses.default.tableRows.objectAt(0).name, FIRST_LICENSE_NAME);

              case 9:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('next and prev button in the pagination should render respective pages', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                // Arrange
                this.server.loadFixtures('applicationLicenses'); // Act

                _context4.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::Licenses
                			@model = {{model}}
                		/>
                */
                {
                  id: "RwP4bjuh",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/licenses\",[],[[\"@model\"],[[22,\"model\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context4.next = 5;
                return _samLicenses.default.navigateToNext();

              case 5:
                // Assert
                assert.equal(_samLicenses.default.pageInfo, PAGE_INFO_SECOND);
                _context4.next = 8;
                return _samLicenses.default.navigateToPrev();

              case 8:
                // Assert
                assert.equal(_samLicenses.default.pageInfo, PAGE_INFO_FIRST);

              case 9:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-sam/details/relationship/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/stub-current-account", "freshservice/tests/lib/set-locale-timezone-moment", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/sinon-context", "freshservice/mirage/fixtures/sams", "freshservice/tests/lib/spy-flash-message", "sinon", "freshservice/tests/pages/components/module-sam/sam-relationships"], function (_qunit, _emberQunit, _testHelpers, _stubCurrentAccount, _setLocaleTimezoneMoment, _testSupport, _intl, _sinonContext, _sams, _spyFlashMessage, _sinon, _samRelationships) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var SELECTED_SOFTWARE = _sams.default.find(function (app) {
    return app.id === 3;
  }); // Stub currentAccount service


  var CURRENT_ACCOUNT_STUB = {
    currencySymbol: '$',
    dateFormat: '1',
    // US Date format
    timeFormat: '12h'
  };

  function genRelationshipData(nodeCount, childCount, edgeCount) {
    return this.server.create('relationship-map', {
      nodeCount: nodeCount,
      childCount: childCount,
      meta: {
        edge_count: edgeCount
      }
    });
  }

  (0, _qunit.module)('Integration | Component | module-sam | details | relationship', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _setLocaleTimezoneMoment.setLocaleAndTimeZoneForMoment)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              (0, _stubCurrentAccount.stubCurrentAccount)(CURRENT_ACCOUNT_STUB);
              this.set('model', {
                'sam': SELECTED_SOFTWARE
              });

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }))); // actions and togglesz

    (0, _qunit.test)('it should display not found page if no edges is available', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                genRelationshipData.call(this, 1, 0, 0);
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::Relationships @model={{this.model}}/>
                */
                {
                  id: "eqF8JPsW",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/relationships\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.ok(_samRelationships.default.isRelationshipNotFoundPageVisible, 'Relationship empty state should be visible on empty data');

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should display not found page if no data is available', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var mockRequest;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                genRelationshipData.call(this, 0, 0, 0);
                mockRequest = _sinon.default.fake.returns({
                  relationships: this.server.db.relationshipMaps[0],
                  meta: this.server.db.relationshipMaps[0].meta
                });
                this.server.get('/api/_/applications/:id/relationships', mockRequest, 400);
                _context3.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::Relationships @model={{this.model}}/>
                */
                {
                  id: "eqF8JPsW",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/relationships\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                assert.ok(_samRelationships.default.isRelationshipNotFoundPageVisible, 'Relationship empty state should be visible on request failure');

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should be able to toggle between map and list view', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                genRelationshipData.call(this, 3, 3, 2);
                _context4.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::Relationships @model={{this.model}}/>
                */
                {
                  id: "eqF8JPsW",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/relationships\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.ok(_samRelationships.default.isListView, 'Initial load list view should be visible');
                _context4.next = 6;
                return _samRelationships.default.mapViewToggleButton();

              case 6:
                assert.ok(_samRelationships.default.isMapView, 'Map view should be visible');
                _context4.next = 9;
                return (0, _testHelpers.waitFor)(_samRelationships.default.mapNodeConnector);

              case 9:
                _context4.next = 11;
                return _samRelationships.default.listViewToggleButton();

              case 11:
                assert.ok(_samRelationships.default.isListView, 'List view should be visible');

              case 12:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('link should be directed to the full app map page', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                genRelationshipData.call(this, 3, 3, 2);
                _context5.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::Relationships @model={{this.model}}/>
                */
                {
                  id: "eqF8JPsW",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/relationships\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.ok(_samRelationships.default.mapFullPageNavigateBtn, '/a/applications/3/relationship-maps', 'Navigation link should take to full app map page');

              case 4:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }()); // // list view

    (0, _qunit.test)('should render all items in the list view', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var data, edges, row, nodesOnEdge;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                data = genRelationshipData.call(this, 3, 2, 1);
                _context6.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::Relationships @model={{this.model}}/>
                */
                {
                  id: "eqF8JPsW",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/relationships\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                edges = data.edges.map(function (edge) {
                  return edge.stream == 'down' ? edge.target_id : edge.source_id;
                });
                assert.equal(_samRelationships.default.relationshipListTable[0].rows.length, edges.length, 'No of nodes should match table row count');
                row = _samRelationships.default.relationshipListTable[0].rows[0];
                nodesOnEdge = data.nodes.filter(function (node) {
                  return node.id == edges[0];
                });
                assert.equal(row.links.length, nodesOnEdge.length, 'Nodes for each edge should be rendered correctly');

              case 8:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('on deleting a entity delete dialog should be displayed on confirmation data should be reloaded', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var successFlash, deleteMockRequest, relationshipDataMockRequest;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                successFlash = (0, _spyFlashMessage.default)('success');
                deleteMockRequest = _sinon.default.fake.returns({});
                relationshipDataMockRequest = _sinon.default.fake.returns({
                  relationships: {
                    nodes: [{
                      id: 1,
                      type: 'asset',
                      name: 'Fantastic'
                    }],
                    edges: [{
                      relationship_name: 'uses',
                      source_id: 0,
                      stream: 'down',
                      target_id: 1
                    }]
                  },
                  meta: {
                    edge_count: 1
                  }
                });
                this.server.delete('/api/_/relationships/:id', deleteMockRequest, 200);
                this.server.get('/api/_/applications/:id/relationships', relationshipDataMockRequest, 200);
                genRelationshipData.call(this, 3, 3, 2);
                _context7.next = 8;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::Relationships @model={{this.model}}/>
                */
                {
                  id: "eqF8JPsW",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/relationships\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 8:
                _context7.next = 10;
                return _samRelationships.default.onRelationshipRowHover();

              case 10:
                _context7.next = 12;
                return _samRelationships.default.nodeDeleteButton();

              case 12:
                assert.ok(_samRelationships.default.isRelationshipDeleteModalVisible, 'On delete modal is shown');
                _context7.next = 15;
                return _samRelationships.default.modalDeleteConfirmBtn();

              case 15:
                assert.ok(successFlash.calledOnce, 'Success Toastr was called');
                assert.ok(deleteMockRequest.calledOnce, 'API is triggered Once');
                assert.ok(relationshipDataMockRequest.calledTwice, 'Relationship data is reloaded');

              case 18:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x6) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('on delete if api error display toastr failure message', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var errorFlash, deleteMockRequest;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                errorFlash = (0, _spyFlashMessage.default)('danger');
                deleteMockRequest = _sinon.default.fake.returns({});
                this.server.delete('/api/_/relationships/:id', deleteMockRequest, 500);
                genRelationshipData.call(this, 3, 3, 2);
                _context8.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::Relationships @model={{this.model}}/>
                */
                {
                  id: "eqF8JPsW",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/relationships\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                _context8.next = 8;
                return _samRelationships.default.onRelationshipRowHover();

              case 8:
                _context8.next = 10;
                return _samRelationships.default.nodeDeleteButton();

              case 10:
                _context8.next = 12;
                return _samRelationships.default.modalDeleteConfirmBtn();

              case 12:
                assert.ok(errorFlash.calledOnce, 'Error Toastr was called');

              case 13:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x7) {
        return _ref9.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-sam/details/saas-actions/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/pages/components/module-sam/sam-saas-actions", "freshservice/mirage/fixtures/sams", "freshservice/mirage/fixtures/application-users"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _intl, _samSaasActions, _sams, _applicationUsers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  // Freshservice details from sams fixture is used here
  var FRESHSERVICE = _sams.default.find(function (app) {
    return app.id === 2;
  });

  var AARON = _applicationUsers.default.find(function (inst) {
    return inst.id === 1;
  });

  (0, _qunit.module)('Integration | Component | module-sam | details | users | sr-form', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var store, storeRecord, model;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              store = this.owner.lookup('service:store');
              storeRecord = store.createRecord('sam', FRESHSERVICE);
              model = {
                sam: storeRecord
              };
              this.set('store', store);
              this.set('model', model);
              this.set('selectedUserIds', [AARON.id]);
              this.server.loadFixtures('saasActionFields');

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('it should render Service Item creation screen', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::SrForm @model={{model}} class="flt-right app-add"/>
                */
                {
                  id: "RrGPpy5z",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/sr-form\",[[12,\"class\",\"flt-right app-add\"]],[[\"@model\"],[[22,\"model\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context2.next = 4;
                return _samSaasActions.default.takeAction();

              case 4:
                // Assert
                assert.notOk(_samSaasActions.default.isServiceRequestFormVisible);
                assert.ok(_samSaasActions.default.isServiceItemCreateVisible);

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should create a Service Item successfully', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::SrForm @model={{model}} class="flt-right app-add"/>
                */
                {
                  id: "RrGPpy5z",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/sr-form\",[[12,\"class\",\"flt-right app-add\"]],[[\"@model\"],[[22,\"model\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context3.next = 4;
                return _samSaasActions.default.takeAction();

              case 4:
                _context3.next = 6;
                return _samSaasActions.default.createServiceItem();

              case 6:
                // Assert
                assert.notOk(_samSaasActions.default.isServiceItemCreateVisible);

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render Service Request form', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.store.query('saasActionField', {});

              case 2:
                _context4.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::SrForm @model={{model}} class="flt-right app-add"/>
                */
                {
                  id: "RrGPpy5z",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/sr-form\",[[12,\"class\",\"flt-right app-add\"]],[[\"@model\"],[[22,\"model\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context4.next = 6;
                return _samSaasActions.default.takeAction();

              case 6:
                // Assert
                assert.notOk(_samSaasActions.default.isServiceItemCreateVisible);
                assert.ok(_samSaasActions.default.isServiceRequestFormVisible);

              case 8:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should pre-populate Application Name in SR Form', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this.store.query('saasActionField', {});

              case 2:
                _context5.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::SrForm @model={{model}} class="flt-right app-add"/>
                */
                {
                  id: "RrGPpy5z",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/sr-form\",[[12,\"class\",\"flt-right app-add\"]],[[\"@model\"],[[22,\"model\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context5.next = 6;
                return _samSaasActions.default.takeAction();

              case 6:
                // Assert
                assert.notOk(_samSaasActions.default.isServiceItemCreateVisible);
                assert.ok(_samSaasActions.default.isServiceRequestFormVisible);
                assert.ok("non-empty", _samSaasActions.default.applicationNameValue);
                assert.equal(_samSaasActions.default.applicationNameValue, this.model.sam.name);

              case 10:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.skip)('it should render In Progress Card when in status is InProgress', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this.store.query('saasActionField', {});

              case 2:
                _context6.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::SrForm @selectedUsers ={{selectedUserIds}} @model={{model}} class="flt-right app-add"/>
                */
                {
                  id: "RymSrbH4",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/sr-form\",[[12,\"class\",\"flt-right app-add\"]],[[\"@selectedUsers\",\"@model\"],[[22,\"selectedUserIds\"],[22,\"model\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context6.next = 6;
                return _samSaasActions.default.takeAction();

              case 6:
                _context6.next = 8;
                return _samSaasActions.default.formUtils.selectSingle('customField.cf_app_actions_1', '0');

              case 8:
                _samSaasActions.default.submitSrForm();

                _context6.next = 11;
                return (0, _testHelpers.waitFor)(".in-progress-card", {
                  timeout: 2000
                });

              case 11:
                // Assert
                assert.ok(_samSaasActions.default.isInProgressCardVisible);
                _context6.next = 14;
                return (0, _testHelpers.waitFor)(".success-card", {
                  timeout: 6000
                });

              case 14:
                assert.ok(_samSaasActions.default.isInProgressCardVisible);
                _context6.next = 17;
                return _samSaasActions.default.confirmSubmit();

              case 17:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render Success Card when in status is Success', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return this.store.query('saasActionField', {});

              case 2:
                _context7.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::SrForm @selectedUsers ={{selectedUserIds}} @model={{model}} class="flt-right app-add"/>
                */
                {
                  id: "RymSrbH4",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/sr-form\",[[12,\"class\",\"flt-right app-add\"]],[[\"@selectedUsers\",\"@model\"],[[22,\"selectedUserIds\"],[22,\"model\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context7.next = 6;
                return _samSaasActions.default.takeAction();

              case 6:
                // Assert
                assert.ok(_samSaasActions.default.isServiceRequestFormVisible);
                assert.equal(_samSaasActions.default.applicationNameValue, this.model.sam.name);
                _context7.next = 10;
                return _samSaasActions.default.formUtils.selectSingle('customField.cf_app_actions_1', '1');

              case 10:
                _context7.next = 12;
                return _samSaasActions.default.submitSrForm();

              case 12:
                assert.ok(_samSaasActions.default.isSuccessCardVisible);
                _context7.next = 15;
                return _samSaasActions.default.openSr();

              case 15:
                assert.ok(_samSaasActions.default.isSrItemLinkVisible);

              case 16:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x6) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render Partial Success Card when in status is PartiallySuccesful', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return this.store.query('saasActionField', {});

              case 2:
                _context8.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::SrForm @selectedUsers ={{selectedUserIds}} @model={{model}} class="flt-right app-add"/>
                */
                {
                  id: "RymSrbH4",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/sr-form\",[[12,\"class\",\"flt-right app-add\"]],[[\"@selectedUsers\",\"@model\"],[[22,\"selectedUserIds\"],[22,\"model\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context8.next = 6;
                return _samSaasActions.default.takeAction();

              case 6:
                _context8.next = 8;
                return _samSaasActions.default.formUtils.selectSingle('customField.cf_app_actions_1', '2');

              case 8:
                _context8.next = 10;
                return _samSaasActions.default.submitSrForm();

              case 10:
                // Assert
                assert.ok(_samSaasActions.default.isPartialSuccessCardVisible);
                _context8.next = 13;
                return _samSaasActions.default.confirmSubmit();

              case 13:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x7) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render Failure Card when in status is Failure', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return this.store.query('saasActionField', {});

              case 2:
                _context9.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::SrForm @selectedUsers ={{selectedUserIds}} @model={{model}} class="flt-right app-add"/>
                */
                {
                  id: "RymSrbH4",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/sr-form\",[[12,\"class\",\"flt-right app-add\"]],[[\"@selectedUsers\",\"@model\"],[[22,\"selectedUserIds\"],[22,\"model\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context9.next = 6;
                return _samSaasActions.default.takeAction();

              case 6:
                _context9.next = 8;
                return _samSaasActions.default.formUtils.selectSingle('customField.cf_app_actions_1', '3');

              case 8:
                _context9.next = 10;
                return _samSaasActions.default.submitSrForm();

              case 10:
                assert.ok(_samSaasActions.default.isFailureCardVisible);
                assert.ok(_samSaasActions.default.isResendSrVisible);
                _context9.next = 14;
                return _samSaasActions.default.resendSr();

              case 14:
                _context9.next = 16;
                return _samSaasActions.default.confirmSubmit();

              case 16:
                // Assert
                assert.notOk(_samSaasActions.default.isFailureCardVisible);

              case 17:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x8) {
        return _ref10.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-sam/details/usage-overview/component-test", ["qunit", "ember-qunit", "freshservice/tests/lib/intl", "@ember/test-helpers", "sinon", "freshservice/tests/pages/components/module-sam/sam-details"], function (_qunit, _emberQunit, _intl, _testHelpers, _sinon, _samDetails) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var INACTIVE_USERS = 'Inactive';
  var LOW_ACTIVITY = 'Low Activity';
  (0, _qunit.module)('Integration | Component | module-sam | details | usage-overview', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _qunit.test)('it should render usage overview with the chart and legend details on standard input', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var usageConfig;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Arrange
                usageConfig = {
                  active: 0,
                  no_usage: 1,
                  low_usage: 1,
                  no_usage_data: 0
                };
                this.set('usageConfig', usageConfig); // Act

                _context.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::usageOverview
                			@data = {{this.usageConfig}}
                		/>
                */
                {
                  id: "/BNz93QE",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/usage-overview\",[],[[\"@data\"],[[23,0,[\"usageConfig\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                // Assert
                assert.ok(_samDetails.default.isChartVisible);
                assert.equal(_samDetails.default.totalCount, usageConfig.no_usage + usageConfig.low_usage);
                assert.equal(_samDetails.default.firstSectionLabel, "".concat(LOW_ACTIVITY, "(").concat(usageConfig.low_usage, ")"));
                assert.equal(_samDetails.default.secondSectionLabel, "".concat(INACTIVE_USERS, "(").concat(usageConfig.no_usage, ")"));

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("it should redirect to user view when clicking on a chart pie", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var onNavigationSpy, pieSlice, usageConfig, payload;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                onNavigationSpy = _sinon.default.spy(); // Arrange

                usageConfig = {
                  active: 0,
                  no_usage: 1,
                  low_usage: 0,
                  no_usage_data: 0
                };
                payload = {
                  page: 1,
                  per_page: 20,
                  view_name: 'no_usage',
                  filter: '[{"condition":"usage_percentage","value":0,"operator":"is"}]'
                };
                this.setProperties({
                  usageConfig: usageConfig,
                  navigateToUserView: onNavigationSpy
                }); // Act

                _context2.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::usageOverview
                			@data = {{this.usageConfig}} @navigateToUserView = {{this.navigateToUserView}}
                		/>
                */
                {
                  id: "ZRbSf0CZ",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/usage-overview\",[],[[\"@data\",\"@navigateToUserView\"],[[23,0,[\"usageConfig\"]],[23,0,[\"navigateToUserView\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                pieSlice = this.element.querySelector(_samDetails.default.pieSlice);
                pieSlice.point.series.eventOptions.click(pieSlice);
                assert.ok(onNavigationSpy.calledOnceWithExactly(payload), "Clicking a slice in pie chart should trigger user navigation event");

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should show coming soon wrapper if config data is not present (ie for desktop/mobile apps)', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var usageConfig;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                // Arrange
                usageConfig = undefined;
                this.set('usageConfig', usageConfig); // Act

                _context3.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::usageOverview
                			@data = {{this.usageConfig}}
                		/>
                */
                {
                  id: "/BNz93QE",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/usage-overview\",[],[[\"@data\"],[[23,0,[\"usageConfig\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                // Assert
                assert.notOk(_samDetails.default.isChartVisible);
                assert.ok(_samDetails.default.isComingSoonSectionVisible);

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-sam/details/users/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/spy-flash-message", "sinon", "freshservice/tests/pages/components/module-sam/sam-users", "freshservice/mirage/fixtures/sams", "freshservice/mirage/fixtures/application-users", "freshservice/mirage/fixtures/application-licenses", "freshservice/mirage/fixtures/users"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _intl, _sinonContext, _spyFlashMessage, _sinon, _samUsers, _sams, _applicationUsers, _applicationLicenses, _users) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  // Freshservice details from sams fixture is used here
  var FRESHSERVICE = _sams.default.find(function (app) {
    return app.id === 2;
  });

  var AARON = _applicationUsers.default.find(function (inst) {
    return inst.id === 1;
  });

  var PETRA = _applicationUsers.default.find(function (inst) {
    return inst.id === 2;
  });

  var AARON_USER_REF = _users.default.find(function (inst) {
    return inst.id === 1;
  });

  var EARLIER_DATE = 'Tue, 16 Jun 2020';
  var LATER_DATE = 'Fri, 19 Jun 2020';

  var FRESHWORKS_LICENSE = _applicationLicenses.default.find(function (inst) {
    return inst.id === 2;
  });

  var PAGE_INFO_SECOND = 'Showing 21 to 22 of 22';
  var PAGE_INFO_FIRST = 'Showing 1 to 20 of 22';
  (0, _qunit.skip)('Integration | Component | module-sam | details | users', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var store, storeRecord, model;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              store = this.owner.lookup('service:store');
              storeRecord = store.createRecord('sam', FRESHSERVICE);
              model = {
                sam: storeRecord
              };
              this.set('model', model);

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('clicking on the assigned date header should sort the table based on the license assigned date', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                // Arrange
                this.server.loadFixtures('applicationUsers'); // Act

                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::Users
                			@model = {{model}}
                		/>
                */
                {
                  id: "rbwXXPkh",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/users\",[],[[\"@model\"],[[22,\"model\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context2.next = 5;
                return _samUsers.default.sortByAssignedDate();

              case 5:
                // Assert - name sorted in desc order
                assert.equal(_samUsers.default.tableRows.objectAt(0).assignedDate, LATER_DATE);
                _context2.next = 8;
                return _samUsers.default.sortByAssignedDate();

              case 8:
                // Assert - aname sorted in asc order
                assert.equal(_samUsers.default.tableRows.objectAt(0).assignedDate, EARLIER_DATE);

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('next and prev button in the pagination should render respective pages', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                // Arrange
                this.server.loadFixtures('applicationUsers'); // Act

                _context3.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::Users
                			@model = {{model}}
                		/>
                */
                {
                  id: "rbwXXPkh",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/users\",[],[[\"@model\"],[[22,\"model\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context3.next = 5;
                return _samUsers.default.navigateToNext();

              case 5:
                // Assert
                assert.equal(_samUsers.default.pageInfo, PAGE_INFO_SECOND);
                _context3.next = 8;
                return _samUsers.default.navigateToPrev();

              case 8:
                // Assert
                assert.equal(_samUsers.default.pageInfo, PAGE_INFO_FIRST);

              case 9:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('adding a user should show success message ,list the user in the table and refresh summary page', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var spy, successFlashSpy;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                // Arrange
                this.server.create('applicationLicense', FRESHWORKS_LICENSE);
                this.server.create('user', AARON_USER_REF);
                spy = _sinon.default.spy();
                successFlashSpy = (0, _spyFlashMessage.default)();
                this.set('refreshSummary', spy); // Act

                _context4.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::Users
                			@model = {{model}}
                			@showLicensesTab = {{true}}
                			@refreshSummary = {{refreshSummary}}
                		/>
                */
                {
                  id: "DOZC17xC",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/users\",[],[[\"@model\",\"@showLicensesTab\",\"@refreshSummary\"],[[22,\"model\"],true,[22,\"refreshSummary\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context4.next = 9;
                return _samUsers.default.addUser();

              case 9:
                _context4.next = 11;
                return _samUsers.default.formUtils.autocompleteSelectMultiple('userId', AARON_USER_REF.name, 1);

              case 11:
                _context4.next = 13;
                return _samUsers.default.formUtils.autocompleteSelectMultiple('licenseId', FRESHWORKS_LICENSE.name, 1);

              case 13:
                _context4.next = 15;
                return _samUsers.default.confirmSubmit();

              case 15:
                _context4.t0 = assert;
                _context4.next = 18;
                return successFlashSpy.calledOnce;

              case 18:
                _context4.t1 = _context4.sent;

                _context4.t0.ok.call(_context4.t0, _context4.t1);

                _context4.t2 = assert;
                _context4.next = 23;
                return spy.calledOnce;

              case 23:
                _context4.t3 = _context4.sent;

                _context4.t2.ok.call(_context4.t2, _context4.t3);

                assert.equal(_samUsers.default.tableRows.objectAt(0).name, AARON_USER_REF.name);
                assert.equal(_samUsers.default.tableRows.objectAt(0).license, FRESHWORKS_LICENSE.name);

              case 27:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('allocating a license should show success message ,list the license in the table and refresh summary page', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var spy, successFlashSpy;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                // Arrange
                this.server.create('applicationLicense', FRESHWORKS_LICENSE);
                this.server.create('applicationUser', AARON);
                spy = _sinon.default.spy();
                successFlashSpy = (0, _spyFlashMessage.default)();
                this.set('refreshSummary', spy); // Act

                _context5.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::Users
                			@model = {{model}}
                			@showLicensesTab = {{true}}
                			@refreshSummary = {{refreshSummary}}
                		/>
                */
                {
                  id: "DOZC17xC",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/users\",[],[[\"@model\",\"@showLicensesTab\",\"@refreshSummary\"],[[22,\"model\"],true,[22,\"refreshSummary\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context5.next = 9;
                return _samUsers.default.selectRows().allocateLicense();

              case 9:
                _context5.next = 11;
                return _samUsers.default.formUtils.autocompleteSelectMultiple('licenseId', FRESHWORKS_LICENSE.name, 1);

              case 11:
                _context5.next = 13;
                return _samUsers.default.confirmSubmit();

              case 13:
                _context5.t0 = assert;
                _context5.next = 16;
                return successFlashSpy.calledOnce;

              case 16:
                _context5.t1 = _context5.sent;

                _context5.t0.ok.call(_context5.t0, _context5.t1);

                _context5.t2 = assert;
                _context5.next = 21;
                return spy.calledOnce;

              case 21:
                _context5.t3 = _context5.sent;

                _context5.t2.ok.call(_context5.t2, _context5.t3);

                assert.equal(_samUsers.default.tableRows.objectAt(0).license, FRESHWORKS_LICENSE.name);

              case 24:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('deallocating a license should show success message ,remove the license in the table and refresh summary page', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var spy, successFlashSpy;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                // Arrange
                this.server.create('applicationLicense', FRESHWORKS_LICENSE);
                this.server.create('applicationUser', AARON);
                spy = _sinon.default.spy();
                successFlashSpy = (0, _spyFlashMessage.default)();
                this.set('refreshSummary', spy); // Act

                _context6.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::Users
                			@model = {{model}}
                			@showLicensesTab = {{true}}
                			@refreshSummary = {{refreshSummary}}
                		/>
                */
                {
                  id: "DOZC17xC",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/users\",[],[[\"@model\",\"@showLicensesTab\",\"@refreshSummary\"],[[22,\"model\"],true,[22,\"refreshSummary\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context6.next = 9;
                return _samUsers.default.selectRows().deAllocateLicense();

              case 9:
                _context6.next = 11;
                return _samUsers.default.confirmSubmit();

              case 11:
                _context6.t0 = assert;
                _context6.next = 14;
                return successFlashSpy.calledOnce;

              case 14:
                _context6.t1 = _context6.sent;

                _context6.t0.ok.call(_context6.t0, _context6.t1);

                _context6.t2 = assert;
                _context6.next = 19;
                return spy.calledOnce;

              case 19:
                _context6.t3 = _context6.sent;

                _context6.t2.ok.call(_context6.t2, _context6.t3);

                assert.equal(_samUsers.default.tableRows.objectAt(0).license, '-');

              case 22:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('adding an existing user should throw error message', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var errorFlashSpy;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                // Arrange
                errorFlashSpy = (0, _spyFlashMessage.default)('danger');
                this.server.create('applicationLicense', FRESHWORKS_LICENSE); // Mocking the api to throw error

                this.server.post('/applications/:id/users', function () {
                  return {
                    application_users: [{
                      errors: [{
                        message: 'User already present',
                        code: 'application_user_present'
                      }]
                    }]
                  };
                }, 500); // Act

                _context7.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::Users
                			@model = {{model}}
                			@showLicensesTab = {{true}}
                		/>
                */
                {
                  id: "a9I2Gw2o",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/users\",[],[[\"@model\",\"@showLicensesTab\"],[[22,\"model\"],true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                _context7.next = 7;
                return _samUsers.default.addUser();

              case 7:
                _context7.next = 9;
                return _samUsers.default.formUtils.autocompleteSelectMultiple('userId', AARON_USER_REF.name, 1);

              case 9:
                _context7.next = 11;
                return _samUsers.default.formUtils.autocompleteSelectMultiple('licenseId', FRESHWORKS_LICENSE.name, 1);

              case 11:
                _context7.next = 13;
                return _samUsers.default.confirmSubmit();

              case 13:
                _context7.t0 = assert;
                _context7.next = 16;
                return errorFlashSpy.calledOnce;

              case 16:
                _context7.t1 = _context7.sent;

                _context7.t0.ok.call(_context7.t0, _context7.t1);

              case 18:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x6) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('deleting a user should show success message, remove the user from the table and refresh software summary', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var spy, successFlashSpy;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                // Arrange
                spy = _sinon.default.spy();
                successFlashSpy = (0, _spyFlashMessage.default)();
                this.set('refreshSummary', spy);
                this.server.create('applicationUser', AARON); // Act

                _context8.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::Users
                			@model = {{model}}
                			@refreshSummary = {{refreshSummary}}
                		/>
                */
                {
                  id: "LLfVFTbq",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/users\",[],[[\"@model\",\"@refreshSummary\"],[[22,\"model\"],[22,\"refreshSummary\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                _context8.next = 8;
                return _samUsers.default.selectRows().deleteUsers().confirmSubmit();

              case 8:
                _context8.t0 = assert;
                _context8.next = 11;
                return successFlashSpy.calledOnce;

              case 11:
                _context8.t1 = _context8.sent;

                _context8.t0.ok.call(_context8.t0, _context8.t1);

                assert.ok(_samUsers.default.isTableEmpty);
                _context8.t2 = assert;
                _context8.next = 17;
                return spy.calledOnce;

              case 17:
                _context8.t3 = _context8.sent;

                _context8.t2.ok.call(_context8.t2, _context8.t3);

              case 19:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x7) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('deleting a user should show error toaster if the api throws error', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        var errorFlashSpy;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                // Arrange
                errorFlashSpy = (0, _spyFlashMessage.default)('danger');
                this.server.create('applicationUser', AARON); // Mocking the api to throw error

                this.server.delete('/applications/:id/users', function () {
                  return {
                    errors: [{
                      message: 'Installation cannot be deleted'
                    }]
                  };
                }, 500); // Act

                _context9.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::Users
                			@model = {{model}}
                		/>
                */
                {
                  id: "rbwXXPkh",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/users\",[],[[\"@model\"],[[22,\"model\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                _context9.next = 7;
                return _samUsers.default.selectRows().deleteUsers().confirmSubmit();

              case 7:
                _context9.t0 = assert;
                _context9.next = 10;
                return errorFlashSpy.calledOnce;

              case 10:
                _context9.t1 = _context9.sent;

                _context9.t0.ok.call(_context9.t0, _context9.t1);

              case 12:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x8) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('clicking on the select all button should select all the rows', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                // Arrange
                this.server.create('applicationUser', AARON);
                this.server.create('applicationUser', PETRA); // Act

                _context10.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::Users
                			@model = {{model}}
                		/>
                */
                {
                  id: "rbwXXPkh",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/users\",[],[[\"@model\"],[[22,\"model\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context10.next = 6;
                return _samUsers.default.selectAll();

              case 6:
                // Assert
                _samUsers.default.tableRows.forEach(function (row) {
                  assert.ok(row.isSelected);
                });

              case 7:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x9) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('clicking on close of add user modal should clear the selected values', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        var name, license;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                // Arrange
                this.server.create('applicationLicense', FRESHWORKS_LICENSE);
                this.server.create('user', AARON_USER_REF); // Act

                _context11.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Details::Users
                			@model = {{model}}
                			@showLicensesTab = {{true}}
                		/>
                */
                {
                  id: "a9I2Gw2o",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/details/users\",[],[[\"@model\",\"@showLicensesTab\"],[[22,\"model\"],true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context11.next = 6;
                return _samUsers.default.addUser();

              case 6:
                _context11.next = 8;
                return _samUsers.default.formUtils.autocompleteSelectMultiple('userId', AARON_USER_REF.name, 1);

              case 8:
                _context11.next = 10;
                return _samUsers.default.formUtils.autocompleteSelectMultiple('licenseId', FRESHWORKS_LICENSE.name, 1);

              case 10:
                _context11.next = 12;
                return _samUsers.default.closeModal().addUser();

              case 12:
                _context11.next = 14;
                return _samUsers.default.formUtils.getDataForField('userId', true);

              case 14:
                name = _context11.sent;
                _context11.next = 17;
                return _samUsers.default.formUtils.getDataForField('licenseId', true);

              case 17:
                license = _context11.sent;
                assert.notOk(name.selected);
                assert.notOk(license.selected);

              case 20:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x10) {
        return _ref12.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-sam/details/users/list-filter/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "sinon", "ember-cli-mirage/test-support", "ember-power-select/test-support/helpers", "freshservice/tests/lib/intl", "freshservice/tests/pages/components/module-sam/user-list-filter", "freshservice/tests/lib/sinon-context"], function (_qunit, _emberQunit, _testHelpers, _sinon, _testSupport, _helpers, _intl, _userListFilter, _sinonContext) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function renderComponent() {
    return _renderComponent.apply(this, arguments);
  }

  function _renderComponent() {
    _renderComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
      return regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <UiComponents::UiListFilter::FilterHeader/>
              		<Module-Sam::Details::Users::ListFilter
              			@meta			= {{this.meta}}
              			@filter			= {{this.filter}}
              			@refreshFilter	= {{this.refreshFilter}}
              		/>
              */
              {
                id: "QeVCMD1h",
                block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/ui-list-filter/filter-header\",[],[[],[]]],[0,\"\\n\\t\\t\"],[5,\"module-sam/details/users/list-filter\",[],[[\"@meta\",\"@filter\",\"@refreshFilter\"],[[23,0,[\"meta\"]],[23,0,[\"filter\"]],[23,0,[\"refreshFilter\"]]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    }));
    return _renderComponent.apply(this, arguments);
  }

  (0, _qunit.module)("Integration | Component | module-sam | details | users | list-filter", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _qunit.test)("it should apply the selected filter", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var refreshFilterSpy, filterParam;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Arrange
                refreshFilterSpy = _sinon.default.spy();
                filterParam = '[{"condition":"source","operator":"is_in","value":"0","data":[{"name":"0","value":"microsoft","selectType":"multi-select"}]}]';
                this.setProperties({
                  meta: {
                    sources: ['microsoft']
                  },
                  filter: null,
                  refreshFilter: refreshFilterSpy
                }); // Act - select filter fields via ui

                _context.next = 5;
                return renderComponent();

              case 5:
                _context.next = 7;
                return (0, _helpers.selectChoose)(_userListFilter.default.sourceDropdown, 'microsoft');

              case 7:
                _context.next = 9;
                return _userListFilter.default.clickFilterApply();

              case 9:
                assert.ok(refreshFilterSpy.calledWithExactly(filterParam), "'applyFilter()' was called with expected filter params on 'Apply' click");

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("it should reset params when 'Reset' button is clicked", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var refreshFilterSpy;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                refreshFilterSpy = _sinon.default.spy();
                this.setProperties({
                  meta: {
                    sources: ['microsoft']
                  },
                  filter: null,
                  refreshFilter: refreshFilterSpy
                }); // Act

                _context2.next = 4;
                return renderComponent();

              case 4:
                _context2.next = 6;
                return _userListFilter.default.clickResetFilter();

              case 6:
                // Assert
                assert.ok(refreshFilterSpy.calledOnceWithExactly('all', true), "resetFilter() was called as expected");
                assert.equal(this.get('filterParam'), null, "On reset filter data should be resetted to null");

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("it should display license type dropdown if present in meta", /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this.setProperties({
                  meta: {
                    sources: ['microsoft'],
                    licenseTypes: ['a', 'b']
                  },
                  filter: []
                }); // Act

                _context3.next = 3;
                return renderComponent();

              case 3:
                assert.ok(_userListFilter.default.isLicenseTypeDropdownVisible, "License type dropdown should be visible");

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("it should set filter based on filterParam arg", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var filterParam;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                filterParam = [{
                  'condition': 'license_type',
                  'operator': 'is_in',
                  'value': 'MSOffice'
                }, {
                  'condition': 'usage_percentage',
                  'operator': 'is',
                  'value': '0'
                }];
                this.setProperties({
                  meta: {
                    licenseTypes: ['a', 'b']
                  },
                  filter: filterParam
                }); // Act

                _context4.next = 4;
                return renderComponent();

              case 4:
                assert.equal(_userListFilter.default.licenseTypeValues.length, 1, "Filter arg and choices should match");

              case 5:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("should trigger API call when department is searched", /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var mockRequest, queryParams;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                mockRequest = _sinon.default.fake(function () {
                  return {
                    results: [{
                      id: 1,
                      value: 'Development'
                    }]
                  };
                });
                queryParams = {
                  q: 'develop',
                  qf: 'name'
                };
                this.server.get('/api/_/departments/search', mockRequest, 200);
                this.setProperties({
                  filter: [],
                  meta: {}
                }); // Act

                _context5.next = 6;
                return renderComponent();

              case 6:
                _context5.next = 8;
                return (0, _testHelpers.fillIn)(_userListFilter.default.departmentDropdown + ' input', 'develop');

              case 8:
                assert.ok(mockRequest.calledOnce, "On search department API call is triggered");
                assert.deepEqual(mockRequest.lastArg.queryParams, queryParams, "Request query params should match");

              case 10:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-sam/form/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/spy-flash-message", "freshservice/tests/pages/components/module-sam/form", "freshservice/mirage/fixtures/sams"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _intl, _sinonContext, _spyFlashMessage, _form, _sams) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var MANAGED = 'Managed';
  var SAAS = 'SaaS';
  var CATEGORYNAME = 'accounts';
  var CATEGORYNAMENEW = 'accounts new';
  var SAVE = 'Save';
  var ADDTRIGGER = 'New Software';
  var EDITTRIGGER = 'Edit';
  var FRESHSERVICE = 'Freshservice';
  var FRESHWORKS = 'Freshworks';
  var CATEGORY_IT = 'IT Service Management';
  (0, _qunit.module)('Integration | Component | module-sam | form', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.store = this.owner.lookup('service:store');
              this.server.loadFixtures('applicationFields'); // storing data in store as we are peeking this value from component

              _context.next = 4;
              return this.store.findAll('application-field');

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    /* Create scenarios */

    (0, _qunit.test)('status field should select managed by default', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var fieldDetails;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Form class="flt-right app-add"/>
                */
                {
                  id: "tInnimZf",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/form\",[[12,\"class\",\"flt-right app-add\"]],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context2.next = 4;
                return _form.default.triggerAdd();

              case 4:
                _context2.next = 6;
                return _form.default.formUtils.getDataForField('status', true);

              case 6:
                fieldDetails = _context2.sent;
                assert.equal(fieldDetails.selected, MANAGED);

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('software type should have three options and status field should have six options', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var status, type;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Form class="flt-right app-add"/>
                */
                {
                  id: "tInnimZf",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/form\",[[12,\"class\",\"flt-right app-add\"]],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context3.next = 4;
                return _form.default.triggerAdd();

              case 4:
                _context3.next = 6;
                return _form.default.formUtils.getDataForField('status', true);

              case 6:
                status = _context3.sent;
                _context3.next = 9;
                return _form.default.formUtils.getDataForField('applicationType', true);

              case 9:
                type = _context3.sent;
                assert.equal(status.options.length, 6);
                assert.equal(type.options.length, 3);

              case 12:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('category field should return searched category if present', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var category;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                // Arrange
                this.server.loadFixtures('applicationCategories'); // Act

                _context4.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Form class="flt-right app-add"/>
                */
                {
                  id: "tInnimZf",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/form\",[[12,\"class\",\"flt-right app-add\"]],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context4.next = 5;
                return _form.default.triggerAdd();

              case 5:
                _context4.next = 7;
                return _form.default.formUtils.autocompleteSelectMultiple('category', CATEGORYNAME, 1);

              case 7:
                _context4.next = 9;
                return _form.default.formUtils.getDataForField('category', true);

              case 9:
                category = _context4.sent;
                assert.equal(category.selected.trim(), CATEGORYNAME);

              case 11:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('category field should provide option to add category if not already present', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var category;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                // Arrange
                this.server.loadFixtures('applicationCategories'); // Act

                _context5.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Form class="flt-right app-add"/>
                */
                {
                  id: "tInnimZf",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/form\",[[12,\"class\",\"flt-right app-add\"]],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context5.next = 5;
                return _form.default.triggerAdd();

              case 5:
                _context5.next = 7;
                return _form.default.formUtils.autocompleteSelectMultiple('category', CATEGORYNAMENEW, 1);

              case 7:
                _context5.next = 9;
                return _form.default.formUtils.getDataForField('category', true);

              case 9:
                category = _context5.sent;
                assert.equal(category.selected.trim(), CATEGORYNAMENEW); // Act

                _context5.next = 13;
                return _form.default.closeModal();

              case 13:
                // Assert
                assert.notOk(_form.default.exists);

              case 14:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('the submit and trigger button label to display properly in add/edit scenario', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var model, storeRecord, addTriggerLabel, addSubmitLabel, editTriggerLabel, editSubmitLabel;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                // Arrange
                // Freshservice details from sams fixture is used here
                model = _sams.default.find(function (app) {
                  return app.id === 2;
                });
                storeRecord = this.store.createRecord('sam', model);
                this.set('model', storeRecord);
                this.set('refresh', function () {}); // Act - new

                _context6.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Form class="flt-right app-add"/>
                */
                {
                  id: "tInnimZf",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/form\",[[12,\"class\",\"flt-right app-add\"]],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                addTriggerLabel = _form.default.addSamTriggerText;
                _context6.next = 9;
                return _form.default.triggerAdd();

              case 9:
                addSubmitLabel = _form.default.formSubmitText; // Act - edit

                _context6.next = 12;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Form class="flt-right"
                                @isEdit	    = {{true}}
                                @model	    = {{this.model}}
                				@refresh    = {{this.refresh}}
                            />
                */
                {
                  id: "7h0JNJct",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/form\",[[12,\"class\",\"flt-right\"]],[[\"@isEdit\",\"@model\",\"@refresh\"],[true,[23,0,[\"model\"]],[23,0,[\"refresh\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 12:
                editTriggerLabel = _form.default.editSamTriggerText;
                _context6.next = 15;
                return _form.default.triggerEdit();

              case 15:
                editSubmitLabel = _form.default.formSubmitText; // Assert

                assert.equal(addTriggerLabel, ADDTRIGGER);
                assert.equal(addSubmitLabel, SAVE);
                assert.equal(editTriggerLabel, EDITTRIGGER);
                assert.equal(editSubmitLabel, SAVE);

              case 20:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
    /* edit scenarios */

    (0, _qunit.test)('it should show the description field on edit if description is present', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var model, storeRecord;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                // Arrange
                this.set('refresh', function () {}); // Freshservice details from sams fixture is used here

                model = _sams.default.find(function (app) {
                  return app.id === 2;
                });
                storeRecord = this.store.createRecord('sam', model);
                this.set('model', storeRecord); // Act

                _context7.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Form class="flt-right"
                			@isEdit	    = {{true}}
                			@model	    = {{this.model}}
                			@refresh    = {{this.refresh}}
                		/>
                */
                {
                  id: "7h0JNJct",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/form\",[[12,\"class\",\"flt-right\"]],[[\"@isEdit\",\"@model\",\"@refresh\"],[true,[23,0,[\"model\"]],[23,0,[\"refresh\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                _context7.next = 8;
                return _form.default.triggerEdit();

              case 8:
                // Assert
                assert.ok(_form.default.descriptionExists);

              case 9:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x6) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should display the saved fields properly in the model', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var store, router, model, storeRecord, status, type, category, publisher, managedBy;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                // Arrange
                store = this.owner.lookup('service:store');
                router = this.owner.lookup("router:main"); // Freshservice details from sams fixture is used here

                model = _sams.default.find(function (app) {
                  return app.id === 2;
                });
                storeRecord = store.createRecord('sam', model);
                this.set('model', storeRecord);
                this.set('refresh', function () {});
                router.setupRouter(); // Act

                _context8.next = 9;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Form class="flt-right"
                			@isEdit	    = {{true}}
                			@model	    = {{this.model}}
                			@refresh    = {{this.refresh}}
                		/>
                */
                {
                  id: "7h0JNJct",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/form\",[[12,\"class\",\"flt-right\"]],[[\"@isEdit\",\"@model\",\"@refresh\"],[true,[23,0,[\"model\"]],[23,0,[\"refresh\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 9:
                _context8.next = 11;
                return _form.default.triggerEdit();

              case 11:
                _context8.next = 13;
                return _form.default.formUtils.getDataForField('status', true);

              case 13:
                status = _context8.sent;
                _context8.next = 16;
                return _form.default.formUtils.getDataForField('applicationType', true);

              case 16:
                type = _context8.sent;
                _context8.next = 19;
                return _form.default.formUtils.getDataForField('category', true);

              case 19:
                category = _context8.sent;
                _context8.next = 22;
                return _form.default.formUtils.getDataForField('manufacturer', true);

              case 22:
                publisher = _context8.sent;
                _context8.next = 25;
                return _form.default.formUtils.getDataForField('managedBy', true);

              case 25:
                managedBy = _context8.sent;
                assert.equal(_form.default.nameValue, model.name);
                assert.equal(_form.default.descriptionValue, model.description);
                assert.equal(_form.default.notesValue, model.notes);
                assert.equal(type.selected, SAAS);
                assert.equal(status.selected, MANAGED);
                assert.equal(category.selected.trim(), model.category);
                assert.equal(publisher.selected.trim(), model.manufacturer.name);
                assert.equal(managedBy.selected.trim(), model.managedBy.name);

              case 34:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x7) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should show toaster error and model should not close when the software name already exists in db', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        var errorFlashSpy, store, model;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                // Arrange
                errorFlashSpy = (0, _spyFlashMessage.default)('danger');
                store = this.owner.lookup('service:store'); // Freshservice details from sams fixture is used here

                model = store.createRecord('sam', _sams.default.find(function (app) {
                  return app.id === 2;
                }));
                this.set('refresh', function () {}); // mocking application save and throwing error

                this.server.post('api/_/applications', function () {
                  return {
                    errors: [{
                      code: 'duplicate_value',
                      field: 'name',
                      message: 'It should be a unique value'
                    }]
                  };
                }, 403);
                this.set('model', model); // Act

                _context9.next = 8;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Form class="flt-right"
                			@isEdit	    = {{true}}
                			@model	    = {{this.model}}
                			@refresh    = {{this.refresh}}
                		/>
                */
                {
                  id: "7h0JNJct",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/form\",[[12,\"class\",\"flt-right\"]],[[\"@isEdit\",\"@model\",\"@refresh\"],[true,[23,0,[\"model\"]],[23,0,[\"refresh\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 8:
                _context9.next = 10;
                return _form.default.triggerEdit();

              case 10:
                _context9.next = 12;
                return _form.default.submitForm();

              case 12:
                assert.ok(_form.default.exists);
                _context9.t0 = assert;
                _context9.next = 16;
                return errorFlashSpy.calledOnce;

              case 16:
                _context9.t1 = _context9.sent;

                _context9.t0.ok.call(_context9.t0, _context9.t1);

              case 18:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x8) {
        return _ref10.apply(this, arguments);
      };
    }());
    /* Product directory scenarios */

    (0, _qunit.test)('it should autopopulate values in the field when product directory is integrated', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var store, model, name, status, type, category, publisher;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                // Arrange
                store = this.owner.lookup('service:store');
                model = store.createRecord('sam', {});
                this.set('model', model);
                this.set('refresh', function () {}); // Act

                _context10.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Form class="flt-right"
                            @model							= {{this.model}}
                            @refresh						= {{this.refresh}}
                            @productDirectoryIntegration	= {{true}}
                        />
                */
                {
                  id: "2W8/dOaW",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/form\",[[12,\"class\",\"flt-right\"]],[[\"@model\",\"@refresh\",\"@productDirectoryIntegration\"],[[23,0,[\"model\"]],[23,0,[\"refresh\"]],true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                _context10.next = 8;
                return _form.default.triggerAdd();

              case 8:
                _context10.next = 10;
                return _form.default.formUtils.autocompleteSelectMultiple('name', FRESHSERVICE, 1);

              case 10:
                _context10.next = 12;
                return _form.default.getName();

              case 12:
                name = _context10.sent;
                _context10.next = 15;
                return _form.default.formUtils.getDataForField('status', true);

              case 15:
                status = _context10.sent;
                _context10.next = 18;
                return _form.default.formUtils.getDataForField('applicationType', true);

              case 18:
                type = _context10.sent;
                _context10.next = 21;
                return _form.default.formUtils.getDataForField('category', true);

              case 21:
                category = _context10.sent;
                _context10.next = 24;
                return _form.default.formUtils.getDataForField('manufacturer', true);

              case 24:
                publisher = _context10.sent;
                assert.equal(name, FRESHSERVICE);
                assert.equal(type.selected, SAAS);
                assert.equal(status.selected, MANAGED);
                assert.equal(category.selected.trim(), CATEGORY_IT);
                assert.equal(publisher.selected.trim(), FRESHWORKS);

              case 30:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x9) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('software name options to be highlighted on hover', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        var store, model;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                // Arrange
                store = this.owner.lookup('service:store');
                model = store.createRecord('sam', {});
                this.set('model', model);
                this.set('refresh', function () {}); // Act

                _context11.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::Form class="flt-right"
                			@model							= {{this.model}}
                			@refresh						= {{this.refresh}}
                			@productDirectoryIntegration	= {{true}}
                		/>
                */
                {
                  id: "2W8/dOaW",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/form\",[[12,\"class\",\"flt-right\"]],[[\"@model\",\"@refresh\",\"@productDirectoryIntegration\"],[[23,0,[\"model\"]],[23,0,[\"refresh\"]],true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                _context11.next = 8;
                return _form.default.triggerAdd().openSoftwareSelect().fillSoftwareSearch(FRESHSERVICE).mouseOverOption();

              case 8:
                // Assert
                assert.ok(_form.default.isOptionHighlighted);

              case 9:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x10) {
        return _ref12.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-sam/light-table-components/checkbox-cell/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "sinon", "freshservice/tests/pages/components/module-sam/sam-list"], function (_qunit, _emberQunit, _testHelpers, _sinon, _samList) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-sam | light-table-components | checkbox', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should call tableActions.selectRow funciton with the row details when clicked', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var spy;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Arrange
                spy = _sinon.default.spy();
                this.set('row', {
                  id: 1,
                  hasAccess: true
                });
                this.set('tableActions', {
                  selectRow: spy
                }); // Act

                _context.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::LightTableComponents::CheckboxCell
                			@row = {{row}}
                			@tableActions = {{tableActions}}
                		/>
                */
                {
                  id: "bujvDDLg",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/light-table-components/checkbox-cell\",[],[[\"@row\",\"@tableActions\"],[[22,\"row\"],[22,\"tableActions\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                _context.next = 7;
                return _samList.default.selectInput();

              case 7:
                assert.ok(spy.calledWith(this.row));

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-sam/light-table-components/date-field/component-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var INPUT_DATE = '2019-12-05T20:12:49+05:30';
  var RESULT_DATE = 'Thu, 05 Dec 2019';
  (0, _qunit.module)('Integration | Component | module-sam | light-table-components | date-field', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render dash content when there is no data', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::LightTableComponents::dateField/>
                */
                {
                  id: "Ktdt05cE",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/light-table-components/date-field\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.equal(this.element.textContent.trim(), '-');

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.skip)('it should display date with proper format when value is passed', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.set('value', INPUT_DATE);
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::LightTableComponents::dateField
                                        @value={{this.value}}/>
                                
                */
                {
                  id: "hDx3/KPc",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/light-table-components/date-field\",[],[[\"@value\"],[[23,0,[\"value\"]]]]],[0,\"\\n                \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.equal(this.element.textContent.trim(), RESULT_DATE);

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-sam/light-table-components/formated-cell/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl"], function (_qunit, _emberQunit, _testHelpers, _intl) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-sam | light-table-components | formated-cell', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _qunit.test)('it should render dash content when there is no data', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::LightTableComponents::formatedCell/>
                */
                {
                  id: "QVSb/7vd",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/light-table-components/formated-cell\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.equal(this.element.textContent.trim(), '-');

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should display the content when value is present', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.set('value', 'freshservice');
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::LightTableComponents::formatedCell
                                        @value={{this.value}}/>
                                
                */
                {
                  id: "YnRrSUWD",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/light-table-components/formated-cell\",[],[[\"@value\"],[[23,0,[\"value\"]]]]],[0,\"\\n                \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.equal(this.element.textContent.trim(), 'freshservice');

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should display the translated value when isTranslate is passed as true', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this.set('value', 'last_modified');
                this.set('column', {
                  isTranslate: true,
                  translationPath: 'fs.common'
                });
                _context3.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::LightTableComponents::formatedCell
                                        @value  = {{this.value}}
                                        @column = {{column}}/>
                                
                */
                {
                  id: "sXHPV5n3",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/light-table-components/formated-cell\",[],[[\"@value\",\"@column\"],[[23,0,[\"value\"]],[22,\"column\"]]]],[0,\"\\n                \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                assert.equal(this.element.textContent.trim(), 'Last modified');

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-sam/light-table-components/license-status/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl"], function (_qunit, _emberQunit, _testHelpers, _intl) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var DRAFT_STATUS_ID = 1;
  var DRAFT = 'Draft';
  (0, _qunit.module)('Integration | Component | module-sam | light-table-components | license-status ', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _qunit.test)('it should render dash content when there is no data', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::LightTableComponents::licenseStatus/>
                */
                {
                  id: "dxldLlXB",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/light-table-components/license-status\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.equal(this.element.textContent.trim(), '-');

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should display the the license status from translation when proper status id is passed', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.set('value', DRAFT_STATUS_ID);
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::LightTableComponents::licenseStatus
                                        @value={{this.value}}/>
                                
                */
                {
                  id: "pBawbyp3",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/light-table-components/license-status\",[],[[\"@value\"],[[23,0,[\"value\"]]]]],[0,\"\\n                \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.equal(this.element.textContent.trim(), DRAFT);

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-sam/light-table-components/license-type/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl"], function (_qunit, _emberQunit, _testHelpers, _intl) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var OPEN_SOURCE_ID = 1;
  var OPEN_SOURCE = 'Open Source';
  (0, _qunit.module)('Integration | Component | module-sam | light-table-components | license-type ', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _qunit.test)('it should render dash content when there is no data', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::LightTableComponents::licenseType/>
                */
                {
                  id: "lroxF325",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/light-table-components/license-type\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.equal(this.element.textContent.trim(), '-');

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should display the the license type from translation when proper license type id is passed', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.set('value', OPEN_SOURCE_ID);
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::LightTableComponents::licenseType
                                        @value={{this.value}}/>
                                
                */
                {
                  id: "NVUb8Ljl",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/light-table-components/license-type\",[],[[\"@value\"],[[23,0,[\"value\"]]]]],[0,\"\\n                \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.equal(this.element.textContent.trim(), OPEN_SOURCE);

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-sam/light-table-components/link-with-image/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl", "sinon", "freshservice/tests/pages/components/module-sam/sam-list"], function (_qunit, _emberQunit, _testHelpers, _intl, _sinon, _samList) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var APP_NAME = 'freshservice';
  var APP_INITIAL = 'F';
  (0, _qunit.module)('Integration | Component | module-sam | light-table-components | link-with-image ', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _qunit.test)('it should render dash content when there is no data', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var spy;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Arrange
                spy = _sinon.default.spy();
                this.set('tableActions', {
                  cellClick: spy
                }); // Act

                _context.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::LightTableComponents::linkWithImage
                			@tableActions = {{tableActions}}
                		/>
                */
                {
                  id: "pPOT4ll7",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/light-table-components/link-with-image\",[],[[\"@tableActions\"],[[22,\"tableActions\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                // Assert
                assert.ok(spy.notCalled);
                assert.equal(this.element.textContent.trim(), '-');

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should display the the link with generated image when value is present', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var spy;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                // Arrange
                spy = _sinon.default.spy();
                this.set('value', APP_NAME);
                this.set('column', {});
                this.set('tableActions', {
                  cellClick: spy
                }); // Act

                _context2.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::LightTableComponents::linkWithImage
                			@value = {{this.value}}
                			@tableActions = {{tableActions}}
                			@column = {{column}}
                		/>
                */
                {
                  id: "RQsKNasE",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/light-table-components/link-with-image\",[],[[\"@value\",\"@tableActions\",\"@column\"],[[23,0,[\"value\"]],[22,\"tableActions\"],[22,\"column\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                // Assert
                assert.ok(spy.notCalled);
                assert.equal(_samList.default.avatarInitialText, APP_INITIAL);
                assert.equal(_samList.default.nameWithImageText, APP_NAME);

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should call the cellClick function with row and column details when clicked', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var spy;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                // Arrange
                spy = _sinon.default.spy();
                this.set('value', APP_NAME);
                this.set('row', {
                  id: 1,
                  hasAccess: true
                });
                this.set('column', {
                  name: 'col-name'
                });
                this.set('tableActions', {
                  cellClick: spy
                }); // Act

                _context3.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::LightTableComponents::linkWithImage
                			@value={{this.value}}
                			@tableActions = {{tableActions}}
                			@row = {{row}}
                			@column = {{column}}
                		/>
                */
                {
                  id: "sn9GKJuU",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/light-table-components/link-with-image\",[],[[\"@value\",\"@tableActions\",\"@row\",\"@column\"],[[23,0,[\"value\"]],[22,\"tableActions\"],[22,\"row\"],[22,\"column\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context3.next = 9;
                return _samList.default.clickDataTableLink();

              case 9:
                assert.ok(spy.calledWith(this.column, this.row));

              case 10:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-sam/light-table-components/link/component-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-sam | light-table-components | link', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render dash content when there is no data', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::LightTableComponents::Link/>
                */
                {
                  id: "VXLGkKhI",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/light-table-components/link\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.equal(this.element.textContent.trim(), '-');

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render the value', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.set('value', '123'); // Stubbing the actions

                this.set('cellClick', function () {});
                this.set('tableActions', {
                  cellClick: this.cellClick
                });
                _context2.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::LightTableComponents::Link
                                        @value={{this.value}}
                                        @tableActions={{tableActions}}/>
                                
                */
                {
                  id: "34Mxd359",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/light-table-components/link\",[],[[\"@value\",\"@tableActions\"],[[23,0,[\"value\"]],[22,\"tableActions\"]]]],[0,\"\\n                \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                assert.equal(this.element.textContent.trim(), '123');

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-sam/light-table-components/managed-by-edit/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/sinon-context", "freshservice/mirage/fixtures/sams", "freshservice/mirage/fixtures/users", "freshservice/tests/lib/spy-flash-message", "freshservice/tests/pages/components/module-sam/sam-list"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _intl, _sinonContext, _sams, _users, _spyFlashMessage, _samList) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  // Freshservice details from sams fixture is used here
  var FRESHSERVICE = _sams.default.find(function (app) {
    return app.id === 2;
  });

  var AARON_USER_REF = _users.default.find(function (inst) {
    return inst.id === 1;
  });

  (0, _qunit.module)('Integration | Component | module-sam | light-table-components | managed-by-edit', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var store, model, row;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              store = this.owner.lookup('service:store');
              model = store.createRecord('sam', FRESHSERVICE);
              row = {
                content: model
              };
              this.set('row', row);

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('it should render the managed by user name when value is passed', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var userName;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::LightTableComponents::ManagedByEdit
                			@row={{this.row}}
                		/>
                */
                {
                  id: "zB/Iqtpn",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/light-table-components/managed-by-edit\",[],[[\"@row\"],[[23,0,[\"row\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context2.next = 4;
                return _samList.default.formUtils.getDataForField('managedBy', true);

              case 4:
                userName = _context2.sent;
                assert.equal(userName.selected, FRESHSERVICE.managedBy.name);

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('setting a different managed by user should reflect properly in the component', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var userName;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this.server.create('user', AARON_USER_REF);
                _context3.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::LightTableComponents::ManagedByEdit
                			@row={{this.row}}
                		/>
                */
                {
                  id: "zB/Iqtpn",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/light-table-components/managed-by-edit\",[],[[\"@row\"],[[23,0,[\"row\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context3.next = 5;
                return _samList.default.formUtils.autocompleteSelectMultiple('managedBy', AARON_USER_REF.name, 1);

              case 5:
                _context3.next = 7;
                return _samList.default.formUtils.getDataForField('managedBy', true);

              case 7:
                userName = _context3.sent;
                assert.equal(userName.selected, AARON_USER_REF.name);

              case 9:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should show error toastr message and rollback in error scenario', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var errorFlashSpy, userName;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                this.server.create('user', AARON_USER_REF);
                errorFlashSpy = (0, _spyFlashMessage.default)('danger'); // This is done to make sure that ember does not consider the model as new

                this.row.content.save(); // Mocking the api to throw error

                this.server.put('/applications/:id', function () {
                  return {
                    errors: [{}]
                  };
                }, 500);
                _context4.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::LightTableComponents::ManagedByEdit
                			@row={{this.row}}
                		/>
                */
                {
                  id: "zB/Iqtpn",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/light-table-components/managed-by-edit\",[],[[\"@row\"],[[23,0,[\"row\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                _context4.next = 8;
                return _samList.default.formUtils.autocompleteSelectMultiple('managedBy', AARON_USER_REF.name, 1);

              case 8:
                _context4.next = 10;
                return _samList.default.formUtils.getDataForField('managedBy', true);

              case 10:
                userName = _context4.sent;
                _context4.t0 = assert;
                _context4.next = 14;
                return errorFlashSpy.calledOnce;

              case 14:
                _context4.t1 = _context4.sent;

                _context4.t0.ok.call(_context4.t0, _context4.t1);

                assert.equal(userName.selected, FRESHSERVICE.managedBy.name);

              case 17:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-sam/light-table-components/status-inline-edit/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/sinon-context", "freshservice/mirage/fixtures/sams", "freshservice/tests/lib/spy-flash-message", "freshservice/tests/pages/components/module-sam/sam-list"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _intl, _sinonContext, _sams, _spyFlashMessage, _samList) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  // Freshservice details from sams fixture is used here
  var FRESHSERVICE = _sams.default.find(function (app) {
    return app.id === 2;
  });

  var STATUS_CODES_MAP = {
    restricted: "Restricted",
    ignored: "Ignored",
    managed: "Managed",
    disabled: "Disabled"
  };
  var MANAGED_ID = 3;
  var RESTRICTED_INDEX = 0;
  (0, _qunit.module)('Integration | Component | module-sam | light-table-components | status-inline-edit', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _qunit.test)('it should render the staus when status id is passed', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.set('statusId', MANAGED_ID);
                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::LightTableComponents::StatusInlineEdit
                			@value={{this.statusId}}
                		/>
                */
                {
                  id: "hLprt6eA",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/light-table-components/status-inline-edit\",[],[[\"@value\"],[[23,0,[\"statusId\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.equal(_samList.default.inlineStatusText, STATUS_CODES_MAP.managed);

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('setting a different status value should reflect properly in the component', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var store, model, row;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                store = this.owner.lookup('service:store');
                model = store.createRecord('sam', FRESHSERVICE);
                row = {
                  content: model
                };
                this.set('row', row);
                this.set('statusId', MANAGED_ID);
                _context2.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::LightTableComponents::StatusInlineEdit
                			@value={{this.statusId}}
                			@row={{this.row}}
                		/>
                */
                {
                  id: "B/L4LdoE",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/light-table-components/status-inline-edit\",[],[[\"@value\",\"@row\"],[[23,0,[\"statusId\"]],[23,0,[\"row\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context2.next = 9;
                return _samList.default.formUtils.selectSingle('status-inline-wrapper', RESTRICTED_INDEX);

              case 9:
                assert.equal(_samList.default.inlineStatusText, STATUS_CODES_MAP.restricted);

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should show error toastr message and rollback in error scenario', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var store, model, errorFlashSpy, row;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                store = this.owner.lookup('service:store');
                model = store.createRecord('sam', FRESHSERVICE);
                errorFlashSpy = (0, _spyFlashMessage.default)('danger');
                row = {
                  content: model
                };
                this.set('row', row);
                this.set('statusId', MANAGED_ID); // This is done to make sure that ember does not consider the model as new

                model.save(); // Mocking the api to throw error

                this.server.post('/applications/:id', function () {
                  return {
                    errors: [{}]
                  };
                }, 500);
                _context3.next = 10;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::LightTableComponents::StatusInlineEdit
                			@value={{this.statusId}}
                			@row={{this.row}}
                		/>
                */
                {
                  id: "B/L4LdoE",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/light-table-components/status-inline-edit\",[],[[\"@value\",\"@row\"],[[23,0,[\"statusId\"]],[23,0,[\"row\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 10:
                _context3.next = 12;
                return _samList.default.formUtils.selectSingle('status-inline-wrapper', RESTRICTED_INDEX);

              case 12:
                _context3.t0 = assert;
                _context3.next = 15;
                return errorFlashSpy.calledOnce;

              case 15:
                _context3.t1 = _context3.sent;

                _context3.t0.ok.call(_context3.t0, _context3.t1);

                assert.equal(_samList.default.inlineStatusText, STATUS_CODES_MAP.managed);

              case 18:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-sam/list/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/mirage/fixtures/sams", "sinon", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-current-user", "freshservice/tests/pages/components/module-sam/sam-list", "freshservice/tests/pages/components/module-sam/form"], function (_qunit, _emberQunit, _testHelpers, _sams, _sinon, _testSupport, _intl, _stubCurrentUser, _samList, _form) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  // this data will be used to create software record
  var SOFTWARE_DATA = _sams.default.find(function (app) {
    return app.id === 2;
  });

  var META = {
    count: 1
  };
  var ROUTER_STUB = {
    queryParams: {
      filter: ''
    }
  };
  var CATEGORY_NAME = 'accounts';
  var CATEGORY_PLACEHOLDER = 'Search or add category';
  (0, _qunit.module)('Integration | Component | module-sam | list', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var loadModelData, router;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              loadModelData = {
                lastPerformed: {}
              };
              router = this.owner.lookup("router:main");
              this.set('loadModelData', loadModelData);
              router.currentRoute = ROUTER_STUB;
              router.setupRouter();

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    /* Access control and empty state checks - start */

    (0, _qunit.test)('it should show access denied error if the user does not have view ci permission', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                // Arrange - default state, no view_ci permission
                (0, _stubCurrentUser.stubCurrentUser)();
                this.set('model', {}); // Act

                _context2.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::List
                			@model = {{model}}
                			@loadModelData = {{loadModelData}}
                    	/>
                */
                {
                  id: "0TC+SU/F",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/list\",[],[[\"@model\",\"@loadModelData\"],[[22,\"model\"],[22,\"loadModelData\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                // Assert
                assert.ok(_samList.default.isAccessDeniedVisible);

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should show empty state when no software is present', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                // Arrange
                this.set('model', undefined);
                this.set('loadModelData.lastPerformed.isFinished', true); // Act

                _context3.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::List
                			@model= {{model}}
                			@loadModelData = {{loadModelData}}
                		/>
                */
                {
                  id: "0TC+SU/F",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/list\",[],[[\"@model\",\"@loadModelData\"],[[22,\"model\"],[22,\"loadModelData\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                // Assert
                assert.ok(_samList.default.isTableEmpty);

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should not show add software and select all button if the user does not have manage ci permission', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var curUser;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                // Arrange - only view_ci, no manage_ci
                curUser = {
                  privileges: ['view_ci']
                };
                (0, _stubCurrentUser.stubCurrentUser)(curUser);
                this.set('model', Ember.A([SOFTWARE_DATA])); // Act

                _context4.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::List
                			@model= {{model}}
                			@loadModelData = {{loadModelData}}
                		/>
                */
                {
                  id: "0TC+SU/F",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/list\",[],[[\"@model\",\"@loadModelData\"],[[22,\"model\"],[22,\"loadModelData\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                // Assert
                assert.notOk(_form.default.addSamExists);
                assert.notOk(_samList.default.isSelectAllVisible);

              case 7:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    /* Access control and empty state checks - end */

    /* bulk actions test - start */

    (0, _qunit.test)('clearing selected category should display the placeholder', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                // Arrange
                this.server.loadFixtures('applicationCategories');
                this.set('model', Ember.A([Ember.Object.create(SOFTWARE_DATA)])); // Act

                _context5.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::List
                			@model= {{model}}
                			@loadModelData = {{loadModelData}}
                		/>
                */
                {
                  id: "0TC+SU/F",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/list\",[],[[\"@model\",\"@loadModelData\"],[[22,\"model\"],[22,\"loadModelData\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context5.next = 6;
                return _samList.default.selectRows().triggerCategoryModel();

              case 6:
                _context5.next = 8;
                return _samList.default.formUtils.autocompleteSelectMultiple('assign-category-dd', CATEGORY_NAME, 1);

              case 8:
                _context5.next = 10;
                return _samList.default.clearCategorySelection();

              case 10:
                assert.equal(_samList.default.categoryPlaceholderText, CATEGORY_PLACEHOLDER);

              case 11:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    /* bulk actions test - end */

    /* pagination and sorting - starts */

    (0, _qunit.test)('list table should trigger pageTransition with proper arguments on pagination', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var spy, meta, prePageParams, nxtPageParams;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                // Arrange
                spy = _sinon.default.spy();
                meta = {
                  count: 100
                }; // page should be 1 and 3 in prePageParams and nxtPageParams as current page is passed as 2

                prePageParams = {
                  queryParams: {
                    page: 1
                  }
                };
                nxtPageParams = {
                  queryParams: {
                    page: 3
                  }
                };
                this.set('model', Ember.A([Ember.Object.create(SOFTWARE_DATA)]));
                this.set('model.meta', meta);
                this.set('pageTransition', spy); // Act

                _context6.next = 9;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::List
                			@model= {{model}}
                			@loadModelData = {{loadModelData}}
                			@page = {{2}}
                			@perPage = {{30}}
                			@pageTransition={{pageTransition}}
                    	/>
                */
                {
                  id: "XhittABl",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/list\",[],[[\"@model\",\"@loadModelData\",\"@page\",\"@perPage\",\"@pageTransition\"],[[22,\"model\"],[22,\"loadModelData\"],2,30,[22,\"pageTransition\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 9:
                _context6.next = 11;
                return _samList.default.navigateToNext().navigateToPrev();

              case 11:
                // Assert
                assert.ok(spy.calledTwice);
                assert.ok(spy.calledWithMatch(prePageParams));
                assert.ok(spy.calledWithMatch(nxtPageParams));

              case 14:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('list table should trigger sortTransition with proper arguments on sorting', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var spy, meta, ascParams;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                // Arrange
                spy = _sinon.default.spy();
                meta = {
                  count: 100
                };
                ascParams = {
                  queryParams: {
                    sort: 'asc',
                    sort_by: 'name'
                  }
                };
                this.set('model', Ember.A([Ember.Object.create(SOFTWARE_DATA)]));
                this.set('model.meta', meta);
                this.set('sortTransition', spy); // Act

                _context7.next = 8;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::List
                			@model= {{model}}
                			@loadModelData = {{loadModelData}}
                			@page = {{2}}
                			@sortTransition={{sortTransition}}
                    	/>
                */
                {
                  id: "lA5tmLuF",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/list\",[],[[\"@model\",\"@loadModelData\",\"@page\",\"@sortTransition\"],[[22,\"model\"],[22,\"loadModelData\"],2,[22,\"sortTransition\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 8:
                _context7.next = 10;
                return _samList.default.sortByName();

              case 10:
                // Assert
                assert.ok(spy.calledOnce);
                assert.ok(spy.calledWithMatch(ascParams));

              case 12:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x6) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('triggering select all should select all rows', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                // Arrange
                this.set('model', Ember.A([Ember.Object.create(SOFTWARE_DATA)]));
                this.set('model.meta', META); // Act

                _context8.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::List
                			@model= {{model}}
                			@loadModelData = {{loadModelData}}
                    	/>
                */
                {
                  id: "0TC+SU/F",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/list\",[],[[\"@model\",\"@loadModelData\"],[[22,\"model\"],[22,\"loadModelData\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context8.next = 6;
                return _samList.default.triggerSelectAll();

              case 6:
                // Assert
                assert.equal(_samList.default.isRowSelected, 'on');

              case 7:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x7) {
        return _ref9.apply(this, arguments);
      };
    }());
    /* pagination and sorting - ends */
  });
});
define("freshservice/tests/integration/components/module-sam/list/dashboard-cards/component-test", ["qunit", "@ember/test-helpers", "sinon", "freshservice/mirage/fixtures/sams", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/pages/components/module-sam/sam-list"], function (_qunit, _testHelpers, _sinon, _sams, _emberQunit, _testSupport, _samList) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var SOFTWARE_DATA = _sams.default.find(function (app) {
    return app.id === 2;
  });

  var META = {
    "count": 1,
    "restricted": 0,
    "ignored": 1,
    "managed": 1,
    "discovered": 0,
    "disabled": 0,
    "discovered_with_publisher": 1,
    "inReview": 0,
    "current_spend": 0.0,
    "potential_savings": 0.0
  };
  var ROUTER_STUB = {
    queryParams: {
      filter: ''
    }
  };
  (0, _qunit.module)('Integration | Component | module-sam | list | dashboard-cards', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var router;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              router = this.owner.lookup("router:main");
              router.currentRoute = ROUTER_STUB;
              router.setupRouter();

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('it renders the list view with cards', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var spy, param;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                // Act
                spy = _sinon.default.spy();
                param = '[{"condition":"status_id","operator":"is_in","value":"discovered","view":"discovered"}]';
                this.setProperties({
                  frameQueryParams: function frameQueryParams(filter, view) {
                    var queryParams = {
                      filter: filter,
                      view: view
                    };
                    return queryParams;
                  },
                  callApplyFilter: spy,
                  model: Ember.A([SOFTWARE_DATA]),
                  meta: META
                });
                _context2.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::List::DashboardCards
                		@frameQueryParams = {{this.frameQueryParams}}
                		@dashboardCardFilter = {{this.callApplyFilter}}
                		@isDiscoveredView = {{false}}
                		@meta = {{this.meta}}
                		/>
                */
                {
                  id: "XETfj53A",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/list/dashboard-cards\",[],[[\"@frameQueryParams\",\"@dashboardCardFilter\",\"@isDiscoveredView\",\"@meta\"],[[23,0,[\"frameQueryParams\"]],[23,0,[\"callApplyFilter\"]],false,[23,0,[\"meta\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                _context2.next = 7;
                return assert.ok(_samList.default.isDashboardCardsVisible);

              case 7:
                _context2.next = 9;
                return assert.ok(_samList.default.isListViewVisible);

              case 9:
                _context2.next = 11;
                return _samList.default.gotoDiscoveredView();

              case 11:
                _context2.next = 13;
                return assert.ok(spy.calledWithMatch(param));

              case 13:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should display correct value for the Discovered Card', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                // Act
                this.setProperties({
                  model: Ember.A([SOFTWARE_DATA]),
                  frameQueryParams: function frameQueryParams() {},
                  callApplyFilter: function callApplyFilter() {},
                  meta: META
                });
                _context3.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::List::DashboardCards
                		@frameQueryParams = {{this.frameQueryParams}}
                		@dashboardCardFilter = {{this.callApplyFilter}}
                		@isDiscoveredView = {{true}}
                		@meta = {{this.meta}}
                		/>
                */
                {
                  id: "+D3sjiUd",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/list/dashboard-cards\",[],[[\"@frameQueryParams\",\"@dashboardCardFilter\",\"@isDiscoveredView\",\"@meta\"],[[23,0,[\"frameQueryParams\"]],[23,0,[\"callApplyFilter\"]],true,[23,0,[\"meta\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context3.next = 5;
                return assert.equal(_samList.default.discoveredCardText, this.meta.discovered);

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it shows managed software when managed card is clicked', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var spy, queryParams;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                // Act
                spy = _sinon.default.spy();
                queryParams = '[{"condition":"status_id","operator":"is_in","value":"managed","view":"discovered"}]';
                this.setProperties({
                  model: Ember.A([SOFTWARE_DATA]),
                  frameQueryParams: function frameQueryParams(filter, view) {
                    var queryParams = {
                      filter: filter,
                      view: view
                    };
                    return queryParams;
                  },
                  callApplyFilter: spy,
                  meta: META
                });
                _context4.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::List::DashboardCards
                		@frameQueryParams = {{this.frameQueryParams}}
                		@dashboardCardFilter = {{this.callApplyFilter}}
                		@isDiscoveredView = {{true}}
                		@meta = {{this.meta}}
                		/>
                */
                {
                  id: "+D3sjiUd",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/list/dashboard-cards\",[],[[\"@frameQueryParams\",\"@dashboardCardFilter\",\"@isDiscoveredView\",\"@meta\"],[[23,0,[\"frameQueryParams\"]],[23,0,[\"callApplyFilter\"]],true,[23,0,[\"meta\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                _context4.next = 7;
                return _samList.default.showManagedSoftware();

              case 7:
                _context4.next = 9;
                return assert.ok(spy.calledWith(queryParams, "managed"));

              case 9:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it shows inReview software when move to review button is clicked', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var spy, queryParams;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                // Act
                spy = _sinon.default.spy();
                queryParams = '[{"condition":"status_id","operator":"is_in","value":"in_review","view":"discovered"}]';
                this.setProperties({
                  model: Ember.A([SOFTWARE_DATA]),
                  frameQueryParams: function frameQueryParams(filter, view) {
                    var queryParams = {
                      filter: filter,
                      view: view
                    };
                    return queryParams;
                  },
                  callApplyFilter: spy,
                  meta: META
                });
                _context5.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::List::DashboardCards
                		@frameQueryParams = {{this.frameQueryParams}}
                		@dashboardCardFilter = {{this.callApplyFilter}}
                		@isDiscoveredView = {{true}}
                		@meta = {{this.meta}}
                		/>
                */
                {
                  id: "+D3sjiUd",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/list/dashboard-cards\",[],[[\"@frameQueryParams\",\"@dashboardCardFilter\",\"@isDiscoveredView\",\"@meta\"],[[23,0,[\"frameQueryParams\"]],[23,0,[\"callApplyFilter\"]],true,[23,0,[\"meta\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                _context5.next = 7;
                return _samList.default.moveToReview();

              case 7:
                _context5.next = 9;
                return assert.ok(spy.calledWith(queryParams, "in_review"));

              case 9:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-sam/list/debounce-search-filter/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "sinon", "freshservice/tests/pages/components/module-sam/sam-list"], function (_qunit, _emberQunit, _testHelpers, _sinon, _samList) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var SEARCHTEXT = 'freshservice';
  var DEBOUNCETEXT = 'fres';
  (0, _qunit.skip)('Integration | Component | module-sam | list | debounce-search-filter', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should trigger triggerSearch with search text on sending the input value', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var spy;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Arrange
                spy = _sinon.default.spy();
                this.set('triggerSearch', spy);
                this.set('placeholder', 'sample placeholder'); // Act

                _context.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::List::DebounceSearchFilter
                			@dataTestId			=	"sam-dt-search-field"
                			@triggerSearch	=	{{triggerSearch}}
                			@placeholder	=	{{placeholder}}
                			@value			=	{{value}}
                		/>
                */
                {
                  id: "2iY3F4V3",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/list/debounce-search-filter\",[],[[\"@dataTestId\",\"@triggerSearch\",\"@placeholder\",\"@value\"],[\"sam-dt-search-field\",[22,\"triggerSearch\"],[22,\"placeholder\"],[22,\"value\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                _context.next = 7;
                return _samList.default.searchSoftare(SEARCHTEXT);

              case 7:
                // Assert
                assert.ok(spy.calledWith(SEARCHTEXT));

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should not trigger triggerSearch when search text length is less than 2', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var spy;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                // Arrange - zero assetions expected as triggerSearch should not be called
                spy = _sinon.default.spy();
                this.set('triggerSearch', spy);
                this.set('placeholder', 'sample placeholder'); // Act

                _context2.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::List::DebounceSearchFilter
                			@dataTestId			=	"sam-dt-search-field"
                			@triggerSearch	=	{{triggerSearch}}
                			@placeholder	=	{{placeholder}}
                			@value			=	{{value}}
                		/>
                */
                {
                  id: "2iY3F4V3",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/list/debounce-search-filter\",[],[[\"@dataTestId\",\"@triggerSearch\",\"@placeholder\",\"@value\"],[\"sam-dt-search-field\",[22,\"triggerSearch\"],[22,\"placeholder\"],[22,\"value\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                _context2.next = 7;
                return _samList.default.searchSoftare('f');

              case 7:
                // Assert
                assert.ok(spy.notCalled);

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should trigger triggerSearch only with a debounce of 350ms', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var spy;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                // Arrange
                spy = _sinon.default.spy();
                this.set('triggerSearch', spy);
                this.set('placeholder', 'sample placeholder'); // Act

                _context3.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::List::DebounceSearchFilter
                			@dataTestId			=	"sam-dt-search-field"
                			@triggerSearch	=	{{triggerSearch}}
                			@placeholder	=	{{placeholder}}
                			@value			=	{{value}}
                		/>
                */
                {
                  id: "2iY3F4V3",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/list/debounce-search-filter\",[],[[\"@dataTestId\",\"@triggerSearch\",\"@placeholder\",\"@value\"],[\"sam-dt-search-field\",[22,\"triggerSearch\"],[22,\"placeholder\"],[22,\"value\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                // the first two attempts will be ignored here due to the debounce time specified
                _samList.default.searchSoftare('fr');

                _samList.default.searchSoftare('fre');

                _context3.next = 9;
                return _samList.default.searchSoftare(DEBOUNCETEXT);

              case 9:
                assert.ok(spy.calledOnce);
                assert.ok(spy.calledWith(DEBOUNCETEXT));

              case 11:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-sam/list/insights/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/pages/components/module-sam/sam-list"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _samList) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  // below constants corresponds to the hardcoded response from api
  var COMPLIANCE_CARD = {
    insights: [{
      application_id: 1,
      application_name: "Google G Suite",
      application_category: "Office Suites Software",
      insight_type: "user_deactivated"
    }],
    meta: {
      compliances_count: 1
    }
  };
  (0, _qunit.module)('Integration | Component | module-sam | list | insights', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _qunit.test)('it renders the three tabs under insights and operational tab is active by default', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::List::Insights/>
                */
                {
                  id: "6Q4iYTCc",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/list/insights\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context.next = 4;
                return _samList.default.triggerInsights();

              case 4:
                assert.equal(_samList.default.tabs.length, 3, "Three tabs are present as expected");
                assert.ok(_samList.default.isOperationalTabActive, "Operational tab is active as expected");

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it renders the clicked tab', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::List::Insights/>
                */
                {
                  id: "6Q4iYTCc",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/list/insights\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context2.next = 4;
                return _samList.default.triggerInsights();

              case 4:
                _context2.next = 6;
                return _samList.default.clickCompliancesTab();

              case 6:
                assert.ok(_samList.default.isCompliancesTabActive, "Compliances tab is active as expected");
                _context2.next = 9;
                return _samList.default.clickUsageTab();

              case 9:
                assert.ok(_samList.default.isUsageTabActive, "Usage tab is active as expected");

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it renders proper provided data in the cards', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::List::Insights/>
                */
                {
                  id: "6Q4iYTCc",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/list/insights\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context3.next = 4;
                return _samList.default.triggerInsights();

              case 4:
                this.server.get('/api/_/application_insights', function () {
                  return COMPLIANCE_CARD;
                });
                _context3.next = 7;
                return _samList.default.clickCompliancesTab();

              case 7:
                assert.equal(_samList.default.insightTabCard.softwareName, COMPLIANCE_CARD.insights[0].application_name);
                assert.equal(_samList.default.insightTabCard.softwareCategory, COMPLIANCE_CARD.insights[0].application_category);

              case 9:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render empty state when no insights is present for the tabs', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::List::Insights />
                */
                {
                  id: "6Q4iYTCc",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/list/insights\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                // mocking insights tab api to return zero insights
                this.server.get('/api/_/application_insights', function () {
                  return {
                    insights: [],
                    meta: {
                      operational_count: 0,
                      compliances_count: 0,
                      usage_count: 0
                    }
                  };
                });
                _context4.next = 5;
                return _samList.default.triggerInsights();

              case 5:
                assert.ok(_samList.default.isOperationalInsightEmptyStateVisible);
                _context4.next = 8;
                return _samList.default.clickCompliancesTab();

              case 8:
                assert.ok(_samList.default.isCompliancesInsightEmptyStateVisible);
                _context4.next = 11;
                return _samList.default.clickUsageTab();

              case 11:
                assert.ok(_samList.default.isUsageInsightEmptyStateVisible);

              case 12:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should show dismiss button only for insights in usage tab', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::List::Insights/>
                */
                {
                  id: "6Q4iYTCc",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/list/insights\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context5.next = 4;
                return _samList.default.triggerInsights();

              case 4:
                _context5.next = 6;
                return _samList.default.clickCompliancesTab();

              case 6:
                assert.notOk(_samList.default.isDismissPresent, "No dismiss button for compliance insights as expected");
                _context5.next = 9;
                return _samList.default.clickUsageTab();

              case 9:
                assert.ok(_samList.default.isDismissPresent, "Dismiss button present for usage insights as expected");

              case 10:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should hide the insight and update the tab count on click of dismiss buton', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSam::List::Insights/>
                */
                {
                  id: "6Q4iYTCc",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-sam/list/insights\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context6.next = 4;
                return _samList.default.triggerInsights();

              case 4:
                _context6.next = 6;
                return _samList.default.clickUsageTab();

              case 6:
                assert.ok(_samList.default.isCardPresent, "Card present before clicking dismiss");
                assert.equal(_samList.default.activeTabCount, '1', "Count on the header to show 1 before clicking dismiss");
                _context6.next = 10;
                return _samList.default.dismissInsight();

              case 10:
                assert.notOk(_samList.default.isCardPresent, "Card hidden after clicking dismiss");
                assert.equal(_samList.default.activeTabCount, '0', "Count on the header to decrement by 1 after clicking dismiss");

              case 12:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      return function (_x6) {
        return _ref7.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-service-request/add-sr-item-slider/component-test", ["qunit", "ember-qunit", "freshservice/tests/lib/intl", "ember-cli-mirage/test-support", "@ember/test-helpers", "freshservice/tests/lib/stub-current-user", "freshservice/tests/pages/components/module-service-request/add-item-in-slider"], function (_qunit, _emberQunit, _intl, _testSupport, _testHelpers, _stubCurrentUser, _addItemInSlider) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var TEST_USER = {
    userEmail: 'sample@freshservice.com'
  };
  (0, _qunit.module)('Integration | Component | module-service-request | add-sr-item-slider', /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(hooks) {
      var renderReqItemSlider, _renderReqItemSlider, renderAddChildSRSlider, _renderAddChildSRSlider;

      return regeneratorRuntime.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _renderAddChildSRSlider = function _renderAddChildSRSlid2() {
                _renderAddChildSRSlider = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
                  return regeneratorRuntime.wrap(function _callee8$(_context8) {
                    while (1) {
                      switch (_context8.prev = _context8.next) {
                        case 0:
                          _context8.next = 2;
                          return (0, _testHelpers.render)(Ember.HTMLBars.template(
                          /*
                            <ModuleServiceRequest::AddSrItemSlider
                          			@showAddItemModal				=	{{true}}
                          			@model									=	{{this.model}}
                          			@onCancel								=	{{this.mockFunction}}
                          			@associateChildTickets	=	{{this.mockFunction}}
                          			@isAddItemRequest				=	{{false}}
                          			@isAddChildSRRequest		=	{{true}}
                          			@newChildSR							=	{{true}}
                          			@setNewChildSR					=	{{this.mockFunction}}
                          		/>
                          		
                          */
                          {
                            id: "GorVWFzB",
                            block: "{\"symbols\":[],\"statements\":[[5,\"module-service-request/add-sr-item-slider\",[],[[\"@showAddItemModal\",\"@model\",\"@onCancel\",\"@associateChildTickets\",\"@isAddItemRequest\",\"@isAddChildSRRequest\",\"@newChildSR\",\"@setNewChildSR\"],[true,[23,0,[\"model\"]],[23,0,[\"mockFunction\"]],[23,0,[\"mockFunction\"]],false,true,true,[23,0,[\"mockFunction\"]]]]],[0,\"\\n\\t\\t\"]],\"hasEval\":false}",
                            meta: {}
                          }));

                        case 2:
                        case "end":
                          return _context8.stop();
                      }
                    }
                  }, _callee8);
                }));
                return _renderAddChildSRSlider.apply(this, arguments);
              };

              renderAddChildSRSlider = function _renderAddChildSRSlid() {
                return _renderAddChildSRSlider.apply(this, arguments);
              };

              _renderReqItemSlider = function _renderReqItemSlider3() {
                _renderReqItemSlider = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
                  return regeneratorRuntime.wrap(function _callee7$(_context7) {
                    while (1) {
                      switch (_context7.prev = _context7.next) {
                        case 0:
                          _context7.next = 2;
                          return (0, _testHelpers.render)(Ember.HTMLBars.template(
                          /*
                            <ModuleServiceRequest::AddSrItemSlider
                          				@showAddItemModal				=	{{true}}
                          				@model									=	{{this.model}}
                          				@isAddItemRequest				=	{{true}}
                          				@isAddChildSRRequest		=	{{false}}
                          				@onCancel								=	{{this.mockFunction}}
                          			/>
                          		
                          */
                          {
                            id: "gnDqaWoF",
                            block: "{\"symbols\":[],\"statements\":[[5,\"module-service-request/add-sr-item-slider\",[],[[\"@showAddItemModal\",\"@model\",\"@isAddItemRequest\",\"@isAddChildSRRequest\",\"@onCancel\"],[true,[23,0,[\"model\"]],true,false,[23,0,[\"mockFunction\"]]]]],[0,\"\\n\\t\\t\"]],\"hasEval\":false}",
                            meta: {}
                          }));

                        case 2:
                        case "end":
                          return _context7.stop();
                      }
                    }
                  }, _callee7);
                }));
                return _renderReqItemSlider.apply(this, arguments);
              };

              renderReqItemSlider = function _renderReqItemSlider2() {
                return _renderReqItemSlider.apply(this, arguments);
              };

              (0, _emberQunit.setupRenderingTest)(hooks);
              (0, _testSupport.setupMirage)(hooks);
              (0, _intl.setupTranslations)(hooks);
              hooks.beforeEach(function () {
                this.server.loadFixtures('service_categories');
                this.server.loadFixtures('service_items');
                this.server.loadFixtures('tickets');
                this.store = this.owner.lookup('service:store');
                (0, _stubCurrentUser.stubCurrentUser)(TEST_USER);
                Ember.set(this, 'store', this.owner.lookup('service:store'));
                var serviceRequest = this.store.findRecord('ticket', 12);
                this.set('model', serviceRequest);
                this.set('mockFunction', function () {});
              });
              hooks.afterEach(function () {
                this.owner.destroy('service:store');
              });
              (0, _qunit.test)('it should show the option to create new or associate existing SR toggle section for add SR child mode', /*#__PURE__*/function () {
                var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          _context.next = 2;
                          return renderAddChildSRSlider();

                        case 2:
                          //assert
                          assert.ok(_addItemInSlider.default.addSRChild.toggleBtnsVisble, 'create new or associate existing SR toggle section visible');

                        case 3:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }));

                return function (_x2) {
                  return _ref3.apply(this, arguments);
                };
              }());
              (0, _qunit.test)('it should not show the option to create new or associate existing SR toggle section for add item mode', /*#__PURE__*/function () {
                var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
                  return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          _context2.next = 2;
                          return renderReqItemSlider();

                        case 2:
                          //assert
                          assert.notOk(_addItemInSlider.default.addSRChild.toggleBtnsVisble, 'create new or associate existing SR toggle section not visible');

                        case 3:
                        case "end":
                          return _context2.stop();
                      }
                    }
                  }, _callee2);
                }));

                return function (_x3) {
                  return _ref4.apply(this, arguments);
                };
              }());
              (0, _qunit.test)('it should show list of catalog items', /*#__PURE__*/function () {
                var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          _context3.next = 2;
                          return renderReqItemSlider();

                        case 2:
                          //assert
                          assert.ok(_addItemInSlider.default.addReqItem.noOfServiceItemsListed > 1, 'catalog items listed');

                        case 3:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3);
                }));

                return function (_x4) {
                  return _ref5.apply(this, arguments);
                };
              }());
              (0, _qunit.test)('it should not show bundle items in add item mode', /*#__PURE__*/function () {
                var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
                  return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                      switch (_context4.prev = _context4.next) {
                        case 0:
                          _context4.next = 2;
                          return renderReqItemSlider();

                        case 2:
                          //assert
                          assert.notOk(_addItemInSlider.default.bundleItemVisible, 'Bundle item not listed');

                        case 3:
                        case "end":
                          return _context4.stop();
                      }
                    }
                  }, _callee4);
                }));

                return function (_x5) {
                  return _ref6.apply(this, arguments);
                };
              }());
              (0, _qunit.test)('it should show bundle items but not bundle with child create in add SR child mode', /*#__PURE__*/function () {
                var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
                  return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          _context5.next = 2;
                          return renderAddChildSRSlider();

                        case 2:
                          //assert
                          assert.ok(_addItemInSlider.default.bundleItemVisible, 'Bundle item listed');
                          assert.notOk(_addItemInSlider.default.createChildItemVisible, 'Bundle item with create child option not visible');

                        case 4:
                        case "end":
                          return _context5.stop();
                      }
                    }
                  }, _callee5);
                }));

                return function (_x6) {
                  return _ref7.apply(this, arguments);
                };
              }());
              (0, _qunit.test)('it should show form with SI details on clicking from list section', /*#__PURE__*/function () {
                var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
                  return regeneratorRuntime.wrap(function _callee6$(_context6) {
                    while (1) {
                      switch (_context6.prev = _context6.next) {
                        case 0:
                          _context6.next = 2;
                          return renderReqItemSlider();

                        case 2:
                          _context6.next = 4;
                          return _addItemInSlider.default.addReqItem.adobeCardClick();

                        case 4:
                          //assert
                          assert.ok(_addItemInSlider.default.itemDetailVisible, 'Item detail visible');

                        case 5:
                        case "end":
                          return _context6.stop();
                      }
                    }
                  }, _callee6);
                }));

                return function (_x7) {
                  return _ref8.apply(this, arguments);
                };
              }());

            case 15:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9);
    }));

    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }());
});
define("freshservice/tests/integration/components/module-service-request/detail/additional-items/cards/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/pages/components/module-service-request/detail", "freshservice/mirage/fixtures/service_items"], function (_qunit, _emberQunit, _testHelpers, _detail, _service_items) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var additionalItemsPO = _detail.default.additionalItems;
  var PARENT_ITEM_ID = 43;
  (0, _qunit.module)('Integration | Component | module-service-request/detail/additional-items/card', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      this.store = this.owner.lookup('service:store');
      this.store.pushPayload({
        service_items: [_service_items.default.find(function (item) {
          return item.id == 30;
        })]
      });
      var item = this.store.peekRecord('service-item', 30);
      this.set('item', item);
      var model = this.store.createRecord('service-request', {
        itemId: PARENT_ITEM_ID,
        email: 'sample@freshservice.com'
      });
      this.set('model', model);
    });
    (0, _qunit.test)('it should render the child item details', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleServiceRequest::Detail::AdditionalItems::Card
              			@child = {{item}}
              			@serviceRequest = {{model}} />
              */
              {
                id: "uEhHtuVj",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-service-request/detail/additional-items/card\",[],[[\"@child\",\"@serviceRequest\"],[[22,\"item\"],[22,\"model\"]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
              _qunit.assert.ok(additionalItemsPO.items[0].imgVisible, 'Image should be visible');

              _qunit.assert.ok(additionalItemsPO.items[0].checkBoxVisible, 'Checkbox should be visible');

              _qunit.assert.notOk(additionalItemsPO.items[0].priceVisible, 'Adobe Illustrator CC price should be visible');

              _qunit.assert.equal(additionalItemsPO.items[0].titleText, 'Adobe Illustrator CC', 'Adobe Illustrator CC should match');

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    })));
    (0, _qunit.test)('it should disable the checkbox for mandatory items', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              this.item.set('mandatory', true);
              _context2.next = 3;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleServiceRequest::Detail::AdditionalItems::Card
              			@child = {{item}}
              			@serviceRequest = {{model}} />
              */
              {
                id: "uEhHtuVj",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-service-request/detail/additional-items/card\",[],[[\"@child\",\"@serviceRequest\"],[[22,\"item\"],[22,\"model\"]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 3:
              _qunit.assert.ok(additionalItemsPO.items[0].isChecked, 'Checkbox should be checked by default');

              _qunit.assert.ok(additionalItemsPO.items[0].checkBoxDisabled, 'Checkbox should be disabled');

              this.item.set('mandatory', false);
              _context2.next = 8;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleServiceRequest::Detail::AdditionalItems::Card
              			@child = {{item}}
              			@serviceRequest = {{model}} />
              */
              {
                id: "uEhHtuVj",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-service-request/detail/additional-items/card\",[],[[\"@child\",\"@serviceRequest\"],[[22,\"item\"],[22,\"model\"]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 8:
              _qunit.assert.notOk(additionalItemsPO.items[0].isChecked, 'Checkbox should be checked by default');

              _qunit.assert.notOk(additionalItemsPO.items[0].checkBoxDisabled, 'Checkbox should be disabled');

            case 10:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    })));
    (0, _qunit.test)('it should expand on having errors in the item', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              this.item.set('mandatory', true);
              _context3.next = 3;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleServiceRequest::Detail::AdditionalItems::Card
              			@child = {{item}}
              			@serviceRequest = {{model}}
              			@showErrorMessage = true />
              */
              {
                id: "/IZ+j+pB",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-service-request/detail/additional-items/card\",[],[[\"@child\",\"@serviceRequest\",\"@showErrorMessage\"],[[22,\"item\"],[22,\"model\"],\"true\"]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 3:
              _qunit.assert.ok(additionalItemsPO.items[0].panelVisible, 'The panel should be expaneded');

              this.item.set('mandatory', false);
              _context3.next = 7;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleServiceRequest::Detail::AdditionalItems::Card
              			@child = {{item}}
              			@serviceRequest = {{model}}
              			@showErrorMessage = true />
              */
              {
                id: "/IZ+j+pB",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-service-request/detail/additional-items/card\",[],[[\"@child\",\"@serviceRequest\",\"@showErrorMessage\"],[[22,\"item\"],[22,\"model\"],\"true\"]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 7:
              _qunit.assert.notOk(additionalItemsPO.items[0].panelVisible, 'The panel should not expaned');

              this.item.set('mandatory', false);
              _context3.next = 11;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleServiceRequest::Detail::AdditionalItems::Card
              			@child = {{item}}
              			@serviceRequest = {{model}}
              			@showErrorMessage = false />
              */
              {
                id: "zu7QvynV",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-service-request/detail/additional-items/card\",[],[[\"@child\",\"@serviceRequest\",\"@showErrorMessage\"],[[22,\"item\"],[22,\"model\"],\"false\"]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 11:
              _qunit.assert.notOk(additionalItemsPO.items[0].panelVisible, 'The panel should not be expaneded');

            case 12:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    })));
    (0, _qunit.test)('it should expand the child item on clicking the accordion', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleServiceRequest::Detail::AdditionalItems::Card
              			@child = {{item}}
              			@serviceRequest = {{model}} />
              */
              {
                id: "uEhHtuVj",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-service-request/detail/additional-items/card\",[],[[\"@child\",\"@serviceRequest\"],[[22,\"item\"],[22,\"model\"]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
              _qunit.assert.notOk(additionalItemsPO.items[0].panelVisible, 'Item Panel should be hidden by default');

              _context4.next = 5;
              return additionalItemsPO.items[0].toggleAccordion();

            case 5:
              _qunit.assert.ok(additionalItemsPO.items[0].panelVisible, 'Item Panel should be displayed on clicking the accordion trigger');

              _context4.next = 8;
              return additionalItemsPO.items[0].toggleAccordion();

            case 8:
              _qunit.assert.notOk(additionalItemsPO.items[0].panelVisible, 'Item Panel should be hidden on clicking the accordion trigger');

            case 9:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    })));
    (0, _qunit.test)('it should add item in the parent model on checking the checkbox', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleServiceRequest::Detail::AdditionalItems::Card
              			@child = {{item}}
              			@serviceRequest = {{model}} />
              */
              {
                id: "uEhHtuVj",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-service-request/detail/additional-items/card\",[],[[\"@child\",\"@serviceRequest\"],[[22,\"item\"],[22,\"model\"]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
              _qunit.assert.equal(this.model.childItems.length, 0, 'No child items should be available in the model');

              _context5.next = 5;
              return additionalItemsPO.items[0].selectItem();

            case 5:
              _qunit.assert.equal(this.model.childItems.length, 1, 'Child items should be added in the model');

              _context5.next = 8;
              return additionalItemsPO.items[0].selectItem();

            case 8:
              _qunit.assert.equal(this.model.childItems.length, 0, 'No child items should be available in the model');

            case 9:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    })));
    /*
    	Tests:
    			2. Cost should be visible only on availability --- ???
    		4. Should not render forms if no custom fields are available --- should be part of the "form" component
    		7. Verify if the mandatory items's form fields are availble --> Verify for form fields --- ???
    	*/
  });
});
define("freshservice/tests/integration/components/module-service-request/detail/additional-items/component-test", ["qunit", "ember-qunit", "freshservice/tests/lib/intl", "ember-cli-mirage/test-support", "@ember/test-helpers", "freshservice/tests/pages/components/module-service-request/detail", "freshservice/mirage/fixtures/service_items"], function (_qunit, _emberQunit, _intl, _testSupport, _testHelpers, _detail, _service_items) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var additionalItemsPO = _detail.default.additionalItems;
  var PARENT_ITEM_ID = 43; // All Adobe Bundles

  var LARGE_PARENT_ITEM_ID = 152;
  var ITEM_WITH_FIELDS = 117;
  (0, _qunit.module)('Integration | Component | module-service-request/detail/additional-items', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    hooks.beforeEach(function () {
      this.server.loadFixtures('service_items');
      this.store = this.owner.lookup('service:store');
      this.store.pushPayload({
        service_items: _service_items.default
      });
      var parentItem = this.store.peekRecord('service-item', PARENT_ITEM_ID);
      var largeParentItem = this.store.peekRecord('service-item', LARGE_PARENT_ITEM_ID);
      var itemWithFields = this.store.peekRecord('service-item', ITEM_WITH_FIELDS);
      var allItems = this.store.peekAll('service-item');
      var childItems = allItems.filter(function (item) {
        return item.name.includes('Adobe') && !item.isBundle;
      });
      parentItem.childItems.addObjects(childItems);
      this.set('parentItem', parentItem);
      this.set('largeParentItem', largeParentItem);
      this.set('itemWithFields', itemWithFields);
      var model = this.store.createRecord('service-request', {
        itemId: PARENT_ITEM_ID,
        email: 'sample@freshservice.com'
      });
      this.set('model', model);
      var largeParentModel = this.store.createRecord('service-request', {
        itemId: LARGE_PARENT_ITEM_ID,
        email: 'sample@freshservice.com'
      });
      this.set('largeParentModel', largeParentModel);
      var itemWithFieldsModel = this.store.createRecord('service-request', {
        itemId: ITEM_WITH_FIELDS,
        email: 'sample@freshservice.com'
      });
      this.set('itemWithFieldsModel', itemWithFieldsModel);
    });
    (0, _qunit.test)('it should render all the additional items', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleServiceRequest::Detail::AdditionalItems
              			@item  = {{parentItem}}
              			@serviceRequest = {{model}}/>
              */
              {
                id: "MpLuhIYK",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-service-request/detail/additional-items\",[],[[\"@item\",\"@serviceRequest\"],[[22,\"parentItem\"],[22,\"model\"]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
              _qunit.assert.ok(additionalItemsPO.containerVisible, 'Additional Items container should be visible');

              _qunit.assert.ok(additionalItemsPO.items.length === this.parentItem.childItems.length, 'No of visible additional items should match the number of child items for the item'); // Image visible


              _qunit.assert.ok(additionalItemsPO.items[0].imgVisible, 'Image should be visible');

              _qunit.assert.ok(additionalItemsPO.items[1].imgVisible, 'Image should be visible');

              _qunit.assert.ok(additionalItemsPO.items[2].imgVisible, 'Image should be visible'); // Checkbox visible


              _qunit.assert.ok(additionalItemsPO.items[0].checkBoxVisible, 'Checkbox should be visible');

              _qunit.assert.ok(additionalItemsPO.items[1].checkBoxVisible, 'Checkbox should be visible');

              _qunit.assert.ok(additionalItemsPO.items[2].checkBoxVisible, 'Checkbox should be visible'); // Name Visible and matches


              _qunit.assert.notOk(additionalItemsPO.items[0].priceVisible, 'Adobe Illustrator CC price should be visible');

              _qunit.assert.ok(additionalItemsPO.items[1].priceVisible, 'Adobe Photoshop CS6 price should be visible');

              _qunit.assert.notOk(additionalItemsPO.items[2].priceVisible, 'Adobe Premiere Pro CC price should be visible'); // Price visible


              _qunit.assert.equal(additionalItemsPO.items[0].titleText, 'Adobe Illustrator CC', 'Adobe Illustrator CC should match');

              _qunit.assert.equal(additionalItemsPO.items[1].titleText, 'Adobe Photoshop CS6', 'Adobe Photoshop CS6 should match');

              _qunit.assert.equal(additionalItemsPO.items[2].titleText, 'Adobe Premiere Pro CC', 'Adobe Premiere Pro CC should match');

            case 16:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('it should expand the mandatory items by default', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      var parentItem;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              parentItem = this.parentItem;
              parentItem.childItems.firstObject.set('mandatory', true);
              this.set('parentItem', parentItem);
              _context2.next = 5;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleServiceRequest::Detail::AdditionalItems
              			@item  = {{parentItem}}
              			@serviceRequest = {{model}}/>
              */
              {
                id: "MpLuhIYK",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-service-request/detail/additional-items\",[],[[\"@item\",\"@serviceRequest\"],[[22,\"parentItem\"],[22,\"model\"]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 5:
              _qunit.assert.ok(additionalItemsPO.items[0].isChecked, 'Checkbox should be checked by default');

              _qunit.assert.ok(additionalItemsPO.items[0].checkBoxDisabled, 'Checkbox should be disabled by default');

              _qunit.assert.ok(additionalItemsPO.items[0].panelVisible, 'Mandatory Item Panel should be Visible by default');

              _qunit.assert.notOk(additionalItemsPO.items[1].isChecked, 'Checkbox should be unchecked by default');

              _qunit.assert.notOk(additionalItemsPO.items[1].checkBoxDisabled, 'Checkbox should be enabled by default');

              _qunit.assert.notOk(additionalItemsPO.items[1].panelVisible, 'Non mandatory Item Panel should be hidden by default');

              _qunit.assert.notOk(additionalItemsPO.items[2].isChecked, 'Checkbox should be unchecked by default');

              _qunit.assert.notOk(additionalItemsPO.items[2].checkBoxDisabled, 'Checkbox should be enabled by default');

              _qunit.assert.notOk(additionalItemsPO.items[2].panelVisible, 'Non mandatory Item Panel should be hidden by default');

            case 14:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    })));
    (0, _qunit.test)('it should render all the the fields inside additional item on expanded', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
      var childItem, childFieldsLength, originalFieldsLength;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleServiceRequest::Detail::AdditionalItems
              			@item  = {{itemWithFields}}
              			@serviceRequest = {{itemWithFieldsModel}}/>
              */
              {
                id: "03p7Lz5S",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-service-request/detail/additional-items\",[],[[\"@item\",\"@serviceRequest\"],[[22,\"itemWithFields\"],[22,\"itemWithFieldsModel\"]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
              childItem = _detail.default.additionalItems.items[0];
              _context3.next = 5;
              return childItem.toggleAccordion();

            case 5:
              childFieldsLength = additionalItemsPO.items[0].customFields.length;
              originalFieldsLength = childFieldsLength;
              _context3.next = 9;
              return childItem.toggleAccordion();

            case 9:
              childFieldsLength = additionalItemsPO.items[0].customFields.length;

              _qunit.assert.equal(childFieldsLength, 0, 'No of fields should be 0');

              _context3.next = 13;
              return childItem.toggleAccordion();

            case 13:
              childFieldsLength = additionalItemsPO.items[0].customFields.length;

              _qunit.assert.equal(childFieldsLength, originalFieldsLength, 'No of fields should be greater than 0');

            case 15:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    })));
    (0, _qunit.test)('it should pagination if the number of child items are more than 30', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
      var parentItem;
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              parentItem = this.parentItem;
              parentItem.childItems.clear();
              this.set('parentItem', parentItem);
              _context4.next = 5;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleServiceRequest::Detail::AdditionalItems
              			@item  = {{parentItem}}
              			@serviceRequest = {{model}}/>
              */
              {
                id: "MpLuhIYK",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-service-request/detail/additional-items\",[],[[\"@item\",\"@serviceRequest\"],[[22,\"parentItem\"],[22,\"model\"]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 5:
              _qunit.assert.ok(additionalItemsPO.items.length === 30, 'First page should have only 30 items');

              _qunit.assert.ok(additionalItemsPO.btnViewMoreVisible, 'View more button should be visible');

              _context4.next = 9;
              return additionalItemsPO.clickViewMore();

            case 9:
              _context4.next = 11;
              return additionalItemsPO.clickViewMore();

            case 11:
              _qunit.assert.notOk(additionalItemsPO.btnViewMoreVisible, 'View more button should be hidden');

              _qunit.assert.ok(additionalItemsPO.items.length > 30, 'Page should have more than 30 items');

            case 13:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    })));
    (0, _qunit.test)('it should show search textbox if the child items is more than 50', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleServiceRequest::Detail::AdditionalItems
              			@item  = {{largeParentItem}}
              			@serviceRequest = {{largeParentModel}}
              			@showMandatoryChildError = {{false}} />
              */
              {
                id: "KTvX7p8C",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-service-request/detail/additional-items\",[],[[\"@item\",\"@serviceRequest\",\"@showMandatoryChildError\"],[[22,\"largeParentItem\"],[22,\"largeParentModel\"],false]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
              _qunit.assert.ok(additionalItemsPO.search.textBoxVisible, 'Search text box should be visible');

            case 3:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    })));
    (0, _qunit.test)('it should show search results for the given term replacing the original content', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
      return regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleServiceRequest::Detail::AdditionalItems
              			@item  = {{largeParentItem}}
              			@serviceRequest = {{largeParentModel}}
              			@showMandatoryChildError = {{false}} />
              */
              {
                id: "KTvX7p8C",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-service-request/detail/additional-items\",[],[[\"@item\",\"@serviceRequest\",\"@showMandatoryChildError\"],[[22,\"largeParentItem\"],[22,\"largeParentModel\"],false]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
              _qunit.assert.ok(additionalItemsPO.search.textBoxVisible, 'Search text box should be visible');

              additionalItemsPO.search.fillSearch('short');
              _context6.next = 6;
              return additionalItemsPO.search.keyUp({
                code: 'Enter'
              });

            case 6:
              _qunit.assert.ok(additionalItemsPO.items.length === 5, 'No of visible additional items should match the number of child items resulted');

              _qunit.assert.ok(additionalItemsPO.search.clearBtnVisible, 'Clear btn should be visible');

            case 8:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    })));
    (0, _qunit.test)('it should show default content on clearing the search', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
      return regeneratorRuntime.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleServiceRequest::Detail::AdditionalItems
              			@item  = {{largeParentItem}}
              			@serviceRequest = {{largeParentModel}}
              			@showMandatoryChildError = {{false}} />
              */
              {
                id: "KTvX7p8C",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-service-request/detail/additional-items\",[],[[\"@item\",\"@serviceRequest\",\"@showMandatoryChildError\"],[[22,\"largeParentItem\"],[22,\"largeParentModel\"],false]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
              _qunit.assert.ok(additionalItemsPO.search.textBoxVisible, 'Search text box should be visible');

              additionalItemsPO.search.fillSearch('short');
              _context7.next = 6;
              return additionalItemsPO.search.keyUp({
                code: 'Enter'
              });

            case 6:
              _qunit.assert.ok(additionalItemsPO.items.length === 5, 'No of visible additional items should match the number of child items resulted');

              _qunit.assert.ok(additionalItemsPO.search.clearBtnVisible, 'Clear btn should be visible');

              _context7.next = 10;
              return additionalItemsPO.search.clickBtnClear();

            case 10:
              _qunit.assert.notOk(additionalItemsPO.search.textBoxValue.length, 'Search Textbox empty');

              _qunit.assert.ok(additionalItemsPO.items.length === 30, 'showing default additional items');

            case 12:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    })));
    (0, _qunit.test)('it should show selected items at the top when searching', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
      var selectedItemName;
      return regeneratorRuntime.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleServiceRequest::Detail::AdditionalItems
              			@item  = {{largeParentItem}}
              			@serviceRequest = {{largeParentModel}}
              			@showMandatoryChildError = {{false}} />
              */
              {
                id: "KTvX7p8C",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-service-request/detail/additional-items\",[],[[\"@item\",\"@serviceRequest\",\"@showMandatoryChildError\"],[[22,\"largeParentItem\"],[22,\"largeParentModel\"],false]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
              _context8.next = 4;
              return additionalItemsPO.items[3].selectItem();

            case 4:
              selectedItemName = additionalItemsPO.items[3].titleText;
              additionalItemsPO.search.fillSearch('short');
              _context8.next = 8;
              return additionalItemsPO.search.keyUp({
                code: 'Enter'
              });

            case 8:
              _qunit.assert.ok(additionalItemsPO.items.length === 6, 'Result with the selected item');

              _qunit.assert.equal(additionalItemsPO.items[0].titleText, selectedItemName, 'Selected Item is at top');

              _qunit.assert.ok(additionalItemsPO.items[0].isChecked, 'first item is selected');

            case 11:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    })));
    (0, _qunit.test)('it should show toggle all selected items at the top', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
      var selectedItemNames;
      return regeneratorRuntime.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleServiceRequest::Detail::AdditionalItems
              			@item  = {{largeParentItem}}
              			@serviceRequest = {{largeParentModel}}
              			@showMandatoryChildError = {{false}} />
              */
              {
                id: "KTvX7p8C",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-service-request/detail/additional-items\",[],[[\"@item\",\"@serviceRequest\",\"@showMandatoryChildError\"],[[22,\"largeParentItem\"],[22,\"largeParentModel\"],false]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
              _context9.next = 4;
              return additionalItemsPO.items[3].selectItem();

            case 4:
              _context9.next = 6;
              return additionalItemsPO.items[4].selectItem();

            case 6:
              _context9.next = 8;
              return additionalItemsPO.items[5].selectItem();

            case 8:
              _context9.next = 10;
              return additionalItemsPO.items[6].selectItem();

            case 10:
              selectedItemNames = [];
              selectedItemNames.push(additionalItemsPO.items[3].titleText);
              selectedItemNames.push(additionalItemsPO.items[4].titleText);
              selectedItemNames.push(additionalItemsPO.items[5].titleText);
              selectedItemNames.push(additionalItemsPO.items[6].titleText);
              additionalItemsPO.search.fillSearch('short');
              _context9.next = 18;
              return additionalItemsPO.search.keyUp({
                code: 'Enter'
              });

            case 18:
              _qunit.assert.ok(additionalItemsPO.items.length === 8, 'Results with the three selected item');

              _qunit.assert.ok(additionalItemsPO.search.btnSelectedItemsVisible, 'Show all selected items btn visible');

              _context9.next = 22;
              return additionalItemsPO.search.clickBtnSelectedItems();

            case 22:
              _qunit.assert.ok(additionalItemsPO.items.length === 9, 'Results with all selected item');

              _qunit.assert.notOk(additionalItemsPO.search.btnSelectedItemsVisible, 'Show all selected items btn is hidden');

            case 24:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9);
    })));
    (0, _qunit.test)('it should show all selected items at the top after clearing the search', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
      var selectedItemNames;
      return regeneratorRuntime.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleServiceRequest::Detail::AdditionalItems
              			@item  = {{largeParentItem}}
              			@serviceRequest = {{largeParentModel}}
              			@showMandatoryChildError = {{false}} />
              */
              {
                id: "KTvX7p8C",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-service-request/detail/additional-items\",[],[[\"@item\",\"@serviceRequest\",\"@showMandatoryChildError\"],[[22,\"largeParentItem\"],[22,\"largeParentModel\"],false]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
              additionalItemsPO.search.fillSearch('short');
              _context10.next = 5;
              return additionalItemsPO.search.keyUp({
                code: 'Enter'
              });

            case 5:
              _qunit.assert.ok(additionalItemsPO.items.length === 5, 'Search results for the term');

              _context10.next = 8;
              return additionalItemsPO.items[3].selectItem();

            case 8:
              selectedItemNames = additionalItemsPO.items[3].titleText;
              _context10.next = 11;
              return additionalItemsPO.search.clickBtnClear();

            case 11:
              _qunit.assert.ok(additionalItemsPO.items.length === 31, 'Results with selected item from search should also retain');

              _qunit.assert.equal(additionalItemsPO.items[0].titleText, selectedItemNames, 'Selected item from search should match');

            case 13:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    })));
    (0, _qunit.test)('it should show paginate search results', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
      return regeneratorRuntime.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleServiceRequest::Detail::AdditionalItems
              			@item  = {{largeParentItem}}
              			@serviceRequest = {{largeParentModel}}
              			@showMandatoryChildError = {{false}} />
              */
              {
                id: "KTvX7p8C",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-service-request/detail/additional-items\",[],[[\"@item\",\"@serviceRequest\",\"@showMandatoryChildError\"],[[22,\"largeParentItem\"],[22,\"largeParentModel\"],false]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
              additionalItemsPO.search.fillSearch('long');
              _context11.next = 5;
              return additionalItemsPO.search.keyUp({
                code: 'Enter'
              });

            case 5:
              _qunit.assert.ok(additionalItemsPO.items.length === 30, 'Search results displayed');

              _qunit.assert.ok(additionalItemsPO.btnViewMoreVisible, 'View more button should be visible');

              _context11.next = 9;
              return additionalItemsPO.clickViewMore();

            case 9:
              _qunit.assert.notOk(additionalItemsPO.btnViewMoreVisible, 'View more button should be hidden');

              _qunit.assert.ok(additionalItemsPO.items.length > 30, 'Page should have more than 30 items');

              _qunit.assert.ok(additionalItemsPO.items[31].titleText.indexOf('long') >= 0, 'Search results displayed is the second page');

            case 12:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11);
    })));
  });
});
define("freshservice/tests/integration/components/module-service-request/detail/business-rules-test", ["qunit", "ember-qunit", "ember-cli-mirage/test-support", "@ember/test-helpers", "freshservice/tests/pages/components/module-service-request/detail", "freshservice/tests/pages/components/utils/form-fields", "freshservice/tests/lib/stub-current-account", "freshservice/mirage/fixtures/service_items"], function (_qunit, _emberQunit, _testSupport, _testHelpers, _detail, _formFields, _stubCurrentAccount, _service_items) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var ITEMS = {
    ALL_VISIBLE_ITEM: 999
  };

  var FILTERED_ITEMS = _service_items.default.filter(function (item) {
    return Object.values(ITEMS).includes(item.id);
  });

  (0, _qunit.module)('Integration | Component | module-service-request/detail - Business rules', /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(hooks) {
      var renderComponent, _renderComponent;

      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _renderComponent = function _renderComponent3() {
                _renderComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(testInstance) {
                  var itemId,
                      model,
                      _args3 = arguments;
                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          itemId = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : ITEMS.ALL_VISIBLE_ITEM;
                          model = testInstance.store.peekRecord('service-item', itemId);
                          testInstance.set('model', model);
                          _context3.next = 5;
                          return (0, _testHelpers.render)(Ember.HTMLBars.template(
                          /*
                            
                          			<div id="new-sr-sidebar"></div>
                          			<ModuleServiceRequest::Detail 
                          				@item={{this.model}}
                          				@onModelSaveCallback={{this.onModelSaveCallback}}
                          				@wormholeQtyTo="new-sr-sidebar"
                          				@wormholeBtnsTo="sr-btn-container" />
                          			<section class="btn-container flex" id="sr-btn-container"></section>
                          		
                          */
                          {
                            id: "cbXMVKyj",
                            block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\"],[7,\"div\",true],[10,\"id\",\"new-sr-sidebar\"],[8],[9],[0,\"\\n\\t\\t\\t\"],[5,\"module-service-request/detail\",[],[[\"@item\",\"@onModelSaveCallback\",\"@wormholeQtyTo\",\"@wormholeBtnsTo\"],[[23,0,[\"model\"]],[23,0,[\"onModelSaveCallback\"]],\"new-sr-sidebar\",\"sr-btn-container\"]]],[0,\"\\n\\t\\t\\t\"],[7,\"section\",true],[10,\"class\",\"btn-container flex\"],[10,\"id\",\"sr-btn-container\"],[8],[9],[0,\"\\n\\t\\t\"]],\"hasEval\":false}",
                            meta: {}
                          }));

                        case 5:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3);
                }));
                return _renderComponent.apply(this, arguments);
              };

              renderComponent = function _renderComponent2(_x2) {
                return _renderComponent.apply(this, arguments);
              };

              (0, _emberQunit.setupRenderingTest)(hooks);
              (0, _testSupport.setupMirage)(hooks);
              hooks.beforeEach(function () {
                this.store = this.owner.lookup('service:store');
                this.server.loadFixtures('service_items');
                this.store.pushPayload({
                  'service-items': FILTERED_ITEMS
                });
                var TEST_ACCOUNT = {
                  features: ["business_rules"]
                };
                (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
              });
              hooks.afterEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.next = 2;
                        return this.store.unloadAll();

                      case 2:
                        this.owner.destroy('service:store');
                        this.owner.destroy('service:intl');
                        this.owner.destroy("service:current-account");

                      case 5:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee, this);
              })));
              // 1
              (0, _qunit.test)('Enable "SR - Business rules" and Verify BR action', /*#__PURE__*/function () {
                var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
                  var deptLookupField;
                  return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          _context2.next = 2;
                          return renderComponent(this);

                        case 2:
                          _context2.next = 4;
                          return _formFields.default.autocompleteSelectMultiple('customField.sr_custom_department_lookup', 'Sales', '0');

                        case 4:
                          _context2.next = 6;
                          return _formFields.default.getDataForField('customField.sr_custom_department_lookup', true);

                        case 6:
                          deptLookupField = _context2.sent;
                          assert.notEqual(deptLookupField.selected, 'Sales', "[Department Lookup] field has valid selected state w.r.t BR action");
                          assert.equal(_detail.default.attachmentVisible, false, 'Attachment is hidden by BR');

                        case 9:
                        case "end":
                          return _context2.stop();
                      }
                    }
                  }, _callee2, this);
                }));

                return function (_x3) {
                  return _ref4.apply(this, arguments);
                };
              }());

            case 7:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }());
});
define("freshservice/tests/integration/components/module-service-request/detail/component-test", ["qunit", "ember-qunit", "freshservice/tests/lib/intl", "ember-cli-mirage/test-support", "@ember/test-helpers", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/spy-flash-message", "freshservice/tests/lib/sinon-context", "sinon", "freshservice/tests/pages/components/module-service-request/detail", "freshservice/tests/pages/components/module-service-request/fields", "freshservice/tests/pages/components/utils/form-fields", "freshservice/mirage/fixtures/service_items"], function (_qunit, _emberQunit, _intl, _testSupport, _testHelpers, _stubCurrentUser, _spyFlashMessage, _sinonContext, _sinon, _detail, _fields, _formFields, _service_items) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var ReqInfo = _detail.default.reqInfo;
  var ITEMS = {
    ALL_VISIBLE_ITEM: 10,
    ALL_HIDDEN_ITEM: 30,
    LOANER_ITEM: 87,
    ALL_FIELDS: 153,
    SEC_FIELDS: 147,
    PARENT_FIELD: 117,
    NESTED_FIELD: 128,
    ATTACHMENT_MANDATE: 19,
    LARGE_PARENT_ITEM_ID: 152
  };

  var FILTERED_ITEMS = _service_items.default.filter(function (item) {
    return Object.values(ITEMS).includes(item.id);
  });

  var TEST_USER = {
    userEmail: 'sample@freshservice.com'
  };
  (0, _qunit.module)('Integration | Component | module-service-request/detail', /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee36(hooks) {
      var renderComponent, _renderComponent;

      return regeneratorRuntime.wrap(function _callee36$(_context36) {
        while (1) {
          switch (_context36.prev = _context36.next) {
            case 0:
              _renderComponent = function _renderComponent3() {
                _renderComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee35(testInstance) {
                  var itemId,
                      model,
                      _args35 = arguments;
                  return regeneratorRuntime.wrap(function _callee35$(_context35) {
                    while (1) {
                      switch (_context35.prev = _context35.next) {
                        case 0:
                          itemId = _args35.length > 1 && _args35[1] !== undefined ? _args35[1] : ITEMS.ALL_VISIBLE_ITEM;
                          model = testInstance.store.peekRecord('service-item', itemId);
                          testInstance.set('model', model);
                          _context35.next = 5;
                          return (0, _testHelpers.render)(Ember.HTMLBars.template(
                          /*
                            
                          			<div id="new-sr-sidebar"></div>
                          			<ModuleServiceRequest::Detail 
                          				@item={{this.model}}
                          				@onModelSaveCallback={{this.onModelSaveCallback}}
                          				@wormholeQtyTo="new-sr-sidebar"
                          				@wormholeBtnsTo="sr-btn-container" />
                          			<section class="btn-container flex" id="sr-btn-container"></section>
                          		
                          */
                          {
                            id: "cbXMVKyj",
                            block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\"],[7,\"div\",true],[10,\"id\",\"new-sr-sidebar\"],[8],[9],[0,\"\\n\\t\\t\\t\"],[5,\"module-service-request/detail\",[],[[\"@item\",\"@onModelSaveCallback\",\"@wormholeQtyTo\",\"@wormholeBtnsTo\"],[[23,0,[\"model\"]],[23,0,[\"onModelSaveCallback\"]],\"new-sr-sidebar\",\"sr-btn-container\"]]],[0,\"\\n\\t\\t\\t\"],[7,\"section\",true],[10,\"class\",\"btn-container flex\"],[10,\"id\",\"sr-btn-container\"],[8],[9],[0,\"\\n\\t\\t\"]],\"hasEval\":false}",
                            meta: {}
                          }));

                        case 5:
                        case "end":
                          return _context35.stop();
                      }
                    }
                  }, _callee35);
                }));
                return _renderComponent.apply(this, arguments);
              };

              renderComponent = function _renderComponent2(_x2) {
                return _renderComponent.apply(this, arguments);
              };

              (0, _emberQunit.setupRenderingTest)(hooks);
              (0, _testSupport.setupMirage)(hooks);
              (0, _intl.setupTranslations)(hooks);
              (0, _sinonContext.setupSinonSandbox)(hooks);
              hooks.beforeEach(function () {
                this.store = this.owner.lookup('service:store');
                this.server.loadFixtures('service_items');
                this.store.pushPayload({
                  'service-items': FILTERED_ITEMS
                });
                (0, _stubCurrentUser.stubCurrentUser)(TEST_USER);
              });
              hooks.afterEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.next = 2;
                        return this.store.unloadAll();

                      case 2:
                        this.owner.destroy('service:store');
                        this.owner.destroy('service:intl');

                      case 4:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee, this);
              })));
              // 1.
              (0, _qunit.test)('it should show default requester fields', /*#__PURE__*/function () {
                var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
                  return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          _context2.next = 2;
                          return renderComponent(this);

                        case 2:
                          assert.ok(ReqInfo.reqFieldVisible, 'Requester field visible');
                          assert.notOk(ReqInfo.addCCVisible, 'Add Cc field should be hidden');
                          assert.equal(ReqInfo.CcBtnText, 'Add Cc', 'Add Cc button text match'); // Should add translations?

                          assert.ok(ReqInfo.reqForCheckboxVisible, 'Requester checkbox should be visible');
                          assert.notOk(ReqInfo.reqForCheckboxChecked, 'Requester checkbox should be unchecked by default');

                        case 7:
                        case "end":
                          return _context2.stop();
                      }
                    }
                  }, _callee2, this);
                }));

                return function (_x3) {
                  return _ref4.apply(this, arguments);
                };
              }()); // 2.

              (0, _qunit.test)('it should show item content when loaded', /*#__PURE__*/function () {
                var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          _context3.next = 2;
                          return renderComponent(this);

                        case 2:
                          assert.equal(_detail.default.itemInfo.title, 'Apple MacBook', 'Item name text match');
                          assert.notEqual(_detail.default.qtyInfo.qtyTitle, '');
                          assert.ok(_detail.default.reqInfo.reqFieldVisible);

                        case 5:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3, this);
                }));

                return function (_x4) {
                  return _ref5.apply(this, arguments);
                };
              }()); // 3.

              (0, _qunit.test)('it should show cost, delivery and quantity when loaded with visibility true', /*#__PURE__*/function () {
                var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
                  return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                      switch (_context4.prev = _context4.next) {
                        case 0:
                          _context4.next = 2;
                          return renderComponent(this);

                        case 2:
                          assert.ok(_detail.default.itemInfo.costVisible, 'Cost should be visible');
                          assert.ok(_detail.default.itemInfo.deliveryVisible, 'Delivery time visible');
                          assert.notEqual(_detail.default.qtyInfo.qtyTitle, '', 'Quantity title Visible');

                        case 5:
                        case "end":
                          return _context4.stop();
                      }
                    }
                  }, _callee4, this);
                }));

                return function (_x5) {
                  return _ref6.apply(this, arguments);
                };
              }()); // 4.

              (0, _qunit.test)('it should hide cost, delivery and quantity when loaded with visibility false', /*#__PURE__*/function () {
                var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
                  return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          _context5.next = 2;
                          return renderComponent(this, ITEMS.ALL_HIDDEN_ITEM);

                        case 2:
                          assert.notOk(_detail.default.itemInfo.costVisible, 'Cost should be hidden');
                          assert.notOk(_detail.default.itemInfo.deliveryVisible, 'Delivery time hidden');
                          assert.equal(_detail.default.qtyInfo.qtyTitle, '', 'Quantity title hidden');

                        case 5:
                        case "end":
                          return _context5.stop();
                      }
                    }
                  }, _callee5, this);
                }));

                return function (_x6) {
                  return _ref7.apply(this, arguments);
                };
              }()); // 5.

              (0, _qunit.test)('it should prefill the requester email as logged in user email', /*#__PURE__*/function () {
                var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
                  return regeneratorRuntime.wrap(function _callee6$(_context6) {
                    while (1) {
                      switch (_context6.prev = _context6.next) {
                        case 0:
                          _context6.next = 2;
                          return renderComponent(this);

                        case 2:
                          assert.ok(_detail.default.reqInfo.reqFieldValue.indexOf('sample@freshservice.com') >= 0, 'Email is prefilled');

                        case 3:
                        case "end":
                          return _context6.stop();
                      }
                    }
                  }, _callee6, this);
                }));

                return function (_x7) {
                  return _ref8.apply(this, arguments);
                };
              }()); // 6.

              (0, _qunit.test)('it should validate requested for field', /*#__PURE__*/function () {
                var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
                  return regeneratorRuntime.wrap(function _callee7$(_context7) {
                    while (1) {
                      switch (_context7.prev = _context7.next) {
                        case 0:
                          _context7.next = 2;
                          return renderComponent(this);

                        case 2:
                          _context7.next = 4;
                          return _detail.default.reqInfo.clickReqForCheckbox();

                        case 4:
                          assert.ok(_detail.default.reqInfo.reqForFieldVisible);
                          _context7.next = 7;
                          return _detail.default.placeReq();

                        case 7:
                          _context7.next = 9;
                          return (0, _testHelpers.waitFor)('.form-field--errors');

                        case 9:
                          assert.ok(_detail.default.errors.reqForErrorVisible, 'Requested For Error Visible');

                        case 10:
                        case "end":
                          return _context7.stop();
                      }
                    }
                  }, _callee7, this);
                }));

                return function (_x8) {
                  return _ref9.apply(this, arguments);
                };
              }()); // 7.

              (0, _qunit.test)('it should add and remove attachment', /*#__PURE__*/function () {
                var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
                  return regeneratorRuntime.wrap(function _callee8$(_context8) {
                    while (1) {
                      switch (_context8.prev = _context8.next) {
                        case 0:
                          _context8.next = 2;
                          return renderComponent(this);

                        case 2:
                          _context8.next = 4;
                          return _detail.default.addAttachment({
                            files: [new Blob(['fileName'])]
                          });

                        case 4:
                          assert.ok(_detail.default.attachmentVisible, 'Attachment Visible');
                          _context8.next = 7;
                          return _detail.default.removeAttachment.objectAt(0).deleteFile();

                        case 7:
                          assert.notOk(_detail.default.attachmentVisible, 'Attachment hidden');

                        case 8:
                        case "end":
                          return _context8.stop();
                      }
                    }
                  }, _callee8, this);
                }));

                return function (_x9) {
                  return _ref10.apply(this, arguments);
                };
              }()); // 8.

              (0, _qunit.test)('it should disable the place request button on preview', /*#__PURE__*/function () {
                var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
                  var model;
                  return regeneratorRuntime.wrap(function _callee9$(_context9) {
                    while (1) {
                      switch (_context9.prev = _context9.next) {
                        case 0:
                          model = this.store.peekRecord('service-item', ITEMS.PARENT_FIELD);
                          this.set('model', model);
                          this.set('mockFunction', function () {});
                          _context9.next = 5;
                          return (0, _testHelpers.render)(Ember.HTMLBars.template(
                          /*
                            
                          			<div id="new-sr-sidebar"></div>
                          			<ModuleServiceRequest::Detail 
                          				@item={{this.model}}
                          				@preview={{true}}
                          				@onCancel={{this.mockFunction}}
                          				@wormholeQtyTo="new-sr-sidebar"
                          				@wormholeBtnsTo="sr-btn-container" />
                          			<section class="btn-container flex" id="sr-btn-container"></section>
                          		
                          */
                          {
                            id: "+6t0Wjl/",
                            block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\"],[7,\"div\",true],[10,\"id\",\"new-sr-sidebar\"],[8],[9],[0,\"\\n\\t\\t\\t\"],[5,\"module-service-request/detail\",[],[[\"@item\",\"@preview\",\"@onCancel\",\"@wormholeQtyTo\",\"@wormholeBtnsTo\"],[[23,0,[\"model\"]],true,[23,0,[\"mockFunction\"]],\"new-sr-sidebar\",\"sr-btn-container\"]]],[0,\"\\n\\t\\t\\t\"],[7,\"section\",true],[10,\"class\",\"btn-container flex\"],[10,\"id\",\"sr-btn-container\"],[8],[9],[0,\"\\n\\t\\t\"]],\"hasEval\":false}",
                            meta: {}
                          }));

                        case 5:
                          _context9.next = 7;
                          return (0, _testHelpers.waitFor)('[data-test-id="child-items-container"]');

                        case 7:
                          assert.notEqual(_detail.default.additionalItems.items.length, 0, 'Preview should show additional items');
                          assert.ok(_detail.default.placeReqDisabled, 'Place Request is disabled');

                        case 9:
                        case "end":
                          return _context9.stop();
                      }
                    }
                  }, _callee9, this);
                }));

                return function (_x10) {
                  return _ref11.apply(this, arguments);
                };
              }()); // 9.

              (0, _qunit.test)('it should validate attachment', /*#__PURE__*/function () {
                var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
                  return regeneratorRuntime.wrap(function _callee10$(_context10) {
                    while (1) {
                      switch (_context10.prev = _context10.next) {
                        case 0:
                          _context10.next = 2;
                          return renderComponent(this, ITEMS.ATTACHMENT_MANDATE);

                        case 2:
                          _context10.next = 4;
                          return _detail.default.placeReq();

                        case 4:
                          // Assert Validation message displayed below attachment
                          assert.ok(_detail.default.errors.attachment, 'Attachment Validation Message is displayed'); // Add attachment

                          _context10.next = 7;
                          return _detail.default.addAttachment({
                            files: [new File(['MandatoryUrl'], 'MandatoryUrl.txt', {
                              type: 'text/plain'
                            })]
                          });

                        case 7:
                          assert.ok(_detail.default.attachmentVisible, 'Attachment Visible'); // Message should Hide

                          assert.notOk(_detail.default.errors.attachment, 'Attachment Validation Message is hidden');
                          _context10.next = 11;
                          return _detail.default.removeAttachment.objectAt(0).deleteFile();

                        case 11:
                          assert.notOk(_detail.default.attachmentVisible, 'Attachment hidden');

                        case 12:
                        case "end":
                          return _context10.stop();
                      }
                    }
                  }, _callee10, this);
                }));

                return function (_x11) {
                  return _ref12.apply(this, arguments);
                };
              }()); //LOANER ITEM CASES
              // 10.

              (0, _qunit.test)('it should show three additional loaner fields for a loaner item page', /*#__PURE__*/function () {
                var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
                  return regeneratorRuntime.wrap(function _callee11$(_context11) {
                    while (1) {
                      switch (_context11.prev = _context11.next) {
                        case 0:
                          //Arrange
                          this.server.loadFixtures('loanerItemSlots');
                          this.intl = this.owner.lookup("service:intl");
                          _context11.next = 4;
                          return renderComponent(this, ITEMS.LOANER_ITEM);

                        case 4:
                          assert.ok(_detail.default.loanerFields.locationFieldIsVisible, 'Location field visible');
                          assert.ok(_detail.default.loanerFields.fromDateFieldIsVisible, 'From Date field visible');
                          assert.ok(_detail.default.loanerFields.toDateFieldIsVisible, 'To Date field visible');

                        case 7:
                        case "end":
                          return _context11.stop();
                      }
                    }
                  }, _callee11, this);
                }));

                return function (_x12) {
                  return _ref13.apply(this, arguments);
                };
              }()); // 11.

              (0, _qunit.test)('it should show/select alternate available slot', /*#__PURE__*/function () {
                var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
                  var moment, nextDay, fromDate, fromDateArr, formattedFromDate, toDate, toDateArr;
                  return regeneratorRuntime.wrap(function _callee12$(_context12) {
                    while (1) {
                      switch (_context12.prev = _context12.next) {
                        case 0:
                          moment = this.owner.lookup('service:moment');
                          nextDay = moment.moment(new Date()).add(1, "days");
                          fromDate = nextDay.format("YYYY-MM-DD");
                          fromDateArr = fromDate.split('-');
                          formattedFromDate = nextDay.format('ddd, DD MMM'); //const formattedNextDate = nextDay.format('DD MMM, YYYY');

                          toDate = moment.moment(new Date()).add(2, "days").format("YYYY-MM-DD"); //After 3 days

                          toDateArr = toDate.split('-'); //Arrange

                          _context12.next = 9;
                          return renderComponent(this, ITEMS.LOANER_ITEM);

                        case 9:
                          _context12.next = 11;
                          return _formFields.default.calendarSelectAnySingleDate("fromDate", fromDateArr[1] - 1, fromDateArr[0], fromDate);

                        case 11:
                          _context12.next = 13;
                          return _formFields.default.calendarSelectAnySingleDate("toDate", toDateArr[1] - 1, toDateArr[0], toDate);

                        case 13:
                          assert.ok(_detail.default.loanerFields.alternateSlotBtnIsVisible, true);
                          _context12.next = 16;
                          return _formFields.default.selectBasicDropdown("alternate-slots", formattedFromDate + "  1:30 AM - " + formattedFromDate + "  2:00 AM");

                        case 16:
                          // let fromDateField = await FormFields.getDataForField('fromDate', true);
                          // let toDateField = await FormFields.getDataForField('toDate', true);
                          //Assert
                          assert.notOk(_detail.default.loanerFields.alternateSlotBtnIsVisible, true); //Todo : The following check fails in CI alone. 
                          //"fromDateField" gives a day before when run in CI. This did not get resolved even while setting currentuser's TZ.
                          // Need to debug in calendare get while revisitng
                          // assert.equal(fromDateField.selected[0], formattedNextDate);
                          // assert.equal(fromDateField.selected[1], '01:30 AM');
                          // assert.equal(toDateField.selected[0], formattedNextDate);
                          // assert.equal(toDateField.selected[1], '02:00 AM');

                        case 17:
                        case "end":
                          return _context12.stop();
                      }
                    }
                  }, _callee12, this);
                }));

                return function (_x13) {
                  return _ref14.apply(this, arguments);
                };
              }()); // 12.

              (0, _qunit.test)('it should render no slots available message', /*#__PURE__*/function () {
                var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
                  var srFormService, expected_no_slot_msg;
                  return regeneratorRuntime.wrap(function _callee13$(_context13) {
                    while (1) {
                      switch (_context13.prev = _context13.next) {
                        case 0:
                          //Arrange
                          this.server.loadFixtures('loanerItemSlots');
                          this.intl = this.owner.lookup("service:intl");
                          _context13.next = 4;
                          return renderComponent(this, ITEMS.LOANER_ITEM);

                        case 4:
                          srFormService = this.owner.lookup("service:sr-form");
                          srFormService.setLoanerFieldsValidationStat(false);
                          srFormService.setAvailableSlots(this.server.db.loanerItemSlots[1]); //availability false case

                          _context13.next = 9;
                          return (0, _testHelpers.settled)();

                        case 9:
                          expected_no_slot_msg = this.intl.t("fs.request_items.catalog_detail.loaner_sr.no_slots", {
                            'service_item': this.model.name
                          });
                          assert.notOk(_detail.default.loanerFields.alternateSlotBtnIsVisible, true);
                          assert.equal(_detail.default.loanerFields.slotsStatusText, expected_no_slot_msg);

                        case 12:
                        case "end":
                          return _context13.stop();
                      }
                    }
                  }, _callee13, this);
                }));

                return function (_x14) {
                  return _ref15.apply(this, arguments);
                };
              }()); // 13.

              (0, _qunit.test)('it should assign a temp asset id for chosing available slot', /*#__PURE__*/function () {
                var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {
                  var srFormService, availableSlot, srAvailedAsset;
                  return regeneratorRuntime.wrap(function _callee14$(_context14) {
                    while (1) {
                      switch (_context14.prev = _context14.next) {
                        case 0:
                          //Arrange
                          this.server.loadFixtures('loanerItemSlots');
                          _context14.next = 3;
                          return renderComponent(this, ITEMS.LOANER_ITEM);

                        case 3:
                          srFormService = this.owner.lookup("service:sr-form");
                          availableSlot = this.server.db.loanerItemSlots[2];
                          srFormService.setLoanerFieldsValidationStat(false);
                          srFormService.setAvailableSlots(availableSlot); //availability true with temp asset id case

                          _context14.next = 9;
                          return (0, _testHelpers.settled)();

                        case 9:
                          srAvailedAsset = this.store.peekAll('service-request').filterBy('id', null).lastObject.availAsset;
                          assert.equal(srAvailedAsset, availableSlot.temp_asset_id);
                          assert.notOk(_detail.default.loanerFields.alternateSlotBtnIsVisible, true);
                          assert.notOk(_detail.default.loanerFields.slotsStatusIsVisible, true);

                        case 13:
                        case "end":
                          return _context14.stop();
                      }
                    }
                  }, _callee14, this);
                }));

                return function (_x15) {
                  return _ref16.apply(this, arguments);
                };
              }()); // 14.

              (0, _qunit.test)('it should throw no slot available message for invalid date options', /*#__PURE__*/function () {
                var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {
                  var moment, nextDay, fromDate, fromDateArr, toDate, toDateArr, fourDaysLater, changedFromDate, changedFromDateArr, expected_no_slot_msg;
                  return regeneratorRuntime.wrap(function _callee15$(_context15) {
                    while (1) {
                      switch (_context15.prev = _context15.next) {
                        case 0:
                          this.intl = this.owner.lookup("service:intl");
                          moment = this.owner.lookup('service:moment');
                          nextDay = moment.moment(new Date()).add(1, "days");
                          fromDate = nextDay.format("YYYY-MM-DD");
                          fromDateArr = fromDate.split('-');
                          toDate = moment.moment(new Date()).add(2, "days").format("YYYY-MM-DD"); //After 3 days

                          toDateArr = toDate.split('-'); //Arrange

                          _context15.next = 9;
                          return renderComponent(this, ITEMS.LOANER_ITEM);

                        case 9:
                          _context15.next = 11;
                          return _formFields.default.calendarSelectAnySingleDate("fromDate", fromDateArr[1] - 1, fromDateArr[0], fromDate);

                        case 11:
                          _context15.next = 13;
                          return _formFields.default.calendarSelectAnySingleDate("toDate", toDateArr[1] - 1, toDateArr[0], toDate);

                        case 13:
                          _context15.next = 15;
                          return (0, _testHelpers.settled)();

                        case 15:
                          fourDaysLater = moment.moment(new Date()).add(4, "days");
                          changedFromDate = fourDaysLater.format("YYYY-MM-DD");
                          changedFromDateArr = changedFromDate.split('-');
                          _context15.next = 20;
                          return _formFields.default.calendarSelectAnySingleDate("fromDate", changedFromDateArr[1] - 1, changedFromDateArr[0], changedFromDate);

                        case 20:
                          _context15.next = 22;
                          return (0, _testHelpers.settled)();

                        case 22:
                          expected_no_slot_msg = this.intl.t("fs.request_items.catalog_detail.loaner_sr.no_slot_for_requested_time", {
                            'service_item': this.model.name
                          });
                          assert.notOk(_detail.default.loanerFields.alternateSlotBtnIsVisible, true);
                          assert.equal(_detail.default.loanerFields.slotsStatusText, expected_no_slot_msg);

                        case 25:
                        case "end":
                          return _context15.stop();
                      }
                    }
                  }, _callee15, this);
                }));

                return function (_x16) {
                  return _ref17.apply(this, arguments);
                };
              }()); // 15.

              (0, _qunit.test)('it should render all the basic custom fields', /*#__PURE__*/function () {
                var _ref18 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(assert) {
                  var field_names;
                  return regeneratorRuntime.wrap(function _callee16$(_context16) {
                    while (1) {
                      switch (_context16.prev = _context16.next) {
                        case 0:
                          field_names = ['prefix', 'pronoun', 'name', 'bio', 'terms', 'decimal', 'age', 'detectives', 'choose_friends', 'today', 'now', 'cat', 'net_worth', 'link', 'agents', 'users', 'assets', 'departs'];
                          _context16.next = 3;
                          return renderComponent(this, ITEMS.ALL_FIELDS);

                        case 3:
                          _context16.next = 5;
                          return (0, _testHelpers.waitFor)('.custom-fields');

                        case 5:
                          field_names.forEach(function (field) {
                            return assert.ok(_fields.default.isFieldVisible(field), "".concat(field, " is Visible"));
                          });

                        case 6:
                        case "end":
                          return _context16.stop();
                      }
                    }
                  }, _callee16, this);
                }));

                return function (_x17) {
                  return _ref18.apply(this, arguments);
                };
              }()); // 16.
              // TODO: Move to acceptance test once ticket details page issues are fixed

              (0, _qunit.skip)('it should save all basic field values', /*#__PURE__*/function () {
                var _ref19 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(assert) {
                  var moment, day, nextDay, saveCallbackSpy;
                  return regeneratorRuntime.wrap(function _callee17$(_context17) {
                    while (1) {
                      switch (_context17.prev = _context17.next) {
                        case 0:
                          moment = this.owner.lookup('service:moment');
                          day = moment.moment(new Date()).add(1, "days");
                          nextDay = day.format('YYYY-MM-DD'); // const nextDayFromServer = day.locale('en').toISOString();

                          saveCallbackSpy = _sinon.default.spy();
                          this.set('onModelSaveCallback', saveCallbackSpy);
                          _context17.next = 7;
                          return renderComponent(this, ITEMS.ALL_FIELDS);

                        case 7:
                          _context17.next = 9;
                          return (0, _testHelpers.waitFor)('.custom-fields');

                        case 9:
                          _context17.next = 11;
                          return _fields.default.fillPrefixField('Ms.');

                        case 11:
                          _context17.next = 13;
                          return _formFields.default.selectSingle('customField.pronoun', 1);

                        case 13:
                          _context17.next = 15;
                          return _fields.default.fillNameField('Hermoine Granger');

                        case 15:
                          _context17.next = 17;
                          return _fields.default.fillBioField('Minister of Magic.\nHonorable member of Gryffindor house.');

                        case 17:
                          _context17.next = 19;
                          return _fields.default.toggleTermsField();

                        case 19:
                          _context17.next = 21;
                          return _fields.default.fillDecimalField('349.99');

                        case 21:
                          _context17.next = 23;
                          return _fields.default.fillAgeField('40');

                        case 23:
                          _context17.next = 25;
                          return _formFields.default.selectSingle('customField.detectives', 0);

                        case 25:
                          _context17.next = 27;
                          return _formFields.default.autocompleteSelectMultipleWithoutSearch('customField.choose_friends', 0);

                        case 27:
                          _context17.next = 29;
                          return _formFields.default.autocompleteSelectMultipleWithoutSearch('customField.choose_friends', 1);

                        case 29:
                          _context17.next = 31;
                          return _formFields.default.calendarSelectSingleDate('customField.today', nextDay);

                        case 31:
                          _context17.next = 33;
                          return _formFields.default.calendarSelectSingleDate('customField.now', nextDay);

                        case 33:
                          _context17.next = 35;
                          return _formFields.default.selectSingle('customField.cat', 0);

                        case 35:
                          _context17.next = 37;
                          return _formFields.default.selectSingle('customField.cd_04_sub', 0);

                        case 37:
                          _context17.next = 39;
                          return _formFields.default.selectSingle('customField.cd_03_last', 1);

                        case 39:
                          _context17.next = 41;
                          return _fields.default.fillProfileLinkField('https://en.wikipedia.org/wiki/Hermione_Granger');

                        case 41:
                          _context17.next = 43;
                          return _formFields.default.autocompleteSelectMultiple('customField.agents', 'test', 0);

                        case 43:
                          _context17.next = 45;
                          return _formFields.default.autocompleteSelectMultiple('customField.users', 'andrea', 0);

                        case 45:
                          _context17.next = 47;
                          return _formFields.default.autocompleteSelectMultiple('customField.requester', 'jerry', 0);

                        case 47:
                          _context17.next = 49;
                          return _formFields.default.autocompleteSelectMultiple('customField.departs', 'sales', 0);

                        case 49:
                          _context17.next = 51;
                          return _fields.default.placeReq();

                        case 51:
                          assert.ok(saveCallbackSpy.calledOnce, 'Service Request Placed');

                        case 52:
                        case "end":
                          return _context17.stop();
                      }
                    }
                  }, _callee17, this);
                }));

                return function (_x18) {
                  return _ref19.apply(this, arguments);
                };
              }()); // 17.

              (0, _qunit.test)('it should render the dependent childs based on the parent field (section fields)', /*#__PURE__*/function () {
                var _ref20 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(assert) {
                  return regeneratorRuntime.wrap(function _callee18$(_context18) {
                    while (1) {
                      switch (_context18.prev = _context18.next) {
                        case 0:
                          _context18.next = 2;
                          return renderComponent(this, ITEMS.SEC_FIELDS);

                        case 2:
                          _context18.next = 4;
                          return (0, _testHelpers.waitFor)('.custom-fields');

                        case 4:
                          assert.ok(_fields.default.isDynamicParentVisible, 'Parent Field Visible');
                          assert.notOk(_fields.default.isChild1Visible, 'Child 1 field should be hidden');
                          assert.notOk(_fields.default.isChild2MandatoryVisible, 'Child 2 Mandatory field should be hidden');
                          assert.notOk(_fields.default.isChild2DeptVisible, 'Child 2 Dept Field should be hidden');
                          _context18.next = 10;
                          return _formFields.default.selectSingle('customField.dynamic_parent', 0);

                        case 10:
                          assert.ok(_fields.default.isChild1Visible, 'Child 1 field should be visible');
                          assert.notOk(_fields.default.isChild2MandatoryVisible, 'Child 2 Mandatory field should be hidden');
                          assert.notOk(_fields.default.isChild2DeptVisible, 'Child 2 Dept Field should be hidden');
                          _context18.next = 15;
                          return _formFields.default.selectSingle('customField.dynamic_parent', 1);

                        case 15:
                          assert.notOk(_fields.default.isChild1Visible, 'Child 1 field should be hidden');
                          assert.ok(_fields.default.isChild2MandatoryVisible, 'Child 2 Mandatory field should be visible');
                          assert.ok(_fields.default.isChild2DeptVisible, 'Child 2 Dept Field should be visible');

                        case 18:
                        case "end":
                          return _context18.stop();
                      }
                    }
                  }, _callee18, this);
                }));

                return function (_x19) {
                  return _ref20.apply(this, arguments);
                };
              }()); // 18.

              (0, _qunit.test)('it should validate mandatory custom fields', /*#__PURE__*/function () {
                var _ref21 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19(assert) {
                  var intl, saveCallbackSpy;
                  return regeneratorRuntime.wrap(function _callee19$(_context19) {
                    while (1) {
                      switch (_context19.prev = _context19.next) {
                        case 0:
                          intl = this.owner.lookup("service:intl");
                          saveCallbackSpy = _sinon.default.spy();
                          this.set('onModelSaveCallback', saveCallbackSpy);
                          _context19.next = 5;
                          return renderComponent(this, ITEMS.ALL_FIELDS);

                        case 5:
                          _context19.next = 7;
                          return (0, _testHelpers.waitFor)('.custom-fields');

                        case 7:
                          _context19.next = 9;
                          return _fields.default.placeReq();

                        case 9:
                          assert.equal(_fields.default.errorFields.length, 4, 'No of error fields match');
                          assert.equal(_fields.default.errorFields[0].errorFieldName, 'customField.name', 'Name field should throw manadatory validation error');
                          assert.equal(document.activeElement.getAttribute('name'), 'service-request[customField.name]', 'focus should move to the first invalid field');
                          assert.equal(_fields.default.errorFields[0].errorMessage, intl.t('fs.blank'));
                          _context19.next = 15;
                          return _fields.default.fillNameField('Ron Weasley');

                        case 15:
                          _context19.next = 17;
                          return _fields.default.placeReq();

                        case 17:
                          assert.equal(document.activeElement.getAttribute('name'), 'service-request[customField.decimal]');
                          _context19.next = 20;
                          return _fields.default.fillDecimalField('349.99');

                        case 20:
                          _context19.next = 22;
                          return _fields.default.fillAgeField('40');

                        case 22:
                          _context19.next = 24;
                          return _fields.default.fillProfileLinkField('https://en.wikipedia.org/wiki/Hermione_Granger');

                        case 24:
                          _context19.next = 26;
                          return _fields.default.placeReq();

                        case 26:
                          assert.ok(saveCallbackSpy.calledOnce, 'Service Request Placed');

                        case 27:
                        case "end":
                          return _context19.stop();
                      }
                    }
                  }, _callee19, this);
                }));

                return function (_x20) {
                  return _ref21.apply(this, arguments);
                };
              }()); // 19.

              (0, _qunit.test)('it should validate custom fields format', /*#__PURE__*/function () {
                var _ref22 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20(assert) {
                  var intl, letters, longWord, i, saveCallbackSpy;
                  return regeneratorRuntime.wrap(function _callee20$(_context20) {
                    while (1) {
                      switch (_context20.prev = _context20.next) {
                        case 0:
                          intl = this.owner.lookup("service:intl");
                          letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
                          longWord = '';

                          for (i = 0; i < 5; i++) {
                            longWord += letters;
                          }

                          saveCallbackSpy = _sinon.default.spy();
                          this.set('onModelSaveCallback', saveCallbackSpy);
                          _context20.next = 8;
                          return renderComponent(this, ITEMS.ALL_FIELDS);

                        case 8:
                          _context20.next = 10;
                          return (0, _testHelpers.waitFor)('.custom-fields');

                        case 10:
                          _context20.next = 12;
                          return _fields.default.fillNameField(longWord);

                        case 12:
                          _context20.next = 14;
                          return _fields.default.placeReq();

                        case 14:
                          // Length validation
                          assert.equal(_fields.default.errorFields.length, 4, 'No of error fields match');
                          assert.equal(_fields.default.errorFields[0].errorFieldName, 'customField.name', 'Name field should throw length validation error');
                          assert.equal(_fields.default.errorFields[0].errorMessage, intl.t('fs.validation.max_length_validation', {
                            max_length: 255
                          }));
                          _context20.next = 19;
                          return _fields.default.fillNameField('Ron Weasley');

                        case 19:
                          _context20.next = 21;
                          return _fields.default.fillDecimalField('123456789.99');

                        case 21:
                          _context20.next = 23;
                          return _fields.default.placeReq();

                        case 23:
                          assert.equal(_fields.default.errorFields[0].errorFieldName, 'customField.decimal', 'Decimal field should throw format validation error');
                          assert.equal(_fields.default.errorFields[0].errorMessage, intl.t('fs.validation.invalid_decimal'));
                          _context20.next = 27;
                          return _fields.default.fillDecimalField('12345678.99');

                        case 27:
                          _context20.next = 29;
                          return _fields.default.placeReq();

                        case 29:
                          assert.notEqual(_fields.default.errorFields[0].errorFieldName, 'customField.decimal', 'Decimal field should not throw format validation error');
                          _context20.next = 32;
                          return _fields.default.fillDecimalField('1234.999');

                        case 32:
                          _context20.next = 34;
                          return _fields.default.placeReq();

                        case 34:
                          assert.equal(_fields.default.errorFields[0].errorFieldName, 'customField.decimal', 'Decimal field should throw format validation error');
                          _context20.next = 37;
                          return _fields.default.fillDecimalField('12.99');

                        case 37:
                          _context20.next = 39;
                          return _fields.default.fillAgeField('is just anumber');

                        case 39:
                          _context20.next = 41;
                          return _fields.default.placeReq();

                        case 41:
                          assert.equal(_fields.default.errorFields[0].errorFieldName, 'customField.age', 'Number field should throw format validation error');
                          assert.equal(_fields.default.errorFields[0].errorMessage, 'This field must be a number', 'number field validation message match');
                          _context20.next = 45;
                          return _fields.default.fillAgeField('30');

                        case 45:
                          _context20.next = 47;
                          return _fields.default.fillProfileLinkField('random link text');

                        case 47:
                          _context20.next = 49;
                          return _fields.default.placeReq();

                        case 49:
                          assert.equal(_fields.default.errorFields[0].errorFieldName, 'customField.profile_link', 'Link field should throw format validation error');
                          _context20.next = 52;
                          return _fields.default.fillProfileLinkField('https://en.wikipedia.org/wiki/Hermione_Granger');

                        case 52:
                          _context20.next = 54;
                          return _fields.default.placeReq();

                        case 54:
                          assert.ok(saveCallbackSpy.calledOnce, 'Service Request Placed');

                        case 55:
                        case "end":
                          return _context20.stop();
                      }
                    }
                  }, _callee20, this);
                }));

                return function (_x21) {
                  return _ref22.apply(this, arguments);
                };
              }()); // 20.

              (0, _qunit.test)('it should not validate the child field if the parent field value is not selected', /*#__PURE__*/function () {
                var _ref23 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21(assert) {
                  var saveCallbackSpy;
                  return regeneratorRuntime.wrap(function _callee21$(_context21) {
                    while (1) {
                      switch (_context21.prev = _context21.next) {
                        case 0:
                          saveCallbackSpy = _sinon.default.spy();
                          this.set('onModelSaveCallback', saveCallbackSpy);
                          _context21.next = 4;
                          return renderComponent(this, ITEMS.SEC_FIELDS);

                        case 4:
                          _context21.next = 6;
                          return (0, _testHelpers.waitFor)('.custom-fields');

                        case 6:
                          _context21.next = 8;
                          return _fields.default.placeReq();

                        case 8:
                          assert.equal(_fields.default.errorFields.length, 0, 'No field shows error');
                          assert.ok(saveCallbackSpy.calledOnce, 'Service Request Placed');

                        case 10:
                        case "end":
                          return _context21.stop();
                      }
                    }
                  }, _callee21, this);
                }));

                return function (_x22) {
                  return _ref23.apply(this, arguments);
                };
              }()); // 21.

              (0, _qunit.test)('it should validate the child field only if the parent field value is selected', /*#__PURE__*/function () {
                var _ref24 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22(assert) {
                  var saveCallbackSpy;
                  return regeneratorRuntime.wrap(function _callee22$(_context22) {
                    while (1) {
                      switch (_context22.prev = _context22.next) {
                        case 0:
                          saveCallbackSpy = _sinon.default.spy();
                          this.set('onModelSaveCallback', saveCallbackSpy);
                          _context22.next = 4;
                          return renderComponent(this, ITEMS.SEC_FIELDS);

                        case 4:
                          _context22.next = 6;
                          return (0, _testHelpers.waitFor)('.custom-fields');

                        case 6:
                          _context22.next = 8;
                          return _formFields.default.selectSingle('customField.dynamic_parent', 1);

                        case 8:
                          _context22.next = 10;
                          return _fields.default.placeReq();

                        case 10:
                          assert.equal(_fields.default.errorFields.length, 1, 'Number of error fields match');
                          assert.equal(_fields.default.errorFields[0].errorFieldName, 'customField.necessary_one', 'Child field should throw manadatory validation error');
                          _context22.next = 14;
                          return _formFields.default.selectSingle('customField.dynamic_parent', 0);

                        case 14:
                          _context22.next = 16;
                          return _fields.default.placeReq();

                        case 16:
                          assert.equal(_fields.default.errorFields.length, 0, 'No field shows error');
                          assert.ok(saveCallbackSpy.calledOnce, 'Service Request Placed');

                        case 18:
                        case "end":
                          return _context22.stop();
                      }
                    }
                  }, _callee22, this);
                }));

                return function (_x23) {
                  return _ref24.apply(this, arguments);
                };
              }()); // 22.

              (0, _qunit.test)('it should render location field as dropdown', /*#__PURE__*/function () {
                var _ref25 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23(assert) {
                  var selectedLocation;
                  return regeneratorRuntime.wrap(function _callee23$(_context23) {
                    while (1) {
                      switch (_context23.prev = _context23.next) {
                        case 0:
                          _context23.next = 2;
                          return renderComponent(this, ITEMS.SEC_FIELDS);

                        case 2:
                          _context23.next = 4;
                          return (0, _testHelpers.waitFor)('.custom-fields');

                        case 4:
                          assert.ok(_fields.default.isLocationFieldVisible, 'Location field is visible as dropdown');
                          _context23.next = 7;
                          return _formFields.default.selectSingle('customField.location_lookup', 0);

                        case 7:
                          _context23.next = 9;
                          return _formFields.default.getDataForField('customField.location_lookup', true);

                        case 9:
                          selectedLocation = _context23.sent;
                          assert.equal(selectedLocation.count, 13, 'Locations count match');
                          assert.equal(selectedLocation.selected, 'America', 'location selected field match');

                        case 12:
                        case "end":
                          return _context23.stop();
                      }
                    }
                  }, _callee23, this);
                }));

                return function (_x24) {
                  return _ref25.apply(this, arguments);
                };
              }()); // Copy Field cases
              // 23.

              (0, _qunit.test)('it should copy parent fields values to child fields', /*#__PURE__*/function () {
                var _ref26 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24(assert) {
                  var moment, day, nextDay, parentPronoun, childPronoun, parentDetectives, childDetectives, parentToday, childToday, parentNow, childNow, parentCategory, childCategory;
                  return regeneratorRuntime.wrap(function _callee24$(_context24) {
                    while (1) {
                      switch (_context24.prev = _context24.next) {
                        case 0:
                          moment = this.owner.lookup('service:moment');
                          day = moment.moment(new Date()).add(1, "days");
                          nextDay = day.format('YYYY-MM-DD');
                          _context24.next = 5;
                          return renderComponent(this, ITEMS.PARENT_FIELD);

                        case 5:
                          _context24.next = 7;
                          return (0, _testHelpers.waitFor)('.custom-fields');

                        case 7:
                          _context24.next = 9;
                          return _detail.default.additionalItems.items[0].toggleAccordion();

                        case 9:
                          _context24.next = 11;
                          return _detail.default.additionalItems.items[0].selectItem();

                        case 11:
                          _context24.next = 13;
                          return _fields.default.fillPrefixField('Ms.');

                        case 13:
                          _context24.next = 15;
                          return _formFields.default.selectSingle('customField.pronoun', 1);

                        case 15:
                          _context24.next = 17;
                          return _fields.default.fillNameField('Hermoine Granger');

                        case 17:
                          _context24.next = 19;
                          return _fields.default.fillBioField('Minister of Magic.\nHonorable member of Gryffindor house.');

                        case 19:
                          _context24.next = 21;
                          return _fields.default.toggleTermsField();

                        case 21:
                          _context24.next = 23;
                          return _fields.default.fillDecimalField('349.99');

                        case 23:
                          _context24.next = 25;
                          return _fields.default.fillAgeField('40');

                        case 25:
                          _context24.next = 27;
                          return _formFields.default.selectSingle('customField.detectives', 0);

                        case 27:
                          _context24.next = 29;
                          return _formFields.default.autocompleteSelectMultipleWithoutSearch('customField.choose', 0);

                        case 29:
                          _context24.next = 31;
                          return _formFields.default.autocompleteSelectMultipleWithoutSearch('customField.choose', 1);

                        case 31:
                          _context24.next = 33;
                          return _formFields.default.calendarSelectSingleDate('customField.today', nextDay);

                        case 33:
                          _context24.next = 35;
                          return _formFields.default.calendarSelectSingleDate('customField.now', nextDay);

                        case 35:
                          _context24.next = 37;
                          return _formFields.default.selectSingle('customField.cat', 0);

                        case 37:
                          _context24.next = 39;
                          return _formFields.default.selectSingle('customField.cd_04_sub', 0);

                        case 39:
                          _context24.next = 41;
                          return _formFields.default.selectSingle('customField.cd_03_last', 1);

                        case 41:
                          _context24.next = 43;
                          return _fields.default.fillLinkField('https://en.wikipedia.org/wiki/Hermione_Granger');

                        case 43:
                          assert.equal(_fields.default.inputValue('prefix', true), _fields.default.inputValue('prefix'), 'Text input Value matches');
                          assert.notEqual(_fields.default.inputValue('name', true), _fields.default.inputValue('name'), 'name Value should not match');
                          assert.equal(_fields.default.textAreaValue('bio', true), _fields.default.textAreaValue('bio'), 'bio Value matches');
                          assert.equal(_fields.default.inputValue('terms', true), _fields.default.inputValue('terms'), 'terms Value matches');
                          assert.equal(_fields.default.inputValue('decimal', true), _fields.default.inputValue('decimal'), 'decimal Value matches');
                          assert.equal(_fields.default.inputValue('age', true), _fields.default.inputValue('age'), 'age Value matches');
                          assert.equal(_fields.default.inputValue('link', true), _fields.default.inputValue('profile_link'), 'link Value matches');
                          _context24.next = 52;
                          return _formFields.default.getDataForField('customField.pronoun', true);

                        case 52:
                          parentPronoun = _context24.sent;
                          _context24.next = 55;
                          return _formFields.default.getDataForField('pronoun', true);

                        case 55:
                          childPronoun = _context24.sent;
                          assert.equal(parentPronoun.selected, childPronoun.selected, 'Pronoun field match');
                          _context24.next = 59;
                          return _formFields.default.getDataForField('customField.detectives', true);

                        case 59:
                          parentDetectives = _context24.sent;
                          _context24.next = 62;
                          return _formFields.default.getDataForField('detectives', true);

                        case 62:
                          childDetectives = _context24.sent;
                          assert.notEqual(parentDetectives.selected, childDetectives.selected, 'Detectives field should not match');
                          _context24.next = 66;
                          return _formFields.default.getDataForField('customField.today', true);

                        case 66:
                          parentToday = _context24.sent;
                          _context24.next = 69;
                          return _formFields.default.getDataForField('today', true);

                        case 69:
                          childToday = _context24.sent;
                          assert.equal(parentToday.selected, childToday.selected, 'Date field should match');
                          _context24.next = 73;
                          return _formFields.default.getDataForField('customField.now', true);

                        case 73:
                          parentNow = _context24.sent;
                          _context24.next = 76;
                          return _formFields.default.getDataForField('now', true);

                        case 76:
                          childNow = _context24.sent;
                          assert.deepEqual(parentNow.selected, childNow.selected, 'Date time field should match');
                          _context24.next = 80;
                          return _formFields.default.getDataForField('customField.cat', true);

                        case 80:
                          parentCategory = _context24.sent;
                          _context24.next = 83;
                          return _formFields.default.getDataForField('cat', true);

                        case 83:
                          childCategory = _context24.sent;
                          assert.notEqual(parentCategory.selected, childCategory.selected, 'Category field should not match');
                          assert.notOk(_fields.default.isSubCategoryVisible, 'Child Sub category should be hidden');

                        case 86:
                        case "end":
                          return _context24.stop();
                      }
                    }
                  }, _callee24, this);
                }));

                return function (_x25) {
                  return _ref26.apply(this, arguments);
                };
              }()); // 24.

              (0, _qunit.test)('it should not copy parent fields values to child fields', /*#__PURE__*/function () {
                var _ref27 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee25(assert) {
                  var moment, day, nextDay, childPronoun, childDetectives, childToday, childNow, childCategory;
                  return regeneratorRuntime.wrap(function _callee25$(_context25) {
                    while (1) {
                      switch (_context25.prev = _context25.next) {
                        case 0:
                          moment = this.owner.lookup('service:moment');
                          day = moment.moment(new Date()).add(1, "days");
                          nextDay = day.format('YYYY-MM-DD');
                          _context25.next = 5;
                          return renderComponent(this, ITEMS.PARENT_FIELD);

                        case 5:
                          _context25.next = 7;
                          return (0, _testHelpers.waitFor)('.custom-fields');

                        case 7:
                          _context25.next = 9;
                          return _detail.default.additionalItems.items[0].toggleAccordion();

                        case 9:
                          _context25.next = 11;
                          return _fields.default.fillPrefixField('Ms.');

                        case 11:
                          _context25.next = 13;
                          return _formFields.default.selectSingle('customField.pronoun', 1);

                        case 13:
                          _context25.next = 15;
                          return _fields.default.fillNameField('Hermoine Granger');

                        case 15:
                          _context25.next = 17;
                          return _fields.default.fillBioField('Minister of Magic.\nHonorable member of Gryffindor house.');

                        case 17:
                          _context25.next = 19;
                          return _fields.default.toggleTermsField();

                        case 19:
                          _context25.next = 21;
                          return _fields.default.fillDecimalField('349.99');

                        case 21:
                          _context25.next = 23;
                          return _fields.default.fillAgeField('40');

                        case 23:
                          _context25.next = 25;
                          return _formFields.default.selectSingle('customField.detectives', 0);

                        case 25:
                          _context25.next = 27;
                          return _formFields.default.autocompleteSelectMultipleWithoutSearch('customField.choose', 0);

                        case 27:
                          _context25.next = 29;
                          return _formFields.default.autocompleteSelectMultipleWithoutSearch('customField.choose', 1);

                        case 29:
                          _context25.next = 31;
                          return _formFields.default.calendarSelectSingleDate('customField.today', nextDay);

                        case 31:
                          _context25.next = 33;
                          return _formFields.default.calendarSelectSingleDate('customField.now', nextDay);

                        case 33:
                          _context25.next = 35;
                          return _formFields.default.selectSingle('customField.cat', 0);

                        case 35:
                          _context25.next = 37;
                          return _formFields.default.selectSingle('customField.cd_04_sub', 0);

                        case 37:
                          _context25.next = 39;
                          return _formFields.default.selectSingle('customField.cd_03_last', 1);

                        case 39:
                          _context25.next = 41;
                          return _fields.default.fillLinkField('https://en.wikipedia.org/wiki/Hermione_Granger');

                        case 41:
                          assert.equal(_fields.default.inputValue('prefix'), '', 'Text input should be empty');
                          assert.equal(_fields.default.inputValue('name'), '', 'name Value should be empty');
                          assert.equal(_fields.default.textAreaValue('bio'), '', 'bio Value should be empty');
                          assert.equal(_fields.default.inputValue('terms'), '', 'terms Value should be empty');
                          assert.equal(_fields.default.inputValue('decimal'), '', 'decimal Value should be empty');
                          assert.equal(_fields.default.inputValue('age'), '', 'age Value should be empty');
                          assert.equal(_fields.default.inputValue('profile_link'), '', 'link Value should be empty');
                          _context25.next = 50;
                          return _formFields.default.getDataForField('pronoun', true);

                        case 50:
                          childPronoun = _context25.sent;
                          assert.equal(childPronoun.selected, null, 'Pronoun field shoule be empty');
                          _context25.next = 54;
                          return _formFields.default.getDataForField('detectives', true);

                        case 54:
                          childDetectives = _context25.sent;
                          assert.equal(childDetectives.selected, null, 'Detectives field should be empty');
                          _context25.next = 58;
                          return _formFields.default.getDataForField('today', true);

                        case 58:
                          childToday = _context25.sent;
                          assert.equal(childToday.selected, "", 'Date field should be empty');
                          _context25.next = 62;
                          return _formFields.default.getDataForField('now', true);

                        case 62:
                          childNow = _context25.sent;
                          assert.equal(childNow.selected[0], "", 'Date time field - date should be empty');
                          assert.equal(childNow.selected[1], undefined, 'Date time field - time should be empty');
                          _context25.next = 67;
                          return _formFields.default.getDataForField('cat', true);

                        case 67:
                          childCategory = _context25.sent;
                          assert.equal(childCategory.selected, null, 'Category field should be empty');
                          assert.notOk(_fields.default.isSubCategoryVisible, 'Child Sub category should be hidden');

                        case 70:
                        case "end":
                          return _context25.stop();
                      }
                    }
                  }, _callee25, this);
                }));

                return function (_x26) {
                  return _ref27.apply(this, arguments);
                };
              }()); // 25.

              (0, _qunit.test)('it should copy parent fields values only after selecting the child items', /*#__PURE__*/function () {
                var _ref28 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee26(assert) {
                  var moment, day, nextDay, childPronoun, childDetectives, parentPronoun, parentDetectives, parentToday, childToday, parentNow, childNow, parentCategory, childCategory;
                  return regeneratorRuntime.wrap(function _callee26$(_context26) {
                    while (1) {
                      switch (_context26.prev = _context26.next) {
                        case 0:
                          moment = this.owner.lookup('service:moment');
                          day = moment.moment(new Date()).add(1, "days");
                          nextDay = day.format('YYYY-MM-DD');
                          _context26.next = 5;
                          return renderComponent(this, ITEMS.PARENT_FIELD);

                        case 5:
                          _context26.next = 7;
                          return (0, _testHelpers.waitFor)('.custom-fields');

                        case 7:
                          _context26.next = 9;
                          return _detail.default.additionalItems.items[0].toggleAccordion();

                        case 9:
                          _context26.next = 11;
                          return _fields.default.fillPrefixField('Ms.');

                        case 11:
                          _context26.next = 13;
                          return _formFields.default.selectSingle('customField.pronoun', 1);

                        case 13:
                          _context26.next = 15;
                          return _fields.default.fillNameField('Hermoine Granger');

                        case 15:
                          _context26.next = 17;
                          return _fields.default.fillBioField('Minister of Magic.\nHonorable member of Gryffindor house.');

                        case 17:
                          _context26.next = 19;
                          return _fields.default.toggleTermsField();

                        case 19:
                          _context26.next = 21;
                          return _fields.default.fillDecimalField('349.99');

                        case 21:
                          _context26.next = 23;
                          return _fields.default.fillAgeField('40');

                        case 23:
                          _context26.next = 25;
                          return _formFields.default.selectSingle('customField.detectives', 0);

                        case 25:
                          _context26.next = 27;
                          return _formFields.default.autocompleteSelectMultipleWithoutSearch('customField.choose', 0);

                        case 27:
                          _context26.next = 29;
                          return _formFields.default.autocompleteSelectMultipleWithoutSearch('customField.choose', 1);

                        case 29:
                          _context26.next = 31;
                          return _formFields.default.calendarSelectSingleDate('customField.today', nextDay);

                        case 31:
                          _context26.next = 33;
                          return _formFields.default.calendarSelectSingleDate('customField.now', nextDay);

                        case 33:
                          _context26.next = 35;
                          return _formFields.default.selectSingle('customField.cat', 0);

                        case 35:
                          _context26.next = 37;
                          return _formFields.default.selectSingle('customField.cd_04_sub', 0);

                        case 37:
                          _context26.next = 39;
                          return _formFields.default.selectSingle('customField.cd_03_last', 1);

                        case 39:
                          _context26.next = 41;
                          return _fields.default.fillLinkField('https://en.wikipedia.org/wiki/Hermione_Granger');

                        case 41:
                          assert.equal(_fields.default.inputValue('prefix'), '', 'Text input should be empty');
                          assert.equal(_fields.default.inputValue('name'), '', 'name Value should be empty');
                          assert.equal(_fields.default.textAreaValue('bio'), '', 'bio Value should be empty');
                          assert.equal(_fields.default.inputValue('terms'), '', 'terms Value should be empty');
                          assert.equal(_fields.default.inputValue('decimal'), '', 'decimal Value should be empty');
                          assert.equal(_fields.default.inputValue('age'), '', 'age Value should be empty');
                          assert.equal(_fields.default.inputValue('profile_link'), '', 'link Value should be empty');
                          _context26.next = 50;
                          return _formFields.default.getDataForField('pronoun', true);

                        case 50:
                          childPronoun = _context26.sent;
                          assert.equal(childPronoun.selected, null, 'Pronoun field shoule be empty');
                          _context26.next = 54;
                          return _formFields.default.getDataForField('detectives', true);

                        case 54:
                          childDetectives = _context26.sent;
                          assert.equal(childDetectives.selected, null, 'Detectives field should be empty');
                          _context26.next = 58;
                          return _detail.default.additionalItems.items[0].selectItem();

                        case 58:
                          assert.equal(_fields.default.inputValue('prefix', true), _fields.default.inputValue('prefix'), 'Text input Value matches');
                          assert.notEqual(_fields.default.inputValue('name', true), _fields.default.inputValue('name'), 'name Value should not match');
                          assert.equal(_fields.default.textAreaValue('bio', true), _fields.default.textAreaValue('bio'), 'bio Value matches');
                          assert.equal(_fields.default.inputValue('terms', true), _fields.default.inputValue('terms'), 'terms Value matches');
                          assert.equal(_fields.default.inputValue('decimal', true), _fields.default.inputValue('decimal'), 'decimal Value matches');
                          assert.equal(_fields.default.inputValue('age', true), _fields.default.inputValue('age'), 'age Value matches');
                          assert.equal(_fields.default.inputValue('link', true), _fields.default.inputValue('profile_link'), 'link Value matches');
                          _context26.next = 67;
                          return _formFields.default.getDataForField('customField.pronoun', true);

                        case 67:
                          parentPronoun = _context26.sent;
                          _context26.next = 70;
                          return _formFields.default.getDataForField('pronoun', true);

                        case 70:
                          childPronoun = _context26.sent;
                          assert.equal(parentPronoun.selected, childPronoun.selected, 'Pronoun field match');
                          _context26.next = 74;
                          return _formFields.default.getDataForField('customField.detectives', true);

                        case 74:
                          parentDetectives = _context26.sent;
                          _context26.next = 77;
                          return _formFields.default.getDataForField('detectives', true);

                        case 77:
                          childDetectives = _context26.sent;
                          assert.notEqual(parentDetectives.selected, childDetectives.selected, 'Detectives field should not match');
                          _context26.next = 81;
                          return _formFields.default.getDataForField('customField.today', true);

                        case 81:
                          parentToday = _context26.sent;
                          _context26.next = 84;
                          return _formFields.default.getDataForField('today', true);

                        case 84:
                          childToday = _context26.sent;
                          assert.equal(parentToday.selected, childToday.selected, 'Date field should match');
                          _context26.next = 88;
                          return _formFields.default.getDataForField('customField.now', true);

                        case 88:
                          parentNow = _context26.sent;
                          _context26.next = 91;
                          return _formFields.default.getDataForField('now', true);

                        case 91:
                          childNow = _context26.sent;
                          assert.deepEqual(parentNow.selected, childNow.selected, 'Date time field should match');
                          _context26.next = 95;
                          return _formFields.default.getDataForField('customField.cat', true);

                        case 95:
                          parentCategory = _context26.sent;
                          _context26.next = 98;
                          return _formFields.default.getDataForField('cat', true);

                        case 98:
                          childCategory = _context26.sent;
                          assert.notEqual(parentCategory.selected, childCategory.selected, 'Category field should not match');
                          assert.notOk(_fields.default.isSubCategoryVisible, 'Child Sub category should be hidden');

                        case 101:
                        case "end":
                          return _context26.stop();
                      }
                    }
                  }, _callee26, this);
                }));

                return function (_x27) {
                  return _ref28.apply(this, arguments);
                };
              }()); // 26.
              // TODO: Move to acceptance test once ticket details page issues are fixed

              (0, _qunit.skip)('it should render nested field as expected', /*#__PURE__*/function () {
                var _ref29 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee27(assert) {
                  var saveCallbackSpy;
                  return regeneratorRuntime.wrap(function _callee27$(_context27) {
                    while (1) {
                      switch (_context27.prev = _context27.next) {
                        case 0:
                          saveCallbackSpy = _sinon.default.spy();
                          this.set('onModelSaveCallback', saveCallbackSpy);
                          _context27.next = 4;
                          return renderComponent(this, ITEMS.NESTED_FIELD);

                        case 4:
                          _context27.next = 6;
                          return (0, _testHelpers.waitFor)('.custom-fields');

                        case 6:
                          _context27.next = 8;
                          return _formFields.default.selectSingle('customField.country', 0);

                        case 8:
                          _context27.next = 10;
                          return _formFields.default.selectSingle('customField.cd_02_state', 0);

                        case 10:
                          _context27.next = 12;
                          return _formFields.default.selectSingle('customField.cd_01_city', 0);

                        case 12:
                          _context27.next = 14;
                          return _fields.default.placeReq();

                        case 14:
                          assert.ok(saveCallbackSpy.calledOnce, 'Service Request Placed');

                        case 15:
                        case "end":
                          return _context27.stop();
                      }
                    }
                  }, _callee27, this);
                }));

                return function (_x28) {
                  return _ref29.apply(this, arguments);
                };
              }()); // 27.

              (0, _qunit.test)('it should retain the fields and values on toggling the accordions', /*#__PURE__*/function () {
                var _ref30 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee28(assert) {
                  var childItem, additionalItemFieldsLength;
                  return regeneratorRuntime.wrap(function _callee28$(_context28) {
                    while (1) {
                      switch (_context28.prev = _context28.next) {
                        case 0:
                          _context28.next = 2;
                          return renderComponent(this, ITEMS.PARENT_FIELD);

                        case 2:
                          _context28.next = 4;
                          return (0, _testHelpers.waitFor)('.custom-fields');

                        case 4:
                          childItem = _detail.default.additionalItems.items[0];
                          _context28.next = 7;
                          return childItem.toggleAccordion();

                        case 7:
                          _context28.next = 9;
                          return childItem.selectItem();

                        case 9:
                          additionalItemFieldsLength = childItem.customFields.length;
                          assert.ok(additionalItemFieldsLength > 0, 'Fields are available inside additional items');
                          _context28.next = 13;
                          return childItem.toggleAccordion();

                        case 13:
                          additionalItemFieldsLength = childItem.customFields.length;
                          assert.ok(additionalItemFieldsLength === 0, 'Fields are hidden');
                          _context28.next = 17;
                          return childItem.toggleAccordion();

                        case 17:
                          additionalItemFieldsLength = childItem.customFields.length;
                          assert.ok(additionalItemFieldsLength > 0, 'Fields are available inside additional items');

                        case 19:
                        case "end":
                          return _context28.stop();
                      }
                    }
                  }, _callee28, this);
                }));

                return function (_x29) {
                  return _ref30.apply(this, arguments);
                };
              }()); // 28.
              // TODO: Move to acceptance test once ticket details page issues are fixed

              (0, _qunit.skip)('it should fill the values in the additional items properly', /*#__PURE__*/function () {
                var _ref31 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee29(assert) {
                  var saveCallbackSpy, childItem;
                  return regeneratorRuntime.wrap(function _callee29$(_context29) {
                    while (1) {
                      switch (_context29.prev = _context29.next) {
                        case 0:
                          saveCallbackSpy = _sinon.default.spy();
                          this.set('onModelSaveCallback', saveCallbackSpy);
                          _context29.next = 4;
                          return renderComponent(this, ITEMS.PARENT_FIELD);

                        case 4:
                          _context29.next = 6;
                          return (0, _testHelpers.waitFor)('.custom-fields');

                        case 6:
                          childItem = _detail.default.additionalItems.items[0];
                          _context29.next = 9;
                          return childItem.toggleAccordion();

                        case 9:
                          _context29.next = 11;
                          return childItem.selectItem();

                        case 11:
                          _context29.next = 13;
                          return _fields.default.fillChildPrefixField('Ms.');

                        case 13:
                          _context29.next = 15;
                          return _formFields.default.selectSingle('pronoun', 1);

                        case 15:
                          _context29.next = 17;
                          return _fields.default.fillNameField('Hermoine Granger');

                        case 17:
                          _context29.next = 19;
                          return _fields.default.fillChildNameField('Hermoine Granger');

                        case 19:
                          _context29.next = 21;
                          return _fields.default.fillChildBioField('Minister of Magic.\nHonorable member of Gryffindor house.');

                        case 21:
                          _context29.next = 23;
                          return _fields.default.toggleChildTermsField();

                        case 23:
                          _context29.next = 25;
                          return _fields.default.fillChildDecimalField('349.99');

                        case 25:
                          _context29.next = 27;
                          return _fields.default.fillChildAgeField('40');

                        case 27:
                          _context29.next = 29;
                          return _formFields.default.selectSingle('detectives', 0);

                        case 29:
                          _context29.next = 31;
                          return _formFields.default.autocompleteSelectMultipleWithoutSearch('choose_friends', 0);

                        case 31:
                          _context29.next = 33;
                          return _formFields.default.autocompleteSelectMultipleWithoutSearch('choose_friends', 1);

                        case 33:
                          _context29.next = 35;
                          return _formFields.default.selectSingle('cat', 0);

                        case 35:
                          _context29.next = 37;
                          return _formFields.default.selectSingle('cd_04_sub', 0);

                        case 37:
                          _context29.next = 39;
                          return _formFields.default.selectSingle('cd_03_last', 1);

                        case 39:
                          _context29.next = 41;
                          return _fields.default.fillLinkField('https://en.wikipedia.org/wiki/Hermione_Granger');

                        case 41:
                          _context29.next = 43;
                          return _fields.default.fillChildProfileLinkField('https://en.wikipedia.org/wiki/Hermione_Granger');

                        case 43:
                          _context29.next = 45;
                          return _formFields.default.autocompleteSelectMultiple('agents', 'test', 0);

                        case 45:
                          _context29.next = 47;
                          return _formFields.default.autocompleteSelectMultiple('users', 'andrea', 0);

                        case 47:
                          _context29.next = 49;
                          return _formFields.default.autocompleteSelectMultiple('requester', 'jerry', 0);

                        case 49:
                          _context29.next = 51;
                          return _formFields.default.autocompleteSelectMultiple('departs', 'sales', 0);

                        case 51:
                          _context29.next = 53;
                          return _fields.default.placeReq();

                        case 53:
                          assert.ok(saveCallbackSpy.calledOnce, 'Service Request Placed');

                        case 54:
                        case "end":
                          return _context29.stop();
                      }
                    }
                  }, _callee29, this);
                }));

                return function (_x30) {
                  return _ref31.apply(this, arguments);
                };
              }()); // 29.
              // TODO: Move to acceptance test once ticket details page issues are fixed

              (0, _qunit.skip)('it should save the quantity in the additional items', /*#__PURE__*/function () {
                var _ref32 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee30(assert) {
                  var saveCallbackSpy, childItem;
                  return regeneratorRuntime.wrap(function _callee30$(_context30) {
                    while (1) {
                      switch (_context30.prev = _context30.next) {
                        case 0:
                          saveCallbackSpy = _sinon.default.spy();
                          this.set('onModelSaveCallback', saveCallbackSpy);
                          _context30.next = 4;
                          return renderComponent(this, ITEMS.PARENT_FIELD);

                        case 4:
                          _context30.next = 6;
                          return (0, _testHelpers.waitFor)('.custom-fields');

                        case 6:
                          childItem = _detail.default.additionalItems.items[0];
                          _context30.next = 9;
                          return childItem.toggleAccordion();

                        case 9:
                          _context30.next = 11;
                          return childItem.selectItem();

                        case 11:
                          _context30.next = 13;
                          return _fields.default.fillNameField('Hermoine Granger');

                        case 13:
                          _context30.next = 15;
                          return _fields.default.fillChildNameField('Hermoine Granger');

                        case 15:
                          _context30.next = 17;
                          return _fields.default.fillLinkField('https://en.wikipedia.org/wiki/Hermione_Granger');

                        case 17:
                          _context30.next = 19;
                          return _fields.default.fillChildProfileLinkField('https://en.wikipedia.org/wiki/Hermione_Granger');

                        case 19:
                          _context30.next = 21;
                          return _fields.default.fillChildDecimalField('349.99');

                        case 21:
                          _context30.next = 23;
                          return _fields.default.fillChildAgeField('40');

                        case 23:
                          _context30.next = 25;
                          return _fields.default.fillChildItemQuantity(3);

                        case 25:
                          _context30.next = 27;
                          return _fields.default.placeReq();

                        case 27:
                          assert.ok(saveCallbackSpy.calledOnce, 'Service Request Placed');

                        case 28:
                        case "end":
                          return _context30.stop();
                      }
                    }
                  }, _callee30, this);
                }));

                return function (_x31) {
                  return _ref32.apply(this, arguments);
                };
              }()); // 30.

              (0, _qunit.test)('it should open the additional item when validation fails for the item fields', /*#__PURE__*/function () {
                var _ref33 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee31(assert) {
                  var childItem;
                  return regeneratorRuntime.wrap(function _callee31$(_context31) {
                    while (1) {
                      switch (_context31.prev = _context31.next) {
                        case 0:
                          _context31.next = 2;
                          return renderComponent(this, ITEMS.PARENT_FIELD);

                        case 2:
                          _context31.next = 4;
                          return (0, _testHelpers.waitFor)('.custom-fields');

                        case 4:
                          childItem = _detail.default.additionalItems.items[0];
                          _context31.next = 7;
                          return childItem.selectItem();

                        case 7:
                          assert.notOk(childItem.panelVisible, 'Child Item panel should be hidden');
                          _context31.next = 10;
                          return _fields.default.placeReq();

                        case 10:
                          assert.ok(childItem.panelVisible, 'Child item panel should be visible');

                        case 11:
                        case "end":
                          return _context31.stop();
                      }
                    }
                  }, _callee31, this);
                }));

                return function (_x32) {
                  return _ref33.apply(this, arguments);
                };
              }()); // 31.

              (0, _qunit.test)('it should error message if the mandatory child items is missing', /*#__PURE__*/function () {
                var _ref34 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee32(assert) {
                  var warningFlashSpy;
                  return regeneratorRuntime.wrap(function _callee32$(_context32) {
                    while (1) {
                      switch (_context32.prev = _context32.next) {
                        case 0:
                          warningFlashSpy = (0, _spyFlashMessage.default)('warning');
                          _context32.next = 3;
                          return renderComponent(this, ITEMS.LARGE_PARENT_ITEM_ID);

                        case 3:
                          _context32.next = 5;
                          return (0, _testHelpers.waitFor)('.custom-fields');

                        case 5:
                          _context32.next = 7;
                          return _fields.default.placeReq();

                        case 7:
                          assert.ok(warningFlashSpy.calledOnce, 'Mandatory error message is displayed');

                        case 8:
                        case "end":
                          return _context32.stop();
                      }
                    }
                  }, _callee32, this);
                }));

                return function (_x33) {
                  return _ref34.apply(this, arguments);
                };
              }()); // --------- New Requester email addition cases ---------

              (0, _qunit.test)('it should show validate accepted email / name formats for requester fields', /*#__PURE__*/function () {
                var _ref35 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee33(assert) {
                  var saveCallbackSpy;
                  return regeneratorRuntime.wrap(function _callee33$(_context33) {
                    while (1) {
                      switch (_context33.prev = _context33.next) {
                        case 0:
                          saveCallbackSpy = _sinon.default.spy();
                          this.set('onModelSaveCallback', saveCallbackSpy);
                          _context33.next = 4;
                          return renderComponent(this);

                        case 4:
                          _context33.next = 6;
                          return _detail.default.reqInfo.clickReqField();

                        case 6:
                          _context33.next = 8;
                          return _detail.default.reqInfo.fillReqField('newemailgoogle.com');

                        case 8:
                          _context33.next = 10;
                          return _fields.default.placeReq();

                        case 10:
                          assert.equal(_fields.default.errorFields.length, 1, 'No of error fields match');
                          assert.equal(_fields.default.errorFields[0].errorFieldName, 'email', 'requester email field should throw email validation error');
                          _context33.next = 14;
                          return _detail.default.reqInfo.clickReqField();

                        case 14:
                          _context33.next = 16;
                          return _detail.default.reqInfo.fillReqField('newemail@google.com');

                        case 16:
                          _context33.next = 18;
                          return _detail.default.reqInfo.clickReqForCheckbox();

                        case 18:
                          _context33.next = 20;
                          return _detail.default.reqInfo.clickReqForField();

                        case 20:
                          _context33.next = 22;
                          return _detail.default.reqInfo.fillReqForField('reqforgoogle.com');

                        case 22:
                          _context33.next = 24;
                          return _fields.default.placeReq();

                        case 24:
                          assert.equal(_fields.default.errorFields.length, 1, 'No of error fields match');
                          assert.equal(_fields.default.errorFields[0].errorFieldName, 'requestedFor', 'requester for email field should throw email validation error');
                          _context33.next = 28;
                          return _detail.default.reqInfo.clickReqForField();

                        case 28:
                          _context33.next = 30;
                          return _detail.default.reqInfo.fillReqForField('reqfor@google.com');

                        case 30:
                          _context33.next = 32;
                          return _detail.default.reqInfo.clickBtnAddCC();

                        case 32:
                          _context33.next = 34;
                          return _detail.default.reqInfo.fillAddCC('randomdfsdfs.com');

                        case 34:
                          _context33.next = 36;
                          return _fields.default.placeReq();

                        case 36:
                          assert.equal(_fields.default.errorFields.length, 1, 'No of error fields match');
                          assert.equal(_fields.default.errorFields[0].errorFieldName, 'ccEmails', 'cc emails field should throw email validation error');
                          _context33.next = 40;
                          return _detail.default.reqInfo.clearAddCC();

                        case 40:
                          _context33.next = 42;
                          return _detail.default.reqInfo.fillAddCC('random@dfsdfs.com');

                        case 42:
                          _context33.next = 44;
                          return _fields.default.placeReq();

                        case 44:
                          assert.equal(_fields.default.errorFields.length, 0, 'No of error fields match');
                          assert.ok(saveCallbackSpy.calledOnce, 'Service Request Placed');

                        case 46:
                        case "end":
                          return _context33.stop();
                      }
                    }
                  }, _callee33, this);
                }));

                return function (_x34) {
                  return _ref35.apply(this, arguments);
                };
              }());
              (0, _qunit.test)('it should show validate accepted email with name formats for requester fields', /*#__PURE__*/function () {
                var _ref36 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee34(assert) {
                  var saveCallbackSpy;
                  return regeneratorRuntime.wrap(function _callee34$(_context34) {
                    while (1) {
                      switch (_context34.prev = _context34.next) {
                        case 0:
                          saveCallbackSpy = _sinon.default.spy();
                          this.set('onModelSaveCallback', saveCallbackSpy);
                          _context34.next = 4;
                          return renderComponent(this);

                        case 4:
                          _context34.next = 6;
                          return _detail.default.reqInfo.clickReqField();

                        case 6:
                          _context34.next = 8;
                          return _detail.default.reqInfo.fillReqField('newemailgoogle.com');

                        case 8:
                          _context34.next = 10;
                          return _fields.default.placeReq();

                        case 10:
                          assert.equal(_fields.default.errorFields.length, 1, 'No of error fields match');
                          assert.equal(_fields.default.errorFields[0].errorFieldName, 'email', 'requester email field should throw email validation error');
                          _context34.next = 14;
                          return _detail.default.reqInfo.clickReqField();

                        case 14:
                          _context34.next = 16;
                          return _detail.default.reqInfo.fillReqField('new email <newemail@google.com>');

                        case 16:
                          _context34.next = 18;
                          return _detail.default.reqInfo.clickReqForCheckbox();

                        case 18:
                          _context34.next = 20;
                          return _detail.default.reqInfo.clickReqForField();

                        case 20:
                          _context34.next = 22;
                          return _detail.default.reqInfo.fillReqForField('rew google <reqforgoogle.com>');

                        case 22:
                          _context34.next = 24;
                          return _fields.default.placeReq();

                        case 24:
                          assert.equal(_fields.default.errorFields.length, 1, 'No of error fields match');
                          assert.equal(_fields.default.errorFields[0].errorFieldName, 'requestedFor', 'requester for email field should throw email validation error');
                          _context34.next = 28;
                          return _detail.default.reqInfo.clickReqForField();

                        case 28:
                          _context34.next = 30;
                          return _detail.default.reqInfo.fillReqForField('reg googl <reqfor@google.com>');

                        case 30:
                          _context34.next = 32;
                          return _detail.default.reqInfo.clickBtnAddCC();

                        case 32:
                          _context34.next = 34;
                          return _detail.default.reqInfo.fillAddCC('randomdfsdfs.com');

                        case 34:
                          _context34.next = 36;
                          return _fields.default.placeReq();

                        case 36:
                          assert.equal(_fields.default.errorFields.length, 1, 'No of error fields match');
                          assert.equal(_fields.default.errorFields[0].errorFieldName, 'ccEmails', 'cc emails field should throw email validation error');
                          _context34.next = 40;
                          return _detail.default.reqInfo.clearAddCC();

                        case 40:
                          _context34.next = 42;
                          return _detail.default.reqInfo.fillAddCC('random <random@dfsdfs.com>');

                        case 42:
                          _context34.next = 44;
                          return _fields.default.placeReq();

                        case 44:
                          assert.equal(_fields.default.errorFields.length, 0, 'No of error fields match');
                          assert.ok(saveCallbackSpy.calledOnce, 'Service Request Placed');

                        case 46:
                        case "end":
                          return _context34.stop();
                      }
                    }
                  }, _callee34, this);
                }));

                return function (_x35) {
                  return _ref36.apply(this, arguments);
                };
              }());

            case 41:
            case "end":
              return _context36.stop();
          }
        }
      }, _callee36);
    }));

    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }());
});
define("freshservice/tests/integration/components/module-service-request/detail/item-info/component-test", ["qunit", "ember-qunit", "freshservice/tests/lib/intl", "@ember/test-helpers", "freshservice/tests/pages/components/module-service-request/detail"], function (_qunit, _emberQunit, _intl, _testHelpers, _detail) {
  "use strict";

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var ITEM_INFO = {
    iconDetail: {
      url: 'http://localhost-dev.freshservice.com:4200/a'
    },
    name: 'Adobe Photoshop',
    shortDescription: 'Adobe Photoshop used to edit photos',
    costVisibility: true,
    cost: 1000,
    deliveryTimeVisibility: true,
    deliveryTime: 24,
    description: 'Adobe photoshop detailed description'
  };
  (0, _qunit.module)('Integration | Component | module-service-request/detail/item-info', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _qunit.test)('it should show item name, short description and image', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.set('item', ITEM_INFO);
              _context.next = 3;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleServiceRequest::Detail::ItemInfo
              			@item = {{item}}
              			/>
              */
              {
                id: "bO+JLn5A",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-service-request/detail/item-info\",[],[[\"@item\"],[[22,\"item\"]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 3:
              _qunit.assert.equal(_detail.default.itemInfo.title, ITEM_INFO.name, 'Item name text match');

              _qunit.assert.equal(_detail.default.itemInfo.shortDesc, ITEM_INFO.shortDescription, 'Item short description text match');

              _qunit.assert.equal(_detail.default.itemInfo.imgHref, ITEM_INFO.iconDetail.url, 'Item image src match');

              _qunit.assert.equal(_detail.default.itemInfo.descText, ITEM_INFO.description, 'Item description content match');

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('it should show cost and delivery info when visibility is available', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              this.set('item', ITEM_INFO);
              this.set('currency', '$');
              _context2.next = 4;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleServiceRequest::Detail::ItemInfo
              			@item = {{item}}
              			@currencySymbol = {{currency}}
              			/>
              */
              {
                id: "20bmhhCZ",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-service-request/detail/item-info\",[],[[\"@item\",\"@currencySymbol\"],[[22,\"item\"],[22,\"currency\"]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 4:
              _qunit.assert.ok(_detail.default.itemInfo.costVisible, 'cost is be visible');

              _qunit.assert.ok(_detail.default.itemInfo.deliveryVisible, 'Delivery time is visible');

              _qunit.assert.equal(_detail.default.itemInfo.costText, "$ ".concat(ITEM_INFO.cost, ".00"), 'cost available with the proper format');

              _qunit.assert.ok(_detail.default.itemInfo.deliveryText(ITEM_INFO.deliveryTime), 'Delivery text available');

            case 8:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    })));
    (0, _qunit.test)('it should hide cost and delivery info when visibility is not available', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
      var item;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              item = _objectSpread({}, ITEM_INFO);
              item.deliveryTimeVisibility = false;
              item.costVisibility = false;
              this.set('item', item);
              _context3.next = 6;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleServiceRequest::Detail::ItemInfo
              			@item = {{item}}
              			/>
              */
              {
                id: "bO+JLn5A",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-service-request/detail/item-info\",[],[[\"@item\"],[[22,\"item\"]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 6:
              _qunit.assert.notOk(_detail.default.itemInfo.costVisible, 'cost is hidden');

              _qunit.assert.notOk(_detail.default.itemInfo.deliveryVisible, 'Delivery time is hidden');

            case 8:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    })));
  });
});
define("freshservice/tests/integration/components/module-service-request/detail/quantity-info/component-test", ["qunit", "ember-qunit", "freshservice/tests/lib/stub-current-account", "freshservice/tests/lib/intl", "@ember/test-helpers", "freshservice/tests/pages/components/module-service-request/detail", "freshservice/mirage/fixtures/service_items"], function (_qunit, _emberQunit, _stubCurrentAccount, _intl, _testHelpers, _detail, _service_items) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  /* const ITEM_INFO = {
    id: 1,
    iconDetail: {
      url: 'http://localhost-dev.freshservice.com:4200/a'
    },
    name: 'Adobe Photoshop',
    shortDescription: 'Adobe Photoshop used to edit photos',
    costVisibility: true,
    cost: 1000,
    deliveryTimeVisibility: true,
    deliveryTime: 24,
    description: 'Adobe photoshop detailed description',
    allowQuantity: true
  } */
  var QtyPo = _detail.default.qtyInfo; // Stub currentAccount service

  var TEST_ACCOUNT = {
    currencySymbol: '$'
  };
  (0, _qunit.module)('Integration | Component | module-service-request/detail/quantity-info', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
      this.store = this.owner.lookup('service:store');
      var payload = {
        service_items: _service_items.default.filter(function (item) {
          return [4, 10].includes(item.id);
        })
      };
      this.store.pushPayload(payload);
      this.set('item', this.store.peekRecord('service-item', 4));
      var model = this.store.createRecord('service-request', {
        itemId: 1,
        email: 'sample@freshservice.com'
      });
      this.set('model', model);
    });
    (0, _qunit.test)('it should show quantity input options and price when allowed', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleServiceRequest::Detail::QuantityInfo
                    @model={{model}}
                    @item={{item}} />
              */
              {
                id: "Ku3G8zdL",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-service-request/detail/quantity-info\",[],[[\"@model\",\"@item\"],[[22,\"model\"],[22,\"item\"]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
              _qunit.assert.notEqual(QtyPo.qtyTitle, '', 'Quantity title is visble');

              _qunit.assert.ok(QtyPo.tableBody[0].minusBtnVisible, 'Minus Button Visible');

              _qunit.assert.ok(QtyPo.tableBody[0].minusBtnDisabled, 'Minus button disabled');

              _qunit.assert.ok(QtyPo.tableBody[0].plusBtnVisible, 'Plus Button Visible');

              _qunit.assert.ok(QtyPo.tableBody[0].inpQtyVisible, 'Input Field Visible');

              _qunit.assert.equal(QtyPo.tableBody[0].priceText, '$ 1000.00', 'Price visible');

              _qunit.assert.ok(QtyPo.totalCostVisible, 'Total Cost is visible');

            case 9:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    })));
    (0, _qunit.test)('it should hide quantity input options when not allowed', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              // let item = {...ITEM_INFO};
              // item.allowQuantity = false;
              // this.set('item', item);
              this.item.set('allowQuantity', false);
              _context2.next = 3;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleServiceRequest::Detail::QuantityInfo
                    @model={{model}}
                    @item={{item}} />
              */
              {
                id: "Ku3G8zdL",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-service-request/detail/quantity-info\",[],[[\"@model\",\"@item\"],[[22,\"model\"],[22,\"item\"]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 3:
              _qunit.assert.equal(QtyPo.qtyTitle, '', 'Quantity title is hidden');

              _qunit.assert.notOk(QtyPo.tableBody[0].minusBtnVisible, 'Minus Button hidden');

              _qunit.assert.notOk(QtyPo.tableBody[0].plusBtnVisible, 'Plus Button hidden');

              _qunit.assert.notOk(QtyPo.tableBody[0].inpQtyVisible, 'Input field hidden');

            case 7:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    })));
    (0, _qunit.test)('it should hide price when cost visibility is not allowed', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              // let item = { ...ITEM_INFO };
              // item.costVisibility = false;
              // this.set('item', item);
              this.item.set('costVisibility', false);
              _context3.next = 3;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleServiceRequest::Detail::QuantityInfo
                    @model={{model}}
                    @item={{item}} />
              */
              {
                id: "Ku3G8zdL",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-service-request/detail/quantity-info\",[],[[\"@model\",\"@item\"],[[22,\"model\"],[22,\"item\"]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 3:
              _qunit.assert.equal(QtyPo.tableBody[0].priceText, '', 'Price is not visible');

              _qunit.assert.notOk(QtyPo.totalCostVisible, 'Total Cost is not visible');

            case 5:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    })));
    (0, _qunit.test)('it should update price and total cost on quantity update', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleServiceRequest::Detail::QuantityInfo
                    @model={{model}}
                    @item={{item}} />
              */
              {
                id: "Ku3G8zdL",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-service-request/detail/quantity-info\",[],[[\"@model\",\"@item\"],[[22,\"model\"],[22,\"item\"]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
              _context4.next = 4;
              return QtyPo.tableBody[0].fillQty(2);

            case 4:
              _qunit.assert.notOk(QtyPo.tableBody[0].minusBtnDisabled, 'Minus button not disabled');

              _qunit.assert.equal(QtyPo.tableBody[0].priceText, '$ 1000.00', 'Price match for qty - 2');

              _qunit.assert.equal(QtyPo.totalCostText, '$ 2000.00', 'Total Cost match for qty - 2');

              _context4.next = 9;
              return QtyPo.tableBody[0].fillQty(4);

            case 9:
              _qunit.assert.equal(QtyPo.tableBody[0].priceText, '$ 1000.00', 'Price match for qty - 4');

              _qunit.assert.equal(QtyPo.totalCostText, '$ 4000.00', 'Total Cost match for qty - 4');

              _context4.next = 13;
              return QtyPo.tableBody[0].fillQty(1);

            case 13:
              _qunit.assert.equal(QtyPo.tableBody[0].priceText, '$ 1000.00', 'Price match for qty - 1');

              _qunit.assert.equal(QtyPo.totalCostText, '$ 1000.00', 'Total Cost match for qty - 1');

            case 15:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    })));
    (0, _qunit.test)('it should update quantity using the incremental buttons', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleServiceRequest::Detail::QuantityInfo
                    @model={{model}}
                    @item={{item}} />
              */
              {
                id: "Ku3G8zdL",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-service-request/detail/quantity-info\",[],[[\"@model\",\"@item\"],[[22,\"model\"],[22,\"item\"]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
              _qunit.assert.equal(QtyPo.tableBody[0].qtyValue, 1, 'Default quantity should be 1');

              _qunit.assert.ok(QtyPo.tableBody[0].minusBtnDisabled, 'Minus button should be disabled');

              _context5.next = 6;
              return QtyPo.tableBody[0].plusBtnClickable();

            case 6:
              _qunit.assert.equal(QtyPo.tableBody[0].qtyValue, 2, 'Quantity should increase to 2');

              _qunit.assert.notOk(QtyPo.tableBody[0].minusBtnDisabled, 'Minus button should be enabled');

              _context5.next = 10;
              return QtyPo.tableBody[0].minusBtnClickable();

            case 10:
              _qunit.assert.equal(QtyPo.tableBody[0].qtyValue, 1, 'Quantity should be reduced to 1');

              _qunit.assert.ok(QtyPo.tableBody[0].minusBtnDisabled, 'Minus button should be disabled back');

            case 12:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    })));
    (0, _qunit.test)('it should validate the quantity to be a min of one', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
      return regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleServiceRequest::Detail::QuantityInfo
                    @model={{model}}
                    @item={{item}} />
              */
              {
                id: "Ku3G8zdL",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-service-request/detail/quantity-info\",[],[[\"@model\",\"@item\"],[[22,\"model\"],[22,\"item\"]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
              _qunit.assert.equal(QtyPo.tableBody[0].qtyValue, 1, 'Default quantity should be 1');

              _context6.next = 5;
              return QtyPo.tableBody[0].fillQty(0);

            case 5:
              _context6.next = 7;
              return QtyPo.tableBody[0].blurQty();

            case 7:
              _qunit.assert.equal(QtyPo.tableBody[0].qtyValue, 1, 'Quantity value should move back to 1');

            case 8:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    })));
    (0, _qunit.test)('it should validate the quantities for child items too', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
      return regeneratorRuntime.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              this.store.pushPayload({
                service_items: [_service_items.default.find(function (item) {
                  return item.id == 12;
                })]
              });
              this.item.childItems.addObject(this.store.peekRecord('service-item', 12));
              _context7.next = 4;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleServiceRequest::Detail::QuantityInfo
                    @model={{model}}
                    @item={{item}} />
              */
              {
                id: "Ku3G8zdL",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-service-request/detail/quantity-info\",[],[[\"@model\",\"@item\"],[[22,\"model\"],[22,\"item\"]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 4:
              _qunit.assert.equal(QtyPo.tableBody.length, 1); // The store is not having the child item data in Service Item!!!


              this.model.childItems.addObject(this.store.createFragment('fragments/service-request/child-item', {
                service_item_id: '12'
              }));
              _context7.next = 8;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleServiceRequest::Detail::QuantityInfo
                    @model={{model}}
                    @item={{item}} />
              */
              {
                id: "Ku3G8zdL",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-service-request/detail/quantity-info\",[],[[\"@model\",\"@item\"],[[22,\"model\"],[22,\"item\"]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 8:
              _qunit.assert.equal(QtyPo.tableBody.length, 2);

            case 9:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    })));
    (0, _qunit.test)('it should validate the quantity to be a max', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
      return regeneratorRuntime.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <ModuleServiceRequest::Detail::QuantityInfo
                    @model={{model}}
                    @item={{item}} />
              */
              {
                id: "Ku3G8zdL",
                block: "{\"symbols\":[],\"statements\":[[5,\"module-service-request/detail/quantity-info\",[],[[\"@model\",\"@item\"],[[22,\"model\"],[22,\"item\"]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
              _context8.next = 4;
              return QtyPo.tableBody[0].fillQty(1000000000);

            case 4:
              _context8.next = 6;
              return QtyPo.tableBody[0].blurQty();

            case 6:
              _qunit.assert.equal(QtyPo.tableBody[0].qtyValue, 999999999, 'Quantity value should be a max of to 999999999');

            case 7:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    })));
  });
});
define("freshservice/tests/integration/components/module-service-request/detail/request-for-someone/component-test", ["qunit", "sinon", "ember-qunit", "freshservice/tests/lib/intl", "ember-cli-mirage/test-support", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/sinon-context", "@ember/test-helpers", "freshservice/tests/pages/components/module-service-request/detail", "freshservice/mirage/fixtures/service_items"], function (_qunit, _sinon, _emberQunit, _intl, _testSupport, _stubCurrentUser, _sinonContext, _testHelpers, _detail, _service_items) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var ITEMS = _service_items.default.find(function (item) {
    return item.id === 10;
  });

  var TEST_USER = {
    userEmail: 'sample@freshservice.com'
  };
  (0, _qunit.module)('Integration | Component | module-service-request/detail/requester-info', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    hooks.beforeEach(function () {
      this.store = this.owner.lookup('service:store');
      this.server.loadFixtures('service_items');
      this.store.pushPayload({
        'service-items': ITEMS
      });
      var model = this.store.peekRecord('service-item', 10);
      this.set('model', model);
      (0, _stubCurrentUser.stubCurrentUser)(TEST_USER);
    });
    hooks.afterEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.store.unloadAll();

            case 2:
              this.owner.destroy('service:store');
              this.owner.destroy('service:intl');

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('it should validate requested for field', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<div id="new-sr-sidebar"></div>
                			<ModuleServiceRequest::Detail 
                				@item={{this.model}}
                        @wormholeQtyTo="new-sr-sidebar"
                				@wormholeBtnsTo="sr-btn-container" />
                			<section class="btn-container flex" id="sr-btn-container"></section>
                		
                */
                {
                  id: "LgdRF5dZ",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\"],[7,\"div\",true],[10,\"id\",\"new-sr-sidebar\"],[8],[9],[0,\"\\n\\t\\t\\t\"],[5,\"module-service-request/detail\",[],[[\"@item\",\"@wormholeQtyTo\",\"@wormholeBtnsTo\"],[[23,0,[\"model\"]],\"new-sr-sidebar\",\"sr-btn-container\"]]],[0,\"\\n\\t\\t\\t\"],[7,\"section\",true],[10,\"class\",\"btn-container flex\"],[10,\"id\",\"sr-btn-container\"],[8],[9],[0,\"\\n\\t\\t\"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context2.next = 4;
                return _detail.default.reqInfo.clickReqForCheckbox();

              case 4:
                assert.ok(_detail.default.reqInfo.reqForFieldVisible);
                _context2.next = 7;
                return _detail.default.placeReq();

              case 7:
                _context2.next = 9;
                return (0, _testHelpers.waitFor)('.form-field--errors');

              case 9:
                assert.ok(_detail.default.errors.reqForErrorVisible, 'Requested For Error Visible');

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should hide the requester for info when unselected', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
      var saveCallbackSpy;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              saveCallbackSpy = _sinon.default.spy();
              this.set('onModelSaveCallback', saveCallbackSpy);
              _context3.next = 4;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                
              			<div id="new-sr-sidebar"></div>
              			<ModuleServiceRequest::Detail 
              				@item={{this.model}}
                      @onModelSaveCallback={{this.onModelSaveCallback}}
                      @wormholeQtyTo="new-sr-sidebar"
              				@wormholeBtnsTo="sr-btn-container" />
              			<section class="btn-container flex" id="sr-btn-container"></section>
              		
              */
              {
                id: "cbXMVKyj",
                block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\"],[7,\"div\",true],[10,\"id\",\"new-sr-sidebar\"],[8],[9],[0,\"\\n\\t\\t\\t\"],[5,\"module-service-request/detail\",[],[[\"@item\",\"@onModelSaveCallback\",\"@wormholeQtyTo\",\"@wormholeBtnsTo\"],[[23,0,[\"model\"]],[23,0,[\"onModelSaveCallback\"]],\"new-sr-sidebar\",\"sr-btn-container\"]]],[0,\"\\n\\t\\t\\t\"],[7,\"section\",true],[10,\"class\",\"btn-container flex\"],[10,\"id\",\"sr-btn-container\"],[8],[9],[0,\"\\n\\t\\t\"]],\"hasEval\":false}",
                meta: {}
              }));

            case 4:
              _context3.next = 6;
              return _detail.default.reqInfo.clickReqForCheckbox();

            case 6:
              _qunit.assert.ok(_detail.default.reqInfo.reqForFieldVisible);

              _context3.next = 9;
              return _detail.default.reqInfo.clickReqForCheckbox();

            case 9:
              _qunit.assert.notOk(_detail.default.reqInfo.reqForFieldVisible);

              _context3.next = 12;
              return _detail.default.placeReq();

            case 12:
              _qunit.assert.ok(saveCallbackSpy.calledOnce, 'Able to place request');

            case 13:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    })));
  });
});
define("freshservice/tests/integration/components/module-service-request/list/category-list/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/pages/components/module-service-request/list"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _list) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-service-request/catalog-list/category-list', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.server.loadFixtures('service_categories');
              Ember.set(this, 'store', this.owner.lookup('service:store'));

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    hooks.after(function () {
      this.owner.destroy('service:store');
    });
    (0, _qunit.test)('Should render All Items by default', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var categories, categoriesLength;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.store.findAll('service-category');

              case 2:
                categories = _context2.sent;
                categoriesLength = categories.length;
                Ember.set(this, 'categories', categories);
                _context2.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  r
                			<div id="catalog-list-sidebar"></div>
                			<ModuleServiceRequest::List::CategoryList
                				@categories  = {{categories}} 
                				@wormholeCategoryContTo	=	"catalog-list-sidebar"
                			/>
                */
                {
                  id: "/szGIjjJ",
                  block: "{\"symbols\":[],\"statements\":[[0,\"r\\n\\t\\t\\t\"],[7,\"div\",true],[10,\"id\",\"catalog-list-sidebar\"],[8],[9],[0,\"\\n\\t\\t\\t\"],[5,\"module-service-request/list/category-list\",[],[[\"@categories\",\"@wormholeCategoryContTo\"],[[22,\"categories\"],\"catalog-list-sidebar\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                assert.equal(_list.default.category.count, categoriesLength + 1, 'All Items added');
                assert.equal(_list.default.category.firstCategoryText, 'All items', 'All Items added');

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should set aria-current for active links', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var categories, selectedCategory;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.store.findAll('service-category');

              case 2:
                categories = _context3.sent;
                selectedCategory = categories.objectAtContent(5);
                Ember.set(this, 'categories', categories);
                Ember.set(this, 'currentCategoryId', selectedCategory.id);
                _context3.next = 8;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  r
                			<div id="catalog-list-sidebar"></div>
                			<ModuleServiceRequest::List::CategoryList
                				@categories  = {{categories}} 
                				@currentCategoryId = {{currentCategoryId}}
                				@wormholeCategoryContTo	=	"catalog-list-sidebar"
                			/>
                */
                {
                  id: "zDAPt+78",
                  block: "{\"symbols\":[],\"statements\":[[0,\"r\\n\\t\\t\\t\"],[7,\"div\",true],[10,\"id\",\"catalog-list-sidebar\"],[8],[9],[0,\"\\n\\t\\t\\t\"],[5,\"module-service-request/list/category-list\",[],[[\"@categories\",\"@currentCategoryId\",\"@wormholeCategoryContTo\"],[[22,\"categories\"],[22,\"currentCategoryId\"],\"catalog-list-sidebar\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 8:
                assert.equal(_list.default.category.ariaCurrentCount, 1, 'Only one aria current should be available');
                assert.equal(_list.default.category.ariaCurrentLinkText, selectedCategory.name, 'Aria current link match');

              case 10:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-service-request/list/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/pages/components/module-service-request/list"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _list) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var mostPopularCount = 3;
  (0, _qunit.module)('Integration | Component | module-service-request/catalog-list', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var categories, items, model;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.server.loadFixtures('service_categories');
              this.server.loadFixtures('service_items');
              Ember.set(this, 'store', this.owner.lookup('service:store'));
              Ember.set(this, 'infinity', this.owner.lookup('service:infinity'));
              _context.next = 6;
              return this.store.findAll('service-category');

            case 6:
              categories = _context.sent;
              _context.next = 9;
              return this.infinity.model('service-item');

            case 9:
              items = _context.sent;
              model = {
                categories: categories,
                items: items,
                mostPopular: items.toArray().slice(0, mostPopularCount)
              };
              Ember.set(this, 'model', model);

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    hooks.after(function () {
      this.owner.destroy('service:store');
      this.owner.destroy('service:infinity');
    });
    (0, _qunit.test)('Should render catalog list search text box', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var searchTerm;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                searchTerm = 'adobe';
                Ember.set(this, 'searchTerm', searchTerm);
                _context2.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<div id="catalog-list-sidebar"></div>
                			<ModuleServiceRequest::List
                				@category={{null}}
                				@search={{searchTerm}}
                				@updateRouteSearchTerm={{null}}
                				@clearRouteCategory={{null}}
                				@sliderView={{false}} 
                				@wormholeCategoryContTo="catalog-list-sidebar"/>
                */
                {
                  id: "2QLsOkRo",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\"],[7,\"div\",true],[10,\"id\",\"catalog-list-sidebar\"],[8],[9],[0,\"\\n\\t\\t\\t\"],[5,\"module-service-request/list\",[],[[\"@category\",\"@search\",\"@updateRouteSearchTerm\",\"@clearRouteCategory\",\"@sliderView\",\"@wormholeCategoryContTo\"],[null,[22,\"searchTerm\"],null,null,false,\"catalog-list-sidebar\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                assert.ok(_list.default.search.textBoxVisible, 'Search text box is visible');
                assert.ok(_list.default.search.clearBtnVisible, 'Clear search term is visible');
                assert.equal(_list.default.search.value, searchTerm, 'Search term is set in the textbox');

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render catalog list active category name as heading', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                Ember.set(this, 'categoryId', '3');
                _context3.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                				<div id="catalog-list-sidebar"></div>
                				<ModuleServiceRequest::List
                				@category={{categoryId}}
                				@search={{null}}
                				@updateRouteSearchTerm={{null}} 
                				@clearRouteCategory={{null}}
                				@sliderView={{false}} 
                				@wormholeCategoryContTo="catalog-list-sidebar"/>
                */
                {
                  id: "mTCtZaur",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\\t\"],[7,\"div\",true],[10,\"id\",\"catalog-list-sidebar\"],[8],[9],[0,\"\\n\\t\\t\\t\\t\"],[5,\"module-service-request/list\",[],[[\"@category\",\"@search\",\"@updateRouteSearchTerm\",\"@clearRouteCategory\",\"@sliderView\",\"@wormholeCategoryContTo\"],[[22,\"categoryId\"],null,null,null,false,\"catalog-list-sidebar\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.equal(_list.default.category.title, 'HR Management', 'Active category name is set as heading');

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render most popular when passed as heading', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<div id="catalog-list-sidebar"></div>
                			<ModuleServiceRequest::List
                				@category={{null}}
                				@showTitle={{true}}
                				@search={{null}}
                				@updateRouteSearchTerm={{null}} 
                				@clearRouteCategory={{null}}
                				@sliderView={{false}} 
                				@wormholeCategoryContTo="catalog-list-sidebar"/>
                */
                {
                  id: "ZplK5VuQ",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\"],[7,\"div\",true],[10,\"id\",\"catalog-list-sidebar\"],[8],[9],[0,\"\\n\\t\\t\\t\"],[5,\"module-service-request/list\",[],[[\"@category\",\"@showTitle\",\"@search\",\"@updateRouteSearchTerm\",\"@clearRouteCategory\",\"@sliderView\",\"@wormholeCategoryContTo\"],[null,true,null,null,null,false,\"catalog-list-sidebar\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.ok(_list.default.category.mostPopularTitleVisible, 'Most Popular Title Visible');
                assert.equal(_list.default.item.mostPopularListCount, mostPopularCount, 'Most Popular Items count match');

              case 4:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should not render most popular title and list when not available', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                   <ModuleServiceRequest::List::ItemList
                				@title       	= {{t "fs.request_items.catalog_list.most_popular"}}
                				@showTitle		=	{{true}}
                				@titleId     	= "most-popular"
                				@data-test-id	= "most-popular-list" />
                */
                {
                  id: "2WlAMRLV",
                  block: "{\"symbols\":[],\"statements\":[[0,\" \"],[5,\"module-service-request/list/item-list\",[],[[\"@title\",\"@showTitle\",\"@titleId\",\"@data-test-id\"],[[28,\"t\",[\"fs.request_items.catalog_list.most_popular\"],null],true,\"most-popular\",\"most-popular-list\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.notOk(_list.default.category.mostPopularTitleVisible, 'Most Popular Title Hidden');
                assert.equal(_list.default.item.mostPopularListCount, 0, 'Most Popular Items count match');

              case 4:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render full empty state on no categories available', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                this.server.schema.serviceCategories.all().destroy();
                _context6.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<div id="catalog-list-sidebar"></div>
                			<ModuleServiceRequest::List
                				@category={{null}}
                				@showTitle={{true}}
                				@search={{null}}
                				@updateRouteSearchTerm={{null}} 
                				@clearRouteCategory={{null}}
                				@sliderView={{false}} 
                				@wormholeCategoryContTo="catalog-list-sidebar"/>
                */
                {
                  id: "ZplK5VuQ",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\"],[7,\"div\",true],[10,\"id\",\"catalog-list-sidebar\"],[8],[9],[0,\"\\n\\t\\t\\t\"],[5,\"module-service-request/list\",[],[[\"@category\",\"@showTitle\",\"@search\",\"@updateRouteSearchTerm\",\"@clearRouteCategory\",\"@sliderView\",\"@wormholeCategoryContTo\"],[null,true,null,null,null,false,\"catalog-list-sidebar\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.ok(_list.default.isFullEmptyStateVisible, 'Empty State is visible');

              case 4:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-service-request/list/item-list/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-current-account", "freshservice/tests/pages/components/module-service-request/list"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _stubCurrentAccount, _list) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var TEST_ACCOUNT_STUB = {
    currencySymbol: '$'
  };
  var MOCK_ITEMS = {
    service_items: [{
      id: 1,
      name: 'Sample Service Item 1',
      delivery_time: 24,
      delivery_time_visibility: true,
      cost: 100,
      cost_visibility: true
    }, {
      id: 2,
      name: 'Sample Service Item 2',
      delivery_time: null,
      delivery_time_visibility: true,
      cost: null,
      cost_visibility: true
    }, {
      id: 3,
      name: 'Sample Service Item 3',
      delivery_time: 24,
      delivery_time_visibility: false,
      cost: 100,
      cost_visibility: false
    }]
  };
  (0, _qunit.module)('Integration | Component | module-service-request/catalog-list/items-list', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              Ember.set(this, 'store', this.owner.lookup('service:store'));
              this.store.pushPayload(MOCK_ITEMS);
              Ember.set(this, 'items', this.store.peekAll('service-item'));

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    hooks.after(function () {
      this.owner.destroy('service:store');
    });
    (0, _qunit.test)('Should render all the items passed', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleServiceRequest::List::ItemList @items={{items}} />
                */
                {
                  id: "z6VlPqfE",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-service-request/list/item-list\",[],[[\"@items\"],[[22,\"items\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.equal(_list.default.item.count, MOCK_ITEMS.service_items.length, 'Number of items matches');
                assert.equal(_list.default.item.itemName, MOCK_ITEMS.service_items[0].name, 'Item name displayed');

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should show and hide delivery info', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var intl;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                intl = this.owner.lookup('service:intl');
                _context3.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleServiceRequest::List::ItemList @items={{items}} />
                */
                {
                  id: "z6VlPqfE",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-service-request/list/item-list\",[],[[\"@items\"],[[22,\"items\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.equal(_list.default.item.deliveryText1, "24 ".concat(intl.t('fs.common.date.hours_short')), 'Delivery Info is displayed');
                assert.equal(_list.default.item.deliveryText2, '', 'Delivery Info is not displayed');
                assert.equal(_list.default.item.deliveryText3, '', 'Delivery Info is not displayed');
                assert.equal(_list.default.item.emptyHyphenText1, '', 'Hyphen is not displayed');

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should show and hide cost info', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var currentAccount;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                currentAccount = this.owner.lookup('service:current-account');
                (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT_STUB);
                _context4.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<ModuleServiceRequest::List::ItemList
                				@items   = {{items}} />
                */
                {
                  id: "baIXGEOv",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\"],[5,\"module-service-request/list/item-list\",[],[[\"@items\"],[[22,\"items\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                assert.equal(_list.default.item.costText1, "".concat(currentAccount.currencySymbol, " 100"), 'Cost Info is displayed');
                assert.equal(_list.default.item.costText2, '', 'Cost Info is not displayed');
                assert.equal(_list.default.item.costText3, '', 'Cost Info is not displayed');
                assert.equal(_list.default.item.emptyHyphenText1, '', 'Hyphen is not displayed');

              case 8:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should show empty hiphen when cost and delivery info not available', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleServiceRequest::List::ItemList @items={{items}} />
                */
                {
                  id: "z6VlPqfE",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-service-request/list/item-list\",[],[[\"@items\"],[[22,\"items\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.equal(_list.default.item.attributesText, '--', 'Empty hypen is displayed');

              case 3:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render title of the list', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var titleText, titleId;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                titleText = 'Item list Heading';
                titleId = 'item-title-id';
                Ember.set(this, 'titleText', titleText);
                Ember.set(this, 'titleId', titleId);
                _context6.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<ModuleServiceRequest::List::ItemList
                				@items   		= {{items}}
                				@showTitle	=	{{true}}
                				@title   		= {{titleText}}
                				@titleId 		= {{titleId}} />
                */
                {
                  id: "wpw8Rwth",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\"],[5,\"module-service-request/list/item-list\",[],[[\"@items\",\"@showTitle\",\"@title\",\"@titleId\"],[[22,\"items\"],true,[22,\"titleText\"],[22,\"titleId\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                assert.ok(_list.default.item.isTitleIdAvailable, 'Title ID rendered');
                assert.equal(_list.default.item.titleText, titleText, 'Title text rendered');
                assert.equal(_list.default.item.listLabel, titleId, 'List label matches');

              case 9:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render empty state if no items present and block available', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var emptyText;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                emptyText = 'empty state content';
                Ember.set(this, 'emptyText', emptyText);
                Ember.set(this, 'items', []);
                _context7.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<ModuleServiceRequest::List::ItemList @items={{items}} as |list|>
                				<list.emptyState>{{emptyText}}</list.emptyState>
                			</ModuleServiceRequest::List::ItemList>
                */
                {
                  id: "aPfTJ73i",
                  block: "{\"symbols\":[\"list\"],\"statements\":[[0,\"\\n\\t\\t\\t\"],[5,\"module-service-request/list/item-list\",[],[[\"@items\"],[[22,\"items\"]]],{\"statements\":[[0,\"\\n\\t\\t\\t\\t\"],[6,[23,1,[\"emptyState\"]],[],[[],[]],{\"statements\":[[1,[22,\"emptyText\"],false]],\"parameters\":[]}],[0,\"\\n\\t\\t\\t\"]],\"parameters\":[1]}]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                assert.ok(_list.default.item.emptyStateVisible, 'Empty state is visible');
                assert.equal(_list.default.item.emptyStateText, emptyText, 'Empty state text matches');

              case 7:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x6) {
        return _ref8.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-solutions/article-approvals/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/spy-flash-message", "freshservice/tests/pages/components/module-solutions/common"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _sinonContext, _spyFlashMessage, _common) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-solutions/article-approvals', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.server.loadFixtures('articles');
              this.server.loadFixtures('approvals');
              this.server.loadFixtures('users');
              this.owner.lookup('router:main').setupRouter();
              Ember.set(this, 'store', this.owner.lookup('service:store'));

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('Should render article approvals and successfully approve article', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var successFlash, articles;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                successFlash = (0, _spyFlashMessage.default)('success');
                _context2.next = 3;
                return this.store.query('article', {
                  filter: 'assigned_approvals',
                  page: 1
                });

              case 3:
                articles = _context2.sent;
                Ember.setProperties(this, {
                  model: articles,
                  onPageChange: function onPageChange() {}
                });
                _context2.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleApprovals @articles={{model}} @class="awaiting-approvals" @onPageChange={{action onPageChange}} />
                */
                {
                  id: "pvWYglBC",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-approvals\",[],[[\"@articles\",\"@class\",\"@onPageChange\"],[[22,\"model\"],\"awaiting-approvals\",[28,\"action\",[[23,0,[]],[24,[\"onPageChange\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                // each article should contain 1 approval
                assert.equal(_common.default.approvals.assignedCount, articles.length);
                _context2.next = 10;
                return _common.default.approvals.list.objectAt(1).approve();

              case 10:
                assert.ok(successFlash.calledOnce);

              case 11:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should throw error for already approved approval', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var dangerFlash, articles;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                dangerFlash = (0, _spyFlashMessage.default)('danger');
                _context3.next = 3;
                return this.store.query('article', {
                  filter: 'assigned_approvals',
                  page: 1
                });

              case 3:
                articles = _context3.sent;
                Ember.setProperties(this, {
                  model: articles,
                  onPageChange: function onPageChange() {}
                });
                _context3.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleApprovals @articles={{model}} @class="awaiting-approvals" @onPageChange={{action onPageChange}} />
                */
                {
                  id: "pvWYglBC",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-approvals\",[],[[\"@articles\",\"@class\",\"@onPageChange\"],[[22,\"model\"],\"awaiting-approvals\",[28,\"action\",[[23,0,[]],[24,[\"onPageChange\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context3.next = 9;
                return _common.default.approvals.list.objectAt(0).approve();

              case 9:
                assert.ok(dangerFlash.calledOnce);

              case 10:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-solutions/article-form/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/stub-current-account", "freshservice/tests/lib/spy-flash-message", "freshservice/tests/pages/components/utils/form-fields", "freshservice/tests/pages/components/module-solutions/article"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _sinonContext, _stubCurrentAccount, _spyFlashMessage, _formFields, _article) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var MOCK_DATA = {
    articleDefaults: {
      articleType: '1',
      status: '1'
    },
    newArticle: {
      title: 'Test Article',
      description: 'Test Description',
      author: 'Support',
      tags: 'Tag',
      keywords: 'Keywords',
      code: '<h1>hello world</h1>',
      attachment: 'new attachment'
    },
    editArticle: {
      title: 'updated article'
    },
    errorArticle: {
      title: 'malware',
      description: 'malware'
    },
    invalidArticle: {
      title: 'invalid folder',
      description: 'invalid folder',
      categoryId: '2'
    }
  };
  (0, _qunit.module)('Integration | Component | module-solutions/article-form', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.server.loadFixtures('categories');
              this.server.loadFixtures('folders');
              this.server.loadFixtures('agents');
              this.owner.lookup('router:main').setupRouter();
              this.owner.lookup('service:moment').setLocale('en');
              this.set('store', this.owner.lookup('service:store'));
              _context.t0 = this;
              _context.next = 9;
              return this.store.createRecord('article', MOCK_DATA.articleDefaults);

            case 9:
              _context.t1 = _context.sent;
              _context.t2 = {
                article: _context.t1
              };

              _context.t0.set.call(_context.t0, 'model', _context.t2);

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('Should render new article form with fields', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleForm @model={{model}} />
                */
                {
                  id: "BfDaFTED",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-form\",[],[[\"@model\"],[[22,\"model\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.ok(_article.default.newForm.exists);
                assert.ok(_article.default.newForm.hasFieldTitle);
                assert.ok(_article.default.newForm.hasFieldDescription);
                assert.ok(_article.default.newForm.hasFieldCategoryId);
                assert.ok(_article.default.newForm.hasFieldFolderId);
                assert.ok(_article.default.newForm.hasFieldType);
                assert.ok(_article.default.newForm.hasFieldAuthor);
                assert.ok(_article.default.newForm.hasFieldReviewDate);
                assert.ok(_article.default.newForm.hasFieldTags);
                assert.ok(_article.default.newForm.hasFieldKeywords);
                assert.ok(_article.default.newForm.hasFieldAttachments);

              case 13:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render validation errors on submit without data', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleForm @model={{model}} />
                */
                {
                  id: "BfDaFTED",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-form\",[],[[\"@model\"],[[22,\"model\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context3.next = 4;
                return _article.default.newForm.save();

              case 4:
                assert.ok(_article.default.newForm.hasErrorTitle);
                assert.ok(_article.default.newForm.hasErrorDescription);
                assert.ok(_article.default.newForm.hasErrorCategoryId);
                assert.ok(_article.default.newForm.hasErrorFolderId);

              case 8:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should save article form with fields', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var moment, nextDay, successFlash;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                (0, _stubCurrentAccount.stubCurrentAccount)();
                moment = this.owner.lookup('service:moment');
                nextDay = moment.moment(new Date()).add(1, "days").format("YYYY-MM-DD");
                successFlash = (0, _spyFlashMessage.default)('success');
                _context4.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleForm @model={{model}} />
                */
                {
                  id: "BfDaFTED",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-form\",[],[[\"@model\"],[[22,\"model\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                _context4.next = 8;
                return _article.default.newForm.fillTitle(MOCK_DATA.newArticle.title);

              case 8:
                _context4.next = 10;
                return _article.default.newForm.fillDescription(MOCK_DATA.newArticle.description);

              case 10:
                _context4.next = 12;
                return _formFields.default.selectSingle("categoryId", '0');

              case 12:
                _context4.next = 14;
                return _formFields.default.selectSingle("folderId", '0');

              case 14:
                _context4.next = 16;
                return _formFields.default.calendarSelectSingleDate("reviewDate", nextDay);

              case 16:
                _context4.next = 18;
                return _formFields.default.autocompleteSelectMultiple("author", MOCK_DATA.newArticle.author, '0');

              case 18:
                _context4.next = 20;
                return _formFields.default.autocompleteSelectMultiple("tags", MOCK_DATA.newArticle.tags, '0');

              case 20:
                _context4.next = 22;
                return _formFields.default.autocompleteSelectMultiple("keywords", MOCK_DATA.newArticle.keywords, '0');

              case 22:
                _context4.next = 24;
                return _article.default.newForm.codeInsert.clickInsertCode();

              case 24:
                assert.ok(_article.default.newForm.codeInsert.modalExists);
                _context4.next = 27;
                return _article.default.newForm.codeInsert.fillCode(MOCK_DATA.newArticle.code).submit();

              case 27:
                _context4.next = 29;
                return _article.default.newForm.codeInsert.viewCode();

              case 29:
                assert.ok(_article.default.newForm.codeInsert.viewCodeActive);
                _context4.next = 32;
                return _article.default.newForm.codeInsert.viewCode();

              case 32:
                assert.equal(_article.default.newForm.codeInsert.insertedCodeCount, 1);
                _context4.next = 35;
                return _article.default.newForm.save();

              case 35:
                assert.ok(successFlash.calledOnce);

              case 36:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should throw 500 error', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var dangerFlashSpy;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                dangerFlashSpy = (0, _spyFlashMessage.default)('danger');
                _context5.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleForm @model={{model}} />
                */
                {
                  id: "BfDaFTED",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-form\",[],[[\"@model\"],[[22,\"model\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context5.next = 5;
                return _article.default.newForm.fillTitle(MOCK_DATA.errorArticle.title);

              case 5:
                _context5.next = 7;
                return _article.default.newForm.fillDescription(MOCK_DATA.errorArticle.description);

              case 7:
                _context5.next = 9;
                return _formFields.default.selectSingle('categoryId', '0');

              case 9:
                _context5.next = 11;
                return _formFields.default.selectSingle('folderId', '0');

              case 11:
                _context5.next = 13;
                return _article.default.newForm.save();

              case 13:
                assert.ok(dangerFlashSpy.calledOnce);

              case 14:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should throw 500 error for invalid folder', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var warningFlashSpy;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                warningFlashSpy = (0, _spyFlashMessage.default)('warning');
                _context6.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleForm @model={{model}} />
                */
                {
                  id: "BfDaFTED",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-form\",[],[[\"@model\"],[[22,\"model\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context6.next = 5;
                return _article.default.newForm.fillTitle(MOCK_DATA.invalidArticle.title);

              case 5:
                _context6.next = 7;
                return _article.default.newForm.fillDescription(MOCK_DATA.invalidArticle.description);

              case 7:
                _context6.next = 9;
                return _formFields.default.selectSingle('categoryId', MOCK_DATA.invalidArticle.categoryId);

              case 9:
                _context6.next = 11;
                return _formFields.default.selectSingle('folderId', '0');

              case 11:
                _context6.next = 13;
                return _article.default.newForm.save();

              case 13:
                assert.ok(warningFlashSpy.calledOnce);

              case 14:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should attach a file and save article with attachment', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var successFlash;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                (0, _stubCurrentAccount.stubCurrentAccount)();
                successFlash = (0, _spyFlashMessage.default)('success');
                _context7.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleForm @model={{model}} />
                */
                {
                  id: "BfDaFTED",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-form\",[],[[\"@model\"],[[22,\"model\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context7.next = 6;
                return _article.default.newForm.fillTitle(MOCK_DATA.newArticle.title);

              case 6:
                _context7.next = 8;
                return _article.default.newForm.fillDescription(MOCK_DATA.newArticle.description);

              case 8:
                _context7.next = 10;
                return _formFields.default.selectSingle('categoryId', '0');

              case 10:
                _context7.next = 12;
                return _formFields.default.selectSingle('folderId', '0');

              case 12:
                _context7.next = 14;
                return _article.default.newForm.addAttachment(MOCK_DATA.newArticle.attachment);

              case 14:
                _context7.next = 16;
                return _article.default.newForm.addAttachment(MOCK_DATA.newArticle.attachment);

              case 16:
                _context7.next = 18;
                return _article.default.newForm.removeAttachment.objectAt(1).deleteFile();

              case 18:
                _context7.next = 20;
                return _article.default.newForm.save();

              case 20:
                assert.ok(successFlash.calledOnce);
                assert.equal(_article.default.showPage.hasAttachments, 1);

              case 22:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      return function (_x6) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should load an article and update edited article', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var successFlash, article, folder;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                (0, _stubCurrentAccount.stubCurrentAccount)();
                this.server.loadFixtures('articles');
                successFlash = (0, _spyFlashMessage.default)('success');
                _context8.next = 5;
                return this.store.findRecord('article', 1);

              case 5:
                article = _context8.sent;
                _context8.next = 8;
                return this.store.findRecord('folder', 1);

              case 8:
                folder = _context8.sent;
                Ember.set(this, 'model', {
                  article: article,
                  folder: folder
                });
                _context8.next = 12;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleForm @editAction={{true}} @model={{model}} />
                */
                {
                  id: "4pTqpLrP",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-form\",[],[[\"@editAction\",\"@model\"],[true,[22,\"model\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 12:
                _context8.next = 14;
                return _article.default.newForm.fillTitle(MOCK_DATA.editArticle.title).save();

              case 14:
                assert.ok(successFlash.calledOnce);

              case 15:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x7) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should save changes to the code from code view', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        var successFlash;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                (0, _stubCurrentAccount.stubCurrentAccount)();
                successFlash = (0, _spyFlashMessage.default)('success');
                _context9.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleForm @model={{model}} />
                */
                {
                  id: "BfDaFTED",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-form\",[],[[\"@model\"],[[22,\"model\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context9.next = 6;
                return _article.default.newForm.fillTitle(MOCK_DATA.newArticle.title);

              case 6:
                _context9.next = 8;
                return _formFields.default.selectSingle('categoryId', '0');

              case 8:
                _context9.next = 10;
                return _formFields.default.selectSingle('folderId', '0');

              case 10:
                _context9.next = 12;
                return _article.default.newForm.codeView.viewCode();

              case 12:
                _context9.next = 14;
                return _article.default.newForm.codeView.fillCode(MOCK_DATA.newArticle.code);

              case 14:
                _context9.next = 16;
                return _article.default.newForm.save();

              case 16:
                assert.ok(successFlash.calledOnce);

              case 17:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9);
      }));

      return function (_x8) {
        return _ref10.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-solutions/article-from-external-url/form/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/spy-flash-message", "freshservice/tests/pages/components/utils/form-fields", "freshservice/tests/pages/components/module-solutions/article"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _sinonContext, _spyFlashMessage, _formFields, _article) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var MOCK_DATA = {
    newArticle: {
      title: 'External',
      url: 'https://www.google.com/',
      author: 'Support',
      tags: 'External',
      keywords: 'External'
    },
    errorArticle: {
      title: 'malware',
      url: 'http://www.malware.com'
    },
    invalidArticle: {
      title: 'invalid folder',
      url: 'http://www.invalid.com',
      categoryId: '2'
    },
    updateArticle: {
      title: 'Update article'
    }
  };
  (0, _qunit.module)('Integration | Component | module-solutions/article-from-external-url/form', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.server.loadFixtures('categories');
              this.server.loadFixtures('folders');
              this.owner.lookup('router:main').setupRouter();

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('Should render new external article form with fields', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                Ember.setProperties(this, {
                  newArticleFromExternalURLModal: true,
                  updateModal: function updateModal() {
                    return Ember.set(_this, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleFromExternalUrl::Form @toggleModal={{newArticleFromExternalURLModal}} @newArticle={{true}} @updateModal={{action updateModal}} />
                */
                {
                  id: "srrNFwss",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-from-external-url/form\",[],[[\"@toggleModal\",\"@newArticle\",\"@updateModal\"],[[22,\"newArticleFromExternalURLModal\"],true,[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.ok(_article.default.externalNewForm.exists);
                assert.ok(_article.default.externalNewForm.hasFieldTitle);
                assert.ok(_article.default.externalNewForm.hasFieldUrl);
                assert.ok(_article.default.externalNewForm.hasFieldCategoryId);
                assert.ok(_article.default.externalNewForm.hasFieldFolderId);
                assert.ok(_article.default.externalNewForm.hasFieldAuthor);
                assert.ok(_article.default.externalNewForm.hasFieldTags);
                assert.ok(_article.default.externalNewForm.hasFieldKeywords);

              case 11:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render errors when submitted without data', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                Ember.setProperties(this, {
                  newArticleFromExternalURLModal: true,
                  updateModal: function updateModal() {
                    return Ember.set(_this2, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context3.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleFromExternalUrl::Form @toggleModal={{newArticleFromExternalURLModal}} @newArticle={{true}} @updateModal={{action updateModal}} />
                */
                {
                  id: "srrNFwss",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-from-external-url/form\",[],[[\"@toggleModal\",\"@newArticle\",\"@updateModal\"],[[22,\"newArticleFromExternalURLModal\"],true,[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context3.next = 5;
                return _article.default.externalNewForm.save();

              case 5:
                assert.ok(_article.default.externalNewForm.hasErrorTitle);
                assert.ok(_article.default.externalNewForm.hasErrorUrl);
                assert.ok(_article.default.externalNewForm.hasErrorCategoryId);
                assert.ok(_article.default.externalNewForm.hasErrorFolderId);

              case 9:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should close modal on cancel', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var _this3 = this;

        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                Ember.setProperties(this, {
                  newArticleFromExternalURLModal: true,
                  updateModal: function updateModal() {
                    return Ember.set(_this3, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context4.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleFromExternalUrl::Form @toggleModal={{newArticleFromExternalURLModal}} @newArticle={{true}} @updateModal={{action updateModal}} />
                */
                {
                  id: "srrNFwss",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-from-external-url/form\",[],[[\"@toggleModal\",\"@newArticle\",\"@updateModal\"],[[22,\"newArticleFromExternalURLModal\"],true,[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context4.next = 5;
                return _article.default.externalNewForm.cancel();

              case 5:
                assert.notOk(_article.default.externalNewForm.exists);

              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should save new external article form with fields', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var _this4 = this;

        var successFlash;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                successFlash = (0, _spyFlashMessage.default)('success');
                Ember.setProperties(this, {
                  newArticleFromExternalURLModal: true,
                  updateModal: function updateModal() {
                    return Ember.set(_this4, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context5.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleFromExternalUrl::Form @toggleModal={{newArticleFromExternalURLModal}} @newArticle={{true}} @updateModal={{action updateModal}} />
                */
                {
                  id: "srrNFwss",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-from-external-url/form\",[],[[\"@toggleModal\",\"@newArticle\",\"@updateModal\"],[[22,\"newArticleFromExternalURLModal\"],true,[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context5.next = 6;
                return _article.default.externalNewForm.fillTitle(MOCK_DATA.newArticle.title).fillUrl(MOCK_DATA.newArticle.url);

              case 6:
                _context5.next = 8;
                return _formFields.default.selectSingle('categoryId', '0');

              case 8:
                _context5.next = 10;
                return _formFields.default.selectSingle('folderId', '0');

              case 10:
                _context5.next = 12;
                return _formFields.default.autocompleteSelectMultiple('author', MOCK_DATA.newArticle.author, '0');

              case 12:
                _context5.next = 14;
                return _formFields.default.autocompleteSelectMultiple('tags', MOCK_DATA.newArticle.tags, '0');

              case 14:
                _context5.next = 16;
                return _formFields.default.autocompleteSelectMultiple('keywords', MOCK_DATA.newArticle.keywords, '0');

              case 16:
                _context5.next = 18;
                return _article.default.externalNewForm.save();

              case 18:
                assert.ok(successFlash.calledOnce);

              case 19:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should throw 500', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var _this5 = this;

        var dangerFlash;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                dangerFlash = (0, _spyFlashMessage.default)('danger');
                Ember.setProperties(this, {
                  newArticleFromExternalURLModal: true,
                  updateModal: function updateModal() {
                    return Ember.set(_this5, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context6.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleFromExternalUrl::Form @toggleModal={{newArticleFromExternalURLModal}} @newArticle={{true}} @updateModal={{action updateModal}} />
                */
                {
                  id: "srrNFwss",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-from-external-url/form\",[],[[\"@toggleModal\",\"@newArticle\",\"@updateModal\"],[[22,\"newArticleFromExternalURLModal\"],true,[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context6.next = 6;
                return _article.default.externalNewForm.fillTitle(MOCK_DATA.errorArticle.title).fillUrl(MOCK_DATA.errorArticle.url);

              case 6:
                _context6.next = 8;
                return _formFields.default.selectSingle('categoryId', '0');

              case 8:
                _context6.next = 10;
                return _formFields.default.selectSingle('folderId', '0');

              case 10:
                _context6.next = 12;
                return _article.default.externalNewForm.save();

              case 12:
                assert.ok(dangerFlash.calledOnce);

              case 13:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should throw 500 for no access folder', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var _this6 = this;

        var dangerFlash;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                dangerFlash = (0, _spyFlashMessage.default)('danger');
                Ember.setProperties(this, {
                  newArticleFromExternalURLModal: true,
                  updateModal: function updateModal() {
                    return Ember.set(_this6, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context7.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleFromExternalUrl::Form @toggleModal={{newArticleFromExternalURLModal}} @newArticle={{true}} @updateModal={{action updateModal}} />
                */
                {
                  id: "srrNFwss",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-from-external-url/form\",[],[[\"@toggleModal\",\"@newArticle\",\"@updateModal\"],[[22,\"newArticleFromExternalURLModal\"],true,[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context7.next = 6;
                return _article.default.externalNewForm.fillTitle(MOCK_DATA.invalidArticle.title).fillUrl(MOCK_DATA.invalidArticle.url);

              case 6:
                _context7.next = 8;
                return _formFields.default.selectSingle('categoryId', MOCK_DATA.invalidArticle.categoryId);

              case 8:
                _context7.next = 10;
                return _formFields.default.selectSingle('folderId', '0');

              case 10:
                _context7.next = 12;
                return _article.default.externalNewForm.save();

              case 12:
                assert.ok(dangerFlash.calledOnce);

              case 13:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x6) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should load an article and update', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var _this7 = this;

        var successFlash, store, model;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                this.server.loadFixtures('articles');
                successFlash = (0, _spyFlashMessage.default)('success');
                store = this.owner.lookup('service:store');
                _context8.next = 5;
                return store.findRecord('article', 2);

              case 5:
                model = _context8.sent;
                Ember.setProperties(this, {
                  model: model,
                  editShowArticleModal: true,
                  updateModal: function updateModal() {
                    return Ember.set(_this7, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context8.next = 9;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleFromExternalUrl::Form @formModel={{model}} @toggleModal={{editShowArticleModal}} @newArticle={{false}} @updateModal={{action updateModal}} />
                */
                {
                  id: "tSBwW4ih",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-from-external-url/form\",[],[[\"@formModel\",\"@toggleModal\",\"@newArticle\",\"@updateModal\"],[[22,\"model\"],[22,\"editShowArticleModal\"],false,[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 9:
                _context8.next = 11;
                return _article.default.externalNewForm.fillTitle(MOCK_DATA.updateArticle.title).save();

              case 11:
                assert.ok(successFlash.calledOnce);

              case 12:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x7) {
        return _ref9.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-solutions/article-from-external-url/show/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/stub-current-user", "freshservice/tests/pages/components/module-solutions/article"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _sinonContext, _stubCurrentUser, _article) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var PRIVILEGES = {
    scoped_privileges: {
      0: ['view_solutions', 'manage_solutions', 'publish_solution', 'delete_solution'],
      1: [],
      2: [],
      3: []
    },
    privileges: ['view_solutions', 'manage_solutions', 'publish_solution', 'delete_solution']
  };
  (0, _qunit.module)('Integration | Component | module-solutions/article-from-external-url/show', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.server.loadFixtures('articles');
              this.server.loadFixtures('folders');
              this.server.loadFixtures('categories');
              Ember.set(this, 'store', this.owner.lookup('service:store'));

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('Should render new external article show page with data', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var _this = this;

        var model;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.store.findRecord('article', 2);

              case 2:
                model = _context2.sent;
                Ember.setProperties(this, {
                  editShowArticleModal: true,
                  model: model,
                  updateModal: function updateModal() {
                    Ember.set(_this, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context2.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleFromExternalUrl::Show @toggleModal={{editShowArticleModal}} @formModel={{model}} @updateModal={{action updateModal}} />
                */
                {
                  id: "JrbO8hLt",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-from-external-url/show\",[],[[\"@toggleModal\",\"@formModel\",\"@updateModal\"],[[22,\"editShowArticleModal\"],[22,\"model\"],[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                assert.ok(_article.default.externalShowPage.exists);
                assert.equal(_article.default.externalShowPage.titleText, model.title);
                assert.equal(_article.default.externalShowPage.urlText, model.url);
                assert.equal(_article.default.externalShowPage.categoryText, model.category.get('name'));
                assert.equal(_article.default.externalShowPage.folderText, model.folder.get('name'));
                assert.equal(_article.default.externalShowPage.authorText, model.author.name);
                assert.equal(_article.default.externalShowPage.tagsText, model.tags.map(function (tag) {
                  return tag.value;
                }).join(' '));
                assert.equal(_article.default.externalShowPage.keywordsText, model.keywords.map(function (tag) {
                  return tag.value;
                }).join(' '));

              case 14:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render elements for sub actions inside show article', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var _this2 = this;

        var model;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)(PRIVILEGES);
                _context3.next = 3;
                return this.store.findRecord('article', 2);

              case 3:
                model = _context3.sent;
                Ember.setProperties(this, {
                  editShowArticleModal: true,
                  model: model,
                  updateModal: function updateModal() {
                    Ember.set(_this2, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context3.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleFromExternalUrl::Show @toggleModal={{editShowArticleModal}} @formModel={{model}} @updateModal={{action updateModal}} />
                */
                {
                  id: "JrbO8hLt",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-from-external-url/show\",[],[[\"@toggleModal\",\"@formModel\",\"@updateModal\"],[[22,\"editShowArticleModal\"],[22,\"model\"],[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                assert.ok(_article.default.externalShowPage.exists);
                assert.ok(_article.default.externalShowPage.hasExternaLink);
                assert.ok(_article.default.externalShowPage.hasDeleteButton);
                assert.ok(_article.default.externalShowPage.hasEditButton);

              case 11:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-solutions/article-reorder/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/spy-flash-message", "freshservice/tests/pages/components/module-solutions/article"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _sinonContext, _spyFlashMessage, _article) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-solutions/article-reorder', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.server.loadFixtures('articles');
              this.server.loadFixtures('folders');
              Ember.set(this, 'store', this.owner.lookup('service:store'));

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('Should render article reorder component with articles, perform reorder and save reordered positions', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var _this = this;

        var successFlash, folder, indexArticleText;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.server.createList('article', 100, {
                  folder_id: 1,
                  category_id: 2,
                  title: 'Test',
                  description: 'Test'
                });
                successFlash = (0, _spyFlashMessage.default)('success');
                _context2.next = 4;
                return this.store.findRecord('folder', 1);

              case 4:
                folder = _context2.sent;
                Ember.setProperties(this, {
                  reorderModal: true,
                  folder: folder,
                  updateModal: function updateModal() {
                    return Ember.set(_this, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context2.next = 8;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleReorder @toggleModal={{reorderModal}} @folderModel={{folder}} @updateModal={{action updateModal}} />
                */
                {
                  id: "UQxepseA",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-reorder\",[],[[\"@toggleModal\",\"@folderModel\",\"@updateModal\"],[[22,\"reorderModal\"],[22,\"folder\"],[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 8:
                indexArticleText = _article.default.reordering.list.objectAt(0).text;
                _context2.next = 11;
                return _article.default.reordering.lib.sort(0, 3, false);

              case 11:
                assert.equal(_article.default.reordering.lib.items().count, 30);
                assert.notEqual(_article.default.reordering.list.objectAt(0).text, indexArticleText);
                assert.equal(_article.default.reordering.list.objectAt(3).text, indexArticleText);
                _context2.next = 16;
                return _article.default.reordering.submit();

              case 16:
                assert.ok(successFlash.calledOnce);

              case 17:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should load more articles on scroll', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var _this2 = this;

        var folder;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this.server.createList('article', 100, {
                  folder_id: 1,
                  category_id: 2,
                  title: 'Test',
                  description: 'Test'
                });
                _context3.next = 3;
                return this.store.findRecord('folder', 1);

              case 3:
                folder = _context3.sent;
                Ember.setProperties(this, {
                  reorderModal: true,
                  folder: folder,
                  updateModal: function updateModal() {
                    return Ember.set(_this2, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context3.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleReorder @toggleModal={{reorderModal}} @folderModel={{folder}} @updateModal={{action updateModal}} />
                */
                {
                  id: "UQxepseA",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-reorder\",[],[[\"@toggleModal\",\"@folderModel\",\"@updateModal\"],[[22,\"reorderModal\"],[22,\"folder\"],[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context3.next = 9;
                return _article.default.reordering.scrollList();

              case 9:
                _context3.next = 11;
                return (0, _testHelpers.waitUntil)(function () {
                  return _article.default.reordering.listCount === 60;
                }, {
                  timeout: 2000
                });

              case 11:
                assert.equal(_article.default.reordering.listCount, 60);

              case 12:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should throw 500 error when reordering', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var _this3 = this;

        var dangerFlash, folder;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                dangerFlash = (0, _spyFlashMessage.default)('danger');
                _context4.next = 3;
                return this.store.findRecord('folder', 2);

              case 3:
                folder = _context4.sent;
                Ember.setProperties(this, {
                  reorderModal: true,
                  folder: folder,
                  updateModal: function updateModal() {
                    return Ember.set(_this3, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context4.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleReorder @toggleModal={{reorderModal}} @folderModel={{folder}} @updateModal={{action updateModal}} />
                */
                {
                  id: "UQxepseA",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-reorder\",[],[[\"@toggleModal\",\"@folderModel\",\"@updateModal\"],[[22,\"reorderModal\"],[22,\"folder\"],[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context4.next = 9;
                return _article.default.reordering.lib.sort(0, 1, false);

              case 9:
                _context4.next = 11;
                return _article.default.reordering.submit();

              case 11:
                assert.ok(dangerFlash.calledOnce);

              case 12:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-solutions/article-search/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/pages/components/module-solutions/common"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _common) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var MOCK_DATA = {
    placeholder: 'Search Articles',
    validSearch: 'Test Article',
    invalidSearch: 'Article Not Found'
  };
  (0, _qunit.module)('Integration | Component | module-solutions/article-search', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.server.loadFixtures('articles');
              this.server.loadFixtures('categories');
              this.server.loadFixtures('folders');
              Ember.set(this, 'store', this.owner.lookup('service:store'));

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('Should render article search and perform various functionalities on the component', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var _this = this;

        var category;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.store.findRecord('category', 2);

              case 2:
                category = _context2.sent;
                Ember.setProperties(this, {
                  model: {
                    category: category
                  },
                  searchText: MOCK_DATA.placeholder,
                  resetSearchTextFn: function resetSearchTextFn() {
                    return Ember.set(_this, 'searchText', '');
                  }
                });
                _context2.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleSearch @model={{model}} @searchText={{searchText}} @resetSearchTextFn={{action resetSearchTextFn}} />
                */
                {
                  id: "/fZZfnty",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-search\",[],[[\"@model\",\"@searchText\",\"@resetSearchTextFn\"],[[22,\"model\"],[22,\"searchText\"],[28,\"action\",[[23,0,[]],[24,[\"resetSearchTextFn\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                _context2.next = 8;
                return _common.default.table.search.articles(MOCK_DATA.validSearch);

              case 8:
                _context2.next = 10;
                return (0, _testHelpers.waitFor)('.search-results');

              case 10:
                assert.ok(_common.default.table.search.resultsVisible);
                assert.equal(_common.default.table.search.resultsCount, 1);
                _context2.next = 14;
                return _common.default.table.search.articles('');

              case 14:
                assert.notOk(_common.default.table.search.resultsVisible);
                _context2.next = 17;
                return _common.default.table.search.articles(MOCK_DATA.validSearch);

              case 17:
                _context2.next = 19;
                return _common.default.table.search.pressEscape();

              case 19:
                assert.notOk(_common.default.table.search.resultsVisible);
                _context2.next = 22;
                return _common.default.table.search.articles(MOCK_DATA.validSearch);

              case 22:
                _context2.next = 24;
                return _common.default.table.search.close();

              case 24:
                assert.notOk(_common.default.table.search.resultsVisible);
                _context2.next = 27;
                return _common.default.table.search.articles(MOCK_DATA.invalidSearch);

              case 27:
                assert.equal(_common.default.table.search.noResults, 2);

              case 28:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-solutions/article-show/article-analytics/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/stub-current-account", "freshservice/tests/lib/spy-flash-message", "freshservice/tests/pages/components/module-solutions/article"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _sinonContext, _stubCurrentUser, _stubCurrentAccount, _spyFlashMessage, _article) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-solutions/article-show/article-analytics', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.server.loadFixtures('articles');
              Ember.set(this, 'store', this.owner.lookup('service:store'));

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    hooks.afterEach(function () {
      this.owner.destroy('service:current-user');
    });
    (0, _qunit.test)('Should render the article analytics and article analytics does not exist', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)(); // do findRecord after stubbing current user, otherwise replaces stubbed user with actual current user

                _context2.t0 = Ember;
                _context2.t1 = this;
                _context2.next = 5;
                return this.store.findRecord('article', 1);

              case 5:
                _context2.t2 = _context2.sent;

                _context2.t0.set.call(_context2.t0, _context2.t1, 'model', _context2.t2);

                _context2.next = 9;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleShow::ArticleAnalytics @model={{model}} />
                */
                {
                  id: "2N8012A6",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-show/article-analytics\",[],[[\"@model\"],[[22,\"model\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 9:
                _context2.next = 11;
                return _article.default.showPage.openAccordion();

              case 11:
                assert.equal(_article.default.analytics.propertiesCount, 4);
                assert.notOk(_article.default.analytics.resetButtonExists);

              case 13:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should reset article analytics', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var successFlash;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)({
                  scoped_privileges: {
                    0: ['delete_solution'],
                    1: [],
                    2: [],
                    3: []
                  }
                }); // do findRecord after stubbing current user, otherwise replaces stubbed user with actual current user

                _context3.t0 = Ember;
                _context3.t1 = this;
                _context3.next = 5;
                return this.store.findRecord('article', 1);

              case 5:
                _context3.t2 = _context3.sent;

                _context3.t0.set.call(_context3.t0, _context3.t1, 'model', _context3.t2);

                successFlash = (0, _spyFlashMessage.default)('success');
                _context3.next = 10;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleShow::ArticleAnalytics @model={{model}} />
                */
                {
                  id: "2N8012A6",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-show/article-analytics\",[],[[\"@model\"],[[22,\"model\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 10:
                _context3.next = 12;
                return _article.default.showPage.openAccordion();

              case 12:
                assert.ok(_article.default.analytics.resetButtonExists);
                _context3.next = 15;
                return _article.default.analytics.clickReset();

              case 15:
                assert.ok(_article.default.analytics.resetModalExists);
                _context3.next = 18;
                return _article.default.analytics.confirmReset();

              case 18:
                assert.ok(successFlash.calledOnce);

              case 19:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should show reset article analytics button with access control enabled', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var article;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                (0, _stubCurrentAccount.stubCurrentAccount)();
                (0, _stubCurrentUser.stubCurrentUser)({
                  scoped_privileges: {
                    0: ['delete_solution'],
                    1: [],
                    2: [],
                    3: []
                  }
                });
                _context4.next = 4;
                return this.store.findRecord('article', 1);

              case 4:
                article = _context4.sent;
                Ember.set(this, 'model', article);
                _context4.next = 8;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleShow::ArticleAnalytics @model={{model}} />
                */
                {
                  id: "2N8012A6",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-show/article-analytics\",[],[[\"@model\"],[[22,\"model\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 8:
                assert.ok(_article.default.analytics.resetButtonExists);

              case 9:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-solutions/article-show/article-approvers/article-approver/component-test", ["qunit", "@ember/test-helpers", "ember-qunit"], function (_qunit, _testHelpers, _emberQunit) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var MOCK_DATA = {
    requested: {
      memberName: "Test Agent",
      approvalStatus: {
        id: 0,
        name: "requested"
      }
    },
    rejected: {
      memberName: "Test Agent",
      approvalStatus: {
        id: 2,
        name: "rejected"
      }
    },
    approved: {
      memberName: "Test Agent",
      approvalStatus: {
        id: 1,
        name: "approved"
      }
    },
    peer_responded: {
      memberName: "Test Agent",
      approvalStatus: {
        id: 5,
        name: "peer_responded"
      }
    }
  };
  (0, _qunit.module)('Integration | Component | module-solutions/article-show/article-approvers/article-approver', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('Should render the requested approver state', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.set('approver', MOCK_DATA.requested);
                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleShow::ArticleApprovers::ArticleApprover @approver={{approver}}/>
                */
                {
                  id: "E3wHmIGJ",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-show/article-approvers/article-approver\",[],[[\"@approver\"],[[22,\"approver\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.dom('.article-approval-status').hasAttribute('data-approval-status', 'requested');

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render the rejected approver state', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.set('approver', MOCK_DATA.rejected);
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleShow::ArticleApprovers::ArticleApprover @approver={{approver}}/>
                */
                {
                  id: "E3wHmIGJ",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-show/article-approvers/article-approver\",[],[[\"@approver\"],[[22,\"approver\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.dom('.article-approval-status').hasAttribute('data-approval-status', 'rejected');

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render the approved approver state', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this.set('approver', MOCK_DATA.approved);
                _context3.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleShow::ArticleApprovers::ArticleApprover @approver={{approver}}/>
                */
                {
                  id: "E3wHmIGJ",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-show/article-approvers/article-approver\",[],[[\"@approver\"],[[22,\"approver\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.dom('.article-approval-status').hasAttribute('data-approval-status', 'approved');

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render the peer_responded approver state', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                this.set('approver', MOCK_DATA.peer_responded);
                _context4.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleShow::ArticleApprovers::ArticleApprover @approver={{approver}}/>
                */
                {
                  id: "E3wHmIGJ",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-show/article-approvers/article-approver\",[],[[\"@approver\"],[[22,\"approver\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.dom('.article-approval-status').hasAttribute('data-approval-status', 'peer_responded');

              case 4:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-solutions/article-show/article-approvers/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/pages/components/module-solutions/article"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _article) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var MOCK_DATA = {
    comments: 'Rejected content'
  };
  (0, _qunit.module)('Integration | Component | module-solutions/article-show/article-approvers', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.server.loadFixtures('articles');
              this.server.loadFixtures('approvals');
              this.server.loadFixtures('users');
              Ember.set(this, 'store', this.owner.lookup('service:store'));

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('Should render the article approver component and check the list of approvers', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var article;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.store.findRecord('article', 4);

              case 2:
                article = _context2.sent;
                Ember.set(this, 'model', article);
                _context2.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleShow::ArticleApprovers @model={{model}}/>
                */
                {
                  id: "dTEZIIjt",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-show/article-approvers\",[],[[\"@model\"],[[22,\"model\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                assert.ok(_article.default.approvals.collapsibleExists);
                _context2.next = 9;
                return _article.default.approvals.openCollapsible();

              case 9:
                assert.equal(_article.default.approvals.count, article.approvals.length);

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render rejected button and check the modal ', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var article;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.store.findRecord('article', 3);

              case 2:
                article = _context3.sent;
                Ember.set(this, 'model', article);
                _context3.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleShow::ArticleApprovers @model={{model}}/>
                */
                {
                  id: "dTEZIIjt",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-show/article-approvers\",[],[[\"@model\"],[[22,\"model\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                _context3.next = 8;
                return _article.default.approvals.openCollapsible();

              case 8:
                assert.ok(_article.default.approvals.rejectedVisible);
                _context3.next = 11;
                return _article.default.approvals.viewComments();

              case 11:
                assert.ok(_article.default.approvals.commentsModalExists);
                assert.equal(_article.default.approvals.comments, MOCK_DATA.comments);

              case 13:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-solutions/article-show/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/spy-flash-message", "freshservice/tests/pages/components/module-solutions/article", "freshservice/constants/solutions/article"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _sinonContext, _stubCurrentUser, _spyFlashMessage, _article, _article2) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var PRIVILEGES = {
    scoped_privileges: {
      0: ['view_solutions', 'manage_solutions', 'publish_solution', 'delete_solution'],
      1: [],
      2: [],
      3: []
    },
    privileges: ['view_solutions', 'manage_solutions', 'publish_solution', 'delete_solution']
  };
  (0, _qunit.module)('Integration | Component | module-solutions/article-show', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      this.server.loadFixtures('categories');
      this.server.loadFixtures('folders');
      this.server.loadFixtures('articles');
      Ember.set(this, 'store', this.owner.lookup('service:store'));
      Ember.set(this, 'moment', this.owner.lookup('service:moment'));
      this.moment.setLocale('en');
    });
    (0, _qunit.test)('Should render article in show page', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var folder, loadedArticle;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.store.findRecord('folder', 1);

              case 2:
                folder = _context.sent;
                _context.next = 5;
                return this.store.findRecord('article', 1);

              case 5:
                loadedArticle = _context.sent;
                Ember.set(this, 'model', {
                  article: loadedArticle,
                  folder: folder
                });
                _context.next = 9;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleShow @model={{this.model.article}} @folder={{this.model.folder}} />
                */
                {
                  id: "9IObWmRw",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-show\",[],[[\"@model\",\"@folder\"],[[23,0,[\"model\",\"article\"]],[23,0,[\"model\",\"folder\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 9:
                assert.ok(_article.default.showPage.articleProperties);
                assert.ok(_article.default.showPage.articleAnalytics);
                assert.equal(_article.default.showPage.properties.category, loadedArticle.category.get('name'));
                assert.equal(_article.default.showPage.properties.folder, loadedArticle.folder.get('name'));
                assert.equal(_article.default.showPage.properties.author, loadedArticle.author.value);
                assert.equal(_article.default.showPage.properties.type.toLowerCase(), _article2.ARTICLE_TYPES[loadedArticle.articleType]);
                assert.equal(_article.default.showPage.properties.status.toLowerCase(), _article2.STATUS_TYPES[loadedArticle.status]);
                assert.equal(_article.default.showPage.properties.title, loadedArticle.title);
                assert.equal(_article.default.showPage.properties.tags, loadedArticle.tags.map(function (tag) {
                  return tag.value;
                }).join(','));
                assert.equal(_article.default.showPage.properties.keywords, loadedArticle.keywords.map(function (keyword) {
                  return keyword.value;
                }).join(','));
                assert.equal(_article.default.showPage.properties.reviewDate, this.moment.moment(loadedArticle.reviewDate).format('DD MMM, YYYY'));

              case 20:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should throw error when publishing article', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var dangerFlash, folder, loadedArticle;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)(PRIVILEGES);
                dangerFlash = (0, _spyFlashMessage.default)('danger');
                _context2.next = 4;
                return this.store.findRecord('folder', 2);

              case 4:
                folder = _context2.sent;
                _context2.next = 7;
                return this.store.findRecord('article', 4);

              case 7:
                loadedArticle = _context2.sent;
                Ember.set(this, 'model', {
                  article: loadedArticle,
                  folder: folder
                });
                _context2.next = 11;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleShow @model={{this.model.article}} @folder={{this.model.folder}} />
                */
                {
                  id: "9IObWmRw",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-show\",[],[[\"@model\",\"@folder\"],[[23,0,[\"model\",\"article\"]],[23,0,[\"model\",\"folder\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 11:
                _context2.next = 13;
                return _article.default.showPage.publishArticle();

              case 13:
                assert.ok(dangerFlash.calledOnce);

              case 14:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should publish article when not author of article', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var successFlash, folder, loadedArticle;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)(PRIVILEGES);
                successFlash = (0, _spyFlashMessage.default)('success');
                _context3.next = 4;
                return this.store.findRecord('folder', 2);

              case 4:
                folder = _context3.sent;
                _context3.next = 7;
                return this.store.findRecord('article', 6);

              case 7:
                loadedArticle = _context3.sent;
                Ember.set(this, 'model', {
                  article: loadedArticle,
                  folder: folder
                });
                _context3.next = 11;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleShow @model={{this.model.article}} @folder={{this.model.folder}} />
                */
                {
                  id: "9IObWmRw",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-show\",[],[[\"@model\",\"@folder\"],[[23,0,[\"model\",\"article\"]],[23,0,[\"model\",\"folder\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 11:
                _context3.next = 13;
                return _article.default.showPage.publishArticle();

              case 13:
                assert.ok(successFlash.calledOnce);

              case 14:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-solutions/article-table/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/spy-flash-message", "freshservice/tests/pages/components/utils/form-fields", "freshservice/tests/pages/components/module-solutions/article", "freshservice/tests/pages/components/module-solutions/common"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _sinonContext, _stubCurrentUser, _spyFlashMessage, _formFields, _article, _common) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var SELECT = {
    user: 'Test',
    folder: 'Move Folder & Folder with visibility Departments'
  };
  var PRIVILEGES = {
    scoped_privileges: {
      0: ['view_solutions', 'manage_solutions', 'publish_solution', 'delete_solution'],
      1: [],
      2: [],
      3: []
    },
    privileges: ['view_solutions', 'manage_solutions', 'publish_solution', 'delete_solution']
  };
  (0, _qunit.module)('Integration | Component | module-solutions/article-table', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      this.owner.lookup('router:main').setupRouter();
      this.server.loadFixtures('categories');
      this.server.loadFixtures('folders');
      this.server.loadFixtures('articles');
      Ember.set(this, 'store', this.owner.lookup('service:store'));
    });
    (0, _qunit.test)('Should select 10 articles and perform cancel action on each bulk action', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var articles;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.store.query('article', {
                  page: 1
                });

              case 2:
                articles = _context.sent;
                Ember.set(this, 'model', {
                  articles: articles
                });
                _context.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleTable @model={{model}} @type="article" />
                */
                {
                  id: "iYr+0IqV",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-table\",[],[[\"@model\",\"@type\"],[[22,\"model\"],\"article\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                _context.next = 8;
                return _common.default.table.selectArticles(_common.default.table.articles, 10);

              case 8:
                _context.next = 10;
                return _common.default.table.bulkActions.clickChangeAuthor();

              case 10:
                _context.next = 12;
                return (0, _testHelpers.waitFor)('.solution-change-author-modal');

              case 12:
                _context.next = 14;
                return _common.default.table.bulkActions.modalCancel();

              case 14:
                assert.notOk(_common.default.table.bulkActions.changeAuthorModal);
                _context.next = 17;
                return _common.default.table.bulkActions.clickChangeStatus();

              case 17:
                _context.next = 19;
                return (0, _testHelpers.waitFor)('.solution-change-status-modal');

              case 19:
                _context.next = 21;
                return _common.default.table.bulkActions.modalCancel();

              case 21:
                assert.notOk(_common.default.table.bulkActions.changeStatusModal);
                _context.next = 24;
                return _common.default.table.bulkActions.clickChangeFolder();

              case 24:
                _context.next = 26;
                return (0, _testHelpers.waitFor)('.solution-change-folder-modal');

              case 26:
                _context.next = 28;
                return _common.default.table.bulkActions.modalCancel();

              case 28:
                assert.notOk(_common.default.table.bulkActions.changeFolderModal);
                _context.next = 31;
                return _common.default.table.bulkActions.clickBulkDelete();

              case 31:
                _context.next = 33;
                return (0, _testHelpers.waitFor)('.solution-delete-confirm-modal');

              case 33:
                _context.next = 35;
                return _common.default.table.bulkActions.modalCancel();

              case 35:
                assert.notOk(_common.default.table.bulkActions.deleteArticlesModal);

              case 36:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should click toggle checkbox for single/all action and bulk actions must be shown respectively', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var articles;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.store.query('article', {
                  page: 1
                });

              case 2:
                articles = _context2.sent;
                Ember.set(this, 'model', {
                  articles: articles
                });
                _context2.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleTable @model={{model}} @type="article" />
                */
                {
                  id: "iYr+0IqV",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-table\",[],[[\"@model\",\"@type\"],[[22,\"model\"],\"article\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                _context2.next = 8;
                return _common.default.table.selectAll();

              case 8:
                assert.ok(_common.default.table.bulkActions.exists);
                assert.equal(_common.default.table.bulkActions.count, 4);

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should perform change author bulk action on one article (success)', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var successFlash, articles;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                successFlash = (0, _spyFlashMessage.default)('success');
                _context3.next = 3;
                return this.store.query('article', {
                  page: 1
                });

              case 3:
                articles = _context3.sent;
                Ember.set(this, 'model', {
                  articles: articles
                });
                _context3.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleTable @model={{model}} @type="article" />
                */
                {
                  id: "iYr+0IqV",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-table\",[],[[\"@model\",\"@type\"],[[22,\"model\"],\"article\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context3.next = 9;
                return _common.default.table.articles.objectAt(0).checkBox();

              case 9:
                _context3.next = 11;
                return _common.default.table.bulkActions.clickChangeAuthor();

              case 11:
                _context3.next = 13;
                return (0, _testHelpers.waitFor)('.solution-change-author-modal');

              case 13:
                _context3.next = 15;
                return _formFields.default.autocompleteSelectMultiple('userId', SELECT.user, '0');

              case 15:
                _context3.next = 17;
                return _common.default.table.bulkActions.confirmChangeAuthor();

              case 17:
                assert.ok(successFlash.calledOnce);

              case 18:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should perform change status bulk action on one article (success)', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var successFlash, articles;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                successFlash = (0, _spyFlashMessage.default)('success');
                _context4.next = 3;
                return this.store.query('article', {
                  page: 1
                });

              case 3:
                articles = _context4.sent;
                Ember.set(this, 'model', {
                  articles: articles
                });
                _context4.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleTable @model={{model}} @type="article" />
                */
                {
                  id: "iYr+0IqV",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-table\",[],[[\"@model\",\"@type\"],[[22,\"model\"],\"article\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context4.next = 9;
                return _common.default.table.articles.objectAt(0).checkBox();

              case 9:
                _context4.next = 11;
                return _common.default.table.bulkActions.clickChangeStatus();

              case 11:
                _context4.next = 13;
                return (0, _testHelpers.waitFor)('.solution-change-status-modal');

              case 13:
                _context4.next = 15;
                return _common.default.table.bulkActions.selectDraftStatus();

              case 15:
                _context4.next = 17;
                return _common.default.table.bulkActions.confirmChangeStatus();

              case 17:
                assert.ok(successFlash.calledOnce);

              case 18:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should perform change folder bulk action on one article (success)', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var successFlash, articles;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                successFlash = (0, _spyFlashMessage.default)('success');
                _context5.next = 3;
                return this.store.query('article', {
                  page: 1
                });

              case 3:
                articles = _context5.sent;
                Ember.set(this, 'model', {
                  articles: articles
                });
                _context5.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleTable @model={{model}} @type="article" />
                */
                {
                  id: "iYr+0IqV",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-table\",[],[[\"@model\",\"@type\"],[[22,\"model\"],\"article\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context5.next = 9;
                return _common.default.table.articles.objectAt(0).checkBox();

              case 9:
                _context5.next = 11;
                return _common.default.table.bulkActions.clickChangeFolder();

              case 11:
                _context5.next = 13;
                return (0, _testHelpers.waitFor)('.solution-change-folder-modal');

              case 13:
                _context5.next = 15;
                return _formFields.default.autocompleteSelectMultiple('folderId', SELECT.folder, '0');

              case 15:
                _context5.next = 17;
                return _common.default.table.bulkActions.confirmChangeFolder();

              case 17:
                assert.ok(successFlash.calledOnce);

              case 18:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should perform delete bulk action on one article (success)', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var successFlash, articles;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                successFlash = (0, _spyFlashMessage.default)('success');
                _context6.next = 3;
                return this.store.query('article', {
                  page: 1
                });

              case 3:
                articles = _context6.sent;
                Ember.set(this, 'model', {
                  articles: articles
                });
                _context6.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleTable @model={{model}} @type="article" />
                */
                {
                  id: "iYr+0IqV",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-table\",[],[[\"@model\",\"@type\"],[[22,\"model\"],\"article\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context6.next = 9;
                return _common.default.table.articles.objectAt(0).checkBox();

              case 9:
                _context6.next = 11;
                return _common.default.table.bulkActions.clickBulkDelete();

              case 11:
                _context6.next = 13;
                return (0, _testHelpers.waitFor)('.solution-delete-confirm-modal');

              case 13:
                _context6.next = 15;
                return _common.default.table.bulkActions.confirmBulkDelete();

              case 15:
                assert.ok(successFlash.calledOnce);

              case 16:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x6) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should perform bulk change author on 10 articles (failure)', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var dangerFlash, articles;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                dangerFlash = (0, _spyFlashMessage.default)('danger');
                _context7.next = 3;
                return this.store.query('article', {
                  page: 1
                });

              case 3:
                articles = _context7.sent;
                Ember.set(this, 'model', {
                  articles: articles
                });
                _context7.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleTable @model={{model}} @type="article" />
                */
                {
                  id: "iYr+0IqV",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-table\",[],[[\"@model\",\"@type\"],[[22,\"model\"],\"article\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context7.next = 9;
                return _common.default.table.selectArticles(_common.default.table.articles, 10);

              case 9:
                _context7.next = 11;
                return _common.default.table.bulkActions.clickChangeAuthor();

              case 11:
                _context7.next = 13;
                return (0, _testHelpers.waitFor)('.solution-change-author-modal');

              case 13:
                _context7.next = 15;
                return _formFields.default.autocompleteSelectMultiple('userId', SELECT.user, '0');

              case 15:
                _context7.next = 17;
                return _common.default.table.bulkActions.confirmChangeAuthor();

              case 17:
                assert.ok(dangerFlash.calledOnce);

              case 18:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x7) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should perform bulk change author on 15 articles (partial failure)', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var dangerFlash, articles;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                dangerFlash = (0, _spyFlashMessage.default)('danger');
                _context8.next = 3;
                return this.store.query('article', {
                  page: 1
                });

              case 3:
                articles = _context8.sent;
                Ember.set(this, 'model', {
                  articles: articles
                });
                _context8.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleTable @model={{model}} @type="article" />
                */
                {
                  id: "iYr+0IqV",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-table\",[],[[\"@model\",\"@type\"],[[22,\"model\"],\"article\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context8.next = 9;
                return _common.default.table.selectArticles(_common.default.table.articles, 15);

              case 9:
                _context8.next = 11;
                return _common.default.table.bulkActions.clickChangeAuthor();

              case 11:
                _context8.next = 13;
                return (0, _testHelpers.waitFor)('.solution-change-author-modal');

              case 13:
                _context8.next = 15;
                return _formFields.default.autocompleteSelectMultiple('userId', SELECT.user, '0');

              case 15:
                _context8.next = 17;
                return _common.default.table.bulkActions.confirmChangeAuthor();

              case 17:
                assert.ok(dangerFlash.calledOnce);

              case 18:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x8) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should perform bulk change author on 5 articles (permission failure)', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        var dangerFlash, articles;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                dangerFlash = (0, _spyFlashMessage.default)('danger');
                _context9.next = 3;
                return this.store.query('article', {
                  page: 1
                });

              case 3:
                articles = _context9.sent;
                Ember.set(this, 'model', {
                  articles: articles
                });
                _context9.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleTable @model={{model}} @type="article" />
                */
                {
                  id: "iYr+0IqV",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-table\",[],[[\"@model\",\"@type\"],[[22,\"model\"],\"article\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context9.next = 9;
                return _common.default.table.selectArticles(_common.default.table.articles, 5);

              case 9:
                _context9.next = 11;
                return _common.default.table.bulkActions.clickChangeAuthor();

              case 11:
                _context9.next = 13;
                return (0, _testHelpers.waitFor)('.solution-change-author-modal');

              case 13:
                _context9.next = 15;
                return _formFields.default.autocompleteSelectMultiple('userId', SELECT.user, '0');

              case 15:
                _context9.next = 17;
                return _common.default.table.bulkActions.confirmChangeAuthor();

              case 17:
                assert.ok(dangerFlash.calledOnce);

              case 18:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x9) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should perform bulk change status on 10 articles (failure)', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var dangerFlash, articles;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                dangerFlash = (0, _spyFlashMessage.default)('danger');
                _context10.next = 3;
                return this.store.query('article', {
                  page: 1
                });

              case 3:
                articles = _context10.sent;
                Ember.set(this, 'model', {
                  articles: articles
                });
                _context10.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleTable @model={{model}} @type="article" />
                */
                {
                  id: "iYr+0IqV",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-table\",[],[[\"@model\",\"@type\"],[[22,\"model\"],\"article\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context10.next = 9;
                return _common.default.table.selectArticles(_common.default.table.articles, 10);

              case 9:
                _context10.next = 11;
                return _common.default.table.bulkActions.clickChangeStatus();

              case 11:
                _context10.next = 13;
                return (0, _testHelpers.waitFor)('.solution-change-status-modal');

              case 13:
                _context10.next = 15;
                return _common.default.table.bulkActions.selectDraftStatus();

              case 15:
                _context10.next = 17;
                return _common.default.table.bulkActions.confirmChangeStatus();

              case 17:
                assert.ok(dangerFlash.calledOnce);

              case 18:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x10) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should perform bulk change status on 15 articles (partial failure)', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        var dangerFlash, articles;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                dangerFlash = (0, _spyFlashMessage.default)('danger');
                _context11.next = 3;
                return this.store.query('article', {
                  page: 1
                });

              case 3:
                articles = _context11.sent;
                Ember.set(this, 'model', {
                  articles: articles
                });
                _context11.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleTable @model={{model}} @type="article" />
                */
                {
                  id: "iYr+0IqV",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-table\",[],[[\"@model\",\"@type\"],[[22,\"model\"],\"article\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context11.next = 9;
                return _common.default.table.selectArticles(_common.default.table.articles, 15);

              case 9:
                _context11.next = 11;
                return _common.default.table.bulkActions.clickChangeStatus();

              case 11:
                _context11.next = 13;
                return (0, _testHelpers.waitFor)('.solution-change-status-modal');

              case 13:
                _context11.next = 15;
                return _common.default.table.bulkActions.selectDraftStatus();

              case 15:
                _context11.next = 17;
                return _common.default.table.bulkActions.confirmChangeStatus();

              case 17:
                assert.ok(dangerFlash.calledOnce);

              case 18:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x11) {
        return _ref12.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should perform bulk change folder on 10 articles (failure)', /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        var dangerFlash, articles;
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                dangerFlash = (0, _spyFlashMessage.default)('danger');
                _context12.next = 3;
                return this.store.query('article', {
                  page: 1
                });

              case 3:
                articles = _context12.sent;
                Ember.set(this, 'model', {
                  articles: articles
                });
                _context12.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleTable @model={{model}} @type="article" />
                */
                {
                  id: "iYr+0IqV",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-table\",[],[[\"@model\",\"@type\"],[[22,\"model\"],\"article\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context12.next = 9;
                return _common.default.table.selectArticles(_common.default.table.articles, 10);

              case 9:
                _context12.next = 11;
                return _common.default.table.bulkActions.clickChangeFolder();

              case 11:
                _context12.next = 13;
                return (0, _testHelpers.waitFor)('.solution-change-folder-modal');

              case 13:
                _context12.next = 15;
                return _formFields.default.autocompleteSelectMultiple('folderId', SELECT.folder, '0');

              case 15:
                _context12.next = 17;
                return _common.default.table.bulkActions.confirmChangeFolder();

              case 17:
                assert.ok(dangerFlash.calledOnce);

              case 18:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x12) {
        return _ref13.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should perform bulk change folder on 15 articles (partial failure)', /*#__PURE__*/function () {
      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
        var dangerFlash, articles;
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                dangerFlash = (0, _spyFlashMessage.default)('danger');
                _context13.next = 3;
                return this.store.query('article', {
                  page: 1
                });

              case 3:
                articles = _context13.sent;
                Ember.set(this, 'model', {
                  articles: articles
                });
                _context13.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleTable @model={{model}} @type="article" />
                */
                {
                  id: "iYr+0IqV",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-table\",[],[[\"@model\",\"@type\"],[[22,\"model\"],\"article\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context13.next = 9;
                return _common.default.table.selectArticles(_common.default.table.articles, 15);

              case 9:
                _context13.next = 11;
                return _common.default.table.bulkActions.clickChangeFolder();

              case 11:
                _context13.next = 13;
                return (0, _testHelpers.waitFor)('.solution-change-folder-modal');

              case 13:
                _context13.next = 15;
                return _formFields.default.autocompleteSelectMultiple('folderId', SELECT.folder, '0');

              case 15:
                _context13.next = 17;
                return _common.default.table.bulkActions.confirmChangeFolder();

              case 17:
                assert.ok(dangerFlash.calledOnce);

              case 18:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      return function (_x13) {
        return _ref14.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should perform bulk delete on 10 articles (failure)', /*#__PURE__*/function () {
      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {
        var dangerFlash, articles;
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                dangerFlash = (0, _spyFlashMessage.default)('danger');
                _context14.next = 3;
                return this.store.query('article', {
                  page: 1
                });

              case 3:
                articles = _context14.sent;
                Ember.set(this, 'model', {
                  articles: articles
                });
                _context14.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleTable @model={{model}} @type="article" />
                */
                {
                  id: "iYr+0IqV",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-table\",[],[[\"@model\",\"@type\"],[[22,\"model\"],\"article\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context14.next = 9;
                return _common.default.table.selectArticles(_common.default.table.articles, 10);

              case 9:
                _context14.next = 11;
                return _common.default.table.bulkActions.clickBulkDelete();

              case 11:
                _context14.next = 13;
                return (0, _testHelpers.waitFor)('.solution-delete-confirm-modal');

              case 13:
                _context14.next = 15;
                return _common.default.table.bulkActions.confirmBulkDelete();

              case 15:
                assert.ok(dangerFlash.calledOnce);

              case 16:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      return function (_x14) {
        return _ref15.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should perform bulk delete on 15 articles (partial failure)', /*#__PURE__*/function () {
      var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {
        var dangerFlash, articles;
        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                dangerFlash = (0, _spyFlashMessage.default)('danger');
                _context15.next = 3;
                return this.store.query('article', {
                  page: 1
                });

              case 3:
                articles = _context15.sent;
                Ember.set(this, 'model', {
                  articles: articles
                });
                _context15.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleTable @model={{model}} @type="article" />
                */
                {
                  id: "iYr+0IqV",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-table\",[],[[\"@model\",\"@type\"],[[22,\"model\"],\"article\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context15.next = 9;
                return _common.default.table.selectArticles(_common.default.table.articles, 15);

              case 9:
                _context15.next = 11;
                return _common.default.table.bulkActions.clickBulkDelete();

              case 11:
                _context15.next = 13;
                return (0, _testHelpers.waitFor)('.solution-delete-confirm-modal');

              case 13:
                _context15.next = 15;
                return _common.default.table.bulkActions.confirmBulkDelete();

              case 15:
                assert.ok(dangerFlash.calledOnce);

              case 16:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      return function (_x15) {
        return _ref16.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should perform bulk change author on all articles (partial success)', /*#__PURE__*/function () {
      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(assert) {
        var dangerFlash, articles;
        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                dangerFlash = (0, _spyFlashMessage.default)('danger');
                _context16.next = 3;
                return this.store.query('article', {
                  page: 1
                });

              case 3:
                articles = _context16.sent;
                Ember.set(this, 'model', {
                  articles: articles
                });
                _context16.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleTable @model={{model}} @type="article" />
                */
                {
                  id: "iYr+0IqV",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-table\",[],[[\"@model\",\"@type\"],[[22,\"model\"],\"article\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context16.next = 9;
                return _common.default.table.selectAll();

              case 9:
                _context16.next = 11;
                return _common.default.table.bulkActions.clickChangeAuthor();

              case 11:
                _context16.next = 13;
                return (0, _testHelpers.waitFor)('.solution-change-author-modal');

              case 13:
                _context16.next = 15;
                return _formFields.default.autocompleteSelectMultiple('userId', SELECT.user, '0');

              case 15:
                _context16.next = 17;
                return _common.default.table.bulkActions.confirmChangeAuthor();

              case 17:
                assert.ok(dangerFlash.calledOnce);

              case 18:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      return function (_x16) {
        return _ref17.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should perform bulk change status on all articles (partial success)', /*#__PURE__*/function () {
      var _ref18 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(assert) {
        var dangerFlash, articles;
        return regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                dangerFlash = (0, _spyFlashMessage.default)('danger');
                _context17.next = 3;
                return this.store.query('article', {
                  page: 1
                });

              case 3:
                articles = _context17.sent;
                Ember.set(this, 'model', {
                  articles: articles
                });
                _context17.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleTable @model={{model}} @type="article" />
                */
                {
                  id: "iYr+0IqV",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-table\",[],[[\"@model\",\"@type\"],[[22,\"model\"],\"article\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context17.next = 9;
                return _common.default.table.selectAll();

              case 9:
                _context17.next = 11;
                return _common.default.table.bulkActions.clickChangeStatus();

              case 11:
                _context17.next = 13;
                return (0, _testHelpers.waitFor)('.solution-change-status-modal');

              case 13:
                _context17.next = 15;
                return _common.default.table.bulkActions.selectDraftStatus();

              case 15:
                _context17.next = 17;
                return _common.default.table.bulkActions.confirmChangeStatus();

              case 17:
                assert.ok(dangerFlash.calledOnce);

              case 18:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      return function (_x17) {
        return _ref18.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should perform bulk change folder on all articles (partial success)', /*#__PURE__*/function () {
      var _ref19 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(assert) {
        var dangerFlash, articles;
        return regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                dangerFlash = (0, _spyFlashMessage.default)('danger');
                _context18.next = 3;
                return this.store.query('article', {
                  page: 1
                });

              case 3:
                articles = _context18.sent;
                Ember.set(this, 'model', {
                  articles: articles
                });
                _context18.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleTable @model={{model}} @type="article" />
                */
                {
                  id: "iYr+0IqV",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-table\",[],[[\"@model\",\"@type\"],[[22,\"model\"],\"article\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context18.next = 9;
                return _common.default.table.selectAll();

              case 9:
                _context18.next = 11;
                return _common.default.table.bulkActions.clickChangeFolder();

              case 11:
                _context18.next = 13;
                return (0, _testHelpers.waitFor)('.solution-change-folder-modal');

              case 13:
                _context18.next = 15;
                return _formFields.default.autocompleteSelectMultiple('folderId', SELECT.folder, '0');

              case 15:
                _context18.next = 17;
                return _common.default.table.bulkActions.confirmChangeFolder();

              case 17:
                assert.ok(dangerFlash.calledOnce);

              case 18:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      return function (_x18) {
        return _ref19.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should perform bulk delete on all articles (partial success)', /*#__PURE__*/function () {
      var _ref20 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19(assert) {
        var dangerFlash, articles;
        return regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                dangerFlash = (0, _spyFlashMessage.default)('danger');
                _context19.next = 3;
                return this.store.query('article', {
                  page: 1
                });

              case 3:
                articles = _context19.sent;
                Ember.set(this, 'model', {
                  articles: articles
                });
                _context19.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleTable @model={{model}} @type="article" />
                */
                {
                  id: "iYr+0IqV",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-table\",[],[[\"@model\",\"@type\"],[[22,\"model\"],\"article\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context19.next = 9;
                return _common.default.table.selectAll();

              case 9:
                _context19.next = 11;
                return _common.default.table.bulkActions.clickBulkDelete();

              case 11:
                _context19.next = 13;
                return (0, _testHelpers.waitFor)('.solution-delete-confirm-modal');

              case 13:
                _context19.next = 15;
                return _common.default.table.bulkActions.confirmBulkDelete();

              case 15:
                assert.ok(dangerFlash.calledOnce);

              case 16:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19, this);
      }));

      return function (_x19) {
        return _ref20.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should load external article and click edit and cancel should load show page', /*#__PURE__*/function () {
      var _ref21 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20(assert) {
        var articles;
        return regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)(PRIVILEGES);
                _context20.next = 3;
                return this.store.query('article', {
                  page: 1,
                  category_id: 4
                });

              case 3:
                articles = _context20.sent;
                Ember.set(this, 'model', {
                  articles: articles
                });
                _context20.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleTable @model={{model}} @type="article" />
                */
                {
                  id: "iYr+0IqV",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-table\",[],[[\"@model\",\"@type\"],[[22,\"model\"],\"article\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context20.next = 9;
                return _common.default.table.clickFirstArticle();

              case 9:
                assert.ok(_article.default.externalShowPage.exists);
                _context20.next = 12;
                return _article.default.externalShowPage.clickEdit();

              case 12:
                assert.ok(_article.default.externalEditForm.exists);
                _context20.next = 15;
                return _article.default.externalEditForm.cancel();

              case 15:
                assert.ok(_article.default.externalShowPage.exists);

              case 16:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20, this);
      }));

      return function (_x20) {
        return _ref21.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render empty state for no articles', /*#__PURE__*/function () {
      var _ref22 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21(assert) {
        var articles;
        return regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                _context21.next = 2;
                return this.store.query('article', {
                  page: 1,
                  category_id: 3
                });

              case 2:
                articles = _context21.sent;
                Ember.set(this, 'model', {
                  articles: articles
                });
                _context21.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleTable @model={{model}} @type="article" />
                */
                {
                  id: "iYr+0IqV",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-table\",[],[[\"@model\",\"@type\"],[[22,\"model\"],\"article\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                assert.ok(_common.default.table.emptyStateVisible);

              case 7:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21, this);
      }));

      return function (_x21) {
        return _ref22.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should not show select all if no permission', /*#__PURE__*/function () {
      var _ref23 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22(assert) {
        var articles;
        return regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)();
                _context22.next = 3;
                return this.store.query('article', {
                  page: 1,
                  category_id: 1
                });

              case 3:
                articles = _context22.sent;
                Ember.set(this, 'model', {
                  articles: articles
                });
                _context22.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleTable @model={{model}} @type="article" />
                */
                {
                  id: "iYr+0IqV",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-table\",[],[[\"@model\",\"@type\"],[[22,\"model\"],\"article\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                assert.equal(_common.default.table.selectArticleCount.length, 0);

              case 8:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22, this);
      }));

      return function (_x22) {
        return _ref23.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should throw error when deleting external article from table', /*#__PURE__*/function () {
      var _ref24 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23(assert) {
        var dangerFlash, articles;
        return regeneratorRuntime.wrap(function _callee23$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)(PRIVILEGES);
                dangerFlash = (0, _spyFlashMessage.default)('danger');
                _context23.next = 4;
                return this.store.query('article', {
                  page: 1,
                  category_id: 4
                });

              case 4:
                articles = _context23.sent;
                Ember.set(this, 'model', {
                  articles: articles
                });
                _context23.next = 8;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleTable @model={{model}} @type="article" />
                */
                {
                  id: "iYr+0IqV",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-table\",[],[[\"@model\",\"@type\"],[[22,\"model\"],\"article\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 8:
                _context23.next = 10;
                return _common.default.table.articles.objectAt(1).selectExternal();

              case 10:
                _context23.next = 12;
                return _article.default.externalShowPage.clickDelete();

              case 12:
                assert.ok(_article.default.externalShowPage.confirmDeleteModal.exists);
                _context23.next = 15;
                return _article.default.externalShowPage.confirmDeleteModal.submit();

              case 15:
                assert.ok(dangerFlash.calledOnce);

              case 16:
              case "end":
                return _context23.stop();
            }
          }
        }, _callee23, this);
      }));

      return function (_x23) {
        return _ref24.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-solutions/article-table/table-header/category-actions/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/stub-current-account", "freshservice/tests/lib/spy-flash-message", "freshservice/tests/pages/components/module-solutions/category"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _sinonContext, _stubCurrentAccount, _spyFlashMessage, _category) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var MOCK_DATA = {
    invalid: {
      name: 'wrong name'
    },
    update: {
      description: 'test update'
    }
  };
  (0, _qunit.module)('Integration | Component | module-solutions/article-table/table-header/category-actions', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.owner.lookup('router:main').setupRouter();
              this.server.loadFixtures('categories');
              this.server.loadFixtures('folders');
              Ember.set(this, 'store', this.owner.lookup('service:store'));
              _context.t0 = Ember;
              _context.t1 = this;
              _context.next = 8;
              return this.store.findRecord('category', 2);

            case 8:
              _context.t2 = _context.sent;

              _context.t0.set.call(_context.t0, _context.t1, 'model', _context.t2);

            case 10:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('Should render category actions component with actions items', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleTable::TableHeader::CategoryActions @model={{model}} />
                */
                {
                  id: "GTbteh3G",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-table/table-header/category-actions\",[],[[\"@model\"],[[22,\"model\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.ok(_category.default.actions.exists);
                assert.equal(_category.default.actions.itemsCount, 2);

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should throw validation error on submitting with wrong category name, close delete modal on cancel, rollback model on discarding category edit', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleTable::TableHeader::CategoryActions @model={{model}} />
                */
                {
                  id: "GTbteh3G",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-table/table-header/category-actions\",[],[[\"@model\"],[[22,\"model\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context3.next = 4;
                return _category.default.actions.clickDelete();

              case 4:
                _context3.next = 6;
                return _category.default.actions.deleteModal.confirmName(MOCK_DATA.invalid.name).submit();

              case 6:
                assert.equal(_category.default.actions.deleteModal.invalidName, 1);
                _context3.next = 9;
                return _category.default.actions.deleteModal.cancel();

              case 9:
                assert.notOk(_category.default.actions.deleteModal.exists);
                _context3.next = 12;
                return _category.default.actions.clickEdit();

              case 12:
                _context3.next = 14;
                return _category.default.editForm.fillDescription(MOCK_DATA.update.description).cancel();

              case 14:
                assert.notOk(_category.default.editForm.exists);

              case 15:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should delete category', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var successFlash;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                (0, _stubCurrentAccount.stubCurrentAccount)();
                successFlash = (0, _spyFlashMessage.default)('success');
                _context4.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleTable::TableHeader::CategoryActions @model={{model}} />
                */
                {
                  id: "GTbteh3G",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-table/table-header/category-actions\",[],[[\"@model\"],[[22,\"model\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context4.next = 6;
                return _category.default.actions.clickDelete();

              case 6:
                _context4.next = 8;
                return _category.default.actions.deleteModal.confirmName(this.model.name).submit();

              case 8:
                assert.ok(successFlash.calledOnce);

              case 9:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should throw 500, when deletion fails', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var errorFlash;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                errorFlash = (0, _spyFlashMessage.default)('danger');
                _context5.t0 = Ember;
                _context5.t1 = this;
                _context5.next = 5;
                return this.store.findRecord('category', 3);

              case 5:
                _context5.t2 = _context5.sent;

                _context5.t0.set.call(_context5.t0, _context5.t1, 'model', _context5.t2);

                _context5.next = 9;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleTable::TableHeader::CategoryActions @model={{model}} />
                */
                {
                  id: "GTbteh3G",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-table/table-header/category-actions\",[],[[\"@model\"],[[22,\"model\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 9:
                _context5.next = 11;
                return _category.default.actions.clickDelete();

              case 11:
                _context5.next = 13;
                return _category.default.actions.deleteModal.confirmName(this.model.name).submit();

              case 13:
                assert.ok(errorFlash.calledOnce);

              case 14:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should update category', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var successFlash;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                successFlash = (0, _spyFlashMessage.default)('success');
                _context6.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleTable::TableHeader::CategoryActions @model={{model}} />
                */
                {
                  id: "GTbteh3G",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-table/table-header/category-actions\",[],[[\"@model\"],[[22,\"model\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context6.next = 5;
                return _category.default.actions.clickEdit();

              case 5:
                _context6.next = 7;
                return _category.default.editForm.fillDescription(MOCK_DATA.update.description).save();

              case 7:
                assert.ok(successFlash.calledOnce);

              case 8:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-solutions/article-table/table-header/folder-actions/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/stub-current-account", "freshservice/tests/lib/spy-flash-message", "freshservice/tests/pages/components/utils/form-fields", "freshservice/tests/pages/components/module-solutions/folder"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _sinonContext, _stubCurrentAccount, _spyFlashMessage, _formFields, _folder) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var MOCK_DATA = {
    invalid: {
      name: 'wrong name'
    },
    update: {
      description: 'test update'
    }
  };
  var SELECT = {
    editFolder: 'Edit Folder',
    deleteFolder: 'Delete Folder'
  };
  (0, _qunit.module)('Integration | Component | module-solutions/article-table/table-header/folder-actions', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.owner.lookup('router:main').setupRouter();
              this.server.loadFixtures('folders');
              Ember.set(this, 'store', this.owner.lookup('service:store'));
              _context.t0 = Ember;
              _context.t1 = this;
              _context.next = 7;
              return this.store.findRecord('folder', 6);

            case 7:
              _context.t2 = _context.sent;

              _context.t0.set.call(_context.t0, _context.t1, 'model', _context.t2);

              Ember.set(this, 'count', 2);

            case 10:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('Should render folder actions component & items under actions dropdown', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleTable::TableHeader::FolderActions @model={{model}} @articleCount={{count}} />
                */
                {
                  id: "VWPCC+Wn",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-table/table-header/folder-actions\",[],[[\"@model\",\"@articleCount\"],[[22,\"model\"],[22,\"count\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context2.next = 4;
                return _formFields.default.selectBasicDropdown('folder-options', '');

              case 4:
                assert.ok(_folder.default.actions.exists);
                assert.equal(_folder.default.actions.itemsCount, 4);

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should throw validation error on submitting with wrong folder name, close delete modal on cancel, rollback model on discarding folder edit', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleTable::TableHeader::FolderActions @model={{model}} @articleCount={{count}} />
                */
                {
                  id: "VWPCC+Wn",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-table/table-header/folder-actions\",[],[[\"@model\",\"@articleCount\"],[[22,\"model\"],[22,\"count\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context3.next = 4;
                return _formFields.default.selectBasicDropdown('folder-options', SELECT.deleteFolder);

              case 4:
                _context3.next = 6;
                return _folder.default.actions.deleteModal.confirmName(MOCK_DATA.invalid.name).submit();

              case 6:
                // close modal on cancel
                assert.equal(_folder.default.actions.deleteModal.invalidName, 1);
                _context3.next = 9;
                return _folder.default.actions.deleteModal.cancel();

              case 9:
                assert.notOk(_folder.default.actions.deleteModal.exists); // rollback attributes on cancel

                _context3.next = 12;
                return _formFields.default.selectBasicDropdown('folder-options', SELECT.editFolder);

              case 12:
                _context3.next = 14;
                return _folder.default.newForm.fillDescription(MOCK_DATA.update).cancel();

              case 14:
                assert.notOk(_folder.default.newForm.exists);

              case 15:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should delete folder', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var successFlash;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                (0, _stubCurrentAccount.stubCurrentAccount)();
                successFlash = (0, _spyFlashMessage.default)('success');
                _context4.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleTable::TableHeader::FolderActions @model={{model}} @articleCount={{count}} />
                */
                {
                  id: "VWPCC+Wn",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-table/table-header/folder-actions\",[],[[\"@model\",\"@articleCount\"],[[22,\"model\"],[22,\"count\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context4.next = 6;
                return _formFields.default.selectBasicDropdown('folder-options', SELECT.deleteFolder);

              case 6:
                _context4.next = 8;
                return _folder.default.actions.deleteModal.confirmName(this.model.name).submit();

              case 8:
                assert.ok(successFlash.calledOnce);

              case 9:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should throw 500, when deletion fails', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var errorFlash;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                errorFlash = (0, _spyFlashMessage.default)('danger');
                _context5.t0 = Ember;
                _context5.t1 = this;
                _context5.next = 5;
                return this.store.findRecord('folder', 7);

              case 5:
                _context5.t2 = _context5.sent;

                _context5.t0.set.call(_context5.t0, _context5.t1, 'model', _context5.t2);

                _context5.next = 9;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleTable::TableHeader::FolderActions @model={{model}} @articleCount={{count}} />
                */
                {
                  id: "VWPCC+Wn",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-table/table-header/folder-actions\",[],[[\"@model\",\"@articleCount\"],[[22,\"model\"],[22,\"count\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 9:
                _context5.next = 11;
                return _formFields.default.selectBasicDropdown('folder-options', SELECT.deleteFolder);

              case 11:
                _context5.next = 13;
                return _folder.default.actions.deleteModal.confirmName(this.model.name).submit();

              case 13:
                assert.ok(errorFlash.calledOnce);

              case 14:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should update folder', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var successFlash;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                successFlash = (0, _spyFlashMessage.default)('success');
                _context6.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::ArticleTable::TableHeader::FolderActions @model={{model}} @articleCount={{count}} />
                */
                {
                  id: "VWPCC+Wn",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/article-table/table-header/folder-actions\",[],[[\"@model\",\"@articleCount\"],[[22,\"model\"],[22,\"count\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context6.next = 5;
                return _formFields.default.selectBasicDropdown('folder-options', SELECT.editFolder);

              case 5:
                _context6.next = 7;
                return _folder.default.newForm.fillDescription(MOCK_DATA.update.description).save();

              case 7:
                assert.ok(successFlash.calledOnce);

              case 8:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-solutions/category-form/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/spy-flash-message", "freshservice/tests/pages/components/module-solutions/category"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _sinonContext, _spyFlashMessage, _category) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var MOCK_DATA = {
    name: 'Solutions',
    description: 'Solutions'
  };
  (0, _qunit.module)('Integration | Component | module-solutions/category-form', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      this.server.loadFixtures('categories');
      this.server.loadFixtures('folders');
    });
    (0, _qunit.test)('Should render new category form inside modal', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                Ember.setProperties(this, {
                  newCategoryModal: true,
                  updateModal: function updateModal() {
                    return Ember.set(_this, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::CategoryForm @toggleModal={{newCategoryModal}} @updateModal={{action updateModal}} />
                */
                {
                  id: "lxAIvq1D",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/category-form\",[],[[\"@toggleModal\",\"@updateModal\"],[[22,\"newCategoryModal\"],[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.ok(_category.default.newForm.exists);
                assert.ok(_category.default.newForm.hasFieldName);
                assert.ok(_category.default.newForm.hasFieldDescription);

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should save new category form', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var _this2 = this;

        var successFlash;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                successFlash = (0, _spyFlashMessage.default)('success');
                Ember.setProperties(this, {
                  newCategoryModal: true,
                  updateModal: function updateModal() {
                    return Ember.set(_this2, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context2.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::CategoryForm @toggleModal={{newCategoryModal}} @updateModal={{action updateModal}} />
                */
                {
                  id: "lxAIvq1D",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/category-form\",[],[[\"@toggleModal\",\"@updateModal\"],[[22,\"newCategoryModal\"],[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context2.next = 6;
                return _category.default.newForm.fillName(MOCK_DATA.name);

              case 6:
                _context2.next = 8;
                return _category.default.newForm.fillDescription(MOCK_DATA.description).save();

              case 8:
                assert.ok(successFlash.calledOnce);

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should throw 500 error if invalid params found, when saving category', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var _this3 = this;

        var errorFlashSpy;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                errorFlashSpy = (0, _spyFlashMessage.default)('danger');
                Ember.setProperties(this, {
                  newCategoryModal: true,
                  updateModal: function updateModal() {
                    return Ember.set(_this3, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context3.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::CategoryForm @toggleModal={{newCategoryModal}} @updateModal={{action updateModal}} />
                */
                {
                  id: "lxAIvq1D",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/category-form\",[],[[\"@toggleModal\",\"@updateModal\"],[[22,\"newCategoryModal\"],[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context3.next = 6;
                return _category.default.newForm.fillName(500).fillDescription(MOCK_DATA.description).save();

              case 6:
                assert.ok(errorFlashSpy.calledOnce);

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should throw error when saving category with same name', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var _this4 = this;

        var errorFlashSpy;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                errorFlashSpy = (0, _spyFlashMessage.default)('danger');
                Ember.setProperties(this, {
                  newCategoryModal: true,
                  updateModal: function updateModal() {
                    return Ember.set(_this4, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context4.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::CategoryForm @toggleModal={{newCategoryModal}} @updateModal={{action updateModal}} />
                */
                {
                  id: "lxAIvq1D",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/category-form\",[],[[\"@toggleModal\",\"@updateModal\"],[[22,\"newCategoryModal\"],[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context4.next = 6;
                return _category.default.newForm.fillName('Test Category').fillDescription(MOCK_DATA.description).save();

              case 6:
                assert.ok(errorFlashSpy.calledOnce);

              case 7:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should close modal on cancel click edit/new', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var _this5 = this;

        var store, category;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                store = this.owner.lookup('service:store');
                _context5.next = 3;
                return store.findRecord('category', 1);

              case 3:
                category = _context5.sent;
                Ember.setProperties(this, {
                  newCategoryModal: true,
                  editCategoryModal: true,
                  model: category,
                  updateModal: function updateModal() {
                    return Ember.set(_this5, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context5.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::CategoryForm @toggleModal={{newCategoryModal}} @updateModal={{action updateModal}} />
                */
                {
                  id: "lxAIvq1D",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/category-form\",[],[[\"@toggleModal\",\"@updateModal\"],[[22,\"newCategoryModal\"],[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context5.next = 9;
                return _category.default.newForm.cancel();

              case 9:
                assert.notOk(_category.default.newForm.exists);
                _context5.next = 12;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::CategoryForm @editCategory={{model}} @editAction={{true}} @toggleModal={{editCategoryModal}} @updateModal={{action updateModal}} />
                */
                {
                  id: "BheFhkz8",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/category-form\",[],[[\"@editCategory\",\"@editAction\",\"@toggleModal\",\"@updateModal\"],[[22,\"model\"],true,[22,\"editCategoryModal\"],[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 12:
                _context5.next = 14;
                return _category.default.newForm.cancel();

              case 14:
                assert.notOk(_category.default.newForm.exists);

              case 15:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render validation errors on submit without data', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var _this6 = this;

        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                Ember.setProperties(this, {
                  newCategoryModal: true,
                  updateModal: function updateModal() {
                    return Ember.set(_this6, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context6.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::CategoryForm @toggleModal={{newCategoryModal}} @updateModal={{action updateModal}} />
                */
                {
                  id: "lxAIvq1D",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/category-form\",[],[[\"@toggleModal\",\"@updateModal\"],[[22,\"newCategoryModal\"],[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context6.next = 5;
                return _category.default.newForm.save();

              case 5:
                assert.ok(_category.default.newForm.hasErrorName);

              case 6:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x6) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render edit category form inside modal', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var _this7 = this;

        var store, category;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                store = this.owner.lookup('service:store');
                _context7.next = 3;
                return store.findRecord('category', 1);

              case 3:
                category = _context7.sent;
                Ember.setProperties(this, {
                  editCategoryModal: true,
                  model: category,
                  updateModal: function updateModal() {
                    return Ember.set(_this7, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context7.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::CategoryForm @editCategory={{model}} @editAction={{true}} @toggleModal={{editCategoryModal}} @updateModal={{action updateModal}} />
                */
                {
                  id: "BheFhkz8",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/category-form\",[],[[\"@editCategory\",\"@editAction\",\"@toggleModal\",\"@updateModal\"],[[22,\"model\"],true,[22,\"editCategoryModal\"],[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                assert.equal(_category.default.newForm.nameValue, category.name);
                assert.equal(_category.default.newForm.descriptionValue, category.description);

              case 9:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x7) {
        return _ref8.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-solutions/category-list/category-header/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/pages/components/module-solutions/common"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _common) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-solutions/category-list/category-header', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _qunit.test)('Should render category header with folders', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var store;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.server.loadFixtures('categories');
                this.server.loadFixtures('folders');
                store = this.owner.lookup('service:store');
                _context.t0 = Ember;
                _context.t1 = this;
                _context.next = 7;
                return store.findRecord('category', 1);

              case 7:
                _context.t2 = _context.sent;

                _context.t0.set.call(_context.t0, _context.t1, 'category', _context.t2);

                _context.next = 11;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::CategoryList::CategoryHeader @category={{category}} />
                */
                {
                  id: "5MZJ6t8p",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/category-list/category-header\",[],[[\"@category\"],[[22,\"category\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 11:
                _context.next = 13;
                return _common.default.sidebar.openCategory();

              case 13:
                assert.equal(_common.default.sidebar.categoryCount, 1);
                assert.equal(_common.default.sidebar.folderCount, 1);

              case 15:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-solutions/category-list/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/pages/components/module-solutions/category"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _category) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-solutions/category-list', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.server.loadFixtures('categories');
              this.server.loadFixtures('folders');
              Ember.set(this, 'store', this.owner.lookup('service:store'));

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('Should render all categories and perform reorder', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var categories, orginalList, indexCategoryText;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.store.findAll('category');

              case 2:
                categories = _context2.sent;
                orginalList = categories.map(function (category) {
                  return category.name;
                });
                Ember.set(this, 'categories', categories);
                _context2.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::CategoryList @categories={{categories}} />
                */
                {
                  id: "txbC/HbK",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/category-list\",[],[[\"@categories\"],[[22,\"categories\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                indexCategoryText = _category.default.reordering.list.objectAt(0).text;
                _context2.next = 10;
                return _category.default.reordering.lib.sort(0, 3, false);

              case 10:
                assert.equal(_category.default.reordering.lib.items().count, categories.length);
                assert.notEqual(_category.default.reordering.list.objectAt(0).text, indexCategoryText);
                assert.equal(_category.default.reordering.list.objectAt(3).text, indexCategoryText);
                assert.notOk(_category.default.reordering.compareList(orginalList, _category.default.reordering.list.mapBy('text')));

              case 14:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-solutions/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/pages/components/utils/form-fields", "freshservice/tests/pages/components/module-solutions/folder", "freshservice/tests/pages/components/module-solutions/common", "freshservice/tests/pages/components/module-solutions/category"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _formFields, _folder, _common, _category) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var SELECT = {
    folder: 'Folder',
    category: 'Category'
  };
  var ROUTER_STUB = {
    params: {
      filter_type: "all_articles"
    }
  };
  (0, _qunit.module)('Integration | Component | module-solutions', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _qunit.test)('Should render main solutions component', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var router, store, categories;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                router = this.owner.lookup('router:main');
                router.currentRoute = ROUTER_STUB;
                router.setupRouter();
                store = this.owner.lookup('service:store');
                _context.next = 6;
                return store.findAll('category');

              case 6:
                categories = _context.sent;
                Ember.set(this, 'model', categories);
                _context.next = 10;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions @model={{model}}>{{outlet}}</ModuleSolutions>
                */
                {
                  id: "e65ljJko",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions\",[],[[\"@model\"],[[22,\"model\"]]],{\"statements\":[[1,[22,\"outlet\"],false]],\"parameters\":[]}]],\"hasEval\":false}",
                  meta: {}
                }));

              case 10:
                _context.next = 12;
                return _formFields.default.selectBasicDropdown('module-entities', SELECT.folder);

              case 12:
                assert.equal(_common.default.moduleEntities, 4);
                _context.next = 15;
                return _folder.default.newForm.cancel();

              case 15:
                assert.notOk(_folder.default.newForm.exists);
                _context.next = 18;
                return _formFields.default.selectBasicDropdown('module-entities', SELECT.category);

              case 18:
                _context.next = 20;
                return _category.default.newForm.cancel();

              case 20:
                assert.notOk(_category.default.newForm.exists);

              case 21:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-solutions/folder-form/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/stub-current-account", "freshservice/config/environment", "freshservice/tests/lib/spy-flash-message", "freshservice/tests/pages/components/utils/form-fields", "freshservice/tests/pages/components/module-solutions/folder"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _sinonContext, _stubCurrentAccount, _environment, _spyFlashMessage, _formFields, _folder) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var MOCK_DATA = {
    name: 'Solutions',
    description: 'Solutions',
    categoryId: '1',
    manageByGroupIds: [{
      id: '1',
      name: "Support Team"
    }],
    requesterGroupIds: [{
      id: '1',
      value: "Support Team"
    }],
    departmentIds: [{
      id: '1',
      value: "Support Team"
    }],
    groupIds: [{
      id: '1',
      value: "Support Team"
    }],
    approvalSettings: {
      approverIds: [{
        id: '1',
        name: "Support"
      }, {
        id: '2',
        name: 'Test'
      }]
    }
  };
  var SELECT = {
    supportTeam: 'Support Team',
    support: 'Support'
  };
  (0, _qunit.module)('Integration | Component | module-solutions/folder-form', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.server.loadFixtures('agents');
              this.server.loadFixtures('categories');
              this.server.loadFixtures('folders');
              Ember.set(this, 'store', this.owner.lookup('service:store'));

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    hooks.afterEach(function () {
      this.owner.destroy('service:current-account');
    });
    (0, _qunit.test)('Should render new folder with default fields', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                Ember.setProperties(this, {
                  newFolderModal: true,
                  updateModal: function updateModal() {
                    return Ember.set(_this, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::FolderForm @toggleModal={{newFolderModal}} @updateModal={{action updateModal}} />
                */
                {
                  id: "Ch+UpAao",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/folder-form\",[],[[\"@toggleModal\",\"@updateModal\"],[[22,\"newFolderModal\"],[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.ok(_folder.default.newForm.exists);
                assert.ok(_folder.default.newForm.hasFieldName);
                assert.ok(_folder.default.newForm.hasFieldDescription);
                assert.ok(_folder.default.newForm.hasFieldCategoryId);
                assert.ok(_folder.default.newForm.hasFieldManageByGroupIds);
                assert.ok(_folder.default.newForm.hasFieldVisibility);

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }()); // no need to check folder save with msp enabled because endpoint is same

    (0, _qunit.skip)('Should render new folder with msp field (company)', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var _this2 = this;

        var deparmentField;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                (0, _stubCurrentAccount.stubCurrentAccount)({
                  features: ['msp_plugin']
                });
                Ember.setProperties(this, {
                  newFolderModal: true,
                  updateModal: function updateModal() {
                    return Ember.set(_this2, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context3.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::FolderForm @toggleModal={{newFolderModal}} @updateModal={{action updateModal}} />
                */
                {
                  id: "Ch+UpAao",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/folder-form\",[],[[\"@toggleModal\",\"@updateModal\"],[[22,\"newFolderModal\"],[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context3.next = 6;
                return _formFields.default.selectSingle('visibility', '3');

              case 6:
                assert.ok(_folder.default.newForm.hasFieldDepartmentIds); // TODO: MSP mode set in env not working

                _context3.next = 9;
                return _formFields.default.getDataForField('departmentIds');

              case 9:
                deparmentField = _context3.sent;
                assert.equal(deparmentField.label, 'Department');
                Ember.set(_environment.default.APP, 'mspEnabled', false);

              case 12:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render new folder with different visibility fields', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var _this3 = this;

        var visibilityField;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                Ember.setProperties(this, {
                  newFolderModal: true,
                  updateModal: function updateModal() {
                    return Ember.set(_this3, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context4.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::FolderForm @toggleModal={{newFolderModal}} @updateModal={{action updateModal}} />
                */
                {
                  id: "Ch+UpAao",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/folder-form\",[],[[\"@toggleModal\",\"@updateModal\"],[[22,\"newFolderModal\"],[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context4.next = 5;
                return _formFields.default.getDataForField('visibility', true);

              case 5:
                visibilityField = _context4.sent;
                assert.equal(visibilityField.count, 6);
                _context4.next = 9;
                return _formFields.default.selectSingle('visibility', '3');

              case 9:
                assert.ok(_folder.default.newForm.hasFieldDepartmentIds);
                assert.notOk(_folder.default.newForm.hasFieldGroupIds);
                assert.notOk(_folder.default.newForm.hasFieldRequesterGroupIds);
                _context4.next = 14;
                return _formFields.default.selectSingle('visibility', '4');

              case 14:
                assert.notOk(_folder.default.newForm.hasFieldDepartmentIds);
                assert.ok(_folder.default.newForm.hasFieldGroupIds);
                assert.notOk(_folder.default.newForm.hasFieldRequesterGroupIds);
                _context4.next = 19;
                return _formFields.default.selectSingle('visibility', '5');

              case 19:
                assert.notOk(_folder.default.newForm.hasFieldDepartmentIds);
                assert.notOk(_folder.default.newForm.hasFieldGroupIds);
                assert.ok(_folder.default.newForm.hasFieldRequesterGroupIds);

              case 22:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render new folder form with approvals', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var _this4 = this;

        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                (0, _stubCurrentAccount.stubCurrentAccount)({
                  features: ['solution_approvals']
                });
                Ember.setProperties(this, {
                  newFolderModal: true,
                  updateModal: function updateModal() {
                    return Ember.set(_this4, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context5.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::FolderForm @toggleModal={{newFolderModal}} @updateModal={{action updateModal}} />
                */
                {
                  id: "Ch+UpAao",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/folder-form\",[],[[\"@toggleModal\",\"@updateModal\"],[[22,\"newFolderModal\"],[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context5.next = 6;
                return _folder.default.newForm.addApproval();

              case 6:
                assert.ok(_folder.default.newForm.hasFieldApproverIds);
                assert.equal(_folder.default.newForm.hasFieldApprovalType, 3);

              case 8:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render new folder form without approvals', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var _this5 = this;

        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                (0, _stubCurrentAccount.stubCurrentAccount)();
                Ember.setProperties(this, {
                  newFolderModal: true,
                  updateModal: function updateModal() {
                    return Ember.set(_this5, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context6.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::FolderForm @toggleModal={{newFolderModal}} @updateModal={{action updateModal}} />
                */
                {
                  id: "Ch+UpAao",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/folder-form\",[],[[\"@toggleModal\",\"@updateModal\"],[[22,\"newFolderModal\"],[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                assert.notOk(_folder.default.newForm.hasFieldApproverIds);
                assert.equal(_folder.default.newForm.hasFieldApprovalType, 0);

              case 6:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should throw error when saving folder with same name', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var _this6 = this;

        var errorFlash;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                errorFlash = (0, _spyFlashMessage.default)('danger');
                Ember.setProperties(this, {
                  newFolderModal: true,
                  updateModal: function updateModal() {
                    return Ember.set(_this6, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context7.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::FolderForm @toggleModal={{newFolderModal}} @updateModal={{action updateModal}} />
                */
                {
                  id: "Ch+UpAao",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/folder-form\",[],[[\"@toggleModal\",\"@updateModal\"],[[22,\"newFolderModal\"],[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context7.next = 6;
                return _folder.default.newForm.fillName('Test Folder');

              case 6:
                _context7.next = 8;
                return _folder.default.newForm.fillDescription(MOCK_DATA.description);

              case 8:
                _context7.next = 10;
                return _formFields.default.selectSingle('categoryId', MOCK_DATA.categoryId);

              case 10:
                _context7.next = 12;
                return _folder.default.newForm.save();

              case 12:
                assert.ok(errorFlash.calledOnce);

              case 13:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x6) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should throw 500 error if invalid params found, when saving folder', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var _this7 = this;

        var errorFlash;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                errorFlash = (0, _spyFlashMessage.default)('danger');
                Ember.setProperties(this, {
                  newFolderModal: true,
                  updateModal: function updateModal() {
                    return Ember.set(_this7, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context8.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::FolderForm @toggleModal={{newFolderModal}} @updateModal={{action updateModal}} />
                */
                {
                  id: "Ch+UpAao",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/folder-form\",[],[[\"@toggleModal\",\"@updateModal\"],[[22,\"newFolderModal\"],[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context8.next = 6;
                return _folder.default.newForm.fillName(500);

              case 6:
                _context8.next = 8;
                return _folder.default.newForm.fillDescription(MOCK_DATA.description);

              case 8:
                _context8.next = 10;
                return _formFields.default.selectSingle('categoryId', MOCK_DATA.categoryId);

              case 10:
                _context8.next = 12;
                return _folder.default.newForm.save();

              case 12:
                assert.ok(errorFlash.calledOnce);

              case 13:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x7) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should throw error when adding invalid approvers', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        var _this8 = this;

        var errorFlash, visibilityField, manageByGroupField;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                (0, _stubCurrentAccount.stubCurrentAccount)({
                  features: ['solution_approvals']
                });
                errorFlash = (0, _spyFlashMessage.default)('danger');
                Ember.setProperties(this, {
                  newFolderModal: true,
                  updateModal: function updateModal() {
                    return Ember.set(_this8, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context9.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::FolderForm @toggleModal={{newFolderModal}} @updateModal={{action updateModal}} />
                */
                {
                  id: "Ch+UpAao",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/folder-form\",[],[[\"@toggleModal\",\"@updateModal\"],[[22,\"newFolderModal\"],[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                _context9.next = 7;
                return _folder.default.newForm.fillName(MOCK_DATA.name).fillDescription(MOCK_DATA.description);

              case 7:
                _context9.next = 9;
                return _formFields.default.selectSingle('categoryId', MOCK_DATA.categoryId);

              case 9:
                _context9.next = 11;
                return _folder.default.newForm.addApproval().selectApprovalTypeAll();

              case 11:
                _context9.next = 13;
                return _formFields.default.autocompleteSelectMultiple('approvalSettings.approverIds', MOCK_DATA.approvalSettings.approverIds[1].name, '1');

              case 13:
                _context9.next = 15;
                return _formFields.default.getDataForField('visibility', true);

              case 15:
                visibilityField = _context9.sent;
                _context9.next = 18;
                return _formFields.default.getDataForField('manageByGroupIds', true);

              case 18:
                manageByGroupField = _context9.sent;
                assert.equal(visibilityField.selected.trim(), 'All');
                assert.equal(manageByGroupField.count, 0);
                _context9.next = 23;
                return _folder.default.newForm.save();

              case 23:
                assert.ok(errorFlash.calledOnce);

              case 24:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x8) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should close modal on cancel click edit/new', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var _this9 = this;

        var folder;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return this.store.findRecord('folder', 1);

              case 2:
                folder = _context10.sent;
                Ember.setProperties(this, {
                  newFolderModal: true,
                  editFolderModal: true,
                  updateModal: function updateModal() {
                    return Ember.set(_this9, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  },
                  model: folder
                });
                _context10.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::FolderForm @toggleModal={{newFolderModal}} @updateModal={{action updateModal}} />
                */
                {
                  id: "Ch+UpAao",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/folder-form\",[],[[\"@toggleModal\",\"@updateModal\"],[[22,\"newFolderModal\"],[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                _context10.next = 8;
                return _folder.default.newForm.cancel();

              case 8:
                assert.notOk(_folder.default.newForm.exists);
                _context10.next = 11;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::FolderForm @toggleModal={{editFolderModal}} @updateModal={{action updateModal}} @editFolder={{model}} @editAction={{true}} />
                */
                {
                  id: "4ypZ53HX",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/folder-form\",[],[[\"@toggleModal\",\"@updateModal\",\"@editFolder\",\"@editAction\"],[[22,\"editFolderModal\"],[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null],[22,\"model\"],true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 11:
                _context10.next = 13;
                return _folder.default.newForm.cancel();

              case 13:
                assert.notOk(_folder.default.newForm.exists);

              case 14:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x9) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render validation errors on submit without data', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        var _this10 = this;

        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                Ember.setProperties(this, {
                  newFolderModal: true,
                  updateModal: function updateModal() {
                    return Ember.set(_this10, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context11.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::FolderForm @toggleModal={{newFolderModal}} @updateModal={{action updateModal}} />
                */
                {
                  id: "Ch+UpAao",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/folder-form\",[],[[\"@toggleModal\",\"@updateModal\"],[[22,\"newFolderModal\"],[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context11.next = 5;
                return _folder.default.newForm.save();

              case 5:
                assert.ok(_folder.default.newForm.hasErrorName);

              case 6:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x10) {
        return _ref12.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render validation errors on submit without data, when assign approvers is checked', /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        var _this11 = this;

        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                (0, _stubCurrentAccount.stubCurrentAccount)({
                  features: ['solution_approvals']
                });
                Ember.setProperties(this, {
                  newFolderModal: true,
                  updateModal: function updateModal() {
                    return Ember.set(_this11, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context12.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::FolderForm @toggleModal={{newFolderModal}} @updateModal={{action updateModal}} />
                */
                {
                  id: "Ch+UpAao",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/folder-form\",[],[[\"@toggleModal\",\"@updateModal\"],[[22,\"newFolderModal\"],[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context12.next = 6;
                return _folder.default.newForm.addApproval();

              case 6:
                _context12.next = 8;
                return _folder.default.newForm.save();

              case 8:
                assert.ok(_folder.default.newForm.hasErrorName);
                assert.ok(_folder.default.newForm.hasErrorApproverIds);
                assert.ok(_folder.default.newForm.hasErrorApprovalType);

              case 11:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x11) {
        return _ref13.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should save new folder form with approvals, visibility as all and manageByGroupIds as all groups', /*#__PURE__*/function () {
      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
        var _this12 = this;

        var successFlash, visibilityField, manageByGroupField;
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                (0, _stubCurrentAccount.stubCurrentAccount)({
                  features: ['solution_approvals']
                });
                successFlash = (0, _spyFlashMessage.default)('success');
                Ember.setProperties(this, {
                  newFolderModal: true,
                  updateModal: function updateModal() {
                    return Ember.set(_this12, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context13.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::FolderForm @toggleModal={{newFolderModal}} @updateModal={{action updateModal}} />
                */
                {
                  id: "Ch+UpAao",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/folder-form\",[],[[\"@toggleModal\",\"@updateModal\"],[[22,\"newFolderModal\"],[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                _context13.next = 7;
                return _folder.default.newForm.fillName(MOCK_DATA.name);

              case 7:
                _context13.next = 9;
                return _folder.default.newForm.fillDescription(MOCK_DATA.description);

              case 9:
                _context13.next = 11;
                return _formFields.default.selectSingle('categoryId', MOCK_DATA.categoryId);

              case 11:
                _context13.next = 13;
                return _folder.default.newForm.addApproval().selectApprovalTypeAll();

              case 13:
                _context13.next = 15;
                return _formFields.default.autocompleteSelectMultiple('approvalSettings.approverIds', MOCK_DATA.approvalSettings.approverIds[0].name, '0');

              case 15:
                _context13.next = 17;
                return _formFields.default.getDataForField('visibility', true);

              case 17:
                visibilityField = _context13.sent;
                _context13.next = 20;
                return _formFields.default.getDataForField('manageByGroupIds', true);

              case 20:
                manageByGroupField = _context13.sent;
                assert.equal(visibilityField.selected.trim(), 'All');
                assert.equal(manageByGroupField.count, 0);
                _context13.next = 25;
                return _folder.default.newForm.save();

              case 25:
                assert.ok(successFlash.calledOnce);

              case 26:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      return function (_x12) {
        return _ref14.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should save new folder form without approvals, visibility as all and manageByGroupIds as all groups', /*#__PURE__*/function () {
      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {
        var _this13 = this;

        var successFlash, visibilityField, manageByGroupField;
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                (0, _stubCurrentAccount.stubCurrentAccount)();
                successFlash = (0, _spyFlashMessage.default)('success');
                Ember.setProperties(this, {
                  newFolderModal: true,
                  updateModal: function updateModal() {
                    return Ember.set(_this13, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context14.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::FolderForm @toggleModal={{newFolderModal}} @updateModal={{action updateModal}} />
                */
                {
                  id: "Ch+UpAao",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/folder-form\",[],[[\"@toggleModal\",\"@updateModal\"],[[22,\"newFolderModal\"],[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                _context14.next = 7;
                return _folder.default.newForm.fillName(MOCK_DATA.name);

              case 7:
                _context14.next = 9;
                return _folder.default.newForm.fillDescription(MOCK_DATA.description);

              case 9:
                _context14.next = 11;
                return _formFields.default.selectSingle('categoryId', MOCK_DATA.categoryId);

              case 11:
                _context14.next = 13;
                return _formFields.default.getDataForField('visibility', true);

              case 13:
                visibilityField = _context14.sent;
                _context14.next = 16;
                return _formFields.default.getDataForField('manageByGroupIds', true);

              case 16:
                manageByGroupField = _context14.sent;
                assert.equal(visibilityField.selected.trim(), 'All');
                assert.equal(manageByGroupField.count, 0);
                _context14.next = 21;
                return _folder.default.newForm.save();

              case 21:
                assert.ok(successFlash.calledOnce);

              case 22:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      return function (_x13) {
        return _ref15.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should save new folder with manageByGroupIds', /*#__PURE__*/function () {
      var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {
        var _this14 = this;

        var successFlash;
        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                successFlash = (0, _spyFlashMessage.default)('success');
                Ember.setProperties(this, {
                  newFolderModal: true,
                  updateModal: function updateModal() {
                    return Ember.set(_this14, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context15.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::FolderForm @toggleModal={{newFolderModal}} @updateModal={{action updateModal}} />
                */
                {
                  id: "Ch+UpAao",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/folder-form\",[],[[\"@toggleModal\",\"@updateModal\"],[[22,\"newFolderModal\"],[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context15.next = 6;
                return _folder.default.newForm.fillName(MOCK_DATA.name);

              case 6:
                _context15.next = 8;
                return _folder.default.newForm.fillDescription(MOCK_DATA.description);

              case 8:
                _context15.next = 10;
                return _formFields.default.selectSingle('categoryId', MOCK_DATA.categoryId);

              case 10:
                _context15.next = 12;
                return _formFields.default.autocompleteSelectMultiple('manageByGroupIds', MOCK_DATA.groupIds[0].value, '0');

              case 12:
                _context15.next = 14;
                return _folder.default.newForm.save();

              case 14:
                assert.ok(successFlash.calledOnce);

              case 15:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      return function (_x14) {
        return _ref16.apply(this, arguments);
      };
    }());
    (0, _qunit.skip)('Should save new folder with different visibility, visibility selected is departmentIds', /*#__PURE__*/function () {
      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(assert) {
        var _this15 = this;

        var successFlash;
        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                successFlash = (0, _spyFlashMessage.default)('success');
                Ember.setProperties(this, {
                  newFolderModal: true,
                  updateModal: function updateModal() {
                    return Ember.set(_this15, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context16.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::FolderForm @toggleModal={{newFolderModal}} @updateModal={{action updateModal}} />
                */
                {
                  id: "Ch+UpAao",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/folder-form\",[],[[\"@toggleModal\",\"@updateModal\"],[[22,\"newFolderModal\"],[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context16.next = 6;
                return _folder.default.newForm.fillName(MOCK_DATA.name);

              case 6:
                _context16.next = 8;
                return _folder.default.newForm.fillDescription(MOCK_DATA.description);

              case 8:
                _context16.next = 10;
                return _formFields.default.selectSingle('categoryId', MOCK_DATA.categoryId);

              case 10:
                _context16.next = 12;
                return _formFields.default.selectSingle('visibility', '3');

              case 12:
                assert.ok(_folder.default.newForm.hasFieldDepartmentIds);
                _context16.next = 15;
                return _formFields.default.autocompleteSelectMultiple('departmentIds', MOCK_DATA.departmentIds[0].value, '0');

              case 15:
                _context16.next = 17;
                return _folder.default.newForm.save();

              case 17:
                assert.ok(successFlash.calledOnce);

              case 18:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      return function (_x15) {
        return _ref17.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should save new folder with different visibility, visibility selected is groupIds', /*#__PURE__*/function () {
      var _ref18 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(assert) {
        var _this16 = this;

        var successFlash;
        return regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                successFlash = (0, _spyFlashMessage.default)('success');
                Ember.setProperties(this, {
                  newFolderModal: true,
                  updateModal: function updateModal() {
                    return Ember.set(_this16, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context17.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::FolderForm @toggleModal={{newFolderModal}} @updateModal={{action updateModal}} />
                */
                {
                  id: "Ch+UpAao",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/folder-form\",[],[[\"@toggleModal\",\"@updateModal\"],[[22,\"newFolderModal\"],[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context17.next = 6;
                return _folder.default.newForm.fillName(MOCK_DATA.name);

              case 6:
                _context17.next = 8;
                return _folder.default.newForm.fillDescription(MOCK_DATA.description);

              case 8:
                _context17.next = 10;
                return _formFields.default.selectSingle('categoryId', MOCK_DATA.categoryId);

              case 10:
                _context17.next = 12;
                return _formFields.default.selectSingle('visibility', '4');

              case 12:
                assert.ok(_folder.default.newForm.hasFieldGroupIds);
                _context17.next = 15;
                return _formFields.default.autocompleteSelectMultiple('groupIds', MOCK_DATA.groupIds[0].value, '0');

              case 15:
                _context17.next = 17;
                return _folder.default.newForm.save();

              case 17:
                assert.ok(successFlash.calledOnce);

              case 18:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      return function (_x16) {
        return _ref18.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should save new folder with different visibility, visibility selected is requesterGroupIds', /*#__PURE__*/function () {
      var _ref19 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(assert) {
        var _this17 = this;

        var successFlash;
        return regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                successFlash = (0, _spyFlashMessage.default)('success');
                Ember.setProperties(this, {
                  newFolderModal: true,
                  updateModal: function updateModal() {
                    return Ember.set(_this17, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context18.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::FolderForm @toggleModal={{newFolderModal}} @updateModal={{action updateModal}} />
                */
                {
                  id: "Ch+UpAao",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/folder-form\",[],[[\"@toggleModal\",\"@updateModal\"],[[22,\"newFolderModal\"],[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context18.next = 6;
                return _folder.default.newForm.fillName(MOCK_DATA.name);

              case 6:
                _context18.next = 8;
                return _folder.default.newForm.fillDescription(MOCK_DATA.description);

              case 8:
                _context18.next = 10;
                return _formFields.default.selectSingle('categoryId', MOCK_DATA.categoryId);

              case 10:
                _context18.next = 12;
                return _formFields.default.selectSingle('visibility', '5');

              case 12:
                assert.ok(_folder.default.newForm.hasFieldRequesterGroupIds);
                _context18.next = 15;
                return _formFields.default.autocompleteSelectMultiple('requesterGroupIds', MOCK_DATA.requesterGroupIds[0].value, '0');

              case 15:
                _context18.next = 17;
                return _folder.default.newForm.save();

              case 17:
                assert.ok(successFlash.calledOnce);

              case 18:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      return function (_x17) {
        return _ref19.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render edit folder form with approvals, visibility as all and manageByGroupIds as all groups', /*#__PURE__*/function () {
      var _ref20 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19(assert) {
        var _this18 = this;

        var editFolder, categoryField, approverIdsField, approvalTypeField;
        return regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                (0, _stubCurrentAccount.stubCurrentAccount)({
                  features: ['solution_approvals']
                });
                _context19.next = 3;
                return this.store.findRecord('folder', 1);

              case 3:
                editFolder = _context19.sent;
                Ember.setProperties(this, {
                  editFolderModal: true,
                  model: editFolder,
                  updateModal: function updateModal() {
                    return Ember.set(_this18, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context19.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::FolderForm @editFolder={{model}} @editAction={{true}} @toggleModal={{editFolderModal}} @updateModal={{action updateModal}} />
                */
                {
                  id: "paofQPGX",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/folder-form\",[],[[\"@editFolder\",\"@editAction\",\"@toggleModal\",\"@updateModal\"],[[22,\"model\"],true,[22,\"editFolderModal\"],[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                assert.ok(_folder.default.newForm.exists);
                assert.equal(_folder.default.newForm.getName, editFolder.name);
                assert.equal(_folder.default.newForm.getDescription, editFolder.description);
                _context19.next = 12;
                return _formFields.default.getDataForField('categoryId', true);

              case 12:
                categoryField = _context19.sent;
                _context19.next = 15;
                return _formFields.default.getDataForField('approvalSettings.approverIds', true);

              case 15:
                approverIdsField = _context19.sent;
                _context19.next = 18;
                return _formFields.default.getDataForField('approvalSettings.approvalType', true);

              case 18:
                approvalTypeField = _context19.sent;
                assert.equal(categoryField.selected.trim(), editFolder.categoryName);
                assert.equal(approverIdsField.selected[0], SELECT.support);
                assert.equal(approvalTypeField.selected.value, editFolder.approvalSettings.approvalType);
                assert.equal(approvalTypeField.selected.checked, true);

              case 23:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19, this);
      }));

      return function (_x18) {
        return _ref20.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render edit folder with approvals, and remove approval config on unchecking Assign Approvers', /*#__PURE__*/function () {
      var _ref21 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20(assert) {
        var _this19 = this;

        var folder;
        return regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                (0, _stubCurrentAccount.stubCurrentAccount)({
                  features: ['solution_approvals']
                });
                _context20.next = 3;
                return this.store.findRecord('folder', 1);

              case 3:
                folder = _context20.sent;
                Ember.setProperties(this, {
                  editFolderModal: true,
                  model: folder,
                  updateModal: function updateModal() {
                    return Ember.set(_this19, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context20.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::FolderForm @editFolder={{model}} @editAction={{true}} @toggleModal={{editFolderModal}} @updateModal={{action updateModal}} />
                */
                {
                  id: "paofQPGX",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/folder-form\",[],[[\"@editFolder\",\"@editAction\",\"@toggleModal\",\"@updateModal\"],[[22,\"model\"],true,[22,\"editFolderModal\"],[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                assert.ok(_folder.default.newForm.exists);
                _context20.next = 10;
                return _folder.default.newForm.addApproval();

              case 10:
                assert.notOk(_folder.default.newForm.hasFieldApproverIds);
                assert.equal(_folder.default.newForm.hasFieldApprovalType, 0);

              case 12:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20, this);
      }));

      return function (_x19) {
        return _ref21.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render edit folder form without approvals, visibility as all and manageByGroupIds as all groups', /*#__PURE__*/function () {
      var _ref22 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21(assert) {
        var _this20 = this;

        var editFolder, categoryField;
        return regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                _context21.next = 2;
                return this.store.findRecord('folder', 1);

              case 2:
                editFolder = _context21.sent;
                Ember.setProperties(this, {
                  editFolderModal: true,
                  model: editFolder,
                  updateModal: function updateModal() {
                    return Ember.set(_this20, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context21.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::FolderForm @editFolder={{model}} @editAction={{true}} @toggleModal={{editFolderModal}} @updateModal={{action updateModal}} />
                */
                {
                  id: "paofQPGX",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/folder-form\",[],[[\"@editFolder\",\"@editAction\",\"@toggleModal\",\"@updateModal\"],[[22,\"model\"],true,[22,\"editFolderModal\"],[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                assert.ok(_folder.default.newForm.exists);
                assert.equal(_folder.default.newForm.getName, editFolder.name);
                assert.equal(_folder.default.newForm.getDescription, editFolder.description);
                _context21.next = 11;
                return _formFields.default.getDataForField('categoryId', true);

              case 11:
                categoryField = _context21.sent;
                assert.equal(categoryField.selected.trim(), editFolder.categoryName);

              case 13:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21, this);
      }));

      return function (_x20) {
        return _ref22.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render edit folder form with manageByGroupIds', /*#__PURE__*/function () {
      var _ref23 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22(assert) {
        var _this21 = this;

        var folder, manageByGroupField;
        return regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                _context22.next = 2;
                return this.store.findRecord('folder', 1);

              case 2:
                folder = _context22.sent;
                Ember.setProperties(this, {
                  editFolderModal: true,
                  model: folder,
                  updateModal: function updateModal() {
                    return Ember.set(_this21, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context22.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::FolderForm @editFolder={{model}} @editAction={{true}} @toggleModal={{editFolderModal}} @updateModal={{action updateModal}} />
                */
                {
                  id: "paofQPGX",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/folder-form\",[],[[\"@editFolder\",\"@editAction\",\"@toggleModal\",\"@updateModal\"],[[22,\"model\"],true,[22,\"editFolderModal\"],[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                _context22.next = 8;
                return _formFields.default.getDataForField('manageByGroupIds', true);

              case 8:
                manageByGroupField = _context22.sent;
                assert.equal(manageByGroupField.selected[0], SELECT.supportTeam);

              case 10:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22, this);
      }));

      return function (_x21) {
        return _ref23.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render edit folder form with visibility selected as departmentIds', /*#__PURE__*/function () {
      var _ref24 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23(assert) {
        var _this22 = this;

        var folder, departmentField;
        return regeneratorRuntime.wrap(function _callee23$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                _context23.next = 2;
                return this.store.findRecord('folder', 3);

              case 2:
                folder = _context23.sent;
                Ember.setProperties(this, {
                  editFolderModal: true,
                  model: folder,
                  updateModal: function updateModal() {
                    return Ember.set(_this22, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context23.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::FolderForm @editFolder={{model}} @editAction={{true}} @toggleModal={{editFolderModal}} @updateModal={{action updateModal}} />
                */
                {
                  id: "paofQPGX",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/folder-form\",[],[[\"@editFolder\",\"@editAction\",\"@toggleModal\",\"@updateModal\"],[[22,\"model\"],true,[22,\"editFolderModal\"],[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                _context23.next = 8;
                return _formFields.default.getDataForField('departmentIds', true);

              case 8:
                departmentField = _context23.sent;
                assert.equal(departmentField.selected[0], SELECT.supportTeam);

              case 10:
              case "end":
                return _context23.stop();
            }
          }
        }, _callee23, this);
      }));

      return function (_x22) {
        return _ref24.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render edit folder form with visibility selected as groupIds', /*#__PURE__*/function () {
      var _ref25 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24(assert) {
        var _this23 = this;

        var folder, groupField;
        return regeneratorRuntime.wrap(function _callee24$(_context24) {
          while (1) {
            switch (_context24.prev = _context24.next) {
              case 0:
                _context24.next = 2;
                return this.store.findRecord('folder', 4);

              case 2:
                folder = _context24.sent;
                Ember.setProperties(this, {
                  editFolderModal: true,
                  model: folder,
                  updateModal: function updateModal() {
                    return Ember.set(_this23, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context24.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::FolderForm @editFolder={{model}} @editAction={{true}} @toggleModal={{editFolderModal}} @updateModal={{action updateModal}} />
                */
                {
                  id: "paofQPGX",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/folder-form\",[],[[\"@editFolder\",\"@editAction\",\"@toggleModal\",\"@updateModal\"],[[22,\"model\"],true,[22,\"editFolderModal\"],[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                _context24.next = 8;
                return _formFields.default.getDataForField('groupIds', true);

              case 8:
                groupField = _context24.sent;
                assert.equal(groupField.selected[0], SELECT.supportTeam);

              case 10:
              case "end":
                return _context24.stop();
            }
          }
        }, _callee24, this);
      }));

      return function (_x23) {
        return _ref25.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render edit folder form with visibility selected as requesterGroupIds', /*#__PURE__*/function () {
      var _ref26 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee25(assert) {
        var _this24 = this;

        var folder, requesterGroupField;
        return regeneratorRuntime.wrap(function _callee25$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                _context25.next = 2;
                return this.store.findRecord('folder', 5);

              case 2:
                folder = _context25.sent;
                Ember.setProperties(this, {
                  editFolderModal: true,
                  model: folder,
                  updateModal: function updateModal() {
                    return Ember.set(_this24, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
                  }
                });
                _context25.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::FolderForm @editFolder={{model}} @editAction={{true}} @toggleModal={{editFolderModal}} @updateModal={{action updateModal}} />
                */
                {
                  id: "paofQPGX",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/folder-form\",[],[[\"@editFolder\",\"@editAction\",\"@toggleModal\",\"@updateModal\"],[[22,\"model\"],true,[22,\"editFolderModal\"],[28,\"action\",[[23,0,[]],[24,[\"updateModal\"]]],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                _context25.next = 8;
                return _formFields.default.getDataForField('requesterGroupIds', true);

              case 8:
                requesterGroupField = _context25.sent;
                assert.equal(requesterGroupField.selected[0], SELECT.supportTeam);

              case 10:
              case "end":
                return _context25.stop();
            }
          }
        }, _callee25, this);
      }));

      return function (_x24) {
        return _ref26.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-solutions/folder-list/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/pages/components/module-solutions/folder"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _folder) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-solutions/folder-list', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.server.loadFixtures('categories');
              this.server.loadFixtures('folders');
              Ember.set(this, 'store', this.owner.lookup('service:store'));

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('Should render component and perform reorder', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var category, folders, orginalList, indexFolderText;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.store.findRecord('category', 2);

              case 2:
                category = _context2.sent;
                _context2.next = 5;
                return this.store.query('folder', {
                  category_id: 2
                });

              case 5:
                folders = _context2.sent;
                orginalList = folders.map(function (folder) {
                  return folder.name;
                });
                Ember.set(this, 'category', category);
                _context2.next = 10;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleSolutions::FolderList @class="folder-list" @category={{category}} />
                */
                {
                  id: "K8SiPCw0",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-solutions/folder-list\",[],[[\"@class\",\"@category\"],[\"folder-list\",[22,\"category\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 10:
                indexFolderText = _folder.default.reordering.list.objectAt(0).text;
                _context2.next = 13;
                return _folder.default.reordering.lib.sort(0, 3, false);

              case 13:
                assert.equal(_folder.default.reordering.lib.items().count, folders.length);
                assert.notEqual(_folder.default.reordering.list.objectAt(0).text, indexFolderText);
                assert.equal(_folder.default.reordering.list.objectAt(3).text, indexFolderText);
                assert.notOk(_folder.default.reordering.compareList(orginalList, _folder.default.reordering.list.mapBy('text')));

              case 17:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-tickets/details/apps/conversation/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support"], function (_qunit, _emberQunit, _testHelpers, _testSupport) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | app-components | module-tickets/details/apps/conversation', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var store;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              store = this.owner.lookup('service:store');
              _context.next = 3;
              return store.query('ticket-freshdesk-conversation', {
                id: 12
              });

            case 3:
              this.conversations = _context.sent;

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }))); // #1

    (0, _qunit.test)('Should render integrated-app-freshdesk conversation Component', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.conversation = this.conversations.objectAt(0);
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::Apps::Conversation @conversation={{this.conversation}} />
                */
                {
                  id: "iBHjSvGb",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/apps/conversation\",[],[[\"@conversation\"],[[23,0,[\"conversation\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.equal(this.element.querySelector('.user').textContent.trim(), 'Freshservice User', 'Conversation requester name matches');

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }()); // #2

    (0, _qunit.test)('Should render integrated-app-freshdesk conversation without attachments', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this.conversation = this.conversations.objectAt(0);
                _context3.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::Apps::Conversation @conversation={{this.conversation}} />
                */
                {
                  id: "iBHjSvGb",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/apps/conversation\",[],[[\"@conversation\"],[[23,0,[\"conversation\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.dom('.conversation-attachments').doesNotExist("Conversation Attachments - does not exists");

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }()); // #3

    (0, _qunit.test)('Should render integrated-app-freshdesk conversation with attachments', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                this.conversation = this.conversations.objectAt(1);
                _context4.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::Apps::Conversation @conversation={{this.conversation}} />
                */
                {
                  id: "iBHjSvGb",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/apps/conversation\",[],[[\"@conversation\"],[[23,0,[\"conversation\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.dom('.conversation-attachments').exists({
                  count: 1
                }, "Conversation Attachments - exists");
                assert.equal(this.element.querySelector('.conversation-attachments .attachment .file-name').textContent.trim(), 'Screenshot 2021-08-23 11.12.49 AM.png', 'Conversation attachment name matches');
                assert.equal(this.element.querySelector('.conversation-attachments .attachment .file').href, 'https://s3.amazonaws.com/cdn.freshpo.com/data/helpdesk/attachments/staging/3382036/original/Screenshot%202021-08-23%20at%2011.12.49%20AM.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIATDKKPBNBJRJZ3MOH%2F20211218%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20211218T163207Z&X-Amz-Expires=86400&X-Amz-SignedHeaders=host&X-Amz-Signature=b539e505c42be164da0a0b384ce8d8686e191664c1343d80e7305a5978fe6485', 'Conversation attachment link matches');

              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-tickets/details/apps/freshdesk/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/stub-native-service", "sinon"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _stubCurrentUser, _sinonContext, _stubNativeService, _sinon) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | app-components | module-tickets/details/apps/freshdesk', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.store = this.owner.lookup('service:store');
              this.server.loadFixtures("users");
              this.server.loadFixtures('tickets');
              (0, _stubCurrentUser.stubCurrentUser)({
                privileges: ['manage_tickets', 'edit_ticket_properties']
              });
              this.router = this.owner.lookup("router:main");
              this.router.setupRouter();
              _context.next = 8;
              return this.store.findRecord('ticket', 599);

            case 8:
              this.fdTicket = _context.sent;
              _context.next = 11;
              return this.store.findRecord('ticket', 16);

            case 11:
              this.nonFdTicket = _context.sent;
              this.marketplaceAdapter = this.owner.lookup('service:marketplaceAdapter');

              _sinon.default.stub(this.marketplaceAdapter, 'publishEvent').returns(null);

            case 14:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    hooks.after(function () {
      this.owner.destroy("service:current-user");
    }); // #1 should render empty state for non fd ticket

    (0, _qunit.test)('Should render empty state for non fd ticket', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                (0, _stubNativeService.stubNativeService)(['freshdesk']);
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::Apps::Freshdesk @model={{this.nonFdTicket}} />
                */
                {
                  id: "WdzYhL7h",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/apps/freshdesk\",[],[[\"@model\"],[[23,0,[\"nonFdTicket\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.dom('[data-test-id="integrated-freshdesk-empty-state"]').exists({
                  count: 1
                }, "Empty state will render for non-fd ticket");

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }()); // #2 should render freshdesk app info for fd ticket

    (0, _qunit.test)('Should render freshdesk app info for fd ticket', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                (0, _stubNativeService.stubNativeService)(['freshdesk']);
                _context3.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::Apps::Freshdesk @model={{this.fdTicket}} />
                */
                {
                  id: "zCO1Eif8",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/apps/freshdesk\",[],[[\"@model\"],[[23,0,[\"fdTicket\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.dom('[data-test-id="integrated-app-freshdesk"]').exists({
                  count: 1
                }, "integrated-app-freshdesk card is rendered");
                assert.dom('[data-test-id="integrated-freshdesk-empty-state"]').doesNotExist("Empty state will not render for fd ticket");

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }()); // #3

    (0, _qunit.test)('Should expand Freshdesk ticket card, open detail modal and check the header texts', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                (0, _stubNativeService.stubNativeService)(['freshdesk']);
                _context4.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::Apps::Freshdesk @model={{this.fdTicket}} />
                */
                {
                  id: "zCO1Eif8",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/apps/freshdesk\",[],[[\"@model\"],[[23,0,[\"fdTicket\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context4.next = 5;
                return (0, _testHelpers.click)('[data-test-id="ui-accordion-trigger"]');

              case 5:
                assert.dom('.integrated-app-info').exists({
                  count: 1
                }, "Expanded ticket card Info");
                assert.equal(this.element.querySelector('.integrated-app-info .btn-link.desc').textContent.trim(), "FS-FD test ticket from FD#".concat(this.fdTicket.fdTicketId), "FD ticket card info header text is FS-FD test ticket from FD#".concat(this.fdTicket.fdTicketId));
                _context4.next = 9;
                return (0, _testHelpers.click)(this.element.querySelector('.integrated-app-info .btn-link.desc'));

              case 9:
                assert.dom('.integrated-app-detail.ember-modal-side').exists({
                  count: 1
                }, "Opended the ticket detail modal");
                assert.equal(this.element.querySelector('.integrated-app-detail.ember-modal-side .header').textContent.trim(), "FS-FD test ticket from FD", "FD ticket card info header text is FS-FD test ticket from FD");

              case 11:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }()); // #4

    (0, _qunit.test)('Should show all properties on click "show more"', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var propertiesContainer;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                (0, _stubNativeService.stubNativeService)(['freshdesk']);
                _context5.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::Apps::Freshdesk @model={{this.fdTicket}} />
                */
                {
                  id: "zCO1Eif8",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/apps/freshdesk\",[],[[\"@model\"],[[23,0,[\"fdTicket\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context5.next = 5;
                return (0, _testHelpers.click)('[data-test-id="ui-accordion-trigger"]');

              case 5:
                _context5.next = 7;
                return (0, _testHelpers.click)(this.element.querySelector('.integrated-app-info .btn-link.desc'));

              case 7:
                propertiesContainer = this.element.querySelector('.integrated-app-detail .properties');
                assert.dom(propertiesContainer).hasClass("show-less", 'Showing less properties on load');
                _context5.next = 11;
                return (0, _testHelpers.click)(this.element.querySelector('.integrated-app-detail .show-all-properties'));

              case 11:
                assert.dom(propertiesContainer).doesNotHaveClass("show-less", 'Showing all properties on click "show more"');

              case 12:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-tickets/details/apps/pagerduty/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-native-service", "freshservice/tests/pages/components/module-tickets/pagerduty"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _intl, _stubNativeService, _pagerduty) {
  "use strict";

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | app-components | details | pagerduty', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var mockTicket, mockTicketData;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.store = this.owner.lookup('service:store');
              this.server.loadFixtures("tickets");
              this.server.loadFixtures("users");
              mockTicket = Ember.A(this.server.db.tickets).findBy("display_id", 375);
              mockTicketData = {
                requesterId: mockTicket.requester_id,
                displayId: 0
              };
              this.set('model', mockTicketData);

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('should show pagerduty initially', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var link;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                (0, _stubNativeService.stubNativeService)(['pagerduty']);
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::NativeIntegrations::PagerDuty
                			@modelId={{this.model.displayId}}
                			@moduleLocation="ticket_sidebar" />
                */
                {
                  id: "j/YOnuAY",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/native-integrations/pager-duty\",[],[[\"@modelId\",\"@moduleLocation\"],[[23,0,[\"model\",\"displayId\"]],\"ticket_sidebar\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.ok(_pagerduty.default.isPagerdutyVisible);

                _pagerduty.default.pagerdutyAccordianBtn();

                link = 'https://dev-freshwork.pagerduty.com/incidents/Q2PPQ9NCMYKF3F';
                assert.equal(_pagerduty.default.pagedutyLink, link);

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should show empty state for pagerduty on error', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var model;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                (0, _stubNativeService.stubNativeService)(['pagerduty']);
                model = this.get('model');
                this.set('model', _objectSpread(_objectSpread({}, model), {}, {
                  displayId: 1 // pagerduty integrated_resources will be null

                }));
                _context3.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::NativeIntegrations::PagerDuty
                			@modelId={{this.model.displayId}}
                			@moduleLocation="ticket_sidebar" />
                */
                {
                  id: "j/YOnuAY",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/native-integrations/pager-duty\",[],[[\"@modelId\",\"@moduleLocation\"],[[23,0,[\"model\",\"displayId\"]],\"ticket_sidebar\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                assert.ok(_pagerduty.default.isPdEmptyStateVisible);

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should not show pagerduty if app not installed', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                (0, _stubNativeService.stubNativeService)([]);
                _context4.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::NativeIntegrations::PagerDuty
                			@modelId={{this.model.displayId}}
                			@moduleLocation="ticket_sidebar" />
                */
                {
                  id: "j/YOnuAY",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/native-integrations/pager-duty\",[],[[\"@modelId\",\"@moduleLocation\"],[[23,0,[\"model\",\"displayId\"]],\"ticket_sidebar\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.notOk(_pagerduty.default.isPagerdutyVisible);

              case 4:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
  });
});
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

define("freshservice/tests/integration/components/module-tickets/details/component-test", ["exports", "sinon", "qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/stub-current-user", "ember-keyboard/test-support/test-helpers", "freshservice/constants/keyboard-shortcut-trap", "freshservice/tests/pages/components/module-tickets/conversation", "freshservice/constants/tickets/module-config", "freshservice/constants/tickets/ticket-property", "freshservice/constants/common/form-field-configs/details/ticket", "freshservice/mirage/fixtures/agents_groups"], function (_exports, _sinon, _qunit, _emberQunit, _testHelpers, _testSupport, _stubCurrentUser, _testHelpers2, _keyboardShortcutTrap, _conversation, _moduleConfig, _ticketProperty, _ticket, _agents_groups) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.MockSocketsTicketDetailsAgentCollisionRtsService = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var MockSocketsTicketDetailsAgentCollisionRtsService = /*#__PURE__*/function (_Ember$Service) {
    _inherits(MockSocketsTicketDetailsAgentCollisionRtsService, _Ember$Service);

    var _super = _createSuper(MockSocketsTicketDetailsAgentCollisionRtsService);

    function MockSocketsTicketDetailsAgentCollisionRtsService() {
      var _this;

      _classCallCheck(this, MockSocketsTicketDetailsAgentCollisionRtsService);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _defineProperty(_assertThisInitialized(_this), "viewersIds", []);

      _defineProperty(_assertThisInitialized(_this), "repliersIds", []);

      return _this;
    }

    _createClass(MockSocketsTicketDetailsAgentCollisionRtsService, [{
      key: "subscribeReplyEvent",
      value: function subscribeReplyEvent() {}
    }, {
      key: "unSubscribeReplyEvent",
      value: function unSubscribeReplyEvent() {}
    }, {
      key: "channels",
      value: function channels() {}
    }]);

    return MockSocketsTicketDetailsAgentCollisionRtsService;
  }(Ember.Service);

  _exports.MockSocketsTicketDetailsAgentCollisionRtsService = MockSocketsTicketDetailsAgentCollisionRtsService;

  window.__CLASSIC_OWN_CLASSES__.set(MockSocketsTicketDetailsAgentCollisionRtsService, true);

  (0, _qunit.module)('Integration | Component | app-components | module-tickets/details', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.store = this.owner.lookup('service:store');
              this.server.loadFixtures("users");
              this.server.loadFixtures('tickets');
              this.server.loadFixtures('conversations');
              this.server.loadFixtures('agents_groups');
              this.store.pushPayload(_objectSpread({}, _agents_groups.default));
              (0, _stubCurrentUser.stubCurrentUser)({
                scoped_privileges: {
                  0: ['manage_tickets', 'edit_ticket_properties', 'reply_ticket', 'forward_ticket', 'view_time_entries'],
                  1: [],
                  2: [],
                  3: []
                },
                privileges: ['manage_tickets', 'edit_ticket_properties', 'reply_ticket', 'forward_ticket', 'view_time_entries'],
                preferences: []
              });
              _context.next = 9;
              return this.store.findRecord('ticket', 22);

            case 9:
              this.nonFdTicket = _context.sent;
              this.nonFdTicket.fromEmail = 'email@email.com';

              this.noop = function () {};

              this.var = {};
              this.owner.register("service:socket-actions-rts", Ember.Service.extend({}));
              this.owner.register("service:sockets.ticket-details-rts", Ember.Service.extend({
                initializeRTSConnection: function initializeRTSConnection() {}
              }));
              this.owner.register("service:sockets.ticket-details-agent-collision-rts", MockSocketsTicketDetailsAgentCollisionRtsService);
              this.marketplaceAdapter = this.owner.lookup('service:marketplaceAdapter');

              _sinon.default.stub(this.marketplaceAdapter, 'publishEvent').returns(null);

              this.marketplaceEventApi = this.owner.lookup('service:marketplaceEventApi');

              _sinon.default.stub(this.marketplaceEventApi, 'prepareEventData').returns({});

              _sinon.default.stub(this.marketplaceEventApi, 'preparePropertyUpdates').returns({});

              _sinon.default.stub(this.marketplaceEventApi, 'prepareCustomMultiselectMap').returns({});

              _sinon.default.stub(this.marketplaceEventApi, 'prepareDepartmentMap').returns({});

            case 23:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    hooks.after(function () {
      this.owner.destroy("service:current-user");
    });
    (0, _qunit.test)('Should render note in conversation editor on press n', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var ticktShowPage;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::ConversationActions   @model={{this.nonFdTicket}} 
                			@ticketModel			= {{this.nonFdTicket}} 
                			@updateConversationList = {{this.noop}} 
                			@openEditorType			= {{'note'}}
                			@convoEditorExternalDataHash = {{this.var}}
                			@afterPropertyUpdated 	= {{this.noop}}
                			@conversationsCount		= {{2}}
                			@page = "ticket"/>
                */
                {
                  id: "zPUS5IWp",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/conversation-actions\",[],[[\"@model\",\"@ticketModel\",\"@updateConversationList\",\"@openEditorType\",\"@convoEditorExternalDataHash\",\"@afterPropertyUpdated\",\"@conversationsCount\",\"@page\"],[[23,0,[\"nonFdTicket\"]],[23,0,[\"nonFdTicket\"]],[23,0,[\"noop\"]],\"note\",[23,0,[\"var\"]],[23,0,[\"noop\"]],2,\"ticket\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                ticktShowPage = document.querySelector('.ticket-show-page');
                _context2.next = 5;
                return (0, _testHelpers2.keyDown)(_keyboardShortcutTrap.COMMON_SHORTCUTS.NOTE, ticktShowPage);

              case 5:
                assert.ok(_conversation.default.conversationActions.addNoteEditorExists, "Note editor is visible");
                _context2.next = 8;
                return (0, _testHelpers2.keyDown)(_keyboardShortcutTrap.TICKET_VIEW.ESCAPE, ticktShowPage);

              case 8:
                assert.notOk(_conversation.default.conversationActions.replyEditorExists, "Reply editor is removed");
                assert.notOk(_conversation.default.conversationActions.addNoteEditorExists, "Note editor is removed");
                assert.notOk(_conversation.default.conversationActions.forwardEditorExists, "Forward editor is removed");

              case 11:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render reply in conversation editor on press r', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var ticktShowPage;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::ConversationActions   @model={{this.nonFdTicket}} 
                			@ticketModel			= {{this.nonFdTicket}} 
                			@updateConversationList = {{this.noop}} 
                			@openEditorType			= {{'note'}}
                			@convoEditorExternalDataHash = {{this.var}}
                			@afterPropertyUpdated 	= {{this.noop}}
                			@conversationsCount		= {{2}}
                			@page = "ticket"/>
                */
                {
                  id: "zPUS5IWp",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/conversation-actions\",[],[[\"@model\",\"@ticketModel\",\"@updateConversationList\",\"@openEditorType\",\"@convoEditorExternalDataHash\",\"@afterPropertyUpdated\",\"@conversationsCount\",\"@page\"],[[23,0,[\"nonFdTicket\"]],[23,0,[\"nonFdTicket\"]],[23,0,[\"noop\"]],\"note\",[23,0,[\"var\"]],[23,0,[\"noop\"]],2,\"ticket\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                ticktShowPage = document.querySelector('.ticket-show-page');
                _context3.next = 5;
                return (0, _testHelpers2.keyDown)(_keyboardShortcutTrap.TICKET_LIST.REPLY, ticktShowPage);

              case 5:
                assert.notOk(_conversation.default.conversationActions.addNoteEditorExists, "Note editor is removed");
                assert.ok(_conversation.default.conversationActions.replyEditorExists, "Reply editor is visible");
                _context3.next = 9;
                return (0, _testHelpers2.keyDown)(_keyboardShortcutTrap.TICKET_VIEW.ESCAPE, ticktShowPage);

              case 9:
                assert.notOk(_conversation.default.conversationActions.replyEditorExists, "Reply editor is removed");
                assert.notOk(_conversation.default.conversationActions.addNoteEditorExists, "Note editor is removed");
                assert.notOk(_conversation.default.conversationActions.forwardEditorExists, "Forward editor is removed");

              case 12:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render forward in conversation editor on press f', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var ticktShowPage;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::ConversationActions   @model={{this.nonFdTicket}} 
                			@ticketModel			= {{this.nonFdTicket}} 
                			@updateConversationList = {{this.noop}} 
                			@openEditorType			= {{'note'}}
                			@convoEditorExternalDataHash = {{this.var}}
                			@afterPropertyUpdated 	= {{this.noop}}
                			@conversationsCount		= {{2}}
                			@page = "ticket"/>
                */
                {
                  id: "zPUS5IWp",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/conversation-actions\",[],[[\"@model\",\"@ticketModel\",\"@updateConversationList\",\"@openEditorType\",\"@convoEditorExternalDataHash\",\"@afterPropertyUpdated\",\"@conversationsCount\",\"@page\"],[[23,0,[\"nonFdTicket\"]],[23,0,[\"nonFdTicket\"]],[23,0,[\"noop\"]],\"note\",[23,0,[\"var\"]],[23,0,[\"noop\"]],2,\"ticket\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                ticktShowPage = document.querySelector('.ticket-show-page');
                _context4.next = 5;
                return (0, _testHelpers2.keyDown)(_keyboardShortcutTrap.TICKET_LIST.FORWARD, ticktShowPage);

              case 5:
                assert.ok(_conversation.default.conversationActions.forwardEditorExists, "Forward editor is visible");
                _context4.next = 8;
                return (0, _testHelpers2.keyDown)(_keyboardShortcutTrap.TICKET_VIEW.ESCAPE, ticktShowPage);

              case 8:
                assert.notOk(_conversation.default.conversationActions.replyEditorExists, "Reply editor is removed");
                assert.notOk(_conversation.default.conversationActions.addNoteEditorExists, "Note editor is removed");
                assert.notOk(_conversation.default.conversationActions.forwardEditorExists, "Forward editor is removed");

              case 11:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should expand conversations on press "]"', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::Conversations 
                		@ticketModel				= {{this.nonFdTicket}} 
                		@conversationsCallback		= {{this.noop}} 
                		@recentlyCreatedConversation= {{this.noop}} 
                		@sourceLocation 			= "ticketDetailsConversationList"/>
                */
                {
                  id: "A/NKBya2",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/conversations\",[],[[\"@ticketModel\",\"@conversationsCallback\",\"@recentlyCreatedConversation\",\"@sourceLocation\"],[[23,0,[\"nonFdTicket\"]],[23,0,[\"noop\"]],[23,0,[\"noop\"]],\"ticketDetailsConversationList\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.ok(_conversation.default.loadMoreConversations, "load more conversations button is visible");
                _context5.next = 5;
                return (0, _testHelpers2.keyDown)(_keyboardShortcutTrap.TICKET_VIEW.EXPAND, document.querySelector('.ticket-show-page'));

              case 5:
                assert.notOk(_conversation.default.loadMoreConversations, "load more conversations button is removed");
                assert.equal(_conversation.default.conversationsCount, 8, "all conversations is visible");

              case 7:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should focus on properties on press "p"', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var _document$activeEleme, _document$activeEleme2, _document$activeEleme3, _Conversation$propert;

        var text;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                this.moduleConfig = {
                  module: _moduleConfig.MODULE_CONFIG.module,
                  excludedFields: _ticketProperty.TICKET_EXCLUDED_FIELDS,
                  fieldsMap: _ticketProperty.TICKET_DETAILS_FIELDS_MAP,
                  fieldConfig: _ticket.TICKET_DETAILS_FIELD_CONFIG,
                  editable: true
                };
                _context6.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::TcprCommon::PropertyForm
                			@config = {{this.moduleConfig}}
                			@model = {{this.nonFdTicket}}
                			@isAlert = {{false}}
                			@hidePropertyForm = {{false}}
                			@hasChildTickets = {{false}}
                			@page = "ticket"
                			@afterFieldsFetchedCallback = {{this.noop}}
                			@afterPropertyUpdated = {{this.noop}} />
                */
                {
                  id: "9lrOcFhr",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/tcpr-common/property-form\",[],[[\"@config\",\"@model\",\"@isAlert\",\"@hidePropertyForm\",\"@hasChildTickets\",\"@page\",\"@afterFieldsFetchedCallback\",\"@afterPropertyUpdated\"],[[23,0,[\"moduleConfig\"]],[23,0,[\"nonFdTicket\"]],false,false,false,\"ticket\",[23,0,[\"noop\"]],[23,0,[\"noop\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context6.next = 5;
                return (0, _testHelpers2.keyDown)(_keyboardShortcutTrap.TICKET_VIEW.PROPERTIES, document.querySelector('.ticket-show-page'));

              case 5:
                text = (_document$activeEleme = document.activeElement) === null || _document$activeEleme === void 0 ? void 0 : (_document$activeEleme2 = _document$activeEleme.innerText) === null || _document$activeEleme2 === void 0 ? void 0 : (_document$activeEleme3 = _document$activeEleme2.replace('\n', ' ')) === null || _document$activeEleme3 === void 0 ? void 0 : _document$activeEleme3.trim();
                assert.equal(text, (_Conversation$propert = _conversation.default.propertiesDropdown) === null || _Conversation$propert === void 0 ? void 0 : _Conversation$propert.trim(), "properties first dropdown is focused");
                assert.ok(_conversation.default.propertiesDropdownExpanded, "properties first dropdown is opened");

              case 8:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should open scenarios model on press "s"', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return this.nonFdTicket.parentTicket();

              case 2:
                this.parentTicketDetails = _context7.sent;
                _context7.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::QuickActions
                			@model = {{this.nonFdTicket}}
                			@parentModel = {{this.parentTicketDetails}}
                			@reRouteModel = {{this.noop}}
                			@refreshModel = {{this.noop}}
                			@setChildReference = {{this.noop}}
                			@awsNotificationStatus = {{false}}
                			@updateAwsNotificationStatusCallback = {{this.noop}}/>
                */
                {
                  id: "FtSpbAn2",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/quick-actions\",[],[[\"@model\",\"@parentModel\",\"@reRouteModel\",\"@refreshModel\",\"@setChildReference\",\"@awsNotificationStatus\",\"@updateAwsNotificationStatusCallback\"],[[23,0,[\"nonFdTicket\"]],[23,0,[\"parentTicketDetails\"]],[23,0,[\"noop\"]],[23,0,[\"noop\"]],[23,0,[\"noop\"]],false,[23,0,[\"noop\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                assert.notOk(_conversation.default.isScenarioButtonVisible, "scenario model not visible initially");
                _context7.next = 8;
                return (0, _testHelpers2.keyDown)(_keyboardShortcutTrap.TICKET_VIEW.SCENARIOS, document.querySelector('.ticket-show-page'));

              case 8:
                assert.ok(_conversation.default.isScenarioButtonVisible, "scenario model visible after keyboard shortcut visible");

              case 9:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x6) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should toggle watcher on press "w"', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return this.nonFdTicket.parentTicket();

              case 2:
                this.parentTicketDetails = _context8.sent;
                _context8.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::QuickActions 
                			@model = {{this.nonFdTicket}}
                			@parentModel = {{this.parentTicketDetails}}
                			@reRouteModel = {{this.noop}}
                			@refreshModel = {{this.noop}}
                			@setChildReference = {{this.noop}}
                			@awsNotificationStatus = {{false}}
                			@updateAwsNotificationStatusCallback = {{this.noop}}/>
                */
                {
                  id: "FtSpbAn2",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/quick-actions\",[],[[\"@model\",\"@parentModel\",\"@reRouteModel\",\"@refreshModel\",\"@setChildReference\",\"@awsNotificationStatus\",\"@updateAwsNotificationStatusCallback\"],[[23,0,[\"nonFdTicket\"]],[23,0,[\"parentTicketDetails\"]],[23,0,[\"noop\"]],[23,0,[\"noop\"]],[23,0,[\"noop\"]],false,[23,0,[\"noop\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                assert.notOk(_conversation.default.watchingSection, "watcher button is not selected");
                _context8.next = 8;
                return (0, _testHelpers2.keyDown)(_keyboardShortcutTrap.TICKET_VIEW.TOGGLE_WATCHER, document.querySelector('.tkt-quick-action'));

              case 8:
                assert.ok(_conversation.default.watchingSection, "watcher button is selected");
                _context8.next = 11;
                return (0, _testHelpers2.keyDown)(_keyboardShortcutTrap.TICKET_VIEW.TOGGLE_WATCHER, document.querySelector('.tkt-quick-action'));

              case 11:
                assert.notOk(_conversation.default.watchingSection, "watcher button is not selected");

              case 12:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x7) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.skip)('Should select watcher on press "shift+w"', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return this.nonFdTicket.parentTicket();

              case 2:
                this.parentTicketDetails = _context9.sent;
                _context9.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::QuickActions 
                			@model = {{this.nonFdTicket}}
                			@parentModel = {{this.parentTicketDetails}}
                			@reRouteModel = {{this.noop}}
                			@refreshModel = {{this.noop}}
                			@awsNotificationStatus = {{false}}
                			@updateAwsNotificationStatusCallback = {{this.noop}}/> />
                */
                {
                  id: "yfEuVbMI",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/quick-actions\",[],[[\"@model\",\"@parentModel\",\"@reRouteModel\",\"@refreshModel\",\"@awsNotificationStatus\",\"@updateAwsNotificationStatusCallback\"],[[23,0,[\"nonFdTicket\"]],[23,0,[\"parentTicketDetails\"]],[23,0,[\"noop\"]],[23,0,[\"noop\"]],false,[23,0,[\"noop\"]]]]],[0,\" />\"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                assert.notOk(_conversation.default.watcherSectionVisible, "watcher section is not visible");
                _context9.next = 8;
                return (0, _testHelpers2.keyDown)("".concat(_keyboardShortcutTrap.MODIFIER_KEYS.SHIFT, "+").concat(_keyboardShortcutTrap.TICKET_VIEW.TOGGLE_WATCHER), document.querySelector('.tkt-quick-action'));

              case 8:
                assert.ok(_conversation.default.watcherSectionVisible, "watcher section is visible");

              case 9:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x8) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.skip)('Should call "transitionTo" when press alt+left/alt+right', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var context, owner, spy, router;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return this.nonFdTicket.parentTicket();

              case 2:
                this.parentTicketDetails = _context10.sent;
                _context10.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::QuickActions 
                			@model = {{this.nonFdTicket}}
                			@parentModel = {{this.parentTicketDetails}}
                			@reRouteModel = {{this.noop}}
                			@refreshModel = {{this.noop}}
                			@awsNotificationStatus = {{false}}
                			@updateAwsNotificationStatusCallback = {{this.noop}}/>
                */
                {
                  id: "YCutwmzs",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/quick-actions\",[],[[\"@model\",\"@parentModel\",\"@reRouteModel\",\"@refreshModel\",\"@awsNotificationStatus\",\"@updateAwsNotificationStatusCallback\"],[[23,0,[\"nonFdTicket\"]],[23,0,[\"parentTicketDetails\"]],[23,0,[\"noop\"]],[23,0,[\"noop\"]],false,[23,0,[\"noop\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                context = (0, _testHelpers.getContext)();
                owner = context.owner;
                spy = _sinon.default.spy();
                router = Ember.Service.extend({
                  transitionTo: spy
                });
                owner.register("router:main", router);
                _context10.next = 12;
                return (0, _testHelpers2.keyDown)("".concat(_keyboardShortcutTrap.MODIFIER_KEYS.ALT, "+").concat(_keyboardShortcutTrap.TABLE_SHORTCUTS.ARROW_LEFT), document.querySelector('.ticket-show-page'));

              case 12:
                assert.ok(spy.calledWith('tickets.show', 23), 'router is called with next route args');
                _context10.next = 15;
                return (0, _testHelpers2.keyDown)("".concat(_keyboardShortcutTrap.MODIFIER_KEYS.ALT, "+").concat(_keyboardShortcutTrap.TABLE_SHORTCUTS.ARROW_RIGHT), document.querySelector('.ticket-show-page'));

              case 15:
                assert.ok(spy.calledWith('tickets.show', 21), 'router is called with prev route args');

              case 16:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x9) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.skip)('Should open add time model on press "m"', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _context11.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <AppComponents::TcprCommon::TimeEntries 
                			@model = {{this.nonFdTicket}}
                			@module = {{"tickets"}}
                			@page = "ticket"
                		/>
                */
                {
                  id: "ZpGb6DV8",
                  block: "{\"symbols\":[],\"statements\":[[5,\"app-components/tcpr-common/time-entries\",[],[[\"@model\",\"@module\",\"@page\"],[[23,0,[\"nonFdTicket\"]],\"tickets\",\"ticket\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.notOk(_conversation.default.addTimeModelVisible, 'Add time Not Visible');
                _context11.next = 5;
                return (0, _testHelpers2.keyDown)(_keyboardShortcutTrap.TICKET_VIEW.ADD_TIME, document.querySelector('.ticket-show-page'));

              case 5:
                assert.ok(_conversation.default.addTimeModelVisible, 'Add time Visible');

              case 6:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11);
      }));

      return function (_x10) {
        return _ref12.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-tickets/details/conversation-actions/change-actions/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/pages/components/module-tickets/conversation", "freshservice/tests/lib/stub-current-user"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _intl, _conversation, _stubCurrentUser) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-tickets/details/conversation-actions/change-actions', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var mockTicket;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.store = this.owner.lookup('service:store');
              this.server.loadFixtures("tickets");
              this.server.loadFixtures("users");
              this.server.loadFixtures("emailConfigs");
              _context.next = 6;
              return this.store.findRecord('ticket', 375);

            case 6:
              mockTicket = _context.sent;
              this.set('model', mockTicket);
              this.set('updateActionType', function () {});
              this.set('focusEditor', function () {});
              this.set('cancelAction', function () {});
              this.set('updateReplyDraftData', function () {});

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('should open forward editor on clicking forward option from change action dropdown in the editor', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var currentUserPrivilege, replyModel, forwardModel;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                currentUserPrivilege = {
                  scoped_privileges: {
                    0: ["manage_tickets", "forward_ticket"],
                    1: [],
                    2: [],
                    3: []
                  },
                  privileges: ["manage_tickets", "forward_ticket"]
                };
                (0, _stubCurrentUser.stubCurrentUser)(currentUserPrivilege); // Open reply editor

                replyModel = this.store.createRecord('conversation', {});
                this.set('convoCreateSuccessCallback', function () {});
                this.set('uniqueId', this.model.id);
                this.set('replyModel', replyModel);
                this.set('updateReplyDraftData', function () {});
                _context2.next = 9;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::ConversationActions::Reply 
                            @ticketModel      = {{ this.model }} 
                            @updateActionType = {{ this.updateActionType }}
                            @cancelAction     = {{ this.cancelAction }}
                            @focusEditor	    = {{ this.focusEditor}} 
                            @convoCreateSuccessCallback = {{this.convoCreateSuccessCallback}}
                            @uniqueId         = {{this.uniqueId}}
                            @replyModel       = {{this.replyModel}}
                            @updateReplyDraftData = {{this.updateReplyDraftData}}
                          />
                */
                {
                  id: "jlKReMRL",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/conversation-actions/reply\",[],[[\"@ticketModel\",\"@updateActionType\",\"@cancelAction\",\"@focusEditor\",\"@convoCreateSuccessCallback\",\"@uniqueId\",\"@replyModel\",\"@updateReplyDraftData\"],[[23,0,[\"model\"]],[23,0,[\"updateActionType\"]],[23,0,[\"cancelAction\"]],[23,0,[\"focusEditor\"]],[23,0,[\"convoCreateSuccessCallback\"]],[23,0,[\"uniqueId\"]],[23,0,[\"replyModel\"]],[23,0,[\"updateReplyDraftData\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 9:
                _context2.next = 11;
                return _conversation.default.editorFields.clickChangeActionsDropdown();

              case 11:
                _context2.next = 13;
                return _conversation.default.conversationActions.triggerForwardEditor();

              case 13:
                forwardModel = this.store.createRecord('conversation', {});
                this.set('convoCreateSuccessCallback', function () {});
                this.set('forwardModel', forwardModel);
                _context2.next = 18;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::ConversationActions::Forward 
                          @ticketModel              = {{ this.model }} 
                          @updateActionType         = {{ this.updateActionType }}
                          @cancelAction             = {{ this.cancelAction }}
                          @focusEditor	            = {{ this.focusEditor}}
                          @convoCreateSuccessCallback = {{this.convoCreateSuccessCallback}}
                          @uniqueId					= {{this.uniqueId}}
                          @forwardModel				= {{this.forwardModel}} />
                */
                {
                  id: "WwBPh4Eg",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/conversation-actions/forward\",[],[[\"@ticketModel\",\"@updateActionType\",\"@cancelAction\",\"@focusEditor\",\"@convoCreateSuccessCallback\",\"@uniqueId\",\"@forwardModel\"],[[23,0,[\"model\"]],[23,0,[\"updateActionType\"]],[23,0,[\"cancelAction\"]],[23,0,[\"focusEditor\"]],[23,0,[\"convoCreateSuccessCallback\"]],[23,0,[\"uniqueId\"]],[23,0,[\"forwardModel\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 18:
                assert.ok(_conversation.default.conversationActions.forwardEditorExists, 'forward editor should be shown');
                assert.notOk(_conversation.default.conversationActions.replyEditorExists, 'Reply editor shouldnt be rendered once forward action is triggered');

              case 20:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should not show reply optons if user does not have reply ticket privilege', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var currentUserPrivilege, noteModel, uniqueId;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                currentUserPrivilege = {
                  scoped_privileges: {
                    0: ["manage_tickets", "reply_ticket"],
                    1: [],
                    2: [],
                    3: []
                  },
                  privileges: ["manage_tickets", "reply_ticket"]
                };
                (0, _stubCurrentUser.stubCurrentUser)(currentUserPrivilege);
                noteModel = this.store.createRecord('conversation', {});
                uniqueId = this.model.id;
                this.set('convoCreateSuccessCallback', function () {});
                this.set('noteModel', noteModel);
                this.set('uniqueId', uniqueId);
                _context3.next = 9;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::ConversationActions::Note 
                          @ticketModel              = {{ this.model }} 
                          @updateActionType         = {{ this.updateActionType }}
                          @cancelAction             = {{ this.cancelAction }}
                          @focusEditor	            = {{ this.focusEditor}}
                          @convoCreateSuccessCallback = {{this.convoCreateSuccessCallback}}
                          @uniqueId					  = {{this.uniqueId}}
                          @noteModel					= {{this.noteModel}} />
                */
                {
                  id: "7R8nkr2N",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/conversation-actions/note\",[],[[\"@ticketModel\",\"@updateActionType\",\"@cancelAction\",\"@focusEditor\",\"@convoCreateSuccessCallback\",\"@uniqueId\",\"@noteModel\"],[[23,0,[\"model\"]],[23,0,[\"updateActionType\"]],[23,0,[\"cancelAction\"]],[23,0,[\"focusEditor\"]],[23,0,[\"convoCreateSuccessCallback\"]],[23,0,[\"uniqueId\"]],[23,0,[\"noteModel\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 9:
                _context3.next = 11;
                return _conversation.default.editorFields.clickChangeActionsDropdown();

              case 11:
                assert.ok(_conversation.default.conversationActions.replyOptionExists);
                assert.notOk(_conversation.default.conversationActions.forwardOptionExists);
                assert.ok(_conversation.default.conversationActions.addNoteOptionExists);

              case 14:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

define("freshservice/tests/integration/components/module-tickets/details/conversation-actions/component-test", ["exports", "qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/pages/components/module-tickets/conversation", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/sinon-context", "sinon"], function (_exports, _qunit, _emberQunit, _testHelpers, _testSupport, _intl, _conversation, _stubCurrentUser, _sinonContext, _sinon) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.MockSocketsTicketDetailsAgentCollisionRtsService = void 0;

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var MockSocketsTicketDetailsAgentCollisionRtsService = /*#__PURE__*/function (_Ember$Service) {
    _inherits(MockSocketsTicketDetailsAgentCollisionRtsService, _Ember$Service);

    var _super = _createSuper(MockSocketsTicketDetailsAgentCollisionRtsService);

    function MockSocketsTicketDetailsAgentCollisionRtsService() {
      var _this;

      _classCallCheck(this, MockSocketsTicketDetailsAgentCollisionRtsService);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _defineProperty(_assertThisInitialized(_this), "viewersIds", []);

      _defineProperty(_assertThisInitialized(_this), "repliersIds", []);

      return _this;
    }

    _createClass(MockSocketsTicketDetailsAgentCollisionRtsService, [{
      key: "subscribeReplyEvent",
      value: function subscribeReplyEvent() {}
    }, {
      key: "unSubscribeReplyEvent",
      value: function unSubscribeReplyEvent() {}
    }, {
      key: "channel",
      value: function channel() {}
    }]);

    return MockSocketsTicketDetailsAgentCollisionRtsService;
  }(Ember.Service);

  _exports.MockSocketsTicketDetailsAgentCollisionRtsService = MockSocketsTicketDetailsAgentCollisionRtsService;

  window.__CLASSIC_OWN_CLASSES__.set(MockSocketsTicketDetailsAgentCollisionRtsService, true);

  (0, _qunit.module)('Integration | Component | module-tickets/details/conversation-actions', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var mockTicket;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.store = this.owner.lookup('service:store');
              this.server.loadFixtures("tickets");
              this.server.loadFixtures("users");
              this.server.loadFixtures("email_configs");
              _context.next = 6;
              return this.store.findRecord('ticket', 375);

            case 6:
              mockTicket = _context.sent;
              this.set('model', mockTicket);
              this.set('updateActionType', function () {});
              this.set('focusEditor', function () {});
              this.set('cancelAction', function () {});
              this.set('updateConversationList', function () {});
              this.owner.register("service:socket-actions-rts", Ember.Service.extend({}));
              this.owner.register("service:sockets.ticket-details-agent-collision-rts", MockSocketsTicketDetailsAgentCollisionRtsService);
              this.marketplaceAdapter = this.owner.lookup('service:marketplaceAdapter');

              _sinon.default.stub(this.marketplaceAdapter, 'publishEvent').returns(null);

            case 16:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));

    function renderConversationActions() {
      return _renderConversationActions.apply(this, arguments);
    }

    function _renderConversationActions() {
      _renderConversationActions = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::ConversationActions 
                            @ticketModel={{this.model}}
                            @updateConversationList = {{this.updateConversationList}} @page="ticket" />
                */
                {
                  id: "J0hmw8qL",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/conversation-actions\",[],[[\"@ticketModel\",\"@updateConversationList\",\"@page\"],[[23,0,[\"model\"]],[23,0,[\"updateConversationList\"]],\"ticket\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));
      return _renderConversationActions.apply(this, arguments);
    }

    (0, _qunit.test)('should not show reply and forward button if user doesnot have reply ticket and forward ticket privilege', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var currentUserPrivilege;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                currentUserPrivilege = {
                  scoped_privileges: {
                    0: ['manage_tickets'],
                    1: [],
                    2: [],
                    3: []
                  },
                  privileges: ['manage_tickets']
                };
                (0, _stubCurrentUser.stubCurrentUser)(currentUserPrivilege); // Act

                _context2.next = 4;
                return renderConversationActions();

              case 4:
                assert.ok(_conversation.default.conversationActionsExists);
                assert.notOk(_conversation.default.conversationActions.replyBtnExists);
                assert.notOk(_conversation.default.conversationActions.forwardBtnExists);
                assert.ok(_conversation.default.conversationActions.addNoteBtnExists);

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render coversation action buttons', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return renderConversationActions();

              case 2:
                assert.ok(_conversation.default.conversationActionsExists);

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should open reply editor on clicking reply button', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var currentUserPrivilege, replyModel;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                currentUserPrivilege = {
                  scoped_privileges: {
                    0: ['manage_tickets', 'reply_ticket'],
                    1: [],
                    2: [],
                    3: []
                  },
                  privileges: ['manage_tickets', 'reply_ticket']
                };
                (0, _stubCurrentUser.stubCurrentUser)(currentUserPrivilege); // Act

                _context4.next = 4;
                return renderConversationActions();

              case 4:
                _context4.next = 6;
                return _conversation.default.conversationActions.openReplyEditor();

              case 6:
                replyModel = this.store.createRecord('conversation', {});
                this.set('convoCreateSuccessCallback', function () {});
                this.set('uniqueId', this.model.id);
                this.set('replyModel', replyModel);
                this.set('updateReplyDraftData', function () {});
                _context4.next = 13;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::ConversationActions::Reply 
                          @ticketModel      = {{ this.model }} 
                          @updateActionType = {{ this.updateActionType }}
                          @cancelAction     = {{ this.cancelAction }}
                          @focusEditor	    = {{ this.focusEditor}} 
                          @convoCreateSuccessCallback = {{this.convoCreateSuccessCallback}}
                          @uniqueId         = {{this.uniqueId}}
                          @replyModel       = {{this.replyModel}}
                          @updateReplyDraftData = {{this.updateReplyDraftData}}
                        />
                */
                {
                  id: "jlKReMRL",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/conversation-actions/reply\",[],[[\"@ticketModel\",\"@updateActionType\",\"@cancelAction\",\"@focusEditor\",\"@convoCreateSuccessCallback\",\"@uniqueId\",\"@replyModel\",\"@updateReplyDraftData\"],[[23,0,[\"model\"]],[23,0,[\"updateActionType\"]],[23,0,[\"cancelAction\"]],[23,0,[\"focusEditor\"]],[23,0,[\"convoCreateSuccessCallback\"]],[23,0,[\"uniqueId\"]],[23,0,[\"replyModel\"]],[23,0,[\"updateReplyDraftData\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 13:
                assert.ok(_conversation.default.conversationActions.replyEditorExists);

              case 14:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should open forward editor on clicking forward button', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var currentUserPrivilege, forwardModel;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                currentUserPrivilege = {
                  scoped_privileges: {
                    0: ['manage_tickets', 'forward_ticket'],
                    1: [],
                    2: [],
                    3: []
                  },
                  privileges: ['manage_tickets', 'forward_ticket']
                };
                (0, _stubCurrentUser.stubCurrentUser)(currentUserPrivilege); // Act

                _context5.next = 4;
                return renderConversationActions();

              case 4:
                _context5.next = 6;
                return _conversation.default.conversationActions.openForwardEditor();

              case 6:
                forwardModel = this.store.createRecord('conversation', {});
                this.set('convoCreateSuccessCallback', function () {});
                this.set('forwardModel', forwardModel);
                this.set('uniqueId', this.model.id);
                _context5.next = 12;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::ConversationActions::Forward 
                          @ticketModel              = {{ this.model }} 
                          @updateActionType         = {{ this.updateActionType }}
                          @cancelAction             = {{ this.cancelAction }}
                          @focusEditor	            = {{ this.focusEditor}}
                          @convoCreateSuccessCallback = {{this.convoCreateSuccessCallback}}
                          @uniqueId					= {{this.uniqueId}}
                          @forwardModel				= {{this.forwardModel}} />
                */
                {
                  id: "WwBPh4Eg",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/conversation-actions/forward\",[],[[\"@ticketModel\",\"@updateActionType\",\"@cancelAction\",\"@focusEditor\",\"@convoCreateSuccessCallback\",\"@uniqueId\",\"@forwardModel\"],[[23,0,[\"model\"]],[23,0,[\"updateActionType\"]],[23,0,[\"cancelAction\"]],[23,0,[\"focusEditor\"]],[23,0,[\"convoCreateSuccessCallback\"]],[23,0,[\"uniqueId\"]],[23,0,[\"forwardModel\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 12:
                assert.ok(_conversation.default.conversationActions.forwardEditorExists);

              case 13:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should open add note editor on clicking add note button', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var noteModel;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return renderConversationActions();

              case 2:
                _context6.next = 4;
                return _conversation.default.conversationActions.openAddNoteEditor();

              case 4:
                noteModel = this.store.createRecord('conversation', {});
                this.set('noteModel', noteModel);
                this.set('uniqueId', this.model.id);
                _context6.next = 9;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::ConversationActions::Note 
                          @ticketModel              = {{ this.model }} 
                          @updateActionType         = {{ this.updateActionType }}
                          @cancelAction             = {{ this.cancelAction }}
                          @focusEditor	            = {{ this.focusEditor}}
                          @convoCreateSuccessCallback = {{this.convoCreateSuccessCallback}}
                          @uniqueId					  = {{this.uniqueId}}
                          @noteModel					= {{this.noteModel}} />
                */
                {
                  id: "7R8nkr2N",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/conversation-actions/note\",[],[[\"@ticketModel\",\"@updateActionType\",\"@cancelAction\",\"@focusEditor\",\"@convoCreateSuccessCallback\",\"@uniqueId\",\"@noteModel\"],[[23,0,[\"model\"]],[23,0,[\"updateActionType\"]],[23,0,[\"cancelAction\"]],[23,0,[\"focusEditor\"]],[23,0,[\"convoCreateSuccessCallback\"]],[23,0,[\"uniqueId\"]],[23,0,[\"noteModel\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 9:
                assert.ok(_conversation.default.conversationActions.addNoteEditorExists);

              case 10:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-tickets/details/conversation-actions/editor-field/selected-option/component-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-tickets/details/conversation-actions/editor-field/selected-option', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.skip)('it renders', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::ConversationActions::EditorField::SelectedOption />
                */
                {
                  id: "q2vVC73q",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/conversation-actions/editor-field/selected-option\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.equal(this.element.textContent.trim(), ''); // Template block usage:

                _context.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                      <ModuleTickets::Details::ConversationActions::EditorField::SelectedOption>
                        template block text
                      </ModuleTickets::Details::ConversationActions::EditorField::SelectedOption>
                    
                */
                {
                  id: "/gq/k9lY",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n      \"],[5,\"module-tickets/details/conversation-actions/editor-field/selected-option\",[],[[],[]],{\"statements\":[[0,\"\\n        template block text\\n      \"]],\"parameters\":[]}],[0,\"\\n    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                assert.equal(this.element.textContent.trim(), 'template block text');

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-tickets/details/conversation-actions/forward/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/pages/components/module-tickets/conversation", "freshservice/tests/pages/components/utils/form-fields"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _intl, _conversation, _formFields) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-tickets/details/conversation-actions/forward', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var mockTicket, forwardModel;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.store = this.owner.lookup('service:store');
              this.server.loadFixtures("tickets");
              this.server.loadFixtures("email_configs");
              _context.next = 5;
              return this.store.findRecord('ticket', 375);

            case 5:
              mockTicket = _context.sent;
              this.set('model', mockTicket);
              this.set('updateActionType', function () {});
              this.set('focusEditor', function () {});
              this.set('cancelAction', function () {});
              this.set('updateConversationList', function () {}); // Open forward editor

              forwardModel = this.store.createRecord('conversation', {});
              this.set('convoCreateSuccessCallback', function () {});
              this.set('forwardModel', forwardModel);
              this.set('uniqueId', this.model.id);

            case 15:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));

    function renderForwardEditor() {
      return _renderForwardEditor.apply(this, arguments);
    }

    function _renderForwardEditor() {
      _renderForwardEditor = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::ConversationActions::Forward 
                          @ticketModel              = {{ this.model }} 
                          @updateActionType         = {{ this.updateActionType }}
                          @cancelAction             = {{ this.cancelAction }}
                          @focusEditor	            = {{ this.focusEditor}}
                          @convoCreateSuccessCallback = {{this.convoCreateSuccessCallback}}
                          @uniqueId					= {{this.uniqueId}}
                          @forwardModel				= {{this.forwardModel}} />
                */
                {
                  id: "WwBPh4Eg",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/conversation-actions/forward\",[],[[\"@ticketModel\",\"@updateActionType\",\"@cancelAction\",\"@focusEditor\",\"@convoCreateSuccessCallback\",\"@uniqueId\",\"@forwardModel\"],[[23,0,[\"model\"]],[23,0,[\"updateActionType\"]],[23,0,[\"cancelAction\"]],[23,0,[\"focusEditor\"]],[23,0,[\"convoCreateSuccessCallback\"]],[23,0,[\"uniqueId\"]],[23,0,[\"forwardModel\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));
      return _renderForwardEditor.apply(this, arguments);
    }

    (0, _qunit.test)('clicking cc button should open cc field and add value', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return renderForwardEditor();

              case 2:
                _context2.next = 4;
                return _conversation.default.editorFields.openCcField();

              case 4:
                _context2.next = 6;
                return _formFields.default.autocompleteSelectMultiple("cc-field", 'admin', '0');

              case 6:
                assert.ok(_conversation.default.editorFields.ccField, 'cc field should be shown');
                assert.equal(_conversation.default.editorFields.hasCcValue, 1, 'cc field should have 1 value');

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('clicking bcc button should open bcc field and add value', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return renderForwardEditor();

              case 2:
                _context3.next = 4;
                return _conversation.default.editorFields.openBccField();

              case 4:
                _context3.next = 6;
                return _formFields.default.autocompleteSelectMultiple("bcc-field", 'admin', '0');

              case 6:
                assert.ok(_conversation.default.editorFields.bccField, 'bcc field should be shown');
                assert.equal(_conversation.default.editorFields.hasBccValue, 1, 'bcc field should have 1 value');

              case 8:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('clicking clear button should clear cc/bcc field value and hide cc/bcc field', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return renderForwardEditor();

              case 2:
                _context4.next = 4;
                return _conversation.default.editorFields.openCcField();

              case 4:
                _context4.next = 6;
                return _formFields.default.autocompleteSelectMultiple("cc-field", 'admin', '0');

              case 6:
                _context4.next = 8;
                return _conversation.default.editorFields.openBccField();

              case 8:
                _context4.next = 10;
                return _formFields.default.autocompleteSelectMultiple("bcc-field", 'support', '0');

              case 10:
                _context4.next = 12;
                return _conversation.default.editorFields.clearCcField();

              case 12:
                _context4.next = 14;
                return _conversation.default.editorFields.clearBccField();

              case 14:
                assert.notOk(_conversation.default.editorFields.ccField, 'cc field shouldnt be shown');
                assert.equal(_conversation.default.editorFields.hasCcValue, 0, 'cc field values should be cleared');
                assert.notOk(_conversation.default.editorFields.bccField, 'bcc field shouldnt be shown');
                assert.equal(_conversation.default.editorFields.hasBccValue, 0, 'bcc field values should be cleared');

              case 18:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }()); // test('attach should list attach options if integration apps are enabled', async function(assert) {
    // });
    // test('should send forward after filling the form', async function(assert) {
    //   await FormFields.autocompleteSelectMultiple("from-field", 'test', '0');
    //   await FormFields.autocompleteSelectMultiple("to-field", 'andrea', '0');
    //   await Conversation.editorFields.openCcField();
    //   await FormFields.autocompleteSelectMultiple("cc-field", 'admin', '0');
    //   await Conversation.editorFields.openBccField();
    //   await FormFields.autocompleteSelectMultiple("bcc-field", 'support', '0');
    //   await Conversation.codeInsert.clickInsertCode();
    // 	assert.ok(Conversation.codeInsert.modalExists);
    // 	await Conversation.codeInsert.fillCode('<h1>hello world</h1>').submit();
    // 	await Conversation.codeInsert.viewCode();
    // 	assert.ok(Conversation.codeInsert.viewCodeActive);
    // 	await Conversation.codeInsert.viewCode();
    // 	assert.equal(Conversation.codeInsert.insertedCodeCount, 1);
    // 	await Conversation.editorFields.forwardSubmit();
    // });

    (0, _qunit.test)('should close forward editor on clicking cancel button', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return renderForwardEditor();

              case 2:
                _context5.next = 4;
                return _conversation.default.editorFields.forwardCancel();

              case 4:
                _context5.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::ConversationActions 
                            @ticketModel={{this.model}}
                            @updateConversationList = {{this.updateConversationList}} @page="ticket"/>
                */
                {
                  id: "J0hmw8qL",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/conversation-actions\",[],[[\"@ticketModel\",\"@updateConversationList\",\"@page\"],[[23,0,[\"model\"]],[23,0,[\"updateConversationList\"]],\"ticket\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                assert.ok(_conversation.default.conversationActionsExists);
                assert.notOk(_conversation.default.conversationActions.forwardEditorExists, 'Forward editor shouldnt be shown once cancel is clicked');

              case 8:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-tickets/details/conversation-actions/note/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/pages/components/module-tickets/conversation", "freshservice/tests/pages/components/utils/form-fields", "freshservice/tests/lib/stub-current-user"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _intl, _conversation, _formFields, _stubCurrentUser) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-tickets/details/conversation-actions/note', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var mockTicket, noteModel;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.store = this.owner.lookup('service:store');
              this.server.loadFixtures("tickets");
              _context.next = 4;
              return this.store.findRecord('ticket', 375);

            case 4:
              mockTicket = _context.sent;
              this.set('model', mockTicket);
              this.set('updateActionType', function () {});
              this.set('focusEditor', function () {});
              this.set('cancelAction', function () {});
              this.set('updateConversationList', true);
              noteModel = this.store.createRecord('conversation', {});
              this.set('convoCreateSuccessCallback', function () {});
              this.set('noteModel', noteModel);
              this.set('uniqueId', this.model.id);

            case 14:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }))); // Open add note editor

    function renderNoteEditor() {
      return _renderNoteEditor.apply(this, arguments);
    }

    function _renderNoteEditor() {
      _renderNoteEditor = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::ConversationActions::Note 
                          @ticketModel              = {{ this.model }} 
                          @updateActionType         = {{ this.updateActionType }}
                          @cancelAction             = {{ this.cancelAction }}
                          @focusEditor	            = {{ this.focusEditor}}
                          @convoCreateSuccessCallback = {{this.convoCreateSuccessCallback}}
                          @uniqueId					  = {{this.uniqueId}}
                          @noteModel					= {{this.noteModel}} />
                */
                {
                  id: "7R8nkr2N",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/conversation-actions/note\",[],[[\"@ticketModel\",\"@updateActionType\",\"@cancelAction\",\"@focusEditor\",\"@convoCreateSuccessCallback\",\"@uniqueId\",\"@noteModel\"],[[23,0,[\"model\"]],[23,0,[\"updateActionType\"]],[23,0,[\"cancelAction\"]],[23,0,[\"focusEditor\"]],[23,0,[\"convoCreateSuccessCallback\"]],[23,0,[\"uniqueId\"]],[23,0,[\"noteModel\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));
      return _renderNoteEditor.apply(this, arguments);
    }

    (0, _qunit.skip)("change note type from private to public", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var fieldDetails;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return renderNoteEditor();

              case 2:
                _context2.next = 4;
                return _formFields.default.selectSingle("change-note-type", '1');

              case 4:
                _context2.next = 6;
                return _formFields.default.getDataForField('change-note-type', true);

              case 6:
                fieldDetails = _context2.sent;
                assert.equal(fieldDetails.selected, " Add Public Note ");

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("should not show change note type dropdown if user does not have reply ticket privilege", /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var currentUserPrivilege;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                currentUserPrivilege = {
                  privileges: ["manage_tickets"]
                };
                (0, _stubCurrentUser.stubCurrentUser)(currentUserPrivilege);
                _context3.next = 4;
                return renderNoteEditor();

              case 4:
                assert.notOk(_conversation.default.editorFields.changeNoteTypeDropdownExists);

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }()); // test('should add a private note', async function(assert) {
    //   await FormFields.autocompleteSelectMultiple("to-field", 'andrea', '0');
    //   await FormFields.autocompleteSelectMultiple("to-field", 'support', '0');
    //   await Conversation.codeInsert.clickInsertCode();
    // 	assert.ok(Conversation.codeInsert.modalExists);
    // 	await Conversation.codeInsert.fillCode('<h1>hello world</h1>').submit();
    // 	await Conversation.codeInsert.viewCode();
    // 	assert.ok(Conversation.codeInsert.viewCodeActive);
    // 	await Conversation.codeInsert.viewCode();
    // 	assert.equal(Conversation.codeInsert.insertedCodeCount, 1);
    // 	await Conversation.editorFields.noteSubmit();
    // });
    // test('should add a public note', async function(assert) {
    //   await FormFields.autocompleteSelectMultiple("to-field", 'andrea', '0');
    //   await FormFields.autocompleteSelectMultiple("to-field", 'support', '0');
    //   await Conversation.codeInsert.clickInsertCode();
    // 	assert.ok(Conversation.codeInsert.modalExists);
    // 	await Conversation.codeInsert.fillCode('<h1>hello world</h1>').submit();
    // 	await Conversation.codeInsert.viewCode();
    // 	assert.ok(Conversation.codeInsert.viewCodeActive);
    // 	await Conversation.codeInsert.viewCode();
    // 	assert.equal(Conversation.codeInsert.insertedCodeCount, 1);
    // 	await Conversation.editorFields.noteSubmit();
    // });

    (0, _qunit.test)('should close add note editor on clicking cancel button', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return renderNoteEditor();

              case 2:
                _context4.next = 4;
                return _conversation.default.editorFields.noteCancel();

              case 4:
                _context4.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::ConversationActions 
                            @ticketModel={{this.model}}
                            @updateConversationList = {{this.updateConversationList}} @page="ticket" />
                */
                {
                  id: "J0hmw8qL",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/conversation-actions\",[],[[\"@ticketModel\",\"@updateConversationList\",\"@page\"],[[23,0,[\"model\"]],[23,0,[\"updateConversationList\"]],\"ticket\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                assert.ok(_conversation.default.conversationActionsExists);
                assert.notOk(_conversation.default.conversationActions.addNoteEditorExists, 'Add note editor shouldnt be shown once cancel is clicked');

              case 8:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-tickets/details/conversation-actions/reply/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/pages/components/module-tickets/conversation", "freshservice/tests/pages/components/utils/form-fields", "freshservice/tests/lib/stub-current-user"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _intl, _conversation, _formFields, _stubCurrentUser) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-tickets/details/conversation-actions/reply', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var mockTicket, replyModel;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.store = this.owner.lookup('service:store');
              this.server.loadFixtures("tickets");
              this.server.loadFixtures("users");
              this.server.loadFixtures("email_configs");
              _context.next = 6;
              return this.store.findRecord('ticket', 375);

            case 6:
              mockTicket = _context.sent;
              this.set('model', mockTicket);
              this.set('updateActionType', function () {});
              this.set('focusEditor', function () {});
              this.set('cancelAction', function () {});
              this.set('updateConversationList', true);
              replyModel = this.store.createRecord('conversation', {});
              this.set('convoCreateSuccessCallback', function () {});
              this.set('uniqueId', this.model.id);
              this.set('replyModel', replyModel);
              this.set('updateReplyDraftData', function () {});
              this.set('savedReplyCc', Ember.A([]));
              this.set('savedReplyBcc', Ember.A([]));

            case 19:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));

    function renderReplyEditor() {
      return _renderReplyEditor.apply(this, arguments);
    }

    function _renderReplyEditor() {
      _renderReplyEditor = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                _context14.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::ConversationActions::Reply 
                            @ticketModel      = {{ this.model }} 
                            @updateActionType = {{ this.updateActionType }}
                            @cancelAction     = {{ this.cancelAction }}
                            @focusEditor	    = {{ this.focusEditor}} 
                            @convoCreateSuccessCallback = {{this.convoCreateSuccessCallback}}
                            @uniqueId         = {{this.uniqueId}}
                            @replyModel       = {{this.replyModel}}
                            @savedReplyCc				= {{this.savedReplyCc}}
                					  @savedReplyBcc				= {{this.savedReplyBcc}}
                            @updateReplyDraftData = {{this.updateReplyDraftData}}
                          />
                */
                {
                  id: "D2FIB+aL",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/conversation-actions/reply\",[],[[\"@ticketModel\",\"@updateActionType\",\"@cancelAction\",\"@focusEditor\",\"@convoCreateSuccessCallback\",\"@uniqueId\",\"@replyModel\",\"@savedReplyCc\",\"@savedReplyBcc\",\"@updateReplyDraftData\"],[[23,0,[\"model\"]],[23,0,[\"updateActionType\"]],[23,0,[\"cancelAction\"]],[23,0,[\"focusEditor\"]],[23,0,[\"convoCreateSuccessCallback\"]],[23,0,[\"uniqueId\"]],[23,0,[\"replyModel\"]],[23,0,[\"savedReplyCc\"]],[23,0,[\"savedReplyBcc\"]],[23,0,[\"updateReplyDraftData\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14);
      }));
      return _renderReplyEditor.apply(this, arguments);
    }

    function createFile(name, size, type) {
      var content = [Array(size)];
      var file = new Blob(content, {
        type: type
      }); // NOTE: `Blob` constructor takes array of content as first argument

      file.name = name;
      return file;
    }

    (0, _qunit.test)('clicking cc button should open cc field and add value', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return renderReplyEditor();

              case 2:
                _context2.next = 4;
                return _conversation.default.editorFields.openCcField();

              case 4:
                _context2.next = 6;
                return _formFields.default.autocompleteSelectMultiple("cc-field", 'admin', '0');

              case 6:
                assert.ok(_conversation.default.editorFields.ccField, 'cc field should be shown');
                assert.equal(_conversation.default.editorFields.hasCcValue, 1, 'cc field should have 1 value');

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('clicking bcc button should open bcc field and add value', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return renderReplyEditor();

              case 2:
                _context3.next = 4;
                return _conversation.default.editorFields.openBccField();

              case 4:
                _context3.next = 6;
                return _formFields.default.autocompleteSelectMultiple("bcc-field", 'admin', '0');

              case 6:
                assert.ok(_conversation.default.editorFields.bccField, 'bcc field should be shown');
                assert.equal(_conversation.default.editorFields.hasBccValue, 1, 'bcc field should have 1 value');

              case 8:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('clicking clear button should clear cc/bcc field value and hide cc/bcc field', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return renderReplyEditor();

              case 2:
                _context4.next = 4;
                return _conversation.default.editorFields.openCcField();

              case 4:
                _context4.next = 6;
                return _formFields.default.autocompleteSelectMultiple("cc-field", 'admin', '0');

              case 6:
                _context4.next = 8;
                return _conversation.default.editorFields.openBccField();

              case 8:
                _context4.next = 10;
                return _formFields.default.autocompleteSelectMultiple("bcc-field", 'admin', '0');

              case 10:
                _context4.next = 12;
                return _conversation.default.editorFields.clearCcField();

              case 12:
                _context4.next = 14;
                return _conversation.default.editorFields.clearBccField();

              case 14:
                assert.notOk(_conversation.default.editorFields.ccField, 'cc field shouldnt be shown');
                assert.equal(_conversation.default.editorFields.hasCcValue, 0, 'cc field values should be cleared');
                assert.notOk(_conversation.default.editorFields.bccField, 'bcc field shouldnt be shown');
                assert.equal(_conversation.default.editorFields.hasBccValue, 0, 'bcc field values should be cleared');

              case 18:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.skip)('should be able to add attachments', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return renderReplyEditor();

              case 2:
                _context5.next = 4;
                return (0, _testHelpers.triggerEvent)('input#attach_file', 'change', {
                  files: [new Blob(['sample'])]
                });

              case 4:
                assert.equal(_conversation.default.attachments.hasAttachments, 1, '1 attachmnet should be added');
                assert.notOk(_conversation.default.attachments.hasSizeError);

              case 6:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.skip)('should not be able to add attachment which exceeds file size limit', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var file;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return renderReplyEditor();

              case 2:
                file = createFile("sample.csv", 30 * 1024 * 1024, 'text/csv'); // Generating file

                _context6.next = 5;
                return _conversation.default.attachments.addAttachment(file);

              case 5:
                assert.equal(_conversation.default.attachments.hasAttachments, 0, '0 valid size attachment should be added');
                assert.equal(_conversation.default.attachments.hasMaxSizeAttachments, 1, '1 max size attachment should be added');
                assert.ok(_conversation.default.attachments.hasSizeError);

              case 8:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.skip)('should check for cumulative file size while attaching multiple attachments', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var file, i;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return renderReplyEditor();

              case 2:
                file = createFile("test.csv", 10 * 1024 * 1024, 'text/csv'); // Generating file
                // To add multiple files

                i = 1;

              case 4:
                if (!(i <= 4)) {
                  _context7.next = 10;
                  break;
                }

                _context7.next = 7;
                return _conversation.default.attachments.addAttachment(file);

              case 7:
                i++;
                _context7.next = 4;
                break;

              case 10:
                assert.equal(_conversation.default.attachments.hasAttachments, 2, '2 valid size attachment should be added');
                assert.equal(_conversation.default.attachments.hasMaxSizeAttachments, 2, '2 max size attachment should be added');
                assert.ok(_conversation.default.attachments.hasSizeError);

              case 13:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      return function (_x6) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.skip)('should be able to remove attachments', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return renderReplyEditor();

              case 2:
                _context8.next = 4;
                return (0, _testHelpers.triggerEvent)('input#attach_file', 'change', {
                  files: [new Blob(['sample'])]
                });

              case 4:
                _context8.next = 6;
                return _conversation.default.attachments.removeAttachment();

              case 6:
                assert.equal(_conversation.default.attachments.hasAttachments, 0, 'attachment list should be empty');

              case 7:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }));

      return function (_x7) {
        return _ref9.apply(this, arguments);
      };
    }()); // test('attach should list attach options if integration apps are enabled', async function(assert) {
    // });
    // test('should send reply after filling the form', async function(assert) {
    //   await FormFields.autocompleteSelectMultiple("from-field", 'helpdesk', '0');
    //   await Conversation.editorFields.openCcField();
    //   await FormFields.autocompleteSelectMultiple("cc-field", 'admin', '0');
    //   await Conversation.editorFields.openBccField();
    //   await FormFields.autocompleteSelectMultiple("bcc-field", 'admin', '0');
    //   await Conversation.codeInsert.clickInsertCode();
    // 	assert.ok(Conversation.codeInsert.modalExists);
    // 	await Conversation.codeInsert.fillCode('<h1>hello world</h1>').submit();
    // 	await Conversation.codeInsert.viewCode();
    // 	assert.ok(Conversation.codeInsert.viewCodeActive);
    // 	await Conversation.codeInsert.viewCode();
    // 	assert.equal(Conversation.codeInsert.insertedCodeCount, 1);
    // 	await Conversation.editorFields.replySubmit();
    // });

    (0, _qunit.test)('should not show send and set status dropdown if user does not have edit ticket permission', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        var currentUserPrivilege;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                currentUserPrivilege = {
                  privileges: ["manage_tickets"]
                };
                (0, _stubCurrentUser.stubCurrentUser)(currentUserPrivilege);
                _context9.next = 4;
                return renderReplyEditor();

              case 4:
                assert.notOk(_conversation.default.editorFields.sendAndSetStatusDropdown);

              case 5:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9);
      }));

      return function (_x8) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should close reply editor on clicking cancel button', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return renderReplyEditor();

              case 2:
                _context10.next = 4;
                return _conversation.default.editorFields.replyCancel();

              case 4:
                _context10.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::ConversationActions 
                            @ticketModel={{this.model}}
                            @updateConversationList = {{this.updateConversationList}} @page="ticket"/>
                */
                {
                  id: "J0hmw8qL",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/conversation-actions\",[],[[\"@ticketModel\",\"@updateConversationList\",\"@page\"],[[23,0,[\"model\"]],[23,0,[\"updateConversationList\"]],\"ticket\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                assert.ok(_conversation.default.conversationActionsExists);
                assert.notOk(_conversation.default.conversationActions.replyEditorExists, 'Reply editor shouldnt be shown once cancel is clicked');

              case 8:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10);
      }));

      return function (_x9) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should show survey monkey checkbox, if user installed it', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _context11.next = 2;
                return renderReplyEditor();

              case 2:
                assert.notOk(_conversation.default.editorFields.satisficationSurveyChkboxVisible);
                assert.notOk(_conversation.default.editorFields.surveySeparator);
                assert.ok(_conversation.default.editorFields.surveyMonkeyChkboxVisible);

              case 5:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11);
      }));

      return function (_x10) {
        return _ref12.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should show survey checkbox, if user enable it', /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        var mockTicket;
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                _context12.next = 2;
                return this.store.findRecord('ticket', 374);

              case 2:
                mockTicket = _context12.sent;
                this.set('model', mockTicket);
                _context12.next = 6;
                return renderReplyEditor();

              case 6:
                assert.ok(_conversation.default.editorFields.satisficationSurveyChkboxVisible);
                assert.notOk(_conversation.default.editorFields.surveySeparator);
                assert.notOk(_conversation.default.editorFields.surveyMonkeyChkboxVisible);

              case 9:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x11) {
        return _ref13.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should show survey monkey & survey checkbox, if user enable both', /*#__PURE__*/function () {
      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
        var mockTicket;
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                _context13.next = 2;
                return this.store.findRecord('ticket', 373);

              case 2:
                mockTicket = _context13.sent;
                this.set('model', mockTicket);
                _context13.next = 6;
                return renderReplyEditor();

              case 6:
                assert.ok(_conversation.default.editorFields.satisficationSurveyChkboxVisible);
                assert.ok(_conversation.default.editorFields.surveyMonkeyChkboxVisible);
                assert.ok(_conversation.default.editorFields.surveySeparator);

              case 9:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      return function (_x12) {
        return _ref14.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-tickets/details/details-tab-content/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/sinon-context", "freshservice/tests/pages/components/module-tickets/details-tab"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _sinonContext, _detailsTab) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-tickets/details/details-tab-content', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.intl = this.owner.lookup("service:intl");
              this.store = this.owner.lookup('service:store');
              this.server.loadFixtures('tickets');

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('Should show description, conversations and conversation action components ', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var mockTicket;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.store.findRecord('ticket', 375);

              case 2:
                mockTicket = _context2.sent;
                this.model = mockTicket;
                this.updateConversationList = {};
                this.conversationsCallback = {};
                this.additionalOps = {
                  isServiceRequest: false
                };
                _context2.next = 9;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::DetailsTabContent @model={{this.model}} @additionalOps={{this.additionalOps}} />
                */
                {
                  id: "QQQSh73l",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/details-tab-content\",[],[[\"@model\",\"@additionalOps\"],[[23,0,[\"model\"]],[23,0,[\"additionalOps\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 9:
                assert.ok(_detailsTab.default.descriptionContainerExists);
                assert.ok(_detailsTab.default.conversationsExists);
                assert.ok(_detailsTab.default.conversationActionsExists);

              case 12:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('shoould not show description container if ticket doesnt have description and attachment', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var mockTicket;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.store.findRecord('ticket', 15);

              case 2:
                mockTicket = _context3.sent;
                this.model = mockTicket;
                assert.notOk(_detailsTab.default.descriptionContainerExists);

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should show description container if ticket doesnt have description or attachment', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var mockTicket;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.store.findRecord('ticket', 16);

              case 2:
                mockTicket = _context4.sent;
                this.model = mockTicket;
                assert.notOk(_detailsTab.default.descriptionContainerExists);

              case 5:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-tickets/details/edit-form/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/stub-current-user", "freshservice/tests/pages/components/module-tickets/edit-form"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _intl, _sinonContext, _stubCurrentUser, _editForm) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var TEST_USER = {
    privileges: ["edit_ticket_properties"]
  };
  var TEST_INC_TICKET = {
    id: 1000,
    displayId: 1000,
    type: 'Incident',
    subject: 'Hello new test ticket',
    description: 'Hello new test ticket',
    descriptionText: 'Hello new test ticket',
    requester: null,
    department: null,
    createdAt: "2020-07-17T12:09:24Z",
    updatedAt: "2020-07-30T15:14:55Z"
  };
  var MOCK_UPDATE_DATA = {
    editTicket: {
      subject: 'updated title of ticket',
      description: 'updating description of ticket'
    }
  };
  (0, _qunit.module)('Integration | Component | module-tickets | details | edit-form', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var router, mockTicket;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.intl = this.owner.lookup("service:intl");
              this.store = this.owner.lookup('service:store');
              this.server.loadFixtures("users");
              this.server.loadFixtures('tickets');
              this.server.loadFixtures("requesters");
              this.server.loadFixtures('ticketFormFields');
              router = this.owner.lookup("router:main");
              router.setupRouter();
              _context.next = 10;
              return this.store.findRecord('ticket', 375);

            case 10:
              mockTicket = _context.sent;
              this.model = mockTicket;
              _context.next = 14;
              return this.store.findAll('ticketFormField');

            case 14:
              this.ticketFormFields = _context.sent;

            case 15:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    hooks.after(function () {
      this.owner.destroy("service:current-user");
    }); // Due to changes in ticket model, these cases needs to be updated and fixed in final Edit PR changes.

    (0, _qunit.skip)('Should load edit form for Incident', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)(TEST_USER);
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::EditForm
                			@ticketModel = {{this.model}} />
                */
                {
                  id: "UhIuFYwz",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/edit-form\",[],[[\"@ticketModel\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context2.next = 5;
                return _editForm.default.triggerEdit();

              case 5:
                assert.ok(_editForm.default.exists);
                assert.ok(_editForm.default.hasFieldSubject);
                assert.ok(_editForm.default.hasFieldDescription);
                assert.ok(_editForm.default.hasFieldRequester);
                assert.notOk(_editForm.default.hasFieldRequestedFor);
                assert.ok(_editForm.default.hasFieldDepartment);
                _context2.next = 13;
                return _editForm.default.closeSideModal();

              case 13:
                assert.notOk(_editForm.default.exists);

              case 14:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.skip)('Should load edit form for Service Request', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var mockTicket;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)(TEST_USER);
                _context3.next = 3;
                return this.store.findRecord('ticket', 369);

              case 3:
                mockTicket = _context3.sent;
                this.model = mockTicket;
                _context3.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::EditForm
                			@ticketModel = {{this.model}} />
                */
                {
                  id: "UhIuFYwz",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/edit-form\",[],[[\"@ticketModel\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context3.next = 9;
                return _editForm.default.triggerEdit();

              case 9:
                assert.ok(_editForm.default.exists);
                assert.ok(_editForm.default.hasFieldSubject);
                assert.ok(_editForm.default.hasFieldDescription);
                assert.ok(_editForm.default.hasFieldRequester);
                assert.ok(_editForm.default.hasFieldRequestedFor);
                assert.ok(_editForm.default.hasFieldDepartment);
                _context3.next = 17;
                return _editForm.default.closeSideModal();

              case 17:
                assert.notOk(_editForm.default.exists);

              case 18:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.skip)('Should load and try to edit the ticket', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var ticket;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)(TEST_USER);
                ticket = this.store.createRecord("ticket", TEST_INC_TICKET);
                this.model = ticket;
                _context4.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::EditForm
                			@ticketModel = {{this.model}} />
                */
                {
                  id: "UhIuFYwz",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/edit-form\",[],[[\"@ticketModel\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                _context4.next = 7;
                return _editForm.default.triggerEdit();

              case 7:
                _context4.next = 9;
                return _editForm.default.fillSubject(MOCK_UPDATE_DATA.editTicket.subject);

              case 9:
                _context4.next = 11;
                return _editForm.default.update();

              case 11:
                assert.ok(_editForm.default.hasErrorRequester);
                assert.ok(_editForm.default.exists);

              case 13:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.skip)('Should load and edit the ticket edit form', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)(TEST_USER);
                _context5.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::EditForm
                			@ticketModel = {{this.model}} />
                */
                {
                  id: "UhIuFYwz",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/edit-form\",[],[[\"@ticketModel\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context5.next = 5;
                return _editForm.default.triggerEdit();

              case 5:
                _context5.next = 7;
                return _editForm.default.fillSubject(MOCK_UPDATE_DATA.editTicket.subject);

              case 7:
                _context5.next = 9;
                return _editForm.default.closeSideModal();

              case 9:
                // assert.equal(currentURL(), editTicketForm.url.showPage(375), 'after update of ticket, should land in show page');
                assert.notOk(_editForm.default.exists);

              case 10:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.skip)('should not show edit button if user doesnot have edit ticket privilege', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details
                			@model = {{this.model}} />
                */
                {
                  id: "UvXjK2vc",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.notOk(_editForm.default.exists);

              case 3:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-tickets/details/fulfill-request/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl", "ember-cli-mirage/test-support", "freshservice/tests/lib/sinon-context", "freshservice/tests/pages/components/module-tickets/associated-asset", "freshservice/tests/lib/spy-flash-message"], function (_qunit, _emberQunit, _testHelpers, _intl, _testSupport, _sinonContext, _associatedAsset, _spyFlashMessage) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | Module-tickets/Details/Fulfill-request', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var mockTicket, mockRequestedItem;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.store = this.owner.lookup('service:store');
              this.server.loadFixtures('tickets');
              this.server.loadFixtures('requested-items');
              _context.next = 5;
              return this.store.findRecord('ticket', 12);

            case 5:
              mockTicket = _context.sent;
              _context.next = 8;
              return this.store.findRecord('requested-item', 1);

            case 8:
              mockRequestedItem = _context.sent;
              this.set('serviceRequest', mockTicket);
              this.set('reqItem', mockRequestedItem);

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('Should render Fulfill-request Component', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::FulfillRequest 
                			@showFulfillRequestModal	=	{{true}} 
                			@requestedItem						= {{this.reqItem.item}}
                			@srItem										=	{{hash ticketId = this.serviceRequest.id}}
                			@fulfillAssetCompletion		=	{{fn (mut this.showFulfillRequestModal) false }}
                			@closeFulfillRequestModal	= {{fn (mut this.showFulfillRequestModal) false }} />
                */
                {
                  id: "wLFyApQU",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/fulfill-request\",[],[[\"@showFulfillRequestModal\",\"@requestedItem\",\"@srItem\",\"@fulfillAssetCompletion\",\"@closeFulfillRequestModal\"],[true,[23,0,[\"reqItem\",\"item\"]],[28,\"hash\",null,[[\"ticketId\"],[[23,0,[\"serviceRequest\",\"id\"]]]]],[28,\"fn\",[[28,\"mut\",[[23,0,[\"showFulfillRequestModal\"]]],null],false],null],[28,\"fn\",[[28,\"mut\",[[23,0,[\"showFulfillRequestModal\"]]],null],false],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.ok(document.querySelector('.fulfill-asset-modal'), "Fulfill Request Modal is visible");
                assert.ok(document.querySelector('.fulfill-request-modal-body .asset-box'), "Fulfill Request Assets are available");

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should select asset in Fulfill request modal', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var submitBtn, assetCheckBox;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::FulfillRequest 
                			@showFulfillRequestModal	=	{{true}} 
                			@requestedItem						= {{this.reqItem.item}}
                			@srItem										=	{{hash ticketId = this.serviceRequest.id}}
                			@fulfillAssetCompletion		=	{{fn (mut this.showFulfillRequestModal) false }} 
                			@closeFulfillRequestModal	= {{fn (mut this.showFulfillRequestModal) false }} />
                */
                {
                  id: "wLFyApQU",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/fulfill-request\",[],[[\"@showFulfillRequestModal\",\"@requestedItem\",\"@srItem\",\"@fulfillAssetCompletion\",\"@closeFulfillRequestModal\"],[true,[23,0,[\"reqItem\",\"item\"]],[28,\"hash\",null,[[\"ticketId\"],[[23,0,[\"serviceRequest\",\"id\"]]]]],[28,\"fn\",[[28,\"mut\",[[23,0,[\"showFulfillRequestModal\"]]],null],false],null],[28,\"fn\",[[28,\"mut\",[[23,0,[\"showFulfillRequestModal\"]]],null],false],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.ok(document.querySelector('.fulfill-asset-modal'), "Fulfill Request Modal is visible");
                submitBtn = document.querySelector('.fulfill-asset-modal [data-test-id="modal-submit"]');
                assetCheckBox = document.querySelectorAll('.fulfill-request-modal-body .asset-box input')[0];
                assert.ok(submitBtn.className.includes('disabled'), "Submit Button is disabled");
                assert.ok(document.querySelector('.fulfill-asset-footer-left-content').innerText.includes('0'), "No Item Selected");
                _context3.next = 9;
                return (0, _testHelpers.click)(assetCheckBox);

              case 9:
                _context3.next = 11;
                return assert.ok(assetCheckBox.checked, "Asset Checkbox is selected");

              case 11:
                assert.ok(document.querySelector('.fulfill-asset-footer-left-content').innerText.includes('1'), "One Item Selected");
                assert.notOk(submitBtn.className.includes('disabled'), "Submit Button is Enabled");

              case 13:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should search asset in Fulfill request modal', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var searchBox, assetTitle;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::FulfillRequest 
                			@showFulfillRequestModal	=	{{true}} 
                			@requestedItem						= {{this.reqItem.item}}
                			@srItem										=	{{hash ticketId = this.serviceRequest.id}}
                			@fulfillAssetCompletion		=	{{fn (mut this.showFulfillRequestModal) false }} 
                			@closeFulfillRequestModal	= {{fn (mut this.showFulfillRequestModal) false }} />
                */
                {
                  id: "wLFyApQU",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/fulfill-request\",[],[[\"@showFulfillRequestModal\",\"@requestedItem\",\"@srItem\",\"@fulfillAssetCompletion\",\"@closeFulfillRequestModal\"],[true,[23,0,[\"reqItem\",\"item\"]],[28,\"hash\",null,[[\"ticketId\"],[[23,0,[\"serviceRequest\",\"id\"]]]]],[28,\"fn\",[[28,\"mut\",[[23,0,[\"showFulfillRequestModal\"]]],null],false],null],[28,\"fn\",[[28,\"mut\",[[23,0,[\"showFulfillRequestModal\"]]],null],false],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.ok(document.querySelector('.fulfill-asset-modal'), "Fulfill Request Modal is visible");
                searchBox = document.querySelector('.fulfill-request-search-box input');
                _context4.next = 6;
                return (0, _testHelpers.fillIn)(searchBox, 'Laptop');

              case 6:
                _context4.next = 8;
                return (0, _testHelpers.triggerEvent)(searchBox, 'keyup');

              case 8:
                assert.ok(document.querySelector('.fulfill-request-modal-body .asset-box'), "Search results are available");
                assetTitle = document.querySelector('.fulfill-request-modal-body .asset-box .asset-title').innerText;
                assert.ok(assetTitle.includes('Laptop'), 'Laptop asset available');
                _context4.next = 13;
                return (0, _testHelpers.fillIn)(searchBox, 'Mobile');

              case 13:
                _context4.next = 15;
                return (0, _testHelpers.triggerEvent)(searchBox, 'keyup');

              case 15:
                assert.notOk(document.querySelector('.fulfill-request-modal-body .asset-box'), "Mobile Asset not available");

              case 16:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should check asset property in Fulfill request modal', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var assetCard, assetTitle, assetDeptName, assetLocationName, assetTag;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::FulfillRequest 
                			@showFulfillRequestModal	=	{{true}} 
                			@requestedItem						= {{this.reqItem.item}}
                			@srItem										=	{{hash ticketId = this.serviceRequest.id}}
                			@fulfillAssetCompletion		=	{{fn (mut this.showFulfillRequestModal) false }}
                			@closeFulfillRequestModal	= {{fn (mut this.showFulfillRequestModal) false }} />
                */
                {
                  id: "wLFyApQU",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/fulfill-request\",[],[[\"@showFulfillRequestModal\",\"@requestedItem\",\"@srItem\",\"@fulfillAssetCompletion\",\"@closeFulfillRequestModal\"],[true,[23,0,[\"reqItem\",\"item\"]],[28,\"hash\",null,[[\"ticketId\"],[[23,0,[\"serviceRequest\",\"id\"]]]]],[28,\"fn\",[[28,\"mut\",[[23,0,[\"showFulfillRequestModal\"]]],null],false],null],[28,\"fn\",[[28,\"mut\",[[23,0,[\"showFulfillRequestModal\"]]],null],false],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assetCard = document.querySelector('.fulfill-request-modal-body .asset-box');
                assetTitle = assetCard.querySelector('.asset-title').innerText;
                assetDeptName = assetCard.querySelector('.asset-secondary-title [data-test-id="department-value"]').innerText;
                assetLocationName = assetCard.querySelector('.asset-secondary-title [data-test-id="location-value"]').innerText;
                assetTag = assetCard.querySelector('.asset-secondary-title [data-test-id="asset-tag-value"]').innerText;
                assert.equal(assetTitle, "Andrea's Laptop");
                assert.equal(assetDeptName, "Customer Support");
                assert.equal(assetLocationName, "America");
                assert.equal(assetTag, "ASSET-33");

              case 11:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should Navigate to view item page in Fulfill request modal', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var assetCheckBox, viewItemLink, assetCard;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::FulfillRequest 
                			@showFulfillRequestModal	=	{{true}} 
                			@requestedItem						= {{this.reqItem.item}}
                			@srItem										=	{{hash ticketId = this.serviceRequest.id}}
                			@fulfillAssetCompletion		=	{{fn (mut this.showFulfillRequestModal) false }}
                			@closeFulfillRequestModal	= {{fn (mut this.showFulfillRequestModal) false }} />
                */
                {
                  id: "wLFyApQU",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/fulfill-request\",[],[[\"@showFulfillRequestModal\",\"@requestedItem\",\"@srItem\",\"@fulfillAssetCompletion\",\"@closeFulfillRequestModal\"],[true,[23,0,[\"reqItem\",\"item\"]],[28,\"hash\",null,[[\"ticketId\"],[[23,0,[\"serviceRequest\",\"id\"]]]]],[28,\"fn\",[[28,\"mut\",[[23,0,[\"showFulfillRequestModal\"]]],null],false],null],[28,\"fn\",[[28,\"mut\",[[23,0,[\"showFulfillRequestModal\"]]],null],false],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.ok(document.querySelector('.fulfill-asset-modal'), "Fulfill Request Modal is visible");
                assetCheckBox = document.querySelectorAll('.fulfill-request-modal-body .asset-box input')[0];
                assert.notOk(document.querySelector('.fulfill-asset-footer-left-content a'), 'View Item link is not visible');
                _context6.next = 7;
                return (0, _testHelpers.click)(assetCheckBox);

              case 7:
                viewItemLink = document.querySelector('.fulfill-asset-footer-left-content a');
                assert.ok(viewItemLink, 'View Item link is visible');
                _context6.next = 11;
                return (0, _testHelpers.click)(viewItemLink);

              case 11:
                assert.ok(document.querySelector('.view-item-fulfill-list'), 'View Item page visible');
                assetCard = document.querySelector('.view-item-fulfill-list .fulfill-asset-card');
                assert.ok(assetCard, 'Asset is visible in view item page');
                _context6.next = 16;
                return (0, _testHelpers.click)(assetCard.querySelector('.asset-delete-icon'));

              case 16:
                assert.notOk(document.querySelector('.view-item-fulfill-list .fulfill-asset-card'), 'Asset is removed from view item page');
                _context6.next = 19;
                return (0, _testHelpers.click)(document.querySelector('.back-btn'));

              case 19:
                assert.ok(document.querySelector('.fulfill-request-list'), 'Back to Fulfill asset list page');

              case 20:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should Navigate to Form page in Fulfill request modal', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var successFlash, assetCheckBox, nextBtn;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                successFlash = (0, _spyFlashMessage.default)('success');
                _context7.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::FulfillRequest 
                			@showFulfillRequestModal	=	{{true}} 
                			@requestedItem						= {{this.reqItem.item}}
                			@srItem										=	{{hash ticketId = this.serviceRequest.id user = this.serviceRequest.requestedFor }}
                			@fulfillAssetCompletion		=	{{fn (mut this.showFulfillRequestModal) false }}
                			@closeFulfillRequestModal	= {{fn (mut this.showFulfillRequestModal) false }}/>
                */
                {
                  id: "617G4F7O",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/fulfill-request\",[],[[\"@showFulfillRequestModal\",\"@requestedItem\",\"@srItem\",\"@fulfillAssetCompletion\",\"@closeFulfillRequestModal\"],[true,[23,0,[\"reqItem\",\"item\"]],[28,\"hash\",null,[[\"ticketId\",\"user\"],[[23,0,[\"serviceRequest\",\"id\"]],[23,0,[\"serviceRequest\",\"requestedFor\"]]]]],[28,\"fn\",[[28,\"mut\",[[23,0,[\"showFulfillRequestModal\"]]],null],false],null],[28,\"fn\",[[28,\"mut\",[[23,0,[\"showFulfillRequestModal\"]]],null],false],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.ok(document.querySelector('.fulfill-asset-modal'), "Fulfill Request Modal is visible");
                assetCheckBox = document.querySelectorAll('.fulfill-request-modal-body .asset-box input')[0];
                _context7.next = 7;
                return (0, _testHelpers.click)(assetCheckBox);

              case 7:
                nextBtn = document.querySelector('.fulfill-asset-modal [data-test-id="modal-submit"]');
                _context7.next = 10;
                return (0, _testHelpers.click)(nextBtn);

              case 10:
                assert.ok(_associatedAsset.default.editAssetModalExists, 'Asset Fulfill form page is visible');
                assert.ok(_associatedAsset.default.assetStateFieldExist);
                assert.ok(_associatedAsset.default.departmentFieldExist);
                assert.ok(_associatedAsset.default.userFieldExist);
                assert.ok(_associatedAsset.default.assignedOnFieldExist);
                assert.ok(_associatedAsset.default.stageFieldExist);
                _context7.next = 18;
                return _associatedAsset.default.clickUpdateFulfilledAsset();

              case 18:
                assert.ok(successFlash.calledOnce);

              case 19:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      return function (_x6) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should Render Software form', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var successFlash;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                successFlash = (0, _spyFlashMessage.default)('success');
                this.reqItem.item.application = {
                  id: 1,
                  name: 'Antivirus'
                };
                _context8.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::FulfillRequest 
                		@showFulfillRequestModal	=	{{true}} 
                		@requestedItem						= {{this.reqItem.item}}
                		@srItem										=	{{hash ticketId = this.serviceRequest.id user = this.serviceRequest.requestedFor }}
                		@isAssetTypeSoftware			= {{true}}
                		@fulfillAssetCompletion		=	{{fn (mut this.showFulfillRequestModal) false }}
                		@closeFulfillRequestModal	= {{fn (mut this.showFulfillRequestModal) false }} />
                */
                {
                  id: "hTLUxxD/",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/fulfill-request\",[],[[\"@showFulfillRequestModal\",\"@requestedItem\",\"@srItem\",\"@isAssetTypeSoftware\",\"@fulfillAssetCompletion\",\"@closeFulfillRequestModal\"],[true,[23,0,[\"reqItem\",\"item\"]],[28,\"hash\",null,[[\"ticketId\",\"user\"],[[23,0,[\"serviceRequest\",\"id\"]],[23,0,[\"serviceRequest\",\"requestedFor\"]]]]],true,[28,\"fn\",[[28,\"mut\",[[23,0,[\"showFulfillRequestModal\"]]],null],false],null],[28,\"fn\",[[28,\"mut\",[[23,0,[\"showFulfillRequestModal\"]]],null],false],null]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                assert.ok(_associatedAsset.default.editAssetModalExists, 'Asset Fulfill form page is visible');
                assert.ok(_associatedAsset.default.softwareFieldExist);
                assert.ok(_associatedAsset.default.licenseFieldExist);
                assert.ok(_associatedAsset.default.stageFieldExist);
                _context8.next = 10;
                return _associatedAsset.default.clickUpdateFulfilledAsset();

              case 10:
                assert.ok(successFlash.calledOnce);

              case 11:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x7) {
        return _ref9.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-tickets/details/related-tickets/component-test", ["qunit", "sinon", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/stub-current-user", "freshservice/tests/pages/components/module-tickets/related-tickets", "freshservice/tests/pages/components/module-tickets/new-ticket", "freshservice/mirage/fixtures/related-tickets/parent-ticket", "freshservice/mirage/fixtures/related-tickets/child_tickets", "freshservice/mirage/fixtures/requesters", "freshservice/mirage/fixtures/tickets", "freshservice/tests/lib/spy-flash-message"], function (_qunit, _sinon, _emberQunit, _testHelpers, _testSupport, _intl, _sinonContext, _stubCurrentUser, _relatedTickets, _newTicket, _parentTicket, _child_tickets, _requesters, _tickets, _spyFlashMessage) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var SUBJECT_OF_TICKET_WITH_ALL_CUSTOM_FIELDS = 'Test ticket (With all custom fields set)';
  (0, _qunit.module)('Integration | Component | module-tickets/details/related-tickets', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _intl.setupTranslations)(hooks);
    var CURRENT_USER = {
      privileges: ['edit_ticket_properties'],
      scoped_privileges: {
        0: ['edit_ticket_properties'],
        1: [],
        2: [],
        3: []
      },
      language: 'en'
    };
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var ticketWithAllTypesOfField, id, ticketWithAllFields;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.intl = this.owner.lookup('service:intl');
              this.store = this.owner.lookup('service:store');
              this.store.unloadAll('ticket');
              this.server.loadFixtures('tickets');
              ticketWithAllTypesOfField = Ember.A(_tickets.default).findBy('subject', SUBJECT_OF_TICKET_WITH_ALL_CUSTOM_FIELDS);
              id = ticketWithAllTypesOfField.id;
              _context.next = 8;
              return this.store.findRecord('ticket', id);

            case 8:
              ticketWithAllFields = _context.sent;
              ticketWithAllFields.customFields = ticketWithAllTypesOfField.custom_fields;
              ticketWithAllFields.hierarchy = 2;
              this.model = ticketWithAllFields;

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));

    function renderBaseComponent() {
      return _renderBaseComponent.apply(this, arguments);
    }

    function _renderBaseComponent() {
      _renderBaseComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18() {
        return regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                _context18.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::RelatedTickets @model={{this.model}} />
                */
                {
                  id: "IUiKhuGM",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/related-tickets\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18);
      }));
      return _renderBaseComponent.apply(this, arguments);
    }

    function renderBaseComponentWithOps() {
      return _renderBaseComponentWithOps.apply(this, arguments);
    }

    function _renderBaseComponentWithOps() {
      _renderBaseComponentWithOps = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19() {
        return regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                _context19.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::RelatedTickets @model={{this.model}} @additionalOps = {{this.additionalOps}} />
                */
                {
                  id: "8LjqnUK/",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/related-tickets\",[],[[\"@model\",\"@additionalOps\"],[[23,0,[\"model\"]],[23,0,[\"additionalOps\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19);
      }));
      return _renderBaseComponentWithOps.apply(this, arguments);
    }

    (0, _qunit.test)('should show related tickets', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var mockTicket;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.store.findRecord('ticket', 332);

              case 2:
                mockTicket = _context2.sent;
                this.model = mockTicket;
                this.additionalOps = {
                  isNotIncident: true,
                  closedEntity: false,
                  resolvedEntity: false
                };
                _context2.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::RelatedTickets
                			@model = {{this.model}}
                			@additionalOps = {{this.additionalOps}}
                		/>
                */
                {
                  id: "8LjqnUK/",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/related-tickets\",[],[[\"@model\",\"@additionalOps\"],[[23,0,[\"model\"]],[23,0,[\"additionalOps\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                assert.ok(_relatedTickets.default.relatedTicketsExist);
                assert.ok(_relatedTickets.default.eobTicketsExist);

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should not show eob tickets', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var mockTicket;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)(CURRENT_USER);
                _context3.next = 3;
                return this.store.findRecord('ticket', 341);

              case 3:
                mockTicket = _context3.sent;
                this.model = mockTicket;
                this.additionalOps = {
                  isNotIncident: false,
                  closedEntity: false,
                  resolvedEntity: false
                };
                _context3.next = 8;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::RelatedTickets
                			@model = {{this.model}}
                			@additionalOps = {{this.additionalOps}}
                		/>
                */
                {
                  id: "8LjqnUK/",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/related-tickets\",[],[[\"@model\",\"@additionalOps\"],[[23,0,[\"model\"]],[23,0,[\"additionalOps\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 8:
                assert.ok(_relatedTickets.default.relatedTicketsExist);
                assert.notOk(_relatedTickets.default.eobTicketsExist);
                assert.ok(_relatedTickets.default.ticketExist);
                assert.ok(_relatedTickets.default.ticketDeleteExist);
                assert.ok(_relatedTickets.default.ticketDueInfoExist);
                assert.ok(_relatedTickets.default.ticketLink);
                assert.ok(_relatedTickets.default.ticketImgExist);
                assert.ok(_relatedTickets.default.ticketStateExist);
                assert.ok(_relatedTickets.default.ticketStatusName);
                assert.ok(_relatedTickets.default.ticketPriotityName);
                assert.equal(_relatedTickets.default.ticketDisplayId, "#".concat(_parentTicket.default.parent_ticket.human_display_id), 'display id should begin with #');

              case 19:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should show existing related tickets', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return renderBaseComponent();

              case 2:
                assert.equal(_relatedTickets.default.childTickets.length, _child_tickets.default.length);

              case 3:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should show add related tickets button', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)(CURRENT_USER);
                _context5.next = 3;
                return renderBaseComponent();

              case 3:
                assert.ok(_relatedTickets.default.hasAddChildTicketsBtn);

              case 4:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should load new ticket side modal on click of add related tickets link', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)(CURRENT_USER);
                _context6.next = 3;
                return renderBaseComponent();

              case 3:
                _context6.next = 5;
                return _relatedTickets.default.openAddOrAssociateChildTicketsModal();

              case 5:
                assert.ok(_relatedTickets.default.hasAddChildTicketSideModal);

              case 6:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should close the add related tickets side modal once child ticket is created and associated', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)(CURRENT_USER); // Mandatory to resolve such third party dependencies before rendering the component.

                _context7.next = 3;
                return emberAutoImportDynamic("froala-editor");

              case 3:
                this.updateTabCount = _sinon.default.spy();
                this.model.requesterId = _requesters.default[0];
                _context7.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::RelatedTickets @model={{this.model}} @updateTabCount={{this.updateTabCount}} />
                */
                {
                  id: "QsB3aIXJ",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/related-tickets\",[],[[\"@model\",\"@updateTabCount\"],[[23,0,[\"model\"]],[23,0,[\"updateTabCount\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context7.next = 9;
                return _relatedTickets.default.openAddOrAssociateChildTicketsModal();

              case 9:
                _context7.next = 11;
                return _newTicket.default.toggleCopyParentTktDetailsCheckbox();

              case 11:
                _context7.next = 13;
                return _newTicket.default.save();

              case 13:
                assert.notOk(_relatedTickets.default.hasAddChildTicketSideModal);

              case 14:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x6) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should update related tickets tab count once child ticket is added', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)(CURRENT_USER); // Mandatory to resolve such third party dependencies before rendering the component.

                _context8.next = 3;
                return emberAutoImportDynamic("froala-editor");

              case 3:
                this.updateTabCount = _sinon.default.spy();
                this.model.requesterId = _requesters.default[0];
                _context8.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::RelatedTickets @model={{this.model}} @updateTabCount={{this.updateTabCount}} />
                */
                {
                  id: "QsB3aIXJ",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/related-tickets\",[],[[\"@model\",\"@updateTabCount\"],[[23,0,[\"model\"]],[23,0,[\"updateTabCount\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context8.next = 9;
                return _relatedTickets.default.openAddOrAssociateChildTicketsModal();

              case 9:
                _context8.next = 11;
                return _newTicket.default.toggleCopyParentTktDetailsCheckbox();

              case 11:
                _context8.next = 13;
                return _newTicket.default.save();

              case 13:
                assert.ok(this.updateTabCount.calledWith(1), 'Successfully updated related tickets tab count after new child ticket is associated');

              case 14:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x7) {
        return _ref9.apply(this, arguments);
      };
    }()); // /********** Add New Child SR cases***********/

    (0, _qunit.test)('Should not show add Child button if SR is closed', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        var serviceRequest;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)(CURRENT_USER);
                _context9.next = 3;
                return this.store.findRecord('ticket', 30);

              case 3:
                serviceRequest = _context9.sent;
                this.set('model', serviceRequest);
                this.additionalOps = {
                  isNotIncident: true,
                  closedEntity: true,
                  resolvedEntity: false
                };
                _context9.next = 8;
                return renderBaseComponentWithOps();

              case 8:
                assert.notOk(_relatedTickets.default.hasAddChildTicketsBtn, 'Add child button not visible');

              case 9:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x8) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should not show add child button if SR is deleted', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var serviceRequest;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)(CURRENT_USER);
                _context10.next = 3;
                return this.store.findRecord('ticket', 31);

              case 3:
                serviceRequest = _context10.sent;
                this.set('model', serviceRequest);
                _context10.next = 7;
                return renderBaseComponent();

              case 7:
                assert.notOk(_relatedTickets.default.hasAddChildTicketsBtn, 'Add child button not visible');

              case 8:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x9) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should not show add child button if SR is resolved', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        var serviceRequest;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)(CURRENT_USER);
                _context11.next = 3;
                return this.store.findRecord('ticket', 32);

              case 3:
                serviceRequest = _context11.sent;
                this.set('model', serviceRequest);
                this.additionalOps = {
                  isNotIncident: true,
                  closedEntity: false,
                  resolvedEntity: true
                };
                _context11.next = 8;
                return renderBaseComponentWithOps();

              case 8:
                assert.notOk(_relatedTickets.default.hasAddChildTicketsBtn, 'Add child button not visible');

              case 9:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x10) {
        return _ref12.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should not show add child button if SR is spam', /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        var serviceRequest;
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)(CURRENT_USER);
                _context12.next = 3;
                return this.store.findRecord('ticket', 33);

              case 3:
                serviceRequest = _context12.sent;
                this.set('model', serviceRequest);
                _context12.next = 7;
                return renderBaseComponent();

              case 7:
                assert.notOk(_relatedTickets.default.hasAddChildTicketsBtn, 'Add child button not visible');

              case 8:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x11) {
        return _ref13.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should not show add child button if SR is under approval', /*#__PURE__*/function () {
      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
        var serviceRequest;
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)(CURRENT_USER);
                _context13.next = 3;
                return this.store.findRecord('ticket', 34);

              case 3:
                serviceRequest = _context13.sent;
                this.set('model', serviceRequest);
                this.additionalOps = {
                  isNotIncident: true,
                  closedEntity: false,
                  resolvedEntity: true
                };
                _context13.next = 8;
                return renderBaseComponentWithOps();

              case 8:
                assert.notOk(_relatedTickets.default.hasAddChildTicketsBtn, 'Add child button not visible');

              case 9:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      return function (_x12) {
        return _ref14.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should not show add child button if SR is approved', /*#__PURE__*/function () {
      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {
        var serviceRequest;
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)(CURRENT_USER);
                _context14.next = 3;
                return this.store.findRecord('ticket', 35);

              case 3:
                serviceRequest = _context14.sent;
                this.set('model', serviceRequest);
                this.additionalOps = {
                  isNotIncident: true,
                  closedEntity: false,
                  resolvedEntity: true
                };
                _context14.next = 8;
                return renderBaseComponentWithOps();

              case 8:
                assert.notOk(_relatedTickets.default.hasAddChildTicketsBtn, 'Add child button not visible');

              case 9:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      return function (_x13) {
        return _ref15.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should not show add child button if user cannot edit SR', /*#__PURE__*/function () {
      var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {
        var CURRENT_USER, serviceRequest;
        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                CURRENT_USER = {
                  privileges: [],
                  scoped_privileges: {
                    0: [],
                    1: [],
                    2: [],
                    3: []
                  },
                  language: 'en'
                };
                _context15.next = 3;
                return this.store.findRecord('ticket', 12);

              case 3:
                serviceRequest = _context15.sent;
                this.set('model', serviceRequest);
                (0, _stubCurrentUser.stubCurrentUser)(CURRENT_USER);
                _context15.next = 8;
                return renderBaseComponent();

              case 8:
                assert.notOk(_relatedTickets.default.hasAddChildTicketsBtn, 'Add child button not visible');

              case 9:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      return function (_x14) {
        return _ref16.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should create a child SR successfully', /*#__PURE__*/function () {
      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(assert) {
        var successFlash, serviceRequest;
        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                //Arrange
                successFlash = (0, _spyFlashMessage.default)('success');
                this.server.loadFixtures('service_categories');
                this.server.loadFixtures('service_items');
                _context16.next = 5;
                return this.store.findRecord('ticket', 12);

              case 5:
                serviceRequest = _context16.sent;
                this.set('model', serviceRequest);
                this.updateTabCount = _sinon.default.spy();
                (0, _stubCurrentUser.stubCurrentUser)(CURRENT_USER);
                this.additionalOps = {
                  isNotIncident: true,
                  closedEntity: false,
                  resolvedEntity: false
                };
                _context16.next = 12;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::RelatedTickets @model={{this.model}} @updateTabCount={{this.updateTabCount}} @additionalOps={{this.additionalOps}} @page='ticket' />
                */
                {
                  id: "Q7CvWySp",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/related-tickets\",[],[[\"@model\",\"@updateTabCount\",\"@additionalOps\",\"@page\"],[[23,0,[\"model\"]],[23,0,[\"updateTabCount\"]],[23,0,[\"additionalOps\"]],\"ticket\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 12:
                _context16.next = 14;
                return _relatedTickets.default.openAddOrAssociateChildTicketsModal();

              case 14:
                _context16.next = 16;
                return _relatedTickets.default.adobeCardClickable();

              case 16:
                _context16.next = 18;
                return _relatedTickets.default.placeAddItemRequestBtnClick();

              case 18:
                assert.ok(successFlash.calledOnce);

              case 19:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      return function (_x15) {
        return _ref17.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should associate an exisiting SR successfully', /*#__PURE__*/function () {
      var _ref18 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(assert) {
        var successFlash, serviceRequest;
        return regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                //Arrange
                successFlash = (0, _spyFlashMessage.default)('success');
                this.server.loadFixtures('service_categories');
                this.server.loadFixtures('service_items');
                _context17.next = 5;
                return this.store.findRecord('ticket', 12);

              case 5:
                serviceRequest = _context17.sent;
                this.set('model', serviceRequest);
                this.updateTabCount = _sinon.default.spy();
                (0, _stubCurrentUser.stubCurrentUser)(CURRENT_USER);
                this.additionalOps = {
                  isNotIncident: true,
                  closedEntity: false,
                  resolvedEntity: false
                };
                _context17.next = 12;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::RelatedTickets @model={{this.model}} @updateTabCount={{this.updateTabCount}} @additionalOps={{this.additionalOps}} />
                */
                {
                  id: "HfoJaW0q",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/related-tickets\",[],[[\"@model\",\"@updateTabCount\",\"@additionalOps\"],[[23,0,[\"model\"]],[23,0,[\"updateTabCount\"]],[23,0,[\"additionalOps\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 12:
                _context17.next = 14;
                return _relatedTickets.default.openAddOrAssociateChildTicketsModal();

              case 14:
                _context17.next = 16;
                return _relatedTickets.default.associateExistingSR();

              case 16:
                assert.ok(_relatedTickets.default.associateExistingSRSectionVisible);

                _relatedTickets.default.tktSearchInput('test');

                _context17.next = 20;
                return _relatedTickets.default.tktSearchInputTrigger({
                  code: 'Enter'
                });

              case 20:
                _context17.next = 22;
                return _relatedTickets.default.associateFirstSearchResult();

              case 22:
                _context17.next = 24;
                return _relatedTickets.default.associateSRSave();

              case 24:
                assert.ok(successFlash.calledOnce);

              case 25:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      return function (_x16) {
        return _ref18.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-tickets/details/related-tickets/eob-tickets/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/spy-flash-message", "freshservice/tests/pages/components/module-tickets/eob-tickets"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _sinonContext, _spyFlashMessage, _eobTickets) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-tickets/details/related-tickets/eob-tickets', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var mockTicket;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.intl = this.owner.lookup("service:intl");
              this.store = this.owner.lookup('service:store');
              this.server.loadFixtures('tickets');
              _context.next = 5;
              return this.store.findRecord('ticket', 332);

            case 5:
              mockTicket = _context.sent;
              this.model = mockTicket;
              this.set('transformRelatedTicketsData', function (childTickets) {
                return childTickets.map(function (childTicket) {
                  return {
                    id: childTicket.id,
                    humanDisplayId: childTicket.human_display_id,
                    subject: childTicket.subject,
                    dueBy: childTicket.due_by,
                    requester: childTicket.requester,
                    status: childTicket.status,
                    statusName: childTicket.status_name,
                    priority: childTicket.priority,
                    state: childTicket.state,
                    createdAt: childTicket.created_at,
                    stats: {
                      "status_updated_at": childTicket.stats.updated_at,
                      "resolved_at": childTicket.stats.resolved_at,
                      "closed_at": childTicket.stats.closed_at,
                      "updated_at": childTicket.stats.updated_at,
                      "pending_since": null
                    }
                  };
                });
              });

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('should show eob predescessor ticket', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::RelatedTickets::EobTickets
                			@ticketModel = {{this.model}}
                			@transformRelatedTicketsData = {{this.transformRelatedTicketsData}}
                		/>
                */
                {
                  id: "41XUsJ2x",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/related-tickets/eob-tickets\",[],[[\"@ticketModel\",\"@transformRelatedTicketsData\"],[[23,0,[\"model\"]],[23,0,[\"transformRelatedTicketsData\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.ok(_eobTickets.default.predecessorTicketExist);
                assert.ok(_eobTickets.default.predecessorTicketTitle);
                assert.equal(_eobTickets.default.predecessorTicketCount, 1, '1 Predecessor ticket should exist');
                assert.notOk(_eobTickets.default.predecessorTicketDelete);

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should show eob successor tickets', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::RelatedTickets::EobTickets
                			@ticketModel = {{this.model}}
                			@transformRelatedTicketsData = {{this.transformRelatedTicketsData}}
                		/>
                */
                {
                  id: "41XUsJ2x",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/related-tickets/eob-tickets\",[],[[\"@ticketModel\",\"@transformRelatedTicketsData\"],[[23,0,[\"model\"]],[23,0,[\"transformRelatedTicketsData\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.ok(_eobTickets.default.successorTicketsExist);
                assert.ok(_eobTickets.default.successorTicketsTitle);
                assert.equal(_eobTickets.default.successorTicketsCount, 2, '2 Successor tickets should exist');
                assert.notOk(_eobTickets.default.successorTicketsDelete);

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should show toaster or any error', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var failureToastrSpy;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                failureToastrSpy = (0, _spyFlashMessage.default)("danger");
                _context4.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::RelatedTickets::EobTickets
                			@ticketModel = {{this.model}}
                		/>
                */
                {
                  id: "1zLTRTKy",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/related-tickets/eob-tickets\",[],[[\"@ticketModel\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context4.t0 = assert;
                _context4.next = 6;
                return failureToastrSpy.calledWith(this.intl.t("fs.errors.something_went_wrong"));

              case 6:
                _context4.t1 = _context4.sent;

                _context4.t0.ok.call(_context4.t0, _context4.t1, "Expected failure toastr is shown");

              case 8:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-tickets/details/requested-items/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/stub-current-account", "freshservice/tests/lib/set-locale-timezone-moment", "ember-cli-mirage/test-support", "freshservice/tests/pages/components/module-tickets/requested-item", "freshservice/tests/pages/components/utils/form-fields", "@ember/test-helpers/settled"], function (_qunit, _emberQunit, _testHelpers, _intl, _sinonContext, _stubCurrentUser, _stubCurrentAccount, _setLocaleTimezoneMoment, _testSupport, _requestedItem, _formFields, _settled) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var CURRENT_USER = {
    privileges: ['edit_ticket_properties'],
    scoped_privileges: {
      0: ['edit_ticket_properties'],
      1: [],
      2: [],
      3: []
    },
    language: 'en'
  };
  var CURRENT_ACCOUNT = {
    features: ['service_catalog'],
    currencySymbol: '$',
    dateFormat: '1',
    // US Date format
    timeFormat: '24h'
  };
  (0, _qunit.module)('integration | component | module-tickets | requested-items', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _setLocaleTimezoneMoment.setLocaleAndTimeZoneForMoment)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var serviceRequest;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              (0, _stubCurrentUser.stubCurrentUser)(CURRENT_USER);
              (0, _stubCurrentAccount.stubCurrentAccount)(CURRENT_ACCOUNT);
              this.server.loadFixtures('tickets');
              this.server.loadFixtures('requestedItems');
              Ember.set(this, 'store', this.owner.lookup('service:store'));
              _context.next = 7;
              return this.store.findRecord('ticket', 12);

            case 7:
              serviceRequest = _context.sent;
              this.set('model', serviceRequest);

            case 9:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));

    function renderComponent() {
      return _renderComponent.apply(this, arguments);
    }

    function _renderComponent() {
      _renderComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21() {
        return regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                _context21.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::RequestedItems @model={{this.model}} />
                */
                {
                  id: "5xIdJ+Wc",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/requested-items\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21);
      }));
      return _renderComponent.apply(this, arguments);
    }

    (0, _qunit.test)('should render requested item tab component', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return renderComponent();

              case 2:
                //Assertion
                assert.dom('[data-test-ticket-requested-items-tab]').exists({
                  count: 1
                }, 'Rendered requested item tab component');

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should render all the details of a requested item', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var testReqItem, moment, fromDate, toDate;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return renderComponent();

              case 2:
                testReqItem = this.server.db.requestedItems.where({
                  id: 3
                })[0];
                moment = this.owner.lookup('service:moment');
                fromDate = moment.moment(testReqItem.from_date).format("ddd, D MMM YYYY HH:mm");
                toDate = moment.moment(testReqItem.to_date).format("ddd, D MMM YYYY HH:mm"); //Assertion

                assert.equal(_requestedItem.default.reqItemName, testReqItem.item.name);
                assert.equal(_requestedItem.default.reqItemQty, testReqItem.quantity);
                assert.equal(_requestedItem.default.reqItemCost, CURRENT_ACCOUNT.currencySymbol + ' ' + testReqItem.cost);
                assert.equal(_requestedItem.default.reqItemLocation, testReqItem.location.name);
                assert.equal(_requestedItem.default.reqItemFromDate, fromDate);
                assert.equal(_requestedItem.default.reqItemToDate, toDate);

              case 12:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should render more details/custom field section of a requested item on clicking more info btn', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return renderComponent();

              case 2:
                _context4.next = 4;
                return _requestedItem.default.reqItemMoreInfoBtnOfLoanerRI();

              case 4:
                //Assertion
                assert.ok(_requestedItem.default.reqItemMoreInfoDescExists);
                assert.ok(_requestedItem.default.reqItemMoreInfoCustomFieldSectionExists);

              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should close more info of other requested items when one is opened', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return renderComponent();

              case 2:
                assert.equal(_requestedItem.default.reqItemToggleInfoTextOfLoanerRI, 'More Info');
                _context5.next = 5;
                return _requestedItem.default.reqItemMoreInfoBtnOfLoanerRI();

              case 5:
                assert.equal(_requestedItem.default.reqItemToggleInfoTextOfLoanerRI, 'Hide Info');
                _context5.next = 8;
                return _requestedItem.default.reqItemMoreInfoBtnOfPermanentRI();

              case 8:
                assert.equal(_requestedItem.default.reqItemToggleInfoTextOfLoanerRI, 'More Info');

              case 9:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should be able to delete a requested item from the list', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var reqItems, noOfSRReqItems;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return renderComponent();

              case 2:
                reqItems = this.server.db.requestedItems.where({
                  'service_request_id': 12
                });
                noOfSRReqItems = reqItems.length;
                assert.ok(_requestedItem.default.noOfRequestedItems, noOfSRReqItems);
                _context6.next = 7;
                return _formFields.default.selectBasicDropdown("req-item-".concat(reqItems[1].id, "-options"), 'Delete');

              case 7:
                _context6.next = 9;
                return (0, _testHelpers.waitFor)('.delete-requested-item-modal');

              case 9:
                assert.ok(_requestedItem.default.deleteReqItemModalExists);
                _context6.next = 12;
                return _requestedItem.default.modalSubmit();

              case 12:
                //Assertion
                assert.ok(_requestedItem.default.noOfRequestedItems, noOfSRReqItems - 1);

              case 13:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should open add requested item slider', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                //Arrange
                this.server.loadFixtures('service_categories');
                this.server.loadFixtures('service_items');
                _context7.next = 4;
                return renderComponent();

              case 4:
                _context7.next = 6;
                return _requestedItem.default.clickAddReqItemBtn();

              case 6:
                //Assertion
                assert.ok(_requestedItem.default.addReqItemSliderExists);

              case 7:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x6) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should load category items on changing category in dropdown', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                //Arrange
                this.server.loadFixtures('service_categories');
                this.server.loadFixtures('service_items');
                _context8.next = 4;
                return renderComponent();

              case 4:
                _context8.next = 6;
                return _requestedItem.default.clickAddReqItemBtn();

              case 6:
                _context8.next = 8;
                return _formFields.default.selectBasicDropdown('req-items-category-dd', 'HR Management');

              case 8:
                //Assertion
                // 5 Items provided for HR Management in fixtures that are not bundle items
                assert.equal(_requestedItem.default.noOfServiceItemsListed, 5, 'Items inside category loaded');

              case 9:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x7) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should search items based on the keyword', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                //Arrange
                this.server.loadFixtures('service_categories');
                this.server.loadFixtures('service_items');
                _context9.next = 4;
                return renderComponent();

              case 4:
                _context9.next = 6;
                return _requestedItem.default.clickAddReqItemBtn();

              case 6:
                _requestedItem.default.catalogSearchInput('Adobe');

                _context9.next = 9;
                return _requestedItem.default.catalogSearchkeyUp();

              case 9:
                //Assertion
                // 3 Items provided for 'Adobe' in fixtures that are not bundle items
                assert.ok(_requestedItem.default.clearSearchBtnVisible, 'clear button visible');
                assert.equal(_requestedItem.default.noOfServiceItemsListed, 3, 'Search Results count Match');

              case 11:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x8) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should search items in other categories', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var searchTerm, intl, emptyTitle;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                //Arrange
                this.server.loadFixtures('service_categories');
                this.server.loadFixtures('service_items');
                _context10.next = 4;
                return renderComponent();

              case 4:
                _context10.next = 6;
                return _requestedItem.default.clickAddReqItemBtn();

              case 6:
                searchTerm = 'Adobe';
                intl = this.owner.lookup('service:intl');
                emptyTitle = intl.t('fs.request_items.catalog_list.no_results.title', {
                  term: searchTerm
                });
                _context10.next = 11;
                return _formFields.default.selectBasicDropdown('req-items-category-dd', 'Travel Desk');

              case 11:
                _requestedItem.default.catalogSearchInput(searchTerm);

                _context10.next = 14;
                return _requestedItem.default.catalogSearchkeyUp();

              case 14:
                //Assertion
                assert.ok(_requestedItem.default.clearSearchBtnVisible, 'clear button visible');
                assert.ok(_requestedItem.default.noSIEmptyStateVisible, 'Empty State Visible');
                assert.equal(_requestedItem.default.noSIEmptyStateTitleText, emptyTitle, 'Empty state title match');
                assert.ok(_requestedItem.default.otherResultsTitleVisible, 'Other Results Title Visible');
                assert.ok(_requestedItem.default.otherResultsListVisible, 'Other Results List Visible'); // 3 Items provided for 'Adobe' in fixtures that are not bundle items

                assert.equal(_requestedItem.default.noOfServiceItemsListed, 3, 'Other Results Count match');

              case 20:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x9) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should clear search items when clear button is clicked', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                //Arrange
                this.server.loadFixtures('service_categories');
                this.server.loadFixtures('service_items');
                _context11.next = 4;
                return renderComponent();

              case 4:
                _context11.next = 6;
                return _requestedItem.default.clickAddReqItemBtn();

              case 6:
                _requestedItem.default.catalogSearchInput('Adobe');

                _context11.next = 9;
                return _requestedItem.default.catalogSearchkeyUp();

              case 9:
                assert.ok(_requestedItem.default.clearSearchBtnVisible, 'clear button visible');
                assert.equal(_requestedItem.default.noOfServiceItemsListed, 3, 'Search Results Rendered');
                _context11.next = 13;
                return _requestedItem.default.clearSearchBtnClickable();

              case 13:
                assert.equal(_requestedItem.default.catalogSearchValue, '', 'Search term cleared');
                assert.ok(_requestedItem.default.clearSearchBtnHidden, 'clear button hidden');
                assert.ok(_requestedItem.default.noOfServiceItemsListed >= 20, 'Search Results cleared');

              case 16:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x10) {
        return _ref12.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should not show add item button if SR is closed', /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        var serviceRequest;
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                _context12.next = 2;
                return this.store.findRecord('ticket', 30);

              case 2:
                serviceRequest = _context12.sent;
                this.set('model', serviceRequest);
                _context12.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::RequestedItems @model={{this.model}} @closedEntity={{true}} @resolvedEntity={{true}} />
                */
                {
                  id: "WhD8g3K3",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/requested-items\",[],[[\"@model\",\"@closedEntity\",\"@resolvedEntity\"],[[23,0,[\"model\"]],true,true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                assert.notOk(_requestedItem.default.addReqItemBtnVisible, 'Add item button not visible');

              case 7:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x11) {
        return _ref13.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should not show add item button if SR is deleted', /*#__PURE__*/function () {
      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
        var serviceRequest;
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                _context13.next = 2;
                return this.store.findRecord('ticket', 31);

              case 2:
                serviceRequest = _context13.sent;
                this.set('model', serviceRequest);
                _context13.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::RequestedItems @model={{this.model}} />
                */
                {
                  id: "5xIdJ+Wc",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/requested-items\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                assert.notOk(_requestedItem.default.addReqItemBtnVisible, 'Add item button not visible');

              case 7:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      return function (_x12) {
        return _ref14.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should not show add item button if SR is resolved', /*#__PURE__*/function () {
      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {
        var serviceRequest;
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                _context14.next = 2;
                return this.store.findRecord('ticket', 32);

              case 2:
                serviceRequest = _context14.sent;
                this.set('model', serviceRequest);
                _context14.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::RequestedItems @model={{this.model}} @closedEntity={{true}} @resolvedEntity={{true}} />
                */
                {
                  id: "WhD8g3K3",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/requested-items\",[],[[\"@model\",\"@closedEntity\",\"@resolvedEntity\"],[[23,0,[\"model\"]],true,true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                assert.notOk(_requestedItem.default.addReqItemBtnVisible, 'Add item button not visible');

              case 7:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      return function (_x13) {
        return _ref15.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should not show add item button if SR is spam', /*#__PURE__*/function () {
      var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {
        var serviceRequest;
        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                _context15.next = 2;
                return this.store.findRecord('ticket', 33);

              case 2:
                serviceRequest = _context15.sent;
                this.set('model', serviceRequest);
                _context15.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::RequestedItems @model={{this.model}} />
                */
                {
                  id: "5xIdJ+Wc",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/requested-items\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                assert.notOk(_requestedItem.default.addReqItemBtnVisible, 'Add item button not visible');

              case 7:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      return function (_x14) {
        return _ref16.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should not show add item button if SR is under approval', /*#__PURE__*/function () {
      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(assert) {
        var serviceRequest;
        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                _context16.next = 2;
                return this.store.findRecord('ticket', 34);

              case 2:
                serviceRequest = _context16.sent;
                this.set('model', serviceRequest);
                _context16.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::RequestedItems @model={{this.model}} />
                */
                {
                  id: "5xIdJ+Wc",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/requested-items\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                assert.notOk(_requestedItem.default.addReqItemBtnVisible, 'Add item button not visible');

              case 7:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      return function (_x15) {
        return _ref17.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should not show add item button if SR is approved', /*#__PURE__*/function () {
      var _ref18 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(assert) {
        var serviceRequest;
        return regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                _context17.next = 2;
                return this.store.findRecord('ticket', 35);

              case 2:
                serviceRequest = _context17.sent;
                this.set('model', serviceRequest);
                _context17.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::RequestedItems @model={{this.model}} />
                */
                {
                  id: "5xIdJ+Wc",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/requested-items\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                assert.notOk(_requestedItem.default.addReqItemBtnVisible, 'Add item button not visible');

              case 7:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      return function (_x16) {
        return _ref18.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should not show add item button if user cannot edit SR', /*#__PURE__*/function () {
      var _ref19 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(assert) {
        var CURRENT_USER;
        return regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                CURRENT_USER = {
                  privileges: [],
                  scoped_privileges: {
                    0: [],
                    1: [],
                    2: [],
                    3: []
                  },
                  language: 'en'
                };
                (0, _stubCurrentUser.stubCurrentUser)(CURRENT_USER);
                _context18.next = 4;
                return renderComponent();

              case 4:
                assert.notOk(_requestedItem.default.addReqItemBtnVisible, 'Add item button not visible');

              case 5:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18);
      }));

      return function (_x17) {
        return _ref19.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should not show add item button if SR is a loaned SR', /*#__PURE__*/function () {
      var _ref20 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19(assert) {
        var serviceRequest;
        return regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                _context19.next = 2;
                return this.store.findRecord('ticket', 36);

              case 2:
                serviceRequest = _context19.sent;
                this.set('model', serviceRequest);
                _context19.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::RequestedItems @model={{this.model}} />
                */
                {
                  id: "5xIdJ+Wc",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/requested-items\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                assert.notOk(_requestedItem.default.addReqItemBtnVisible, 'Add item button not visible');

              case 7:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19, this);
      }));

      return function (_x18) {
        return _ref20.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should add an additional requested item successfully', /*#__PURE__*/function () {
      var _ref21 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20(assert) {
        var reqItems, noOfSRReqItems;
        return regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                //Arrange
                this.server.loadFixtures('service_categories');
                this.server.loadFixtures('service_items');
                reqItems = this.server.db.requestedItems.where({
                  'service_request_id': 12
                });
                noOfSRReqItems = reqItems.length;
                _context20.next = 6;
                return renderComponent();

              case 6:
                assert.ok(_requestedItem.default.noOfRequestedItems, noOfSRReqItems); //Act

                _context20.next = 9;
                return _requestedItem.default.clickAddReqItemBtn();

              case 9:
                _context20.next = 11;
                return _requestedItem.default.adobeCardClickable();

              case 11:
                _context20.next = 13;
                return _requestedItem.default.placeAddItemRequestBtnClick();

              case 13:
                _context20.next = 15;
                return (0, _settled.default)();

              case 15:
                assert.equal(_requestedItem.default.noOfRequestedItems, noOfSRReqItems + 1);

              case 16:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20, this);
      }));

      return function (_x19) {
        return _ref21.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-tickets/details/stage-dropdown/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/intl", "ember-cli-mirage/test-support", "freshservice/tests/lib/sinon-context", "freshservice/tests/pages/components/module-tickets/requested-item", "freshservice/tests/lib/spy-flash-message"], function (_qunit, _emberQunit, _testHelpers, _stubCurrentUser, _intl, _testSupport, _sinonContext, _requestedItem, _spyFlashMessage) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var CURRENT_USER = {
    privileges: ['edit_ticket_properties'],
    language: "en"
  };
  (0, _qunit.module)('Integration | Component | Module-tickets/Details/Stage-dropdown', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var serviceRequest;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              (0, _stubCurrentUser.stubCurrentUser)(CURRENT_USER);
              this.store = this.owner.lookup('service:store');
              this.server.loadFixtures('tickets');
              this.server.loadFixtures('requested-items');
              _context.next = 6;
              return this.store.findRecord('ticket', 12);

            case 6:
              serviceRequest = _context.sent;
              this.set('model', serviceRequest);

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));

    function renderComponent() {
      return _renderComponent.apply(this, arguments);
    }

    function _renderComponent() {
      _renderComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::RequestedItems @model={{this.model}} />
                */
                {
                  id: "5xIdJ+Wc",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/requested-items\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));
      return _renderComponent.apply(this, arguments);
    }

    (0, _qunit.test)('Should Render Stage Dropdown Component', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return renderComponent();

              case 2:
                assert.ok(_requestedItem.default.isReqItemStageVisible, 'Requested Stage Trigger Visible');
                _context2.next = 5;
                return _requestedItem.default.clickStageTrigger();

              case 5:
                assert.ok(_requestedItem.default.stageDropdownContentVisible, 'Requested Stage Dropdown Visible');

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should Choose Requested Stage Option', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var successFlash;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                successFlash = (0, _spyFlashMessage.default)('success');
                _context3.next = 3;
                return renderComponent();

              case 3:
                assert.ok(_requestedItem.default.isReqItemStageVisible, 'Requested Stage Trigger Visible');
                _context3.next = 6;
                return _requestedItem.default.clickStageTrigger();

              case 6:
                assert.equal(_requestedItem.default.stageDropdownContentChoices.length, 5, "5 choices are visible");
                _context3.next = 9;
                return _requestedItem.default.stageDropdownContentChoices.objectAt(0).click();

              case 9:
                assert.ok(successFlash.calledOnce);
                assert.equal(_requestedItem.default.reqItemStageText, 'Requested');

              case 11:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should Choose Requested Stage Cancel Option', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var successFlash;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                successFlash = (0, _spyFlashMessage.default)('success');
                _context4.next = 3;
                return renderComponent();

              case 3:
                assert.ok(_requestedItem.default.isReqItemStageVisible, 'Requested Stage Trigger Visible');
                _context4.next = 6;
                return _requestedItem.default.clickStageTrigger();

              case 6:
                _context4.next = 8;
                return _requestedItem.default.stageDropdownContentChoices.objectAt(2).click();

              case 8:
                assert.ok(_requestedItem.default.cancellationModalVisible, 'Requested cancel remark modal visible');
                _context4.next = 11;
                return _requestedItem.default.fillCancellationModalTextArea('Hello');

              case 11:
                _context4.next = 13;
                return _requestedItem.default.cancelModalSubmitBtn();

              case 13:
                assert.ok(successFlash.calledOnce);
                assert.equal(_requestedItem.default.reqItemStageText, 'Cancelled');

              case 15:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should List Loaner Item Choices', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return renderComponent();

              case 2:
                assert.ok(_requestedItem.default.isReqItemStageVisible, 'Requested Stage Trigger Visible');
                _context5.next = 5;
                return _requestedItem.default.clickLoanerStageTrigger();

              case 5:
                assert.equal(_requestedItem.default.loanerItemStageDropdownContentChoices.objectAt(1).text, 'Reserved');
                assert.equal(_requestedItem.default.loanerItemStageDropdownContentChoices.objectAt(4).text, 'Returned');

              case 7:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
  });
});
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

define("freshservice/tests/integration/components/module-tickets/details/summary/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/stub-current-user", "freshservice/mirage/fixtures/ticket-form-fields", "freshservice/tests/pages/components/module-tickets/summary"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _sinonContext, _stubCurrentUser, _ticketFormFields, _summary) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

  function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var TEST_USER = {
    language: "en",
    scoped_privileges: {
      0: ["edit_ticket_properties", "csat_response_view"],
      1: [],
      2: [],
      3: []
    },
    privileges: ["edit_ticket_properties", "csat_response_view"]
  };

  var MockFieldsService = /*#__PURE__*/function (_Ember$Service) {
    _inherits(MockFieldsService, _Ember$Service);

    var _super = _createSuper(MockFieldsService);

    function MockFieldsService() {
      var _this;

      _classCallCheck(this, MockFieldsService);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _defineProperty(_assertThisInitialized(_this), "fetchModuleFields", Object.freeze({
        isRunning: false
      }));

      _defineProperty(_assertThisInitialized(_this), "ticketFormFields", Ember.A(_toConsumableArray(_ticketFormFields.default)));

      _defineProperty(_assertThisInitialized(_this), "ticketFormFieldHash", Object.freeze({
        status: {
          choices: [{
            id: 2,
            value: 'Open'
          }, {
            id: 3,
            value: 'Pending'
          }, {
            id: 4,
            value: 'Resolved'
          }, {
            id: 5,
            value: 'Closed'
          }]
        }
      }));

      return _this;
    }

    _createClass(MockFieldsService, [{
      key: "getFormField",
      value: function getFormField(fieldName, module) {
        return this["".concat(module, "FormFields")].findBy('name', fieldName);
      }
    }]);

    return MockFieldsService;
  }(Ember.Service);

  window.__CLASSIC_OWN_CLASSES__.set(MockFieldsService, true);

  (0, _qunit.module)('Integration | Component | module-tickets | details | summary', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.intl = this.owner.lookup("service:intl");
              this.store = this.owner.lookup('service:store');
              this.server.loadFixtures('ticketFormFields');
              this.owner.register('service:moduleFields', MockFieldsService);
              this.server.loadFixtures('tickets');

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    hooks.after(function () {
      this.owner.destroy("service:current-user");
      this.owner.unregister('service:moduleFields');
    });
    (0, _qunit.test)('Should load SLA summary for Incident', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var mockTicket;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)(TEST_USER);
                _context2.next = 3;
                return this.store.findRecord('ticket', 375);

              case 3:
                mockTicket = _context2.sent;
                this.model = mockTicket;
                _context2.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::Summary
                			@model={{this.model}}
                			@isServiceRequest={{false}}
                			@closedEntity={{false}}
                			@resolvedEntity={{false}}
                		/>
                */
                {
                  id: "EYhWnc0E",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/summary\",[],[[\"@model\",\"@isServiceRequest\",\"@closedEntity\",\"@resolvedEntity\"],[[23,0,[\"model\"]],false,false,false]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                // Status Summary component
                assert.ok(_summary.default.summaryExists);
                assert.ok(_summary.default.statusSummaryExists);
                assert.notOk(_summary.default.resolutionStatusSummaryExists); // Due fields Summary comp

                assert.ok(_summary.default.frDueSummaryExists);
                assert.ok(_summary.default.resolutionDueSummaryExists);
                assert.ok(_summary.default.editDuebyBtnExists); // Approval Summary component

                assert.notOk(_summary.default.approvalInfoSummaryExists);
                assert.notOk(_summary.default.approvalStatusSummaryExists);
                assert.notOk(_summary.default.approvalSummaryContExists);
                assert.notOk(_summary.default.approveBtnExists);
                assert.notOk(_summary.default.rejectBtnExists);
                assert.notOk(_summary.default.remarkContExists);
                assert.notOk(_summary.default.remarkCancelBtnExists);
                assert.notOk(_summary.default.remarkSubmitBtnExists); // AWS notifications summary component

                assert.notOk(_summary.default.awsInfoContExists);
                assert.notOk(_summary.default.resumeAwsNotificationBtnExists); // Resolution hours summary component

                assert.notOk(_summary.default.resolutionHoursContExists);
                assert.notOk(_summary.default.resolutionHoursInfoExists); // Feedback summary component

                assert.notOk(_summary.default.feedbackContExists);
                assert.notOk(_summary.default.viewFeedbackBtnExists);

              case 27:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should load SLA summary for Service request', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var mockTicket;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)(TEST_USER);
                _context3.next = 3;
                return this.store.findRecord('ticket', 369);

              case 3:
                mockTicket = _context3.sent;
                this.model = mockTicket;
                _context3.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::Summary
                			@model={{this.model}}
                			@isServiceRequest={{true}}
                			@closedEntity={{false}}
                			@resolvedEntity={{false}}
                		/>
                */
                {
                  id: "9jAiLkgy",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/summary\",[],[[\"@model\",\"@isServiceRequest\",\"@closedEntity\",\"@resolvedEntity\"],[[23,0,[\"model\"]],true,false,false]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                // Status Summary component
                assert.ok(_summary.default.summaryExists);
                assert.ok(_summary.default.statusSummaryExists);
                assert.notOk(_summary.default.resolutionStatusSummaryExists); // Due fields Summary comp

                assert.ok(_summary.default.frDueSummaryExists);
                assert.ok(_summary.default.resolutionDueSummaryExists);
                assert.ok(_summary.default.editDuebyBtnExists); // Approval Summary component

                assert.ok(_summary.default.approvalInfoSummaryExists);
                assert.ok(_summary.default.approvalStatusSummaryExists);
                assert.ok(_summary.default.approvalSummaryContExists);
                assert.ok(_summary.default.approveBtnExists);
                assert.ok(_summary.default.rejectBtnExists); // Trigger approve button

                _context3.next = 20;
                return _summary.default.approveBtn();

              case 20:
                assert.ok(_summary.default.remarkContExists);
                assert.ok(_summary.default.remarkCancelBtnExists);
                assert.ok(_summary.default.remarkSubmitBtnExists); // AWS notifications summary component

                assert.notOk(_summary.default.awsInfoContExists);
                assert.notOk(_summary.default.resumeAwsNotificationBtnExists); // Resolution hours summary component

                assert.notOk(_summary.default.resolutionHoursContExists);
                assert.notOk(_summary.default.resolutionHoursInfoExists); // Feedback summary component

                assert.notOk(_summary.default.feedbackContExists);
                assert.notOk(_summary.default.viewFeedbackBtnExists);

              case 29:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should load SLA summary for Incident and edit due by not present', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var mockTicket;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)(TEST_USER);
                _context4.next = 3;
                return this.store.findRecord('ticket', 376);

              case 3:
                mockTicket = _context4.sent;
                this.model = mockTicket;
                _context4.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::Summary @model={{this.model}} />
                */
                {
                  id: "lXxlWvHv",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/summary\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                // Status Summary component
                assert.ok(_summary.default.summaryExists);
                assert.ok(_summary.default.statusSummaryExists);
                assert.ok(_summary.default.resolutionStatusSummaryExists); // Due fields Summary comp

                assert.notOk(_summary.default.frDueSummaryExists);
                assert.ok(_summary.default.resolutionDueSummaryExists);
                assert.ok(_summary.default.changeDueByFormExists);
                assert.ok(_summary.default.editDuebyBtnExists);

              case 14:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should load SLA summary for Incident and edit due by present', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var mockTicket;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)(TEST_USER);
                _context5.next = 3;
                return this.store.findRecord('ticket', 375);

              case 3:
                mockTicket = _context5.sent;
                this.model = mockTicket;
                _context5.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::Summary @model={{this.model}} @modelType = "tickets" />
                */
                {
                  id: "ms1cdl9A",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/summary\",[],[[\"@model\",\"@modelType\"],[[23,0,[\"model\"]],\"tickets\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                // Status Summary component
                assert.ok(_summary.default.summaryExists);
                assert.ok(_summary.default.statusSummaryExists);
                assert.notOk(_summary.default.resolutionStatusSummaryExists); // Due fields Summary comp

                assert.ok(_summary.default.frDueSummaryExists);
                assert.ok(_summary.default.resolutionDueSummaryExists);
                assert.ok(_summary.default.changeDueByFormExists);
                assert.ok(_summary.default.editDuebyBtnExists); // Trigger edit due by button

                _context5.next = 16;
                return _summary.default.editDuebyBtn();

              case 16:
                assert.ok(_summary.default.dateMenuPickerContExists);
                assert.notOk(_summary.default.datepickerContExists);
                assert.notOk(_summary.default.datePickerFooterExists);
                assert.notOk(_summary.default.datePickerCancelBtnExists);
                assert.notOk(_summary.default.datePickerUpdateBtnExists);
                assert.notOk(_summary.default.datePickerUpdateDisabledBtnExists);
                assert.notOk(_summary.default.datePickerErrorBannerExists);
                assert.ok(_summary.default.defaultDateMenuPickerExists);
                assert.ok(_summary.default.customDatePickerBtnExists); // Trigger custom date time picker button

                _context5.next = 27;
                return _summary.default.customDatePickerBtn();

              case 27:
                assert.ok(_summary.default.dateMenuPickerContExists);
                assert.ok(_summary.default.dateValueInputExists);
                assert.ok(_summary.default.datepickerContExists);
                assert.ok(_summary.default.datePickerFooterExists);
                assert.ok(_summary.default.datePickerCancelBtnExists);
                assert.ok(_summary.default.datePickerUpdateDisabledBtnExists);
                assert.notOk(_summary.default.datePickerUpdateBtnExists);
                assert.notOk(_summary.default.datePickerErrorBannerExists);
                _context5.next = 37;
                return (0, _testHelpers.click)('.time-control .ember-power-select-trigger');

              case 37:
                assert.equal((0, _testHelpers.findAll)('.time-control .ember-power-select-trigger')[0]['attributes']['aria-expanded'].value, 'true', 'Time select Dropdown renders when clicked inside it');
                _context5.next = 40;
                return (0, _testHelpers.click)('.time-control .ember-power-select-trigger');

              case 40:
                assert.equal((0, _testHelpers.findAll)('.time-control .ember-power-select-trigger')[0]['attributes']['aria-expanded'].value, 'false', 'Time select Dropdown disappears when again clicked inside it');
                _context5.next = 43;
                return (0, _testHelpers.click)('.calendar-dropdown-month .ember-power-select-trigger');

              case 43:
                assert.equal((0, _testHelpers.findAll)('.calendar-dropdown-month .ember-power-select-trigger')[0]['attributes']['aria-expanded'].value, 'true', 'Month select Dropdown renders when clicked inside it');
                _context5.next = 46;
                return (0, _testHelpers.click)('.calendar-dropdown-month .ember-power-select-trigger');

              case 46:
                assert.equal((0, _testHelpers.findAll)('.calendar-dropdown-month .ember-power-select-trigger')[0]['attributes']['aria-expanded'].value, 'false', 'Month select Dropdown disappears when again clicked inside it');
                _context5.next = 49;
                return (0, _testHelpers.click)('.calendar-dropdown-year .ember-power-select-trigger');

              case 49:
                assert.equal((0, _testHelpers.findAll)('.calendar-dropdown-year .ember-power-select-trigger')[0]['attributes']['aria-expanded'].value, 'true', 'Year select Dropdown renders when clicked inside it');
                _context5.next = 52;
                return (0, _testHelpers.click)('.calendar-dropdown-year .ember-power-select-trigger');

              case 52:
                assert.equal((0, _testHelpers.findAll)('.time-control .ember-power-select-trigger')[0]['attributes']['aria-expanded'].value, 'false', 'Year select Dropdown disappears when again clicked inside it'); // Update logic case can be added only after api endpoint is ready andintegrate with UI component.

              case 53:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-tickets/details/tabs/approvals/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/sinon-context"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _sinonContext) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-tickets | details | tabs | approvals', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.intl = this.owner.lookup("service:intl");
              this.store = this.owner.lookup('service:store');
              this.server.loadFixtures('users');
              this.server.loadFixtures('tickets');
              this.server.loadFixtures('approvals');

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('should render approval tab component', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var mockTicket;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.store.findRecord('ticket', 369);

              case 2:
                mockTicket = _context2.sent;
                this.model = mockTicket;
                this.additionalOps = {
                  closedEntity: false,
                  resolvedEntity: false
                };
                _context2.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  	<ModuleTickets::Details::Tabs::Approvals
                									@model={{this.model}}
                									@module={{"tickets"}}
                									@additionalOps = {{this.additionalOps}}
                								/>	
                */
                {
                  id: "sjgKcy6i",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\t\"],[5,\"module-tickets/details/tabs/approvals\",[],[[\"@model\",\"@module\",\"@additionalOps\"],[[23,0,[\"model\"]],\"tickets\",[23,0,[\"additionalOps\"]]]]],[0,\"\\t\"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                assert.dom('[data-test-id="approval-tab"]').exists({
                  count: 1
                }, "Rendered approval tab component");

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should render approval tab without approvals', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var mockTicket;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.store.findRecord('ticket', 16);

              case 2:
                mockTicket = _context3.sent;
                this.model = mockTicket;
                this.additionalOps = {
                  closedEntity: false,
                  resolvedEntity: false
                };
                _context3.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  	<ModuleTickets::Details::Tabs::Approvals
                									@model={{this.model}}
                									@module={{"tickets"}}
                									@additionalOps = {{this.additionalOps}}
                								/>	
                */
                {
                  id: "sjgKcy6i",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\t\"],[5,\"module-tickets/details/tabs/approvals\",[],[[\"@model\",\"@module\",\"@additionalOps\"],[[23,0,[\"model\"]],\"tickets\",[23,0,[\"additionalOps\"]]]]],[0,\"\\t\"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                assert.dom('[data-test-id="approval-tab"]').exists({
                  count: 1
                }, "Rendered approval tab component");
                assert.dom('[data-test-id="approval-list"]').exists({
                  count: 0
                }, "Rendered approval list container");
                assert.dom('[data-test-id="approval-level-container"]').exists({
                  count: 0
                }, "Rendered zero approval level");
                assert.dom('[data-test-id="approval-item"]').exists({
                  count: 0
                }, "Rendered zero approvals");

              case 11:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should render approval tab with approvals', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var mockTicket;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.store.findRecord('ticket', 368);

              case 2:
                mockTicket = _context4.sent;
                this.model = mockTicket;
                this.additionalOps = {
                  closedEntity: false,
                  resolvedEntity: false
                };
                _context4.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  	<ModuleTickets::Details::Tabs::Approvals
                									@model={{this.model}}
                									@module={{"tickets"}}
                									@additionalOps = {{this.additionalOps}}
                								/>	
                */
                {
                  id: "sjgKcy6i",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\t\"],[5,\"module-tickets/details/tabs/approvals\",[],[[\"@model\",\"@module\",\"@additionalOps\"],[[23,0,[\"model\"]],\"tickets\",[23,0,[\"additionalOps\"]]]]],[0,\"\\t\"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                assert.dom('[data-test-id="approval-tab"]').exists({
                  count: 1
                }, "Rendered approval tab component");
                assert.dom('[data-test-id="approval-list"]').exists({
                  count: 1
                }, "Rendered approval list container");
                assert.dom('[data-test-id="approval-level-container"]').exists({
                  count: 6
                }, "Rendered approval levels");
                assert.dom('[data-test-id="approval-item"]').exists({
                  count: 12
                }, "Rendered approvals");

              case 11:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-tickets/details/tabs/assets/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/pages/components/module-tickets/associated-asset", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/spy-flash-message", "freshservice/mirage/fixtures/associated_assets"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _intl, _associatedAsset, _stubCurrentUser, _sinonContext, _spyFlashMessage, _associated_assets) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var ASSET_DATA = _associated_assets.default.find(function (app) {
    return app.id === 412;
  });

  var FULFILLED_ASSET_DATA = _associated_assets.default.find(function (app) {
    return app.id === 415;
  });

  (0, _qunit.module)('Integration | Component | module-tickets/details/tabs/assets', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var mockTicket;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.store = this.owner.lookup('service:store');
              this.moment = this.owner.lookup('service:moment');
              this.moment.setLocale('en');
              this.server.loadFixtures("tickets");
              this.server.loadFixtures("associated_assets");
              this.server.loadFixtures("users");
              _context.next = 8;
              return this.store.findRecord('ticket', 375);

            case 8:
              mockTicket = _context.sent;
              this.set('model', mockTicket);
              this.set('removeAssetConfirmation', function () {});
              this.set('toggleEditAssetModal', function () {});
              this.set('openEditAssetModal', function () {});
              this.set('removeAsset', function () {});

            case 14:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));

    function renderAssetList() {
      return _renderAssetList.apply(this, arguments);
    }

    function _renderAssetList() {
      _renderAssetList = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::Tabs::Assets 
                                  @model={{model}}
                                  @module={{"tickets"}} />
                */
                {
                  id: "38GIuCTJ",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/tabs/assets\",[],[[\"@model\",\"@module\"],[[22,\"model\"],\"tickets\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9);
      }));
      return _renderAssetList.apply(this, arguments);
    }

    (0, _qunit.test)('renders asset list', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return renderAssetList();

              case 2:
                assert.ok(_associatedAsset.default.assetTabContentVisible);

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('hide location and department field for softwares', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var deptLocContainer;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return renderAssetList();

              case 2:
                deptLocContainer = document.querySelectorAll('[data-test-id="dep-loc-container"]');
                assert.equal(deptLocContainer.length, _associatedAsset.default.catalogItemsCount);

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should not show remove asset button if user doesnt have privilege', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var USER_PRIVILEGE;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                USER_PRIVILEGE = {
                  privileges: []
                };
                (0, _stubCurrentUser.stubCurrentUser)(USER_PRIVILEGE);
                this.set('linkedAssets', Ember.A([Ember.Object.create(ASSET_DATA)]));
                _context4.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::Tabs::Assets::AssetList 
                                        @ticketModel 				= {{model}} 
                                        @linkedAssets				= {{linkedAssets}}
                                        @canViewCmdb				= {{true}}
                                        @removeAsset				= {{this.removeAsset}}
                                        @removeAssetConfirmation 	= {{this.removeAssetConfirmation}}
                                      />
                */
                {
                  id: "XwrMt8Rw",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/tabs/assets/asset-list\",[],[[\"@ticketModel\",\"@linkedAssets\",\"@canViewCmdb\",\"@removeAsset\",\"@removeAssetConfirmation\"],[[22,\"model\"],[22,\"linkedAssets\"],true,[23,0,[\"removeAsset\"]],[23,0,[\"removeAssetConfirmation\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                assert.ok(_associatedAsset.default.isRemoveAssociatedAssetBtnDisabled);

              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should show edit asset button only if the asset is software and user has privilege', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var USER_PRIVILEGE, fulFilledHardwareAsset;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                USER_PRIVILEGE = {
                  privileges: ["manage_tickets", "manage_ci"]
                };
                (0, _stubCurrentUser.stubCurrentUser)(USER_PRIVILEGE);
                _context5.next = 4;
                return renderAssetList();

              case 4:
                fulFilledHardwareAsset = document.querySelectorAll('[data-test-config-item-type="hardware-asset"] [data-test-id="fullfil-batch"]');
                assert.equal(fulFilledHardwareAsset.length, 1);

              case 6:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.skip)('clicking on edit asset should open Edit asset modal', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var CURRENT_USER_STUB, linkedAssets;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                // Stub currentUser service
                CURRENT_USER_STUB = {
                  timeFormat: '24h'
                };
                (0, _stubCurrentUser.stubCurrentUser)(CURRENT_USER_STUB);
                linkedAssets = Ember.A([Ember.Object.create(FULFILLED_ASSET_DATA)]);
                this.set('linkedAssets', linkedAssets);
                _context6.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::Tabs::Assets::AssetList 
                                        @ticketModel 				= {{model}} 
                                        @linkedAssets				= {{linkedAssets}}
                                        @canViewCmdb				= {{true}}
                                        @removeAsset				= {{this.removeAsset}}
                                        @removeAssetConfirmation 	= {{this.removeAssetConfirmation}}
                                      />
                */
                {
                  id: "XwrMt8Rw",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/tabs/assets/asset-list\",[],[[\"@ticketModel\",\"@linkedAssets\",\"@canViewCmdb\",\"@removeAsset\",\"@removeAssetConfirmation\"],[[22,\"model\"],[22,\"linkedAssets\"],true,[23,0,[\"removeAsset\"]],[23,0,[\"removeAssetConfirmation\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                this.set('linkedAsset', linkedAssets[0]);
                _context6.next = 9;
                return _associatedAsset.default.clickEditAssociatedAsset();

              case 9:
                _context6.next = 11;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::Tabs::Assets::AssetEdit 
                                    @linkedAsset			    = 	{{this.linkedAsset}}
                                    @toggleAssetModalFlag	=	  {{true}}
                                    @toggleEditAssetModal	= 	{{this.toggleEditAssetModal}} />
                */
                {
                  id: "gHPD6fap",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/tabs/assets/asset-edit\",[],[[\"@linkedAsset\",\"@toggleAssetModalFlag\",\"@toggleEditAssetModal\"],[[23,0,[\"linkedAsset\"]],true,[23,0,[\"toggleEditAssetModal\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 11:
                assert.ok(_associatedAsset.default.editAssetModalExists);

              case 12:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.skip)('update asset details', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var CURRENT_USER_STUB, successFlash, linkedAssets;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                // Stub currentUser service
                CURRENT_USER_STUB = {
                  timeFormat: '24h'
                };
                (0, _stubCurrentUser.stubCurrentUser)(CURRENT_USER_STUB);
                successFlash = (0, _spyFlashMessage.default)('success');
                linkedAssets = Ember.A([Ember.Object.create(FULFILLED_ASSET_DATA)]);
                this.set('linkedAssets', linkedAssets);
                _context7.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::Tabs::Assets::AssetList 
                                        @ticketModel 				= {{model}} 
                                        @linkedAssets				= {{linkedAssets}}
                                        @canViewCmdb				= {{true}}
                                        @removeAsset				= {{this.removeAsset}}
                                        @removeAssetConfirmation 	= {{this.removeAssetConfirmation}}
                                      />
                */
                {
                  id: "XwrMt8Rw",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/tabs/assets/asset-list\",[],[[\"@ticketModel\",\"@linkedAssets\",\"@canViewCmdb\",\"@removeAsset\",\"@removeAssetConfirmation\"],[[22,\"model\"],[22,\"linkedAssets\"],true,[23,0,[\"removeAsset\"]],[23,0,[\"removeAssetConfirmation\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                // let associatedAssets = await this.store.query('associated_asset', {moduleName: 'tickets', ticketId: this.model.id});
                this.set('linkedAsset', linkedAssets[0]);
                _context7.next = 10;
                return _associatedAsset.default.clickEditAssociatedAsset();

              case 10:
                _context7.next = 12;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::Tabs::Assets::AssetEdit 
                                    @linkedAsset			    = 	{{this.linkedAsset}}
                                    @toggleAssetModalFlag	=	  {{true}}
                                    @toggleEditAssetModal	= 	{{this.toggleEditAssetModal}} />
                */
                {
                  id: "gHPD6fap",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/tabs/assets/asset-edit\",[],[[\"@linkedAsset\",\"@toggleAssetModalFlag\",\"@toggleEditAssetModal\"],[[23,0,[\"linkedAsset\"]],true,[23,0,[\"toggleEditAssetModal\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 12:
                assert.ok(_associatedAsset.default.editAssetModalExists);
                _context7.next = 15;
                return _associatedAsset.default.clickUpdateFulfilledAsset();

              case 15:
                assert.ok(successFlash.calledOnce);

              case 16:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x6) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.skip)('removing associated asset', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var successFlash, linkedAssets;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                // debugger
                // await renderAssetList();
                // const associatedAssets = await this.store.query('associated_asset', {moduleName: 'tickets', ticketId: this.model.id});
                // this.set('linkedAssets', associatedAssets.filter((asset) => asset.id == 415));
                // this.set('linkedAssets', associatedAssets);
                successFlash = (0, _spyFlashMessage.default)('success');
                linkedAssets = Ember.A([Ember.Object.create(ASSET_DATA)]);
                this.set('linkedAssets', linkedAssets);
                _context8.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::Tabs::Assets::AssetList 
                                  @ticketModel 			        = {{this.model}} 
                                  @linkedAssets			        = {{this.linkedAssets}}
                                  @canViewCmdb			        = {{true}}
                                  @removeAssetConfirmation  = {{this.removeAssetConfirmation}} />
                */
                {
                  id: "xbYfxoC9",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/tabs/assets/asset-list\",[],[[\"@ticketModel\",\"@linkedAssets\",\"@canViewCmdb\",\"@removeAssetConfirmation\"],[[23,0,[\"model\"]],[23,0,[\"linkedAssets\"]],true,[23,0,[\"removeAssetConfirmation\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                _context8.next = 7;
                return _associatedAsset.default.clickRemoveAssociatedAsset();

              case 7:
                assert.equal(_associatedAsset.default.assetsCount, 0);
                assert.ok(successFlash.calledOnce); // assert.ok(true)

              case 9:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x7) {
        return _ref9.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-tickets/details/tasks/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl", "ember-cli-mirage/test-support", "freshservice/constants/common/tasks", "freshservice/tests/lib/stub-current-user"], function (_qunit, _emberQunit, _testHelpers, _intl, _testSupport, _tasks, _stubCurrentUser) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var COMPLETED_STATUS = "Completed";
  var TEST_USER = {
    scoped_privileges: {
      0: ["manage_ticket_tasks"],
      1: [],
      2: [],
      3: []
    },
    privileges: ["manage_ticket_tasks"]
  };
  (0, _qunit.module)('Integration | Component | module-tickets/details/tasks', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var model;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.server.loadFixtures('tickets');
              this.set('store', this.owner.lookup("service:store"));
              _context.next = 4;
              return this.store.findAll("ticket");

            case 4:
              model = _context.sent;
              this.set('model', model.lastObject);
              this.intl = this.owner.lookup("service:intl");

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('should render task tab component', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.additionalOps = {
                  closedEntity: false
                };
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  	<ModuleTickets::Details::Tasks 
                									@model={{this.model}}
                									@module={{"tickets"}}
                									@additionalOps = {{this.additionalOps}}
                								/>	
                */
                {
                  id: "tThULaDt",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\t\"],[5,\"module-tickets/details/tasks\",[],[[\"@model\",\"@module\",\"@additionalOps\"],[[23,0,[\"model\"]],\"tickets\",[23,0,[\"additionalOps\"]]]]],[0,\"\\t\"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.dom('[data-test-task-tab]').exists({
                  count: 1
                }, "Rendered task tab component");
                assert.dom('[data-test-task-header] [data-test-task-filter]').exists({
                  count: 1
                }, "Has task filter dropdown");

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should show filters and switch between filters', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var DEFAULT_FILTER_STATUS, CLOSED_FILTER_STATUS, filterTriggerText, listItemStatusElem, filterSwitcher;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this.additionalOps = {
                  closedEntity: false
                };
                _context3.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  	<ModuleTickets::Details::Tasks 
                									@model={{this.model}}
                									@module={{"tickets"}}
                									@additionalOps = {{this.additionalOps}}
                								/>	
                */
                {
                  id: "tThULaDt",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\t\"],[5,\"module-tickets/details/tasks\",[],[[\"@model\",\"@module\",\"@additionalOps\"],[[23,0,[\"model\"]],\"tickets\",[23,0,[\"additionalOps\"]]]]],[0,\"\\t\"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                DEFAULT_FILTER_STATUS = this.intl.t(_tasks.TASKS.FILTERS_TEXT.DEFAULT_FILTER_STATUS).trim();
                CLOSED_FILTER_STATUS = this.intl.t(_tasks.TASKS.FILTERS_TEXT.CLOSED_FILTER_STATUS).trim();
                filterTriggerText = this.element.querySelector('[data-test-task-filter-trigger]');
                assert.equal(DEFAULT_FILTER_STATUS, filterTriggerText.textContent.trim(), "Default filter is ".concat(DEFAULT_FILTER_STATUS, " as expected"));
                listItemStatusElem = this.element.querySelector('[data-test-task-item-status]');
                assert.equal(filterTriggerText.textContent.trim().includes(listItemStatusElem.innerText), true, "Lists the tasks with Open or In Progress status");
                _context3.next = 11;
                return (0, _testHelpers.click)(filterTriggerText);

              case 11:
                assert.dom('[data-test-task-filter-menuitem]').exists({
                  count: 2
                }, "After filter trigger clicked, Filter dropdown is open with two filters as expected");
                filterSwitcher = this.element.querySelector('[data-test-id="task-filter-CLOSED_FILTER_STATUS"]');
                _context3.next = 15;
                return (0, _testHelpers.click)(filterSwitcher);

              case 15:
                assert.equal(CLOSED_FILTER_STATUS, filterTriggerText.textContent.trim(), "Filter switched to ".concat(CLOSED_FILTER_STATUS, " as expected"));
                listItemStatusElem = this.element.querySelector('[data-test-task-item-status]');
                assert.equal(COMPLETED_STATUS.includes(listItemStatusElem.innerText), true, "Lists the tasks with Completed status");

              case 18:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should mark task as complete or reopen task and vice versa', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var taskItem, taskItemDisplayID, taskItemCheckBox, newTaskItem, newTaskItemDisplayID, closedTaskItem, closedTaskItemDisplayID, closedTaskItemCheckBox, newClosedTaskItem, newClosedTaskItemDisplayID, reOpenedTaskItem, reOpenedTaskItemDisplayID;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                this.additionalOps = {
                  closedEntity: false
                };
                (0, _stubCurrentUser.stubCurrentUser)(TEST_USER);
                _context4.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  	<ModuleTickets::Details::Tasks 
                									@model={{this.model}}
                									@module={{"tickets"}}
                									@additionalOps = {{this.additionalOps}}
                								/>	
                */
                {
                  id: "tThULaDt",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\t\"],[5,\"module-tickets/details/tasks\",[],[[\"@model\",\"@module\",\"@additionalOps\"],[[23,0,[\"model\"]],\"tickets\",[23,0,[\"additionalOps\"]]]]],[0,\"\\t\"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                taskItem = this.element.querySelector('[data-test-task-item]');
                taskItemDisplayID = taskItem.querySelector('[data-test-task-item-displayid]').innerText;
                taskItemCheckBox = taskItem.querySelector('[data-test-id="complete-task"]');
                _context4.next = 9;
                return (0, _testHelpers.click)(taskItemCheckBox);

              case 9:
                newTaskItem = this.element.querySelector('[data-test-task-item]');
                newTaskItemDisplayID = newTaskItem.querySelector('[data-test-task-item-displayid]').innerText;
                assert.notEqual(newTaskItemDisplayID, taskItemDisplayID, "Task ".concat(taskItemDisplayID, " after marked as complete is removed from My open & In Progress filter"));
                _context4.next = 14;
                return (0, _testHelpers.click)(this.element.querySelector('[data-test-task-filter-trigger]'));

              case 14:
                _context4.next = 16;
                return (0, _testHelpers.click)(this.element.querySelector('[data-test-id="task-filter-CLOSED_FILTER_STATUS"]'));

              case 16:
                closedTaskItem = this.element.querySelector('[data-test-task-item]');
                closedTaskItemDisplayID = closedTaskItem.querySelector('[data-test-task-item-displayid]').innerText;
                closedTaskItemCheckBox = closedTaskItem.querySelector('[data-test-id="reopen-task"]');
                assert.equal(taskItemDisplayID, closedTaskItemDisplayID, "Task ".concat(taskItemDisplayID, " after marked complete is inside Completed task filter"));
                _context4.next = 22;
                return (0, _testHelpers.click)(closedTaskItemCheckBox);

              case 22:
                newClosedTaskItem = this.element.querySelector('[data-test-task-item]');
                newClosedTaskItemDisplayID = newClosedTaskItem.querySelector('[data-test-task-item-displayid]').innerText;
                assert.notEqual(newClosedTaskItemDisplayID, closedTaskItemDisplayID, "Task ".concat(closedTaskItemDisplayID, " after re-opened is removed from Completed filter"));
                _context4.next = 27;
                return (0, _testHelpers.click)(this.element.querySelector('[data-test-task-filter-trigger]'));

              case 27:
                _context4.next = 29;
                return (0, _testHelpers.click)(this.element.querySelector('[data-test-id="task-filter-DEFAULT_FILTER_STATUS"]'));

              case 29:
                reOpenedTaskItem = this.element.querySelector('[data-test-task-item]');
                reOpenedTaskItemDisplayID = reOpenedTaskItem.querySelector('[data-test-task-item-displayid]').innerText;
                assert.equal(closedTaskItemDisplayID, reOpenedTaskItemDisplayID, "Task ".concat(taskItemDisplayID, " after reopened is inside My open & In Progress task filter"));

              case 32:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should delete tasks', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var listItemDisplayID, listItemMoreBtn, newListItemDispID;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                this.set('module', "tickets");
                this.set('updateCount', function (actual) {
                  var expected = actual;
                  assert.equal(actual, expected, 'Update tab count triggered on delete');
                });
                this.additionalOps = {
                  closedEntity: false
                };
                (0, _stubCurrentUser.stubCurrentUser)(TEST_USER);
                _context5.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  	<ModuleTickets::Details::Tasks 
                									@model={{this.model}}
                									@module={{this.module}}
                									@updateTabCount={{this.updateCount}}
                									@additionalOps = {{this.additionalOps}}
                								/>	
                */
                {
                  id: "Tz7HFj6o",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\t\"],[5,\"module-tickets/details/tasks\",[],[[\"@model\",\"@module\",\"@updateTabCount\",\"@additionalOps\"],[[23,0,[\"model\"]],[23,0,[\"module\"]],[23,0,[\"updateCount\"]],[23,0,[\"additionalOps\"]]]]],[0,\"\\t\"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                listItemDisplayID = this.element.querySelector('[data-test-task-item-displayid]').innerText;
                listItemMoreBtn = this.element.querySelector('[data-test-task-item-more-trigger]');
                _context5.next = 10;
                return (0, _testHelpers.click)(listItemMoreBtn);

              case 10:
                _context5.next = 12;
                return (0, _testHelpers.click)('[data-test-task-item-more] [data-test-task-item-more-delete]');

              case 12:
                _context5.next = 14;
                return (0, _testHelpers.click)('[data-test-id="modal-submit"]');

              case 14:
                newListItemDispID = this.element.querySelector('[data-test-task-item-displayid]').innerText;
                assert.notEqual(listItemDisplayID, newListItemDispID, "Task ".concat(listItemDisplayID, " has been deleted and is not present in current filter anymore"));

              case 16:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-tickets/details/tasks/form/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/stub-native-service", "freshservice/tests/lib/stub-current-account", "freshservice/tests/lib/spy-flash-message", "freshservice/tests/pages/components/utils/form-fields", "freshservice/tests/pages/components/module-tickets/tasks"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _sinonContext, _stubCurrentUser, _stubNativeService, _stubCurrentAccount, _spyFlashMessage, _formFields, _tasks) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var MOCK_DATA = {
    newTask: {
      title: "New Mock task",
      description: "description for task",
      ownerId: "1",
      groupId: "1",
      notifyBefore: "2",
      status: "1"
    },
    editTask: {
      title: "Updated Task title"
    }
  }; // To be removed after OLA ERM flag clean up

  var TEST_ACCOUNT = {
    temp_features: ["ola_policies"]
  };
  (0, _qunit.module)('Integration | Component | module-tickets/details/tasks/form', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var model;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.server.loadFixtures('tickets');
              this.server.loadFixtures('ticketTaskFields');
              this.set('store', this.owner.lookup("service:store"));
              _context.next = 5;
              return this.store.findAll("ticket");

            case 5:
              model = _context.sent;
              _context.next = 8;
              return this.store.findAll('ticket-task-field');

            case 8:
              this.set('model', model.lastObject);
              this.set('intl', this.owner.lookup("service:intl"));
              this.set('agentsGroups', this.owner.lookup("service:agentsGroups"));
              (0, _stubCurrentUser.stubCurrentUser)({
                scoped_privileges: {
                  0: ["manage_ticket_tasks"],
                  1: [],
                  2: [],
                  3: []
                },
                privileges: ["manage_ticket_tasks"]
              });
              this.set('module', "tickets");
              this.set('modalTask', null);
              this.set('modalTaskIndex', null);

            case 15:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('should test add form correctly renders with prefill values', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.additionalOps = {
                  closedEntity: false
                };
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  	<ModuleTickets::Details::Tasks 
                								@model={{this.model}}
                								@module={{this.module}}
                								@additionalOps = {{this.additionalOps}}
                							/>	
                */
                {
                  id: "NNtuQ84j",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\t\"],[5,\"module-tickets/details/tasks\",[],[[\"@model\",\"@module\",\"@additionalOps\"],[[23,0,[\"model\"]],[23,0,[\"module\"]],[23,0,[\"additionalOps\"]]]]],[0,\"\\t\"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context2.next = 5;
                return (0, _testHelpers.click)('[data-test-add-task-btn]');

              case 5:
                assert.ok(_tasks.default.newForm.exists, "Task add modal is open on clicking add task");
                assert.ok(_tasks.default.newForm.hasSubmitBtn);
                assert.ok(_tasks.default.newForm.hasFieldTitle);
                _context2.next = 10;
                return (0, _testHelpers.waitFor)('.froala-editor-container', {
                  timeout: 500
                });

              case 10:
                assert.ok(_tasks.default.newForm.hasFieldDescription);
                assert.ok(_tasks.default.newForm.hasFieldGroupId);
                assert.ok(_tasks.default.newForm.hasFieldOwnerId);
                assert.ok(_tasks.default.newForm.hasFieldStatus);
                assert.ok(_tasks.default.newForm.hasFieldNotifyBefore);
                assert.ok(_tasks.default.newForm.hasFieldDueDate);

              case 16:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render validation errors on submit without data', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this.additionalOps = {
                  closedEntity: false
                };
                _context3.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  	<ModuleTickets::Details::Tasks 
                								@model={{this.model}}
                								@module={{this.module}}
                								@additionalOps = {{this.additionalOps}}
                							/>	
                */
                {
                  id: "NNtuQ84j",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\t\"],[5,\"module-tickets/details/tasks\",[],[[\"@model\",\"@module\",\"@additionalOps\"],[[23,0,[\"model\"]],[23,0,[\"module\"]],[23,0,[\"additionalOps\"]]]]],[0,\"\\t\"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context3.next = 5;
                return (0, _testHelpers.click)('[data-test-add-task-btn]');

              case 5:
                _context3.next = 7;
                return _tasks.default.newForm.save();

              case 7:
                assert.ok(_tasks.default.newForm.hasErrorTitle);

              case 8:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should create a new task from form with fields', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var moment, nextDay, successFlash;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                moment = this.owner.lookup('service:moment');
                nextDay = moment.moment(new Date()).add(1, "days").format("YYYY-MM-DD");
                successFlash = (0, _spyFlashMessage.default)('success');
                this.set('updateCount', function () {});
                this.additionalOps = {
                  closedEntity: false
                };
                _context4.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  	<ModuleTickets::Details::Tasks 
                								@model={{this.model}}
                								@module={{this.module}}
                								@updateTabCount={{this.updateCount}}
                								@page='ticket'
                								@additionalOps = {{this.additionalOps}}
                							/>	
                */
                {
                  id: "FJnakQeQ",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\t\"],[5,\"module-tickets/details/tasks\",[],[[\"@model\",\"@module\",\"@updateTabCount\",\"@page\",\"@additionalOps\"],[[23,0,[\"model\"]],[23,0,[\"module\"]],[23,0,[\"updateCount\"]],\"ticket\",[23,0,[\"additionalOps\"]]]]],[0,\"\\t\"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context4.next = 9;
                return (0, _testHelpers.click)('[data-test-add-task-btn]');

              case 9:
                _context4.next = 11;
                return _tasks.default.newForm.fillTitle(MOCK_DATA.newTask.title);

              case 11:
                _context4.next = 13;
                return _tasks.default.newForm.fillDescription(MOCK_DATA.newTask.description);

              case 13:
                _context4.next = 15;
                return _formFields.default.selectSingle("groupId", MOCK_DATA.newTask.groupId);

              case 15:
                _context4.next = 17;
                return _formFields.default.selectSingle("ownerId", MOCK_DATA.newTask.ownerId);

              case 17:
                _context4.next = 19;
                return _formFields.default.selectSingle("status", MOCK_DATA.newTask.status);

              case 19:
                _context4.next = 21;
                return _formFields.default.selectSingle("notifyBefore", MOCK_DATA.newTask.notifyBefore);

              case 21:
                _context4.next = 23;
                return _formFields.default.calendarSelectSingleDate("dueDate", nextDay);

              case 23:
                _context4.next = 25;
                return _tasks.default.newForm.save();

              case 25:
                assert.ok(successFlash.calledOnce);

              case 26:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Create form should not show duedate if task OLA is enabled', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var successFlash;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                successFlash = (0, _spyFlashMessage.default)('success');
                this.set('updateCount', function () {});
                this.additionalOps = {
                  closedEntity: false
                };
                (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
                this.server.get('/api/_/ticket_task_fields', function (schema) {
                  var fields = Ember.A(schema.db.ticketTaskFields);
                  return {
                    meta: {
                      ola_enabled: true
                    },
                    ticket_task_fields: fields
                  };
                });
                _context5.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  	<ModuleTickets::Details::Tasks 
                								@model={{this.model}}
                								@module={{this.module}}
                								@updateTabCount={{this.updateCount}}
                								@page='ticket'
                								@additionalOps = {{this.additionalOps}}
                							/>	
                */
                {
                  id: "FJnakQeQ",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\t\"],[5,\"module-tickets/details/tasks\",[],[[\"@model\",\"@module\",\"@updateTabCount\",\"@page\",\"@additionalOps\"],[[23,0,[\"model\"]],[23,0,[\"module\"]],[23,0,[\"updateCount\"]],\"ticket\",[23,0,[\"additionalOps\"]]]]],[0,\"\\t\"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context5.next = 9;
                return (0, _testHelpers.click)('[data-test-add-task-btn]');

              case 9:
                //assert
                assert.notOk(_tasks.default.newForm.hasFieldDueDate, 'due date is hidden');
                _context5.next = 12;
                return _tasks.default.newForm.fillTitle(MOCK_DATA.newTask.title);

              case 12:
                _context5.next = 14;
                return _tasks.default.newForm.fillDescription(MOCK_DATA.newTask.description);

              case 14:
                _context5.next = 16;
                return _tasks.default.newForm.save();

              case 16:
                //assert
                assert.ok(successFlash.calledOnce, 'form saved successfully');

              case 17:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should load a task and update it', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var successFlash, newTitle;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                this.set('updateCount', function () {});
                successFlash = (0, _spyFlashMessage.default)('success');
                this.additionalOps = {
                  closedEntity: false
                };
                _context6.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  	<ModuleTickets::Details::Tasks 
                								@model={{this.model}}
                								@module={{this.module}}
                								@updateTabCount={{this.updateCount}}
                								@additionalOps = {{this.additionalOps}}
                							/>	
                */
                {
                  id: "Tz7HFj6o",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\t\"],[5,\"module-tickets/details/tasks\",[],[[\"@model\",\"@module\",\"@updateTabCount\",\"@additionalOps\"],[[23,0,[\"model\"]],[23,0,[\"module\"]],[23,0,[\"updateCount\"]],[23,0,[\"additionalOps\"]]]]],[0,\"\\t\"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                _context6.next = 7;
                return (0, _testHelpers.click)('[data-test-task-item-more-trigger]');

              case 7:
                _context6.next = 9;
                return (0, _testHelpers.click)('[data-test-task-item-more-edit]');

              case 9:
                _context6.next = 11;
                return _tasks.default.newForm.fillTitle(MOCK_DATA.editTask.title).save();

              case 11:
                assert.ok(successFlash.calledOnce, "Task post success with success message");
                newTitle = this.element.querySelector('[data-test-task-item-title]').textContent.trim();
                assert.equal(newTitle, MOCK_DATA.editTask.title, "Task updated with new updated attributes");

              case 14:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should Render and Validate Google calendar checkbox in Task Modal', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var successFlash, taskItems, lastCreatedTaskItem;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                (0, _stubNativeService.stubNativeService)(['google_calendar']);
                successFlash = (0, _spyFlashMessage.default)('success');
                this.set('updateCount', function () {});
                this.additionalOps = {
                  closedEntity: false
                };
                _context7.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  	<ModuleTickets::Details::Tasks 
                				@model={{this.model}}
                				@module={{this.module}}
                				@updateTabCount={{this.updateCount}}
                				@page='ticket'
                				@additionalOps = {{this.additionalOps}}
                			/>	
                */
                {
                  id: "FJnakQeQ",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\t\"],[5,\"module-tickets/details/tasks\",[],[[\"@model\",\"@module\",\"@updateTabCount\",\"@page\",\"@additionalOps\"],[[23,0,[\"model\"]],[23,0,[\"module\"]],[23,0,[\"updateCount\"]],\"ticket\",[23,0,[\"additionalOps\"]]]]],[0,\"\\t\"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                _context7.next = 8;
                return (0, _testHelpers.click)('[data-test-add-task-btn]');

              case 8:
                assert.ok(_tasks.default.newForm.hasGoogleCalenderVisible, "Google Calendar Checkbox is visible");
                _context7.next = 11;
                return _tasks.default.newForm.fillTitle(MOCK_DATA.newTask.title);

              case 11:
                _context7.next = 13;
                return _tasks.default.newForm.save();

              case 13:
                assert.ok(successFlash.calledOnce);
                taskItems = document.querySelectorAll('.task-list .task-item');
                lastCreatedTaskItem = taskItems[0];
                _context7.next = 18;
                return (0, _testHelpers.click)(lastCreatedTaskItem.querySelector('[data-test-task-item-more-trigger]'));

              case 18:
                _context7.next = 20;
                return (0, _testHelpers.click)(lastCreatedTaskItem.querySelector('[data-test-task-item-more-edit]'));

              case 20:
                assert.equal(document.querySelector('[data-test-id="gc_checkbox"]').checked, true, "Google calendar Checkbox is Clicked");

              case 21:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x6) {
        return _ref8.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-tickets/details/tasks/modal/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl", "ember-cli-mirage/test-support", "freshservice/tests/lib/stub-current-user"], function (_qunit, _emberQunit, _testHelpers, _intl, _testSupport, _stubCurrentUser) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var TEST_USER = {
    scoped_privileges: {
      0: ["manage_ticket_tasks"],
      1: [],
      2: [],
      3: []
    },
    privileges: ["manage_ticket_tasks"]
  };
  (0, _qunit.module)('Integration | Component | module-tickets/details/tasks/modal', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var model;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.server.loadFixtures('tickets');
              this.server.loadFixtures('ticketTaskFields');
              this.set('store', this.owner.lookup("service:store"));
              _context.next = 5;
              return this.store.findAll("ticket");

            case 5:
              model = _context.sent;
              _context.next = 8;
              return this.store.findAll('ticket-task-field');

            case 8:
              this.set('model', model.lastObject);
              this.set('intl', this.owner.lookup("service:intl"));
              (0, _stubCurrentUser.stubCurrentUser)(TEST_USER);

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('should open modal for crud operations', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var modalTask;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.set('module', "tickets");
                modalTask = this.store.peekRecord('task', 219);
                this.set('modalTask', modalTask);
                this.set('modalTaskIndex', 0);
                this.additionalOps = {
                  closedEntity: false
                };
                _context2.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  	<ModuleTickets::Details::Tasks 
                			@model={{this.model}}
                			@module={{this.module}}
                			@additionalOps = {{this.additionalOps}}
                		/>
                */
                {
                  id: "HJ6QWc9w",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\t\"],[5,\"module-tickets/details/tasks\",[],[[\"@model\",\"@module\",\"@additionalOps\"],[[23,0,[\"model\"]],[23,0,[\"module\"]],[23,0,[\"additionalOps\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context2.next = 9;
                return (0, _testHelpers.click)('[data-test-add-task-btn]');

              case 9:
                assert.dom('[data-test-task-form="add"]').exists({
                  count: 1
                }, "Task add modal is open on clicking add task");
                _context2.next = 12;
                return (0, _testHelpers.click)('[data-test-id="ember-modal-close"]');

              case 12:
                assert.dom('.confirmation-side-modal-content').exists({
                  count: 1
                }, "On close click, cancel confirmation modal appears as expected");
                _context2.next = 15;
                return (0, _testHelpers.click)('[data-test-id="cancel-confirmation-submit"]');

              case 15:
                assert.dom('[data-test-task-form="add"]').doesNotExist("Task add modal is closed on clicking close modal"); // Task show modal - open & close

                _context2.next = 18;
                return (0, _testHelpers.click)('[data-test-task-show-btn]');

              case 18:
                assert.dom('[data-test-task-show-modal]').exists({
                  count: 1
                }, "Task show modal is open on clicking show task");
                _context2.next = 21;
                return (0, _testHelpers.click)('[data-test-id="ember-modal-close"]');

              case 21:
                assert.dom('[data-test-task-show-modal]').doesNotExist("Task show modal is closed on clicking close modal"); // Edit task modal - open & close

                _context2.next = 24;
                return (0, _testHelpers.click)('[data-test-task-item-more-trigger]');

              case 24:
                _context2.next = 26;
                return (0, _testHelpers.click)('[data-test-task-item-more-edit]');

              case 26:
                assert.dom('[data-test-task-form="edit"]').exists({
                  count: 1
                }, "Task edit modal is open on clicking edit task");
                _context2.next = 29;
                return (0, _testHelpers.click)('[data-test-id="ember-modal-close"]');

              case 29:
                assert.dom('.confirmation-side-modal-content').exists({
                  count: 1
                }, "On close click, cancel confirmation modal appears as expected");
                _context2.next = 32;
                return (0, _testHelpers.click)('[data-test-id="cancel-confirmation-submit"]');

              case 32:
                assert.dom('[data-test-task-form="edit"]').doesNotExist("Task edit modal is closed on clicking close modal"); // Delete task modal - open & close

                _context2.next = 35;
                return (0, _testHelpers.click)('[data-test-task-item-more-trigger]');

              case 35:
                _context2.next = 37;
                return (0, _testHelpers.click)('[data-test-task-item-more-delete]');

              case 37:
                assert.dom('[data-test-task-delete-modal]').exists({
                  count: 1
                }, "Task delete modal is open on clicking delete task");
                _context2.next = 40;
                return (0, _testHelpers.click)('[data-test-id="ember-modal-close"]');

              case 40:
                assert.dom('[data-test-task-delete-modal]').doesNotExist("Task delete modal is closed on clicking close modal");

              case 41:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should load specific task if task not fully loaded', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var modalTask, notLoadedTaskShowBtn, descText;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)(TEST_USER);
                this.set('module', "tickets");
                this.additionalOps = {
                  closedEntity: false
                };
                _context3.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  	<ModuleTickets::Details::Tasks 
                			@model={{this.model}}
                			@module={{this.module}}
                			@additionalOps = {{this.additionalOps}}
                		/>
                */
                {
                  id: "HJ6QWc9w",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\t\"],[5,\"module-tickets/details/tasks\",[],[[\"@model\",\"@module\",\"@additionalOps\"],[[23,0,[\"model\"]],[23,0,[\"module\"]],[23,0,[\"additionalOps\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                _context3.next = 7;
                return this.store.peekRecord('task', 222);

              case 7:
                modalTask = _context3.sent;
                assert.equal(modalTask.description, "", "Task is partially loaded without group and notify before as undefined and description defaults to empty string");
                notLoadedTaskShowBtn = this.element.querySelector('[data-test-task-list] > [data-test-task-item]:last-child [data-test-task-show-btn]');
                _context3.next = 12;
                return (0, _testHelpers.click)(notLoadedTaskShowBtn);

              case 12:
                descText = this.element.querySelector('[data-test-id="description"]').textContent.trim();
                assert.notEqual(modalTask.description, descText, "Task is fully loaded and content of description changed");

              case 14:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should open edit and delete actions from show modal', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var modalTask, nestedEditBtn, nestedDelBtn;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                this.set('module', "tickets");
                modalTask = this.store.peekRecord('task', 219);
                this.set('modalTask', modalTask);
                this.set('modalTaskIndex', 0);
                this.additionalOps = {
                  closedEntity: false
                };
                _context4.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  	<ModuleTickets::Details::Tasks 
                			@model={{this.model}}
                			@module={{this.module}}
                			@additionalOps = {{this.additionalOps}}
                		/>
                */
                {
                  id: "HJ6QWc9w",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\t\"],[5,\"module-tickets/details/tasks\",[],[[\"@model\",\"@module\",\"@additionalOps\"],[[23,0,[\"model\"]],[23,0,[\"module\"]],[23,0,[\"additionalOps\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context4.next = 9;
                return (0, _testHelpers.click)('[data-test-task-show-btn]');

              case 9:
                assert.dom('[data-test-task-show-modal]').exists({
                  count: 1
                }, "Task show modal is open");
                _context4.next = 12;
                return (0, _testHelpers.click)('[data-test-task-show-modal-more-trigger]');

              case 12:
                nestedEditBtn = this.element.querySelector('[data-test-task-show-modal-more-edit]');
                _context4.next = 15;
                return (0, _testHelpers.click)(nestedEditBtn);

              case 15:
                // Edit button
                assert.dom('[data-test-task-show-modal]').doesNotExist("Task show modal is closed on clicking edit task inside show more options");
                assert.dom('[data-test-task-form="edit"]').exists({
                  count: 1
                }, "Task edit modal is open"); // Edit modal

                _context4.next = 19;
                return (0, _testHelpers.click)('[data-test-id="ember-modal-close"]');

              case 19:
                // Close edit modal
                assert.dom('.confirmation-side-modal-content').exists({
                  count: 1
                }, "On close click, cancel confirmation modal appears as expected");
                _context4.next = 22;
                return (0, _testHelpers.click)('[data-test-id="cancel-confirmation-submit"]');

              case 22:
                assert.dom('[data-test-task-form="edit"]').doesNotExist("Task edit modal opened from show modal is closed on clicking close modal"); // Task show modal

                _context4.next = 25;
                return (0, _testHelpers.click)('[data-test-task-show-btn]');

              case 25:
                assert.dom('[data-test-task-show-modal]').exists({
                  count: 1
                }, "Task show modal is open");
                _context4.next = 28;
                return (0, _testHelpers.click)('[data-test-task-show-modal-more-trigger]');

              case 28:
                nestedDelBtn = this.element.querySelector('[data-test-task-show-modal-more-delete]');
                _context4.next = 31;
                return (0, _testHelpers.click)(nestedDelBtn);

              case 31:
                // Delete button
                assert.dom('[data-test-task-show-modal]').doesNotExist("Task show modal is closed on clicking delete task inside show more options");
                assert.dom('[data-test-task-delete-modal]').exists({
                  count: 1
                }, "Task delete modal is open"); // Delete modal

                _context4.next = 35;
                return (0, _testHelpers.click)('[data-test-id="modal-cancel"]');

              case 35:
                assert.dom('[data-test-task-delete-modal]').doesNotExist("Task delete modal opened from show modal is closed on clicking cancel modal");

              case 36:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should update status from show modal header', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var modalTask, currentTaskStatus, updatedTaskStatus;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                this.set('module', "tickets");
                modalTask = this.store.peekRecord('task', 219);
                this.set('modalTask', modalTask);
                this.set('modalTaskIndex', 0);
                this.additionalOps = {
                  closedEntity: false
                };
                _context5.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  	<ModuleTickets::Details::Tasks 
                			@model={{this.model}}
                			@module={{this.module}}
                			@additionalOps = {{this.additionalOps}}
                		/>
                */
                {
                  id: "HJ6QWc9w",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\t\"],[5,\"module-tickets/details/tasks\",[],[[\"@model\",\"@module\",\"@additionalOps\"],[[23,0,[\"model\"]],[23,0,[\"module\"]],[23,0,[\"additionalOps\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context5.next = 9;
                return (0, _testHelpers.click)('[data-test-task-show-btn]');

              case 9:
                assert.dom('[data-test-task-show-modal]').exists({
                  count: 1
                }, "Task show modal is open");
                currentTaskStatus = this.element.querySelector('[data-test-task-show-modal-status-update-trigger]').textContent.trim();
                _context5.next = 13;
                return (0, _testHelpers.click)('[data-test-task-show-modal-status-update-trigger]');

              case 13:
                _context5.next = 15;
                return (0, _testHelpers.click)('[data-test-task-show-modal-status-open]');

              case 15:
                updatedTaskStatus = this.element.querySelector('[data-test-task-show-modal-status-update-trigger]').textContent.trim();
                assert.notEqual(currentTaskStatus, updatedTaskStatus, "Task status changed to ".concat(updatedTaskStatus));

              case 17:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should navigate between tasks from show modal header', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var modalTask, taskDisplayId, nextTaskDisplayId, prevTaskDisplayId, prevTaskBtn, nextTaskBtn;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                this.set('module', "tickets");
                modalTask = this.store.peekRecord('task', 219);
                this.set('modalTask', modalTask);
                this.set('modalTaskIndex', 0);
                this.additionalOps = {
                  closedEntity: false
                };
                _context6.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  	<ModuleTickets::Details::Tasks 
                			@model={{this.model}}
                			@module={{this.module}}
                			@additionalOps = {{this.additionalOps}}
                		/>
                */
                {
                  id: "HJ6QWc9w",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\t\"],[5,\"module-tickets/details/tasks\",[],[[\"@model\",\"@module\",\"@additionalOps\"],[[23,0,[\"model\"]],[23,0,[\"module\"]],[23,0,[\"additionalOps\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context6.next = 9;
                return (0, _testHelpers.click)('[data-test-task-show-btn]');

              case 9:
                assert.dom('[data-test-task-show-modal]').exists({
                  count: 1
                }, "Task show modal is open");
                taskDisplayId = this.element.querySelector('[data-test-task-show-modal-title]').textContent.trim();
                _context6.next = 13;
                return (0, _testHelpers.click)('[data-test-id="pageNavNext"]');

              case 13:
                // next
                nextTaskDisplayId = this.element.querySelector('[data-test-task-show-modal-title]').textContent.trim();
                assert.notEqual(taskDisplayId, nextTaskDisplayId, "Navigated to next task");
                _context6.next = 17;
                return (0, _testHelpers.click)('[data-test-id="pageNavPrev"]');

              case 17:
                // prev
                prevTaskDisplayId = this.element.querySelector('[data-test-task-show-modal-title]').textContent.trim();
                assert.equal(taskDisplayId, prevTaskDisplayId, "Navigated to the prev task");
                _context6.next = 21;
                return (0, _testHelpers.click)('[data-test-id="ember-modal-close"]');

              case 21:
                _context6.next = 23;
                return (0, _testHelpers.click)('[data-test-task-list] [data-test-task-item]:first-child [data-test-task-show-btn]');

              case 23:
                prevTaskBtn = this.element.querySelector('[data-test-id="pageNavPrev"]');
                assert.dom(prevTaskBtn).isDisabled('For first task the prev task navigator button is disabled');
                _context6.next = 27;
                return (0, _testHelpers.click)('[data-test-id="ember-modal-close"]');

              case 27:
                _context6.next = 29;
                return (0, _testHelpers.click)('[data-test-task-list] [data-test-task-item]:last-child [data-test-task-show-btn]');

              case 29:
                _context6.next = 31;
                return (0, _testHelpers.click)('[data-test-id="pageNavPrev"]');

              case 31:
                _context6.next = 33;
                return (0, _testHelpers.click)('[data-test-id="pageNavNext"]');

              case 33:
                nextTaskBtn = this.element.querySelector('[data-test-id="pageNavNext"]');
                assert.dom(nextTaskBtn).isDisabled('For last task the next task navigator button is disabled');

              case 35:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-tickets/details/tasks/show/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl", "ember-cli-mirage/test-support", "freshservice/constants/common/tasks"], function (_qunit, _emberQunit, _testHelpers, _intl, _testSupport, _tasks) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-tickets/details/tasks/show', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.set('store', this.owner.lookup("service:store"));
              this.set('intl', this.owner.lookup("service:intl"));
              this.server.loadFixtures('ticketTaskFields');

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('should render show modal with task details', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var modalTask, titleContent, descriptionContent, groupContent, agentContent, notifyTime;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.set('ticketId', 345);
                this.set('module', "tickets");
                this.set('taskId', 220);
                _context2.next = 5;
                return this.store.findAll('ticket-task-field');

              case 5:
                _context2.next = 7;
                return this.store.findRecord('task', this.taskId, {
                  adapterOptions: {
                    ticket_id: this.ticketId,
                    module: this.module
                  }
                });

              case 7:
                modalTask = _context2.sent;
                this.set('currentModalTask', modalTask);
                _context2.next = 11;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::Details::Tasks::Show @model={{this.currentModalTask}} />
                */
                {
                  id: "Xz66xs9O",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/details/tasks/show\",[],[[\"@model\"],[[23,0,[\"currentModalTask\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 11:
                titleContent = this.element.querySelector('[data-test-id="title"]').textContent.trim();
                descriptionContent = this.element.querySelector('[data-test-id="description"]').textContent.trim();
                groupContent = this.element.querySelector('[data-test-id="group_id"]').textContent.trim();
                agentContent = this.element.querySelector('[data-test-id="owner_id"]').textContent.trim();
                notifyTime = this.element.querySelector('[data-test-id="notify_before"]').textContent.trim();
                assert.equal(titleContent, modalTask.title, "Title content is rendered");
                assert.equal(descriptionContent, modalTask.description, "Description content is rendered");
                assert.equal(groupContent, modalTask.group.name, "Group content is rendered");
                assert.equal(agentContent, modalTask.agent.name, "Agent content is rendered");
                assert.dom('[data-test-id="status"]').exists("Status content is rendered");
                assert.equal(notifyTime, (0, _tasks.getNotifyBeforeValue)(modalTask.notifyBefore, this.intl), "Notify before content is rendered");
                assert.dom('[data-test-id="due_date"]').exists("Due date is shown");

              case 23:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-tickets/execute-scenario/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl", "ember-cli-mirage/test-support", "freshservice/tests/pages/components/module-tickets/execute-scenario"], function (_qunit, _emberQunit, _testHelpers, _intl, _testSupport, _executeScenario) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)("Integration | Component | Module-tickets/execute-scenario", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.server.createList("scenario-automation", 5);
              Ember.set(this, "store", this.owner.lookup("service:store"));

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)("Should render execute-scenario Component", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::ExecuteScenario @toggleModal={{true}} />
                */
                {
                  id: "3ga31jhs",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/execute-scenario\",[],[[\"@toggleModal\"],[true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.ok(_executeScenario.default.isExecuteScenarioModalVisible);
                assert.equal(_executeScenario.default.scenarioCount, 5, "5 Scenarios are fetched");

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("Search in execute-scenario Component", /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::ExecuteScenario @toggleModal={{true}} />
                */
                {
                  id: "3ga31jhs",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/execute-scenario\",[],[[\"@toggleModal\"],[true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context3.next = 4;
                return _executeScenario.default.fillSearchScenario("scenario 1");

              case 4:
                assert.equal(_executeScenario.default.fetchedScenarios.objectAt(0).title, "scenario 1", "Search works in Execute-Scenario");

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-tickets/list/bulk-more-button/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl", "ember-cli-mirage/test-support"], function (_qunit, _emberQunit, _testHelpers, _intl, _testSupport) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)("Integration | Component | Module-tickets/list/bulk-more-button", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              Ember.set(this, "store", this.owner.lookup("service:store"));
              this.set("moduleConfig", {
                "moduleCapitalized": "Ticket",
                "modulePluralCapitalized": "Tickets"
              });

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)("Should render Bulk more button Component", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var tickets;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.store.findAll("ticket");

              case 2:
                tickets = _context2.sent;
                this.set("newTickets", [tickets]);
                this.set("childReference", function () {});
                _context2.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::List::BulkMoreButton  @selectedRows={{this.newTickets}}
                            @setSpamChildReference = {{this.childReference}}
                            @setCloseChildReference = {{this.childReference}}
                            @setDeleteChildReference = {{this.childReference}}
                						@config = {{this.moduleConfig}}
                        />
                */
                {
                  id: "8d/oNyHd",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/list/bulk-more-button\",[],[[\"@selectedRows\",\"@setSpamChildReference\",\"@setCloseChildReference\",\"@setDeleteChildReference\",\"@config\"],[[23,0,[\"newTickets\"]],[23,0,[\"childReference\"]],[23,0,[\"childReference\"]],[23,0,[\"childReference\"]],[23,0,[\"moduleConfig\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                assert.dom(".bulk-more-wrapper").exists({
                  count: 1
                });

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("Should Open Bulk more button Dropdown", /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var tickets;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.store.findAll("ticket");

              case 2:
                tickets = _context3.sent;
                this.set("newTickets", [tickets]);
                this.set("childReference", function () {});
                _context3.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::List::BulkMoreButton
                            @selectedRows={{this.newTickets}}
                            @setSpamChildReference = {{this.childReference}}
                            @setCloseChildReference = {{this.childReference}}
                            @setDeleteChildReference = {{this.childReference}}
                						@config = {{this.moduleConfig}}
                        />
                */
                {
                  id: "8d/oNyHd",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/list/bulk-more-button\",[],[[\"@selectedRows\",\"@setSpamChildReference\",\"@setCloseChildReference\",\"@setDeleteChildReference\",\"@config\"],[[23,0,[\"newTickets\"]],[23,0,[\"childReference\"]],[23,0,[\"childReference\"]],[23,0,[\"childReference\"]],[23,0,[\"moduleConfig\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context3.next = 9;
                return (0, _testHelpers.click)(".bulk-more-trigger");

              case 9:
                assert.dom(".bulk-more-content").exists({
                  count: 1
                });

              case 10:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-tickets/new/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/sinon-context", "freshservice/tests/pages/components/module-tickets/new-ticket"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _sinonContext, _newTicket) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-tickets/new', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      this.marketplaceAdapter = this.owner.lookup('service:marketplaceAdapter');
      this.sinon = (0, _sinonContext.getSinonContext)();
      this.sinon.stub(this.marketplaceAdapter, 'initializeMarketplaceManager');
    });
    hooks.afterEach(function () {
      this.owner.destroy('service:marketplaceAdapter');
    });
    (0, _qunit.test)('Should be able to render New ticket page elements', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.sinon.stub(this.marketplaceAdapter, 'getApps').returns([]);
                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::New />
                */
                {
                  id: "CE5aaef5",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/new\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.ok(_newTicket.default.hasBreadCrumbs, 'Breadcrumbs is visible');
                assert.ok(_newTicket.default.hasNewTicketsForm, 'New Ticket form is visible');
                assert.ok(_newTicket.default.hasRelatedArticlesSection, 'Related article sidebar is visible');

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should be able render the related articles when subject is filled', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.sinon.stub(this.marketplaceAdapter, 'getApps').returns([]);
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::New />
                */
                {
                  id: "CE5aaef5",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/new\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.ok(_newTicket.default.isRelatedArticlesListEmpty, 'Empty State is visible');
                assert.ok(_newTicket.default.hasSubject);
                _context2.next = 7;
                return _newTicket.default.fillSubject('Test');

              case 7:
                // will return no more than 5 results
                assert.ok(_newTicket.default.hasRelatedArticlesList, 'Related Articles are visible');
                assert.notOk(_newTicket.default.hasRelatedArticlesShowAllLink, 'Show All results link not visible');
                _context2.next = 11;
                return _newTicket.default.fillSubject('el');

              case 11:
                // will return more than 5 results
                assert.ok(_newTicket.default.hasRelatedArticlesShowAllLink, 'Show All results link is visible');

              case 12:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should not show apps pane when there are no market place apps installed', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this.sinon.stub(this.marketplaceAdapter, 'getApps').returns([]);
                _context3.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::New />
                */
                {
                  id: "CE5aaef5",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/new\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.ok(_newTicket.default.hasRelatedArticlesSection, 'Related Articles are visible');
                assert.notOk(_newTicket.default.hasAppsIconPane, 'Apps pane is not visible');

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should show apps pane when there are no market place apps installed', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                this.sinon.stub(this.marketplaceAdapter, 'getApps').returns([{
                  id: 1,
                  displayName: 'dummy',
                  location: 'new_ticket_sidebar'
                }]);
                _context4.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::New />
                */
                {
                  id: "CE5aaef5",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/new\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.ok(_newTicket.default.hasRelatedArticlesSection, 'Related Articles are visible');
                assert.ok(_newTicket.default.hasAppsIconPane, 'Apps pane is visible');

              case 5:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should show related articles widget and show articles list on subject updated when related articles are rendered as widget', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                this.sinon.stub(this.marketplaceAdapter, 'getApps').returns([{
                  id: 1,
                  displayName: 'dummy',
                  location: 'new_ticket_sidebar'
                }]);
                _context5.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::New />
                */
                {
                  id: "CE5aaef5",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/new\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.ok(_newTicket.default.hasAppsIconPane, 'Apps pane is visible');
                assert.ok(_newTicket.default.isRelatedArticlesWidgetExpanded, 'Related Articles are visible as the widget will expanded by default');
                assert.notOk(_newTicket.default.hasRelatedArticlesList, 'No Related Articles are shown until subject is entered');
                _context5.next = 8;
                return _newTicket.default.fillSubject('Test');

              case 8:
                assert.ok(_newTicket.default.hasRelatedArticlesList, 'Related Articles are visible');

              case 9:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should expand related articles widget and show articles list on subject updated when related articles are rendered as widget and is collapsed', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                this.sinon.stub(this.marketplaceAdapter, 'getApps').returns([{
                  id: 1,
                  displayName: 'dummy',
                  location: 'new_ticket_sidebar'
                }]);
                _context6.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::New />
                */
                {
                  id: "CE5aaef5",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/new\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.ok(_newTicket.default.hasAppsIconPane, 'Apps pane is visible');
                assert.ok(_newTicket.default.isRelatedArticlesWidgetExpanded, 'Related Articles section is expanded by default');
                _context6.next = 7;
                return _newTicket.default.toggleRelatedArticlesWidget();

              case 7:
                // Collapsed
                assert.notOk(_newTicket.default.isRelatedArticlesWidgetExpanded, 'Related Articles are not visible as widged is collapsed');
                _context6.next = 10;
                return _newTicket.default.fillSubject('Test');

              case 10:
                assert.ok(_newTicket.default.isRelatedArticlesWidgetExpanded, 'Related Articles are visible as widget is expanded when subject is changed');
                assert.ok(_newTicket.default.hasRelatedArticlesList, 'Related Articles are visible');

              case 12:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x6) {
        return _ref7.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-tickets/new/related-articles/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/mirage/fixtures/articles"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _articles) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-tickets/new/related-articles', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);

    function renderComponent() {
      return _renderComponent.apply(this, arguments);
    }

    function _renderComponent() {
      _renderComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleTickets::New::RelatedArticles
                				@articles = {{this.solutionArticles}}
                				@totalCount = {{this.totalEntries}}
                				@renderEmptyState = {{this.emptySubject}}
                				@searchTerm = {{this.searchName}}
                			/>
                */
                {
                  id: "Ohvyu8PZ",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-tickets/new/related-articles\",[],[[\"@articles\",\"@totalCount\",\"@renderEmptyState\",\"@searchTerm\"],[[23,0,[\"solutionArticles\"]],[23,0,[\"totalEntries\"]],[23,0,[\"emptySubject\"]],[23,0,[\"searchName\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));
      return _renderComponent.apply(this, arguments);
    }

    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.setProperties({
                solutionArticles: _articles.default,
                totalEntries: 7,
                searchName: '',
                emptySubject: true
              });

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('Should be able to show empty state and related articles ', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return renderComponent();

              case 2:
                assert.ok(document.querySelector('.new-page-related-articles [data-test-field-name="empty-state"]'), 'Empty State is visible');
                this.set('searchName', 'Test');
                this.set('emptySubject', false); // subject field is  filled

                assert.ok(document.querySelector('.new-page-related-articles [data-test-field-name="article-list"]'), 'Related Articles are visible');

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should be able to show all results link when total entry of article greater than 5', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return renderComponent();

              case 2:
                this.set('searchName', 'Test');
                this.set('emptySubject', false); // subject field is  filled

                assert.ok(document.querySelector('.new-page-related-articles [data-test-field-name="article-list"]'));
                assert.ok(document.querySelector('.new-page-related-articles [data-test-field-name="show-all-result-link"]'), 'Show All results link visible');

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should not be able to show all results link when total entry of article less than 5', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                this.set('totalEntries', 4);
                _context4.next = 3;
                return renderComponent();

              case 3:
                this.set('searchName', 'Test');
                this.set('emptySubject', false); // subject field is  filled

                assert.notOk(document.querySelector('.new-page-related-articles [data-test-field-name="show-all-result-link"]'), 'Show All results link not visible');

              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should be able to show No article found state', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                this.set('solutionArticles', []);
                _context5.next = 3;
                return renderComponent();

              case 3:
                this.set('searchName', 'Test');
                this.set('emptySubject', false); // subject field is  filled

                assert.ok(document.querySelector('.new-page-related-articles [data-test-field-name="no-article"]'), 'No article found');

              case 6:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-workloads/assignment-card-loader/component-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-workloads/assignment-card-loader', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should renders the component', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::AssignmentCardLoader />
                */
                {
                  id: "T1YYd9Zw",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/assignment-card-loader\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.dom('.assignment-card-loader').exists();

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-workloads/assignment-card/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "moment", "freshservice/tests/lib/intl", "freshservice/tests/lib/set-locale-timezone-moment", "freshservice/Class/WorkloadAssignment"], function (_qunit, _emberQunit, _testHelpers, _moment, _intl, _setLocaleTimezoneMoment, _WorkloadAssignment) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-workloads/assignment-card', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _setLocaleTimezoneMoment.setLocaleAndTimeZoneForMoment)(hooks);
    hooks.beforeEach(function () {
      this.set('assignment', new _WorkloadAssignment.default({
        id: '123',
        entityName: 'ticket',
        humanDisplayId: 'INC-123',
        title: 'This is test incident ticket',
        plannedStartDate: '2021-08-28T13:53:38+05:30',
        plannedEndDate: '2021-08-29T13:53:38+05:30',
        plannedEffort: '1h'
      }));
    });
    (0, _qunit.test)('it should render the card', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::AssignmentCard
                			@showPlanningAttributes = {{true}}
                			@assignment={{this.assignment}}/>
                */
                {
                  id: "SH/o7cCx",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/assignment-card\",[],[[\"@showPlanningAttributes\",\"@assignment\"],[true,[23,0,[\"assignment\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.dom('[data-test-id="wlm-manage-assignment-card-123"]').exists();

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render the humanDisplayId of the assignment', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var displayIdEle;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::AssignmentCard
                			@showPlanningAttributes = {{true}}
                			@assignment={{this.assignment}}/>
                */
                {
                  id: "SH/o7cCx",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/assignment-card\",[],[[\"@showPlanningAttributes\",\"@assignment\"],[true,[23,0,[\"assignment\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                displayIdEle = this.element.querySelector('[data-test-id="wlm-manage-assignment-card-display-id-123"]');
                assert.equal(displayIdEle.textContent.trim(), '#INC-123');

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render the title of the assignment', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var titleEle;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::AssignmentCard
                			@showPlanningAttributes = {{true}}
                			@assignment={{this.assignment}}/>
                */
                {
                  id: "SH/o7cCx",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/assignment-card\",[],[[\"@showPlanningAttributes\",\"@assignment\"],[true,[23,0,[\"assignment\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                titleEle = this.element.querySelector('[data-test-id="wlm-manage-assignment-card-title-123"]');
                assert.equal(titleEle.textContent.trim(), 'This is test incident ticket');

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render the planned start date of the assignment', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var psdEle;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::AssignmentCard
                			@showPlanningAttributes = {{true}}
                			@assignment={{this.assignment}}/>
                */
                {
                  id: "SH/o7cCx",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/assignment-card\",[],[[\"@showPlanningAttributes\",\"@assignment\"],[true,[23,0,[\"assignment\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                psdEle = this.element.querySelector('[data-test-id="wlm-manage-assignment-card-psd-123"]');
                assert.equal(psdEle.textContent.trim(), (0, _moment.default)(this.assignment.plannedStartDate).format('DD MMM, YYYY hh:mm A'));

              case 4:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render the planned end date of the assignment', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var pedEle;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::AssignmentCard
                			@showPlanningAttributes = {{true}}
                			@assignment={{this.assignment}}/>
                */
                {
                  id: "SH/o7cCx",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/assignment-card\",[],[[\"@showPlanningAttributes\",\"@assignment\"],[true,[23,0,[\"assignment\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                pedEle = this.element.querySelector('[data-test-id="wlm-manage-assignment-card-ped-123"]');
                assert.equal(pedEle.textContent.trim(), (0, _moment.default)(this.assignment.plannedEndDate).format('DD MMM, YYYY hh:mm A'));

              case 4:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render the planned effort of the assignment', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var psEle;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::AssignmentCard
                			@showPlanningAttributes = {{true}}
                			@assignment={{this.assignment}}/>
                */
                {
                  id: "SH/o7cCx",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/assignment-card\",[],[[\"@showPlanningAttributes\",\"@assignment\"],[true,[23,0,[\"assignment\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                psEle = this.element.querySelector('[data-test-id="wlm-manage-assignment-card-pe-123"]');
                assert.equal(psEle.textContent.trim(), 'Planned Effort: 1h');

              case 4:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x6) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render the planned start date, end date and effort of the assignment to not set if not defined', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var displayIdEle, titleEle, psdEle, pedEle, psEle;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                this.set('unplannedAssignment', new _WorkloadAssignment.default({
                  id: '1234',
                  entityName: 'ticket',
                  humanDisplayId: 'INC-1234',
                  title: 'Ticket does not have workload properties defined'
                }));
                _context7.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::AssignmentCard
                			@showPlanningAttributes = {{true}}
                			@assignment={{this.unplannedAssignment}}/>
                */
                {
                  id: "kNfXK2Fn",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/assignment-card\",[],[[\"@showPlanningAttributes\",\"@assignment\"],[true,[23,0,[\"unplannedAssignment\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                displayIdEle = this.element.querySelector('[data-test-id="wlm-manage-assignment-card-display-id-1234"]');
                assert.equal(displayIdEle.textContent.trim(), '#INC-1234');
                titleEle = this.element.querySelector('[data-test-id="wlm-manage-assignment-card-title-1234"]');
                assert.equal(titleEle.textContent.trim(), 'Ticket does not have workload properties defined');
                psdEle = this.element.querySelector('[data-test-id="wlm-manage-assignment-card-psd-1234"]');
                assert.equal(psdEle.textContent.trim(), 'Planned Start Date Not set');
                pedEle = this.element.querySelector('[data-test-id="wlm-manage-assignment-card-ped-1234"]');
                assert.equal(pedEle.textContent.trim(), 'Planned End Date Not set');
                psEle = this.element.querySelector('[data-test-id="wlm-manage-assignment-card-pe-1234"]');
                assert.equal(psEle.textContent.trim(), 'Planned Effort Not set');

              case 13:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x7) {
        return _ref8.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-workloads/assignment-card/quick-assign/component-test", ["@ember/test-helpers", "qunit", "freshservice/tests/lib/intl", "ember-qunit"], function (_testHelpers, _qunit, _intl, _emberQunit) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-workloads/assignment-card/quick-assign', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      Ember.set(this, 'store', this.owner.lookup('service:store'));
      this.store.pushPayload({
        agents: [{
          id: 41,
          time_zone: 'Chennai',
          timeZone: 'Chennai'
        }]
      });
      this.store.pushPayload({
        changes: [{
          id: 8,
          humanDisplayId: "CHN-8",
          agentId: 41,
          groupId: 81,
          time_zone: 'Chennai',
          timeZone: 'Chennai'
        }]
      });
    });
    (0, _qunit.test)('it renders quick assign', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.set('assignment', {
                  entityName: 'change',
                  humanDisplayId: "CHN-8",
                  id: 8,
                  displayId: 8,
                  isEditable: true
                });
                this.set('didModelFetch', true);
                this.set('updateDidModelFetch', function () {});
                _context.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::AssignmentCard::QuickAssign
                			@assignment={{this.assignment}}
                			@didModelFetch={{this.didModelFetch}}
                			@updateDidModelFetch={{this.updateDidModelFetch}}
                		/>
                */
                {
                  id: "PWpk/Rb6",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/assignment-card/quick-assign\",[],[[\"@assignment\",\"@didModelFetch\",\"@updateDidModelFetch\"],[[23,0,[\"assignment\"]],[23,0,[\"didModelFetch\"]],[23,0,[\"updateDidModelFetch\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                assert.dom('.wlm-agent-edit').exists('quick assign trigger button exists');
                assert.ok(true);

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

define("freshservice/tests/integration/components/module-workloads/capacity-view/component-test", ["freshservice/config/environment", "ember-concurrency", "@ember/test-helpers", "qunit", "ember-qunit", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/stub-current-account", "freshservice/constants/workload"], function (_environment, _emberConcurrency, _testHelpers, _qunit, _emberQunit, _intl, _stubCurrentUser, _stubCurrentAccount, _workload) {
  "use strict";

  var _dec, _class, _descriptor, _temp;

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  var MockService1 = (_dec = (0, _emberConcurrency.task)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _emberConcurrency.timeout)(50);

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })).restartable(), (_class = (_temp = /*#__PURE__*/function (_Ember$Service) {
    _inherits(MockService1, _Ember$Service);

    var _super = _createSuper(MockService1);

    function MockService1() {
      var _this;

      _classCallCheck(this, MockService1);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _defineProperty(_assertThisInitialized(_this), "ticketFormFieldHash", Object.freeze({
        status: {
          choices: [{
            id: 1,
            value: 'Low'
          }, {
            id: 2,
            value: 'Medium'
          }, {
            id: 3,
            value: 'High'
          }]
        }
      }));

      _initializerDefineProperty(_assertThisInitialized(_this), "fetchModuleFields", _descriptor, _assertThisInitialized(_this));

      _defineProperty(_assertThisInitialized(_this), "getFormField", function () {
        return {
          choices: [{
            id: 1,
            value: 'Open'
          }, {
            id: 2,
            value: 'Pending'
          }, {
            id: 3,
            value: 'Resolved'
          }]
        };
      });

      return _this;
    }

    return MockService1;
  }(Ember.Service), _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "fetchModuleFields", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));

  window.__CLASSIC_OWN_CLASSES__.set(MockService1, true);

  var GROUP_PAYLOAD = [{
    "id": 81,
    "name": "Change Team",
    "description": "Change Management Team",
    "escalate_to": null,
    "unassigned_for": "15m",
    "business_hours_id": null,
    "created_at": "2022-03-25T10:22:57Z",
    "updated_at": "2022-03-25T14:51:32Z",
    "auto_ticket_assign": false,
    "restricted": false,
    "approval_required": false,
    "agent_ids": [34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90],
    "members": [34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90],
    "observers": [],
    "leaders": [],
    "members_pending_approval": [],
    "leaders_pending_approval": [],
    "observers_pending_approval": []
  }, {
    "id": 78,
    "name": "Major Incident Team",
    "description": "Major Incident Management Team",
    "escalate_to": null,
    "unassigned_for": "15m",
    "business_hours_id": null,
    "created_at": "2022-03-25T10:22:57Z",
    "updated_at": "2022-04-02T17:16:15Z",
    "auto_ticket_assign": false,
    "restricted": false,
    "approval_required": false,
    "agent_ids": [34, 91, 92],
    "members": [34, 91, 92],
    "observers": [],
    "leaders": [],
    "members_pending_approval": [],
    "leaders_pending_approval": [],
    "observers_pending_approval": []
  }];
  var USER_PAYLOAD = [{
    "avatar_url": "",
    "email": "agent52@gmail.com",
    "id": 91,
    "name": "1agent fiftytwo",
    time_zone: 'Chennai'
  }, {
    "avatar_url": "",
    "email": "agent53@gmail.com",
    "id": 92,
    "name": "agent fiftythree"
  }, {
    "email": "chris.blesson@freshworks.com",
    "id": 34,
    "name": "Blesson"
  }, {
    "avatar_url": "https://freshworks173.freshworks.com/api/v2/users/152806053332157138/image?variant=SMALL",
    "email": "chris.blesson@freshworks.com",
    "id": 41,
    "name": "1Blesson"
  }];
  var PROJECT_PAYLOAD = [{
    "id": 1,
    "name": "New application rollout (sample project)",
    "key": "NARSP",
    "description": null,
    "start_date": "2022-03-24T18:30:00.000Z",
    "end_date": "2022-04-25T18:29:59.000Z",
    "progress": {
      "todo": 11,
      "in_progress": 0,
      "done": 0
    },
    "created_at": "2022-03-25T10:28:10.000Z",
    "archived_at": null,
    "actual_start_date": null,
    "actual_end_date": null,
    "template_flag": false,
    "project_category": 1,
    "priority": "medium",
    "state": "Active",
    "status": "Yet to start",
    "owner_id": 1000000003,
    "user_ids": [1000000004, 1000000005, 1000000003]
  }];
  var USER_STATE = {
    "users": USER_PAYLOAD,
    "groups": GROUP_PAYLOAD,
    "body": {
      "projects": PROJECT_PAYLOAD
    },
    "meta": {
      "total_pages": 2,
      "total": 53,
      "page": 2
    }
  };

  var MOCK_RESPONSE = _objectSpread({
    json: function json() {
      return USER_STATE;
    }
  }, USER_STATE);

  var MOCK_FETCH_SERVICE = Ember.Service.extend({
    request: function request(path, options) {
      var response = null;
      this.setProperties({
        path: path,
        options: options
      });

      if (path === '/itil/members/suggest?q=Agent') {
        response = MOCK_RESPONSE;
      } else if (path === '/itil/members/suggest?q=') {
        response = MOCK_RESPONSE;
      } else if (path === '/itil/members?page=1&per_page=30') {
        response = MOCK_RESPONSE;
      } else if (path === 'groups?filter=my_agent_groups') {
        response = MOCK_RESPONSE;
      } else if (path === 'workload/users/1/assignment-metrics') {
        response = {
          "total": "6",
          "unplanned": "3",
          "overdue": "4"
        };
      } else if (path === 'workload/settings') {
        response = {
          'workload_settings': {
            'allocation_levels': {
              'low_workload': {
                'inclusive': false,
                'percentage': 80
              },
              'high_workload': {
                'inclusive': true,
                'percentage': 100
              }
            }
          }
        };
      } else if (path.includes('workload/problems')) {
        return {
          "problems": [{
            "id": 23,
            "human_display_id": "PRB-6",
            "subject": "Change test",
            "status": 1,
            "priority": 1,
            "status_category": "delayed",
            "planned_start_date": "2022-05-02T00:15:00+05:30",
            "planned_end_date": "2022-05-11T00:30:00+05:30",
            "change_type": 1,
            "agent_id": 41,
            "is_editable": true
          }, {
            "id": 24,
            "human_display_id": "PRB-7",
            "subject": "Gannt",
            "status": 1,
            "priority": 1,
            "status_category": "open",
            "planned_start_date": "2022-04-06T00:30:00+05:30",
            "planned_end_date": "2022-05-24T00:15:00+05:30",
            "change_type": 1,
            "agent_id": 41,
            "is_editable": true
          }, {
            "id": 25,
            "human_display_id": "PRB-8",
            "subject": "Test for Gannt",
            "status": 2,
            "priority": 1,
            "status_category": "in_progress",
            "planned_start_date": "2022-05-09T00:30:00+05:30",
            "planned_end_date": "2022-05-31T00:00:00+05:30",
            "change_type": 1,
            "agent_id": 41,
            "is_editable": true
          }, {
            "id": 26,
            "human_display_id": "PRB-9",
            "subject": "Test for Done Gannt",
            "status": 2,
            "priority": 1,
            "status_category": "delayed",
            "planned_start_date": "2022-05-09T00:00:00+05:30",
            "planned_end_date": "2022-05-13T00:30:00+05:30",
            "change_type": 1,
            "agent_id": 41,
            "is_editable": true
          }, {
            "id": 27,
            "human_display_id": "PRB-10",
            "subject": "Test for Done Gannt - 2",
            "status": 2,
            "priority": 1,
            "status_category": "delayed",
            "planned_start_date": "2022-05-09T00:00:00+05:30",
            "planned_end_date": "2022-05-13T01:00:00+05:30",
            "change_type": 1,
            "agent_id": 41,
            "is_editable": true
          }, {
            "id": 28,
            "human_display_id": "PRB-11",
            "subject": "Test for Done Gannt - 3",
            "status": 3,
            "priority": 1,
            "status_category": "delayed",
            "planned_start_date": "2022-05-09T01:00:00+05:30",
            "planned_end_date": "2022-05-13T00:15:00+05:30",
            "change_type": 1,
            "agent_id": 41,
            "is_editable": true
          }],
          "meta": {
            "has_next": false,
            "offset": 7
          }
        };
      } else if (path.includes('workload/changes')) {
        return {
          "changes": [{
            "id": 23,
            "human_display_id": "CHN-6",
            "subject": "Change test",
            "status": 1,
            "priority": 1,
            "status_category": "delayed",
            "planned_start_date": "2022-05-02T00:15:00+05:30",
            "planned_end_date": "2022-05-11T00:30:00+05:30",
            "change_type": 1,
            "agent_id": 41,
            "is_editable": true
          }, {
            "id": 24,
            "human_display_id": "CHN-7",
            "subject": "Gannt",
            "status": 1,
            "priority": 1,
            "status_category": "open",
            "planned_start_date": "2022-04-06T00:30:00+05:30",
            "planned_end_date": "2022-05-24T00:15:00+05:30",
            "change_type": 1,
            "agent_id": 41,
            "is_editable": true
          }, {
            "id": 25,
            "human_display_id": "CHN-8",
            "subject": "Test for Gannt",
            "status": 2,
            "priority": 1,
            "status_category": "in_progress",
            "planned_start_date": "2022-05-09T00:30:00+05:30",
            "planned_end_date": "2022-05-31T00:00:00+05:30",
            "change_type": 1,
            "agent_id": 41,
            "is_editable": true
          }, {
            "id": 26,
            "human_display_id": "CHN-9",
            "subject": "Test for Done Gannt",
            "status": 2,
            "priority": 1,
            "status_category": "delayed",
            "planned_start_date": "2022-05-09T00:00:00+05:30",
            "planned_end_date": "2022-05-13T00:30:00+05:30",
            "change_type": 1,
            "agent_id": 41,
            "is_editable": true
          }, {
            "id": 27,
            "human_display_id": "CHN-10",
            "subject": "Test for Done Gannt - 2",
            "status": 2,
            "priority": 1,
            "status_category": "delayed",
            "planned_start_date": "2022-05-09T00:00:00+05:30",
            "planned_end_date": "2022-05-13T01:00:00+05:30",
            "change_type": 1,
            "agent_id": 41,
            "is_editable": true
          }, {
            "id": 28,
            "human_display_id": "CHN-11",
            "subject": "Test for Done Gannt - 3",
            "status": 3,
            "priority": 1,
            "status_category": "delayed",
            "planned_start_date": "2022-05-09T01:00:00+05:30",
            "planned_end_date": "2022-05-13T00:15:00+05:30",
            "change_type": 1,
            "agent_id": 41,
            "is_editable": true
          }],
          "meta": {
            "has_next": false,
            "offset": 7
          }
        };
      } else if (path.includes('workload/tickets')) {
        return {
          "tickets": [{
            "id": 23,
            "human_display_id": "INC-6",
            "subject": "Change test",
            "status": 1,
            "priority": 1,
            "status_category": "delayed",
            "planned_start_date": "2022-05-02T00:15:00+05:30",
            "planned_end_date": "2022-05-11T00:30:00+05:30",
            "change_type": 1,
            "agent_id": 41,
            "is_editable": true
          }, {
            "id": 24,
            "human_display_id": "INC-7",
            "subject": "Gannt",
            "status": 1,
            "priority": 1,
            "status_category": "open",
            "planned_start_date": "2022-04-06T00:30:00+05:30",
            "planned_end_date": "2022-05-24T00:15:00+05:30",
            "change_type": 1,
            "agent_id": 41,
            "is_editable": true
          }, {
            "id": 25,
            "human_display_id": "INC-8",
            "subject": "Test for Gannt",
            "status": 2,
            "priority": 1,
            "status_category": "in_progress",
            "planned_start_date": "2022-05-09T00:30:00+05:30",
            "planned_end_date": "2022-05-31T00:00:00+05:30",
            "change_type": 1,
            "agent_id": 41,
            "is_editable": true
          }, {
            "id": 26,
            "human_display_id": "INC-9",
            "subject": "Test for Done Gannt",
            "status": 2,
            "priority": 1,
            "status_category": "delayed",
            "planned_start_date": "2022-05-09T00:00:00+05:30",
            "planned_end_date": "2022-05-13T00:30:00+05:30",
            "change_type": 1,
            "agent_id": 41,
            "is_editable": true
          }, {
            "id": 27,
            "human_display_id": "INC-10",
            "subject": "Test for Done Gannt - 2",
            "status": 2,
            "priority": 1,
            "status_category": "delayed",
            "planned_start_date": "2022-05-09T00:00:00+05:30",
            "planned_end_date": "2022-05-13T01:00:00+05:30",
            "change_type": 1,
            "agent_id": 41,
            "is_editable": true
          }, {
            "id": 28,
            "human_display_id": "INC-11",
            "subject": "Test for Done Gannt - 3",
            "status": 3,
            "priority": 1,
            "status_category": "delayed",
            "planned_start_date": "2022-05-09T01:00:00+05:30",
            "planned_end_date": "2022-05-13T00:15:00+05:30",
            "change_type": 1,
            "agent_id": 41,
            "is_editable": true
          }],
          "meta": {
            "has_next": false,
            "offset": 7
          }
        };
      } else if (path.includes('workload/releases')) {
        return {
          "releases": [{
            "id": 23,
            "human_display_id": "REL-6",
            "subject": "Change test",
            "status": 1,
            "priority": 1,
            "status_category": "delayed",
            "planned_start_date": "2022-05-02T00:15:00+05:30",
            "planned_end_date": "2022-05-11T00:30:00+05:30",
            "change_type": 1,
            "agent_id": 41,
            "is_editable": true
          }, {
            "id": 24,
            "human_display_id": "REL-7",
            "subject": "Gannt",
            "status": 1,
            "priority": 1,
            "status_category": "open",
            "planned_start_date": "2022-04-06T00:30:00+05:30",
            "planned_end_date": "2022-05-24T00:15:00+05:30",
            "change_type": 1,
            "agent_id": 41,
            "is_editable": true
          }, {
            "id": 25,
            "human_display_id": "REL-8",
            "subject": "Test for Gannt",
            "status": 2,
            "priority": 1,
            "status_category": "in_progress",
            "planned_start_date": "2022-05-09T00:30:00+05:30",
            "planned_end_date": "2022-05-31T00:00:00+05:30",
            "change_type": 1,
            "agent_id": 41,
            "is_editable": true
          }, {
            "id": 26,
            "human_display_id": "REL-9",
            "subject": "Test for Done Gannt",
            "status": 2,
            "priority": 1,
            "status_category": "delayed",
            "planned_start_date": "2022-05-09T00:00:00+05:30",
            "planned_end_date": "2022-05-13T00:30:00+05:30",
            "change_type": 1,
            "agent_id": 41,
            "is_editable": true
          }, {
            "id": 27,
            "human_display_id": "REL-10",
            "subject": "Test for Done Gannt - 2",
            "status": 2,
            "priority": 1,
            "status_category": "delayed",
            "planned_start_date": "2022-05-09T00:00:00+05:30",
            "planned_end_date": "2022-05-13T01:00:00+05:30",
            "change_type": 1,
            "agent_id": 41,
            "is_editable": true
          }, {
            "id": 28,
            "human_display_id": "REL-11",
            "subject": "Test for Done Gannt - 3",
            "status": 3,
            "priority": 1,
            "status_category": "delayed",
            "planned_start_date": "2022-05-09T01:00:00+05:30",
            "planned_end_date": "2022-05-13T00:15:00+05:30",
            "change_type": 1,
            "agent_id": 41,
            "is_editable": true
          }],
          "meta": {
            "has_next": false,
            "offset": 7
          }
        };
      } else if (path.includes('workload/tasks')) {
        return {
          "tasks": [{
            "id": 23,
            "human_display_id": "TSK-6",
            "subject": "Change test",
            "status": 1,
            "priority": 1,
            "status_category": "delayed",
            "planned_start_date": "2022-05-02T00:15:00+05:30",
            "planned_end_date": "2022-05-11T00:30:00+05:30",
            "change_type": 1,
            "agent_id": 41,
            "is_editable": true
          }, {
            "id": 24,
            "human_display_id": "TSK-7",
            "subject": "Gannt",
            "status": 1,
            "priority": 1,
            "status_category": "open",
            "planned_start_date": "2022-04-06T00:30:00+05:30",
            "planned_end_date": "2022-05-24T00:15:00+05:30",
            "change_type": 1,
            "agent_id": 41,
            "is_editable": true
          }, {
            "id": 25,
            "human_display_id": "TSK-8",
            "subject": "Test for Gannt",
            "status": 2,
            "priority": 1,
            "status_category": "in_progress",
            "planned_start_date": "2022-05-09T00:30:00+05:30",
            "planned_end_date": "2022-05-31T00:00:00+05:30",
            "change_type": 1,
            "agent_id": 41,
            "is_editable": true
          }, {
            "id": 26,
            "human_display_id": "TSK-9",
            "subject": "Test for Done Gannt",
            "status": 2,
            "priority": 1,
            "status_category": "delayed",
            "planned_start_date": "2022-05-09T00:00:00+05:30",
            "planned_end_date": "2022-05-13T00:30:00+05:30",
            "change_type": 1,
            "agent_id": 41,
            "is_editable": true
          }, {
            "id": 27,
            "human_display_id": "TSK-10",
            "subject": "Test for Done Gannt - 2",
            "status": 2,
            "priority": 1,
            "status_category": "delayed",
            "planned_start_date": "2022-05-09T00:00:00+05:30",
            "planned_end_date": "2022-05-13T01:00:00+05:30",
            "change_type": 1,
            "agent_id": 41,
            "is_editable": true
          }, {
            "id": 28,
            "human_display_id": "TSK-11",
            "subject": "Test for Done Gannt - 3",
            "status": 3,
            "priority": 1,
            "status_category": "delayed",
            "planned_start_date": "2022-05-09T01:00:00+05:30",
            "planned_end_date": "2022-05-13T00:15:00+05:30",
            "change_type": 1,
            "agent_id": 41,
            "is_editable": true
          }],
          "meta": {
            "has_next": false,
            "offset": 7
          }
        };
      } else if (path.includes('workload/project-tasks')) {
        return {
          "issues": [{
            "id": 23,
            "human_display_id": "TSK-6",
            "subject": "Change test",
            "status": 1,
            "priority": 1,
            "status_category": "delayed",
            "planned_start_date": "2022-05-02T00:15:00+05:30",
            "planned_end_date": "2022-05-11T00:30:00+05:30",
            "change_type": 1,
            "agent_id": 41,
            "is_editable": true
          }, {
            "id": 24,
            "human_display_id": "TSK-7",
            "subject": "Gannt",
            "status": 1,
            "priority": 1,
            "status_category": "open",
            "planned_start_date": "2022-04-06T00:30:00+05:30",
            "planned_end_date": "2022-05-24T00:15:00+05:30",
            "change_type": 1,
            "agent_id": 41,
            "is_editable": true
          }, {
            "id": 25,
            "human_display_id": "TSK-8",
            "subject": "Test for Gannt",
            "status": 2,
            "priority": 1,
            "status_category": "in_progress",
            "planned_start_date": "2022-05-09T00:30:00+05:30",
            "planned_end_date": "2022-05-31T00:00:00+05:30",
            "change_type": 1,
            "agent_id": 41,
            "is_editable": true
          }, {
            "id": 26,
            "human_display_id": "TSK-9",
            "subject": "Test for Done Gannt",
            "status": 2,
            "priority": 1,
            "status_category": "delayed",
            "planned_start_date": "2022-05-09T00:00:00+05:30",
            "planned_end_date": "2022-05-13T00:30:00+05:30",
            "change_type": 1,
            "agent_id": 41,
            "is_editable": true
          }, {
            "id": 27,
            "human_display_id": "TSK-10",
            "subject": "Test for Done Gannt - 2",
            "status": 2,
            "priority": 1,
            "status_category": "delayed",
            "planned_start_date": "2022-05-09T00:00:00+05:30",
            "planned_end_date": "2022-05-13T01:00:00+05:30",
            "change_type": 1,
            "agent_id": 41,
            "is_editable": true
          }, {
            "id": 28,
            "human_display_id": "TSK-11",
            "subject": "Test for Done Gannt - 3",
            "status": 3,
            "priority": 1,
            "status_category": "delayed",
            "planned_start_date": "2022-05-09T01:00:00+05:30",
            "planned_end_date": "2022-05-13T00:15:00+05:30",
            "change_type": 1,
            "agent_id": 41,
            "is_editable": true
          }],
          "meta": {
            "has_next": false,
            "offset": 7
          }
        };
      } else if (path.includes('workload/allocations?period=')) {
        response = {
          "user_allocations": [{
            "user_id": 41,
            "allocations": [{
              "allocation_minutes": 0,
              "item_count": 1,
              "allocation_percentage": 0,
              "allocation_status": null,
              "date": "2022-04-06"
            }]
          }]
        };
      }

      return Ember.RSVP.resolve(response);
    },
    json: function json() {
      return [];
    },
    host: _environment.default.environment === 'development' ? "".concat(_environment.default.APP.hostURL, "/api/_/") : '/api/_/'
  });

  var emtpyFunction = function emtpyFunction() {};

  (0, _qunit.module)('Integration | Component | module-workloads/capacity-view', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              (0, _stubCurrentAccount.stubCurrentAccount)({
                features: ['fr_project', 'itil_modules']
              });
              (0, _stubCurrentUser.stubCurrentUser)({
                privileges: ['view_changes', 'view_problems', 'view_releases', 'manage_tickets', 'view_projects']
              });
              this.intl = this.owner.lookup("service:intl");
              this.owner.register('service:fetch', MOCK_FETCH_SERVICE);
              this.owner.register('service:module-fields', MockService1);
              _context2.next = 7;
              return emberAutoImportDynamic("dhtmlx-scheduler");

            case 7:
              window.scheduler.plugins({
                timeline: true,
                treetimeline: true,
                quick_info: true
              });
              this.set('resetFilter', emtpyFunction);
              this.set('effortView', 'hour');
              this.set('currentView', 'week');
              this.set('selectedEntities', []);
              this.model = _objectSpread(_objectSpread({}, _workload.ALLOCATION_MATRIX_DEFAULT_QUERY_PARAMS), {}, {
                entity_filters: 'problem,change,ticket,release,task,project_task',
                date: '2022-04-24,2022-04-12'
              });
              this.set('onChangeView', emtpyFunction);
              this.set('todayClicked', emtpyFunction);
              this.set('prevClicked', emtpyFunction);
              this.set('nextClicked', emtpyFunction);
              this.set('currentView', 'people-view');

            case 18:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    })));
    (0, _qunit.test)('it should render the header', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::CapacityView @currentView={{this.currentView}} @model={{this.model}}
                  @resetFilter={{this.resetFilter}}></ModuleWorkloads::CapacityView>
                */
                {
                  id: "ZUYw2mub",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/capacity-view\",[],[[\"@currentView\",\"@model\",\"@resetFilter\"],[[23,0,[\"currentView\"]],[23,0,[\"model\"]],[23,0,[\"resetFilter\"]]]],{\"statements\":[],\"parameters\":[]}]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.ok(true);

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-workloads/cell-assignment-slider/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/stub-current-account", "freshservice/tests/lib/set-locale-timezone-moment"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _stubCurrentUser, _stubCurrentAccount, _setLocaleTimezoneMoment) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-workloads/cell-assignment-slider', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _setLocaleTimezoneMoment.setLocaleAndTimeZoneForMoment)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      (0, _stubCurrentAccount.stubCurrentAccount)({
        features: ['fr_project', 'itil_modules']
      });
      (0, _stubCurrentUser.stubCurrentUser)({
        privileges: ['view_changes', 'view_problems', 'view_releases', 'manage_tickets', 'view_projects']
      });
      this.server.loadFixtures('users');
    });
    (0, _qunit.test)('it renders', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var currentUserService, momentService, cellDate, ele;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                currentUserService = this.owner.lookup('service:current-user');
                momentService = this.owner.lookup('service:moment');
                cellDate = momentService.moment();
                this.setProperties({
                  entityFilters: 'release',
                  cellSelectedUserId: currentUserService.userId,
                  showCellLevelSlider: true,
                  cellClickData: {
                    workItemDate: cellDate.format('D MMMM YYYY'),
                    period: "".concat(cellDate.startOf('day').toISOString(), ",").concat(cellDate.clone().endOf('day').toISOString()),
                    cellData: ['50%'],
                    effortType: 'percent',
                    sliderStatus: {
                      objClass: "under",
                      status: 3
                    }
                  }
                });
                _context.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                     <ModuleWorkloads::CellAssignmentSlider
                			@entityFilters = {{this.entityFilters}}
                			@userId = {{this.cellSelectedUserId}}
                			@isSliderOpen = {{this.showCellLevelSlider}}
                			@cellClickData={{this.cellClickData}}
                		/>
                */
                {
                  id: "oihwCWjD",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n     \"],[5,\"module-workloads/cell-assignment-slider\",[],[[\"@entityFilters\",\"@userId\",\"@isSliderOpen\",\"@cellClickData\"],[[23,0,[\"entityFilters\"]],[23,0,[\"cellSelectedUserId\"]],[23,0,[\"showCellLevelSlider\"]],[23,0,[\"cellClickData\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                ele = this.element.querySelector('[data-test-id="wlm-mas-overview-allocation-status"]');
                assert.equal(ele.textContent.trim(), "Low workload");

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-workloads/header/component-test", ["freshservice/config/environment", "qunit", "@ember/test-helpers", "freshservice/tests/lib/intl", "ember-qunit", "freshservice/constants/workload", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/stub-current-account"], function (_environment, _qunit, _testHelpers, _intl, _emberQunit, _workload, _stubCurrentUser, _stubCurrentAccount) {
  "use strict";

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var emptyFunction = function emptyFunction() {};

  var MOCK_FETCH_SERVICE = Ember.Service.extend({
    request: function request(path, options) {
      var response = null;
      this.setProperties({
        path: path,
        options: options
      });

      if (path === 'workload/settings') {
        response = {
          'workload_settings': {
            'allocation_levels': {
              'low_workload': {
                'inclusive': false,
                'percentage': 80
              },
              'high_workload': {
                'inclusive': true,
                'percentage': 100
              }
            }
          }
        };
      }

      return Ember.RSVP.resolve(response);
    },
    json: function json() {
      return [];
    },
    host: _environment.default.environment === 'development' ? "".concat(_environment.default.APP.hostURL, "/api/_/") : '/api/_/'
  });
  (0, _qunit.module)('Integration | Component | module-workloads/header', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              (0, _stubCurrentAccount.stubCurrentAccount)({
                features: ['fr_project', 'itil_modules']
              });
              (0, _stubCurrentUser.stubCurrentUser)({
                privileges: ['view_changes', 'view_problems', 'view_releases', 'manage_tickets', 'view_projects']
              });
              this.router = this.owner.lookup('router:main');
              this.owner.register('service:fetch', MOCK_FETCH_SERVICE);
              this.router.currentRoute = {
                queryParams: _objectSpread(_objectSpread({}, _workload.ALLOCATION_MATRIX_DEFAULT_QUERY_PARAMS), {}, {
                  entity_filters: 'problem,change,issue,task'
                })
              };
              this.model = _objectSpread(_objectSpread({}, _workload.ALLOCATION_MATRIX_DEFAULT_QUERY_PARAMS), {}, {
                entity_filters: 'problem,change,ticket,release,task,project_task'
              });
              this.router.setupRouter();
              this.onTodayClick = emptyFunction;
              this.onPrevClick = emptyFunction;
              this.onNextClick = emptyFunction;
              this.onChangeView = emptyFunction;
              this.applyEntity = emptyFunction;
              this.selectedHeaderEntities = Ember.A();

              this.toggleUnassignedSlider = function () {};

              this.resetFilter = emptyFunction;
              this.changeSummaryView = emptyFunction;

            case 16:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('it should render the effort-switcher in header', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::Header @model={{this.model}} @onTodayClick={{this.onTodayClick}} @toggleUnassignedSlider={{this.toggleUnassignedSlider}} @toggleTimeline={{this.onPrevClick}}
                		@changeEffortView={{this.onChangeView}} @applyEntity={{this.applyEntity}}
                		@selectedHeaderEntities={{this.selectedHeaderEntities}} />
                */
                {
                  id: "buje8t7V",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/header\",[],[[\"@model\",\"@onTodayClick\",\"@toggleUnassignedSlider\",\"@toggleTimeline\",\"@changeEffortView\",\"@applyEntity\",\"@selectedHeaderEntities\"],[[23,0,[\"model\"]],[23,0,[\"onTodayClick\"]],[23,0,[\"toggleUnassignedSlider\"]],[23,0,[\"onPrevClick\"]],[23,0,[\"onChangeView\"]],[23,0,[\"applyEntity\"]],[23,0,[\"selectedHeaderEntities\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.dom('[data-test-id="wlm-capacity-header-effort-switcher"]').exists();

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render the legend-info in header', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var entityBtn;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                Ember.set(this, 'router.currentRoute.queryParams.entity_filters', 'change,issue,problem,release,task,ticket');
                _context3.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::Header @toggleUnassignedSlider={{this.toggleUnassignedSlider}} @model={{this.model}} @onTodayClick={{this.onTodayClick}} @toggleTimeline={{this.onPrevClick}} @changeEffortView={{this.onChangeView}} @applyEntity={{this.applyEntity}}
                		@selectedHeaderEntities={{this.selectedHeaderEntities}} />
                */
                {
                  id: "hSrPPjM0",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/header\",[],[[\"@toggleUnassignedSlider\",\"@model\",\"@onTodayClick\",\"@toggleTimeline\",\"@changeEffortView\",\"@applyEntity\",\"@selectedHeaderEntities\"],[[23,0,[\"toggleUnassignedSlider\"]],[23,0,[\"model\"]],[23,0,[\"onTodayClick\"]],[23,0,[\"onPrevClick\"]],[23,0,[\"onChangeView\"]],[23,0,[\"applyEntity\"]],[23,0,[\"selectedHeaderEntities\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.dom('[data-test-id="wlm-capacity-header-legend-info"]').exists();
                entityBtn = this.element.querySelectorAll('.ember-basic-dropdown-trigger')[2];
                _context3.next = 7;
                return (0, _testHelpers.click)(entityBtn);

              case 7:
                _context3.next = 9;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-entity-filter-apply"]');

              case 9:
                _context3.next = 11;
                return (0, _testHelpers.click)(entityBtn);

              case 11:
                _context3.next = 13;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-entity-filter-cancel"]');

              case 13:
                _context3.next = 15;
                return (0, _testHelpers.click)(entityBtn);

              case 15:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render the entity-fitler in header', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::Header @model={{this.model}} @onTodayClick={{this.onTodayClick}} @toggleUnassignedSlider={{this.toggleUnassignedSlider}} @toggleTimeline={{this.onPrevClick}} @changeEffortView={{this.onChangeView}} @applyEntity={{this.applyEntity}}
                		@selectedHeaderEntities={{this.selectedHeaderEntities}} />
                */
                {
                  id: "buje8t7V",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/header\",[],[[\"@model\",\"@onTodayClick\",\"@toggleUnassignedSlider\",\"@toggleTimeline\",\"@changeEffortView\",\"@applyEntity\",\"@selectedHeaderEntities\"],[[23,0,[\"model\"]],[23,0,[\"onTodayClick\"]],[23,0,[\"toggleUnassignedSlider\"]],[23,0,[\"onPrevClick\"]],[23,0,[\"onChangeView\"]],[23,0,[\"applyEntity\"]],[23,0,[\"selectedHeaderEntities\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.dom('[data-test-id="wlm-capacity-header-entity-filter"]').exists();

              case 3:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render the today option in header', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::Header @model={{this.model}} @onTodayClick={{this.onTodayClick}} @toggleUnassignedSlider={{this.toggleUnassignedSlider}} @toggleTimeline={{this.onPrevClick}} @changeEffortView={{this.onChangeView}} @applyEntity={{this.applyEntity}}
                		@selectedHeaderEntities={{this.selectedHeaderEntities}} />
                */
                {
                  id: "buje8t7V",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/header\",[],[[\"@model\",\"@onTodayClick\",\"@toggleUnassignedSlider\",\"@toggleTimeline\",\"@changeEffortView\",\"@applyEntity\",\"@selectedHeaderEntities\"],[[23,0,[\"model\"]],[23,0,[\"onTodayClick\"]],[23,0,[\"toggleUnassignedSlider\"]],[23,0,[\"onPrevClick\"]],[23,0,[\"onChangeView\"]],[23,0,[\"applyEntity\"]],[23,0,[\"selectedHeaderEntities\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.dom('[data-test-id="wlm-capacity-header-today"]').exists();

              case 3:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render the unassigned option in header', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::Header @model={{this.model}} @onTodayClick={{this.onTodayClick}} @toggleUnassignedSlider={{this.toggleUnassignedSlider}} @toggleTimeline={{this.onPrevClick}} @changeEffortView={{this.onChangeView}} @applyEntity={{this.applyEntity}}
                		@selectedHeaderEntities={{this.selectedHeaderEntities}} />
                */
                {
                  id: "buje8t7V",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/header\",[],[[\"@model\",\"@onTodayClick\",\"@toggleUnassignedSlider\",\"@toggleTimeline\",\"@changeEffortView\",\"@applyEntity\",\"@selectedHeaderEntities\"],[[23,0,[\"model\"]],[23,0,[\"onTodayClick\"]],[23,0,[\"toggleUnassignedSlider\"]],[23,0,[\"onPrevClick\"]],[23,0,[\"onChangeView\"]],[23,0,[\"applyEntity\"]],[23,0,[\"selectedHeaderEntities\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.dom('[data-test-id="wlm-capacity-header-unassigned"]').exists();

              case 3:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should able to switch the effort dropdown', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var triggerEle;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::Header @model={{this.model}} @onTodayClick={{this.onTodayClick}} @toggleUnassignedSlider={{this.toggleUnassignedSlider}} @toggleTimeline={{this.onPrevClick}} @changeEffortView={{this.onChangeView}} @applyEntity={{this.applyEntity}}
                		@selectedHeaderEntities={{this.selectedHeaderEntities}} @changeSummaryView={{this.changeSummaryView}} @resetFilter={{this.resetFilter}} />
                */
                {
                  id: "Dtucw6Ix",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/header\",[],[[\"@model\",\"@onTodayClick\",\"@toggleUnassignedSlider\",\"@toggleTimeline\",\"@changeEffortView\",\"@applyEntity\",\"@selectedHeaderEntities\",\"@changeSummaryView\",\"@resetFilter\"],[[23,0,[\"model\"]],[23,0,[\"onTodayClick\"]],[23,0,[\"toggleUnassignedSlider\"]],[23,0,[\"onPrevClick\"]],[23,0,[\"onChangeView\"]],[23,0,[\"applyEntity\"]],[23,0,[\"selectedHeaderEntities\"]],[23,0,[\"changeSummaryView\"]],[23,0,[\"resetFilter\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context7.next = 4;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-header-effort-switcher-trigger"]');

              case 4:
                _context7.next = 6;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-header-effort-option-item_assigned"]');

              case 6:
                triggerEle = this.element.querySelector('[data-test-id="wlm-capacity-header-effort-switcher-trigger"]');
                assert.equal(triggerEle.textContent.trim(), 'Workload count');

              case 8:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x6) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it triggers indeterminate', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var entityBtn;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                Ember.set(this, 'router.currentRoute.queryParams.entity_filters', 'issue,problem,release,task,ticket');
                _context8.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::Header @toggleUnassignedSlider={{this.toggleUnassignedSlider}} @model={{this.model}} @onTodayClick={{this.onTodayClick}} @toggleTimeline={{this.onPrevClick}} @changeEffortView={{this.onChangeView}} @applyEntity={{this.applyEntity}}
                		@selectedHeaderEntities={{this.selectedHeaderEntities}} @resetFilter={{this.resetFilter}} />
                */
                {
                  id: "mFk/4MGH",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/header\",[],[[\"@toggleUnassignedSlider\",\"@model\",\"@onTodayClick\",\"@toggleTimeline\",\"@changeEffortView\",\"@applyEntity\",\"@selectedHeaderEntities\",\"@resetFilter\"],[[23,0,[\"toggleUnassignedSlider\"]],[23,0,[\"model\"]],[23,0,[\"onTodayClick\"]],[23,0,[\"onPrevClick\"]],[23,0,[\"onChangeView\"]],[23,0,[\"applyEntity\"]],[23,0,[\"selectedHeaderEntities\"]],[23,0,[\"resetFilter\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                entityBtn = this.element.querySelectorAll('.ember-basic-dropdown-trigger')[2];
                _context8.next = 6;
                return (0, _testHelpers.click)(entityBtn);

              case 6:
                assert.ok(true);

              case 7:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x7) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it triggers effort view', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        var effortViewBtn;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                Ember.set(this, 'router.currentRoute.queryParams.entity_filters', 'issue,problem,release,task,ticket');
                _context9.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::Header @toggleUnassignedSlider={{this.toggleUnassignedSlider}} @model={{this.model}} @onTodayClick={{this.onTodayClick}} @changeSummaryView={{this.changeSummaryView}} @toggleTimeline={{this.onPrevClick}}
                		@changeEffortView={{this.onChangeView}} @applyEntity={{this.applyEntity}}
                		@selectedHeaderEntities={{this.selectedHeaderEntities}} @resetFilter={{this.resetFilter}} />
                */
                {
                  id: "NbKG40Nv",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/header\",[],[[\"@toggleUnassignedSlider\",\"@model\",\"@onTodayClick\",\"@changeSummaryView\",\"@toggleTimeline\",\"@changeEffortView\",\"@applyEntity\",\"@selectedHeaderEntities\",\"@resetFilter\"],[[23,0,[\"toggleUnassignedSlider\"]],[23,0,[\"model\"]],[23,0,[\"onTodayClick\"]],[23,0,[\"changeSummaryView\"]],[23,0,[\"onPrevClick\"]],[23,0,[\"onChangeView\"]],[23,0,[\"applyEntity\"]],[23,0,[\"selectedHeaderEntities\"]],[23,0,[\"resetFilter\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                effortViewBtn = this.element.querySelectorAll('.ember-basic-dropdown-trigger')[0];
                _context9.next = 6;
                return (0, _testHelpers.click)(effortViewBtn);

              case 6:
                _context9.next = 8;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-header-effort-option-item_assigned"]');

              case 8:
                assert.ok(true);

              case 9:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x8) {
        return _ref10.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-workloads/header/effort-switcher/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl"], function (_qunit, _emberQunit, _testHelpers, _intl) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-workloads/header/effort-switcher', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      this.set('setEffortView', function () {});
    });
    (0, _qunit.test)('it should render the effort switcher dropdown', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::Header::EffortSwitcher />
                */
                {
                  id: "1dy8+T7Q",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/header/effort-switcher\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.dom('[data-test-id="wlm-capacity-header-effort-switcher-trigger"]').exists();

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render default to hour effort', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var triggerEle;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::Header::EffortSwitcher @effortView="hour" />
                */
                {
                  id: "GcMR2Hu+",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/header/effort-switcher\",[],[[\"@effortView\"],[\"hour\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                triggerEle = this.element.querySelector('[data-test-id="wlm-capacity-header-effort-switcher-trigger"]');
                assert.equal(triggerEle.textContent.trim(), 'Workload hours');

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render as given currentView', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var triggerEle;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::Header::EffortSwitcher @effortView ='percent'/>
                */
                {
                  id: "gR9RL3H6",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/header/effort-switcher\",[],[[\"@effortView\"],[\"percent\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                triggerEle = this.element.querySelector('[data-test-id="wlm-capacity-header-effort-switcher-trigger"]');
                assert.equal(triggerEle.textContent.trim(), 'Workload hours as %');

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should all the available view in the dropdown', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::Header::EffortSwitcher/>
                */
                {
                  id: "1dy8+T7Q",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/header/effort-switcher\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context4.next = 4;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-header-effort-switcher-trigger"]');

              case 4:
                assert.dom('[data-test-id="wlm-capacity-header-effort-option-hour"]').exists();
                assert.dom('[data-test-id="wlm-capacity-header-effort-option-percent"]').exists();
                assert.dom('[data-test-id="wlm-capacity-header-effort-option-item_assigned"]').exists();

              case 7:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should call the changeEffortView with percent selection', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var _this = this;

        var triggerEle;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                this.set('currentEffort', 'hour');
                this.set('changeEffort', function (value) {
                  assert.equal(value, 'percent');

                  _this.set('currentEffort', value);
                });
                _context5.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::Header::EffortSwitcher @setEffortView={{this.setEffortView}}  @effortView ="hour" @changeEffortView={{this.changeEffort}}/>
                */
                {
                  id: "PZuxPqoi",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/header/effort-switcher\",[],[[\"@setEffortView\",\"@effortView\",\"@changeEffortView\"],[[23,0,[\"setEffortView\"]],\"hour\",[23,0,[\"changeEffort\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                triggerEle = this.element.querySelector('[data-test-id="wlm-capacity-header-effort-switcher-trigger"]');
                assert.equal(triggerEle.textContent.trim(), 'Workload hours');
                _context5.next = 8;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-header-effort-switcher-trigger"]');

              case 8:
                _context5.next = 10;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-header-effort-option-percent"]');

              case 10:
                triggerEle = this.element.querySelector('[data-test-id="wlm-capacity-header-effort-switcher-trigger"]');
                assert.ok(true);

              case 12:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should call the changeEffortView with item_assigned selection', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                this.set('currentEffort', 'hour');
                this.set('changeEffort', function (value) {
                  assert.equal(value, 'item_assigned');

                  _this2.set('currentEffort', value);
                });
                _context6.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::Header::EffortSwitcher @currentView = {{this.currentEffort}} @setEffortView={{this.setEffortView}} @changeEffortView={{this.changeEffort}}/>
                */
                {
                  id: "ersu4SWx",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/header/effort-switcher\",[],[[\"@currentView\",\"@setEffortView\",\"@changeEffortView\"],[[23,0,[\"currentEffort\"]],[23,0,[\"setEffortView\"]],[23,0,[\"changeEffort\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context6.next = 6;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-header-effort-switcher-trigger"]');

              case 6:
                _context6.next = 8;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-header-effort-option-item_assigned"]');

              case 8:
                assert.ok(true);

              case 9:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x6) {
        return _ref7.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-workloads/header/entity-type-filter/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/stub-current-account"], function (_qunit, _emberQunit, _testHelpers, _intl, _stubCurrentUser, _stubCurrentAccount) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-workloads/header/entity-type-filter', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      (0, _stubCurrentAccount.stubCurrentAccount)({
        features: ['fr_project', 'itil_modules']
      });
      (0, _stubCurrentUser.stubCurrentUser)({
        privileges: ['view_changes', 'view_problems', 'view_releases', 'manage_tickets', 'view_projects']
      });
      this.set('onEntityTypeFilter', function () {});
      this.entity_filters = 'problem,change,ticket,release,task,project_task';
    });
    (0, _qunit.test)('it should render the entity filter dropdown', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var entityBtn, ticketCheckBox, allCheckBox, selectAllCheckBox, ticketAllCheckBox, uncheckedBox, allUnselectCheckBox;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::Header::EntityTypeFilter @entity_filters={{this.entity_filters}} @doFilter={{this.onEntityTypeFilter}} />
                */
                {
                  id: "m1BZvWeS",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/header/entity-type-filter\",[],[[\"@entity_filters\",\"@doFilter\"],[[23,0,[\"entity_filters\"]],[23,0,[\"onEntityTypeFilter\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                entityBtn = this.element.querySelector('.ember-basic-dropdown-trigger');
                _context.next = 5;
                return (0, _testHelpers.click)(entityBtn);

              case 5:
                ticketCheckBox = this.element.querySelector('#wlm-entity-type-choices-ticket');
                _context.next = 8;
                return (0, _testHelpers.click)(ticketCheckBox);

              case 8:
                allCheckBox = this.element.querySelector('#wlm-entity-type-all');
                _context.next = 11;
                return (0, _testHelpers.click)(allCheckBox);

              case 11:
                selectAllCheckBox = this.element.querySelector('#wlm-entity-type-all');
                _context.next = 14;
                return (0, _testHelpers.click)(selectAllCheckBox);

              case 14:
                ticketAllCheckBox = this.element.querySelector('#wlm-entity-type-choices-ticket');
                _context.next = 17;
                return (0, _testHelpers.click)(ticketAllCheckBox);

              case 17:
                uncheckedBox = this.element.querySelector('#wlm-entity-type-choices-ticket');
                _context.next = 20;
                return (0, _testHelpers.click)(uncheckedBox);

              case 20:
                allUnselectCheckBox = this.element.querySelector('#wlm-entity-type-all');
                _context.next = 23;
                return (0, _testHelpers.click)(allUnselectCheckBox);

              case 23:
                _context.next = 25;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::Header::EntityTypeFilter @entity_filters="problem" @doFilter={{this.onEntityTypeFilter}} />
                */
                {
                  id: "PtbASc2T",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/header/entity-type-filter\",[],[[\"@entity_filters\",\"@doFilter\"],[\"problem\",[23,0,[\"onEntityTypeFilter\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 25:
                assert.dom('[data-test-id="wlm-capacity-header-entity-filter-dd-trigger"]').exists();

              case 26:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-workloads/header/legend-info/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl"], function (_qunit, _emberQunit, _testHelpers, _intl) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-workloads/header/legend-info', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      var settings = {
        "low_workload": {
          "inclusive": "false",
          "percentage": 80
        },
        "high_workload": {
          "inclusive": "true",
          "percentage": 100
        }
      };
      this.set('settings', settings);
    });
    (0, _qunit.test)('it should render the legend-info dropdown', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::Header::LegendInfo
                			@settings = {{this.settings}}/>
                */
                {
                  id: "zwFIsVx6",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/header/legend-info\",[],[[\"@settings\"],[[23,0,[\"settings\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.dom('[data-test-id="wlm-capacity-header-legend-info-dd-trigger"]').exists();

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render threshold info in the dropdown', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::Header::LegendInfo
                			@settings = {{this.settings}}/>
                */
                {
                  id: "zwFIsVx6",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/header/legend-info\",[],[[\"@settings\"],[[23,0,[\"settings\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context2.next = 4;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-header-legend-info-dd-trigger"]');

              case 4:
                assert.dom('[data-test-id="wlm-legend-info-threshold-under"]').exists();
                assert.dom('[data-test-id="wlm-legend-info-threshold-optimally"]').exists();
                assert.dom('[data-test-id="wlm-legend-info-threshold-over"]').exists();
                assert.dom('[data-test-id="wlm-legend-info-threshold-not"]').exists();

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render low workload threshhold in dropdown', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var infoElem, label;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::Header::LegendInfo
                      @settings = {{this.settings}}/>
                */
                {
                  id: "zwFIsVx6",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/header/legend-info\",[],[[\"@settings\"],[[23,0,[\"settings\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context3.next = 4;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-header-legend-info-dd-trigger"]');

              case 4:
                infoElem = this.element.querySelector('[data-test-id="wlm-legend-info-threshold-under"]');
                label = infoElem.querySelector('.wlm-legend-label').textContent.trim();
                assert.equal(label, 'Low workload');

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render optimally workload threshhold in dropdown', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var infoElem, label;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::Header::LegendInfo
                      @settings = {{this.settings}}/>
                */
                {
                  id: "zwFIsVx6",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/header/legend-info\",[],[[\"@settings\"],[[23,0,[\"settings\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context4.next = 4;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-header-legend-info-dd-trigger"]');

              case 4:
                infoElem = this.element.querySelector('[data-test-id="wlm-legend-info-threshold-optimally"]');
                label = infoElem.querySelector('.wlm-legend-label').textContent.trim();
                assert.equal(label, 'Optimal workload');

              case 7:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render over allocated threshhold in dropdown', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var infoElem, label;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::Header::LegendInfo
                			@settings = {{this.settings}}/>
                */
                {
                  id: "zwFIsVx6",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/header/legend-info\",[],[[\"@settings\"],[[23,0,[\"settings\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context5.next = 4;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-header-legend-info-dd-trigger"]');

              case 4:
                infoElem = this.element.querySelector('[data-test-id="wlm-legend-info-threshold-over"]');
                label = infoElem.querySelector('.wlm-legend-label').textContent.trim();
                assert.equal(label, 'High workload');

              case 7:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render not allocated threshhold in dropdown', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var infoElem, label, threshholdValue;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::Header::LegendInfo
                			@settings = {{this.settings}}/>
                */
                {
                  id: "zwFIsVx6",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/header/legend-info\",[],[[\"@settings\"],[[23,0,[\"settings\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context6.next = 4;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-header-legend-info-dd-trigger"]');

              case 4:
                infoElem = this.element.querySelector('[data-test-id="wlm-legend-info-threshold-not"]');
                label = infoElem.querySelector('.wlm-legend-label').textContent.trim();
                assert.equal(label, 'Workload hours not added');
                threshholdValue = infoElem.querySelector('.wlm-legend-threshold').textContent.trim();
                assert.equal(threshholdValue, '(=0%)');

              case 9:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x6) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render status-category info in the dropdown', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::Header::LegendInfo
                			@settings = {{this.settings}}/>
                */
                {
                  id: "zwFIsVx6",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/header/legend-info\",[],[[\"@settings\"],[[23,0,[\"settings\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context7.next = 4;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-header-legend-info-dd-trigger"]');

              case 4:
                assert.dom('[data-test-id="wlm-legend-info-status-open"]').exists();
                assert.dom('[data-test-id="wlm-legend-info-status-in_progress"]').exists();
                assert.dom('[data-test-id="wlm-legend-info-status-done"]').exists();
                assert.dom('[data-test-id="wlm-legend-info-status-delayed"]').exists();

              case 8:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      return function (_x7) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render open status legend info in dropdown', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var infoElem, label;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::Header::LegendInfo
                			@settings = {{this.settings}}/>
                */
                {
                  id: "zwFIsVx6",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/header/legend-info\",[],[[\"@settings\"],[[23,0,[\"settings\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context8.next = 4;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-header-legend-info-dd-trigger"]');

              case 4:
                infoElem = this.element.querySelector('[data-test-id="wlm-legend-info-status-open"]');
                label = infoElem.querySelector('.wlm-legend-label').textContent.trim();
                assert.equal(label, 'Open');

              case 7:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x8) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render in progress status legend info in dropdown', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        var infoElem, label;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::Header::LegendInfo
                			@settings = {{this.settings}}/>
                */
                {
                  id: "zwFIsVx6",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/header/legend-info\",[],[[\"@settings\"],[[23,0,[\"settings\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context9.next = 4;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-header-legend-info-dd-trigger"]');

              case 4:
                infoElem = this.element.querySelector('[data-test-id="wlm-legend-info-status-in_progress"]');
                label = infoElem.querySelector('.wlm-legend-label').textContent.trim();
                assert.equal(label, 'In progress');

              case 7:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x9) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render done status legend info in dropdown', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var infoElem, label;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::Header::LegendInfo
                			@settings = {{this.settings}}/>
                */
                {
                  id: "zwFIsVx6",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/header/legend-info\",[],[[\"@settings\"],[[23,0,[\"settings\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context10.next = 4;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-header-legend-info-dd-trigger"]');

              case 4:
                infoElem = this.element.querySelector('[data-test-id="wlm-legend-info-status-done"]');
                label = infoElem.querySelector('.wlm-legend-label').textContent.trim();
                assert.equal(label, 'Done');

              case 7:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x10) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render done status legend info in dropdown', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        var infoElem, label;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _context11.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::Header::LegendInfo
                			@settings = {{this.settings}}/>
                */
                {
                  id: "zwFIsVx6",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/header/legend-info\",[],[[\"@settings\"],[[23,0,[\"settings\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context11.next = 4;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-header-legend-info-dd-trigger"]');

              case 4:
                infoElem = this.element.querySelector('[data-test-id="wlm-legend-info-status-delayed"]');
                label = infoElem.querySelector('.wlm-legend-label').textContent.trim();
                assert.equal(label, 'Delayed');

              case 7:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x11) {
        return _ref12.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-workloads/manage-assignment-slider/assignment-overview/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _intl) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-workloads/manage-assignment-slider/assignment-overview', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      this.server.loadFixtures('users');
    });
    (0, _qunit.test)('it should render the component', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider::AssignmentOverview @userId="12"/>
                */
                {
                  id: "i7mzhukc",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider/assignment-overview\",[],[[\"@userId\"],[\"12\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.dom('[data-test-id="wlm-mas-overview"]').exists();

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render info of type of work item listed', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var ele;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider::AssignmentOverview @userId="12"/>
                */
                {
                  id: "i7mzhukc",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider/assignment-overview\",[],[[\"@userId\"],[\"12\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                ele = this.element.querySelector('[data-test-id="wlm-mas-overview-hint"]');
                assert.equal(ele.textContent.trim(), 'Manage open and in progress work');

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render whos assignment', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var ele;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this.set('selectedUser', {
                  name: 'sam'
                });
                _context3.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider::AssignmentOverview @selectedUser={{this.selectedUser}} @userId="12"/>
                */
                {
                  id: "mM5tSZnd",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider/assignment-overview\",[],[[\"@selectedUser\",\"@userId\"],[[23,0,[\"selectedUser\"]],\"12\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                ele = this.element.querySelector('[data-test-id="wlm-mas-overview-who"]');
                assert.equal(ele.textContent.trim(), "sam's work");

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render user assignment meta', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var totalAssignmentEle, unplannedAssignmentEle, overdueAssignmentEle;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider::AssignmentOverview @userId="12"/>
                */
                {
                  id: "i7mzhukc",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider/assignment-overview\",[],[[\"@userId\"],[\"12\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                totalAssignmentEle = this.element.querySelector('[data-test-id="wlm-mas-overview-meta-total"]');
                assert.equal(totalAssignmentEle.textContent.trim(), "40 in total", 'Show total assignment');
                unplannedAssignmentEle = this.element.querySelector('[data-test-id="wlm-mas-overview-meta-unplanned"]');
                assert.equal(unplannedAssignmentEle.textContent.trim(), "10 Unplanned", 'Show unplanned assignment');
                overdueAssignmentEle = this.element.querySelector('[data-test-id="wlm-mas-overview-meta-overdue"]');
                assert.equal(overdueAssignmentEle.textContent.trim(), "10 Delayed", 'Show delayed assignment');

              case 8:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render with default assignment if assignment metrics return with error', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var totalAssignmentEle, unplannedAssignmentEle, overdueAssignmentEle;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                this.owner.register('service:workload', Ember.Service.extend({
                  getAssignmentsMetrics: function getAssignmentsMetrics() {
                    throw new Error('Throwing error in mock service');
                  }
                }));
                _context5.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider::AssignmentOverview @userId="12"/>
                */
                {
                  id: "i7mzhukc",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider/assignment-overview\",[],[[\"@userId\"],[\"12\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                totalAssignmentEle = this.element.querySelector('[data-test-id="wlm-mas-overview-meta-total"]');
                assert.equal(totalAssignmentEle.textContent.trim(), "0 in total", 'Show default total assignment');
                unplannedAssignmentEle = this.element.querySelector('[data-test-id="wlm-mas-overview-meta-unplanned"]');
                assert.equal(unplannedAssignmentEle.textContent.trim(), "0 Unplanned", 'Show default unplanned assignment');
                overdueAssignmentEle = this.element.querySelector('[data-test-id="wlm-mas-overview-meta-overdue"]');
                assert.equal(overdueAssignmentEle.textContent.trim(), "0 Delayed", 'Show default delayed assignment');

              case 9:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-workloads/manage-assignment-slider/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/set-locale-timezone-moment", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/stub-current-account", "moment"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _intl, _setLocaleTimezoneMoment, _stubCurrentUser, _stubCurrentAccount, _moment) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var MOCK_WORKLOAD_SERVICE = Ember.Service.extend({
    init: function init() {
      this._super.apply(this, arguments);

      this.allowedEntities = ['task', 'project_task', 'change', 'problem', 'release', 'ticket'];

      this.clearEntityPaginatedLoadTracker = function () {};
    },
    getAllowedEntityTypes: function getAllowedEntityTypes() {
      return this.allowedEntities.map(function (entity) {
        return {
          label: entity,
          value: entity,
          hasAccess: true
        };
      });
    },
    getAssignmentsMetrics: function getAssignmentsMetrics() {
      return Ember.RSVP.resolve({
        total: 10,
        unplanned: 0,
        overdue: 2
      });
    },
    fetchAssignments: function fetchAssignments(modelName, infinityModelOptions) {
      this.setProperties({
        modelName: modelName,
        infinityModelOptions: infinityModelOptions
      });
      return Ember.RSVP.resolve(Ember.ArrayProxy.create({
        content: Ember.A([]),
        meta: {
          has_next: false
        }
      }));
    }
  });
  (0, _qunit.module)('Integration | Component | module-workloads/manage-assignment-slider', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _setLocaleTimezoneMoment.setLocaleAndTimeZoneForMoment)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      (0, _stubCurrentAccount.stubCurrentAccount)({
        features: ['fr_project', 'itil_modules']
      });
      (0, _stubCurrentUser.stubCurrentUser)({
        privileges: ['view_changes', 'view_problems', 'view_releases', 'manage_tickets', 'view_projects']
      });
      this.server.createList('task', 64);
      this.server.loadFixtures('users');
    });
    (0, _qunit.test)('it renders the slider component', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var overviewEle;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider @userId={{'12'}} @isSliderOpen={{true}} />
                */
                {
                  id: "ntFreGed",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider\",[],[[\"@userId\",\"@isSliderOpen\"],[\"12\",true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                overviewEle = this.element.querySelector('[data-test-id="wlm-mas-overview"]');
                assert.ok(overviewEle);

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render 30 assignment for the task type', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var assignementElements, infinityLoaderEle;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider @userId={{'12'}} @isSliderOpen={{true}} />
                */
                {
                  id: "ntFreGed",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider\",[],[[\"@userId\",\"@isSliderOpen\"],[\"12\",true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assignementElements = this.element.querySelectorAll('.assignment-card');
                infinityLoaderEle = this.element.querySelectorAll('.assignment-card-loader');
                assert.equal(infinityLoaderEle.length, 1, 'Loader should be visible');
                assert.equal(assignementElements.length, 30, '30 assignemnt to be render');

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render assignment card', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var task1, displayIdEle, titleEle, psdEle, pedEle, effortText, psEle;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider @userId={{'12'}} @isSliderOpen={{true}} />
                */
                {
                  id: "ntFreGed",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider\",[],[[\"@userId\",\"@isSliderOpen\"],[\"12\",true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                task1 = this.server.db.tasks.findBy({
                  'id': 1
                });
                displayIdEle = this.element.querySelector('[data-test-id="wlm-manage-assignment-card-display-id-1"]');
                assert.equal(displayIdEle.textContent.trim(), "#".concat(task1.human_display_id));
                titleEle = this.element.querySelector('[data-test-id="wlm-manage-assignment-card-title-1"]');
                assert.equal(titleEle.textContent.trim(), task1.title);
                psdEle = this.element.querySelector('[data-test-id="wlm-manage-assignment-card-psd-1"]');
                assert.equal(psdEle.textContent.trim(), task1.planned_start_date && (0, _moment.default)(task1.planned_start_date).format('DD MMM, YYYY hh:mm A') || 'Planned Start Date Not set');
                pedEle = this.element.querySelector('[data-test-id="wlm-manage-assignment-card-ped-1"]');
                assert.equal(pedEle.textContent.trim(), task1.planned_end_date && (0, _moment.default)(task1.planned_end_date).format('DD MMM, YYYY hh:mm A') || 'Planned End Date Not set');
                effortText = task1.planned_effort ? "Planned Effort: ".concat(task1.planned_effort) : 'Planned Effort Not set';
                psEle = this.element.querySelector('[data-test-id="wlm-manage-assignment-card-pe-1"]');
                assert.equal(psEle.textContent.trim(), effortText);

              case 14:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should fetch the changes list on change entity selected', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var task1, displayIdEle, titleEle, psdEle, pedEle, psEle, plannedEffortText;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                this.server.createList('change', 62);
                _context4.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider @userId={{'12'}} @isSliderOpen={{true}} />
                */
                {
                  id: "ntFreGed",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider\",[],[[\"@userId\",\"@isSliderOpen\"],[\"12\",true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context4.next = 5;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-entity-switcher-trigger"]');

              case 5:
                _context4.next = 7;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-entity-switcher-option-change"]');

              case 7:
                task1 = this.server.db.changes.findBy({
                  'id': 1
                });
                displayIdEle = this.element.querySelector('[data-test-id="wlm-manage-assignment-card-display-id-1"]');
                assert.equal(displayIdEle.textContent.trim(), "#".concat(task1.human_display_id));
                titleEle = this.element.querySelector('[data-test-id="wlm-manage-assignment-card-title-1"]');
                assert.equal(titleEle.textContent.trim(), task1.ticket_subject);
                psdEle = this.element.querySelector('[data-test-id="wlm-manage-assignment-card-psd-1"]');
                assert.equal(psdEle.textContent.trim(), task1.planned_start_date && (0, _moment.default)(task1.planned_start_date).format('DD MMM, YYYY hh:mm A') || 'Planned Start Date: Not set');
                pedEle = this.element.querySelector('[data-test-id="wlm-manage-assignment-card-ped-1"]');
                assert.equal(pedEle.textContent.trim(), task1.planned_end_date && (0, _moment.default)(task1.planned_end_date).format('DD MMM, YYYY hh:mm A') || 'Planned End Date Not set');
                psEle = this.element.querySelector('[data-test-id="wlm-manage-assignment-card-pe-1"]');
                plannedEffortText = task1.planned_effort ? "Planned Effort: ".concat(task1.planned_effort) : 'Planned Effort Not set';
                assert.equal(psEle.textContent.trim(), plannedEffortText);

              case 19:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should fetch the problems list on problem entity selected', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var task1, displayIdEle, titleEle, psdEle, pedEle, psEle, plannedEffortText;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                this.server.createList('problem', 62);
                _context5.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider @userId={{'12'}} @isSliderOpen={{true}} />
                */
                {
                  id: "ntFreGed",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider\",[],[[\"@userId\",\"@isSliderOpen\"],[\"12\",true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context5.next = 5;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-entity-switcher-trigger"]');

              case 5:
                _context5.next = 7;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-entity-switcher-option-problem"]');

              case 7:
                task1 = this.server.db.problems.findBy({
                  'id': 1
                });
                displayIdEle = this.element.querySelector('[data-test-id="wlm-manage-assignment-card-display-id-1"]');
                assert.equal(displayIdEle.textContent.trim(), "#".concat(task1.human_display_id));
                titleEle = this.element.querySelector('[data-test-id="wlm-manage-assignment-card-title-1"]');
                assert.equal(titleEle.textContent.trim(), task1.ticket_subject);
                psdEle = this.element.querySelector('[data-test-id="wlm-manage-assignment-card-psd-1"]');
                assert.equal(psdEle.textContent.trim(), task1.planned_start_date && (0, _moment.default)(task1.planned_start_date).format('DD MMM, YYYY hh:mm A') || 'Planned Start Date: Not set');
                pedEle = this.element.querySelector('[data-test-id="wlm-manage-assignment-card-ped-1"]');
                assert.equal(pedEle.textContent.trim(), task1.planned_end_date && (0, _moment.default)(task1.planned_end_date).format('DD MMM, YYYY hh:mm A') || 'Planned End Date Not set');
                psEle = this.element.querySelector('[data-test-id="wlm-manage-assignment-card-pe-1"]');
                plannedEffortText = task1.planned_effort ? "Planned Effort: ".concat(task1.planned_effort) : 'Planned Effort Not set';
                assert.equal(psEle.textContent.trim(), plannedEffortText);

              case 19:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should fetch the releases list on release entity selected', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var task1, displayIdEle, titleEle, psdEle, pedEle, psEle, plannedEffortText;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                this.server.createList('release', 62);
                _context6.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider @userId={{'12'}} @isSliderOpen={{true}} />
                */
                {
                  id: "ntFreGed",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider\",[],[[\"@userId\",\"@isSliderOpen\"],[\"12\",true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context6.next = 5;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-entity-switcher-trigger"]');

              case 5:
                _context6.next = 7;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-entity-switcher-option-release"]');

              case 7:
                task1 = this.server.db.releases.findBy({
                  'id': 1
                });
                displayIdEle = this.element.querySelector('[data-test-id="wlm-manage-assignment-card-display-id-1"]');
                assert.equal(displayIdEle.textContent.trim(), "#".concat(task1.human_display_id));
                titleEle = this.element.querySelector('[data-test-id="wlm-manage-assignment-card-title-1"]');
                assert.equal(titleEle.textContent.trim(), task1.ticket_subject);
                psdEle = this.element.querySelector('[data-test-id="wlm-manage-assignment-card-psd-1"]');
                assert.equal(psdEle.textContent.trim(), task1.planned_start_date && (0, _moment.default)(task1.planned_start_date).format('DD MMM, YYYY hh:mm A') || 'Planned Start Date: Not set');
                pedEle = this.element.querySelector('[data-test-id="wlm-manage-assignment-card-ped-1"]');
                assert.equal(pedEle.textContent.trim(), task1.planned_end_date && (0, _moment.default)(task1.planned_end_date).format('DD MMM, YYYY hh:mm A') || 'Planned End Date Not set');
                psEle = this.element.querySelector('[data-test-id="wlm-manage-assignment-card-pe-1"]');
                plannedEffortText = task1.planned_effort ? "Planned Effort: ".concat(task1.planned_effort) : 'Planned Effort Not set';
                assert.equal(psEle.textContent.trim(), plannedEffortText);

              case 19:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x6) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should fetch the project tasks on project task entity selected', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var task1, displayIdEle, titleEle, psdEle, pedEle, psEle, plannedEffortText;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                this.server.createList('project_task', 62);
                _context7.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider @userId={{'12'}} @isSliderOpen={{true}} />
                */
                {
                  id: "ntFreGed",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider\",[],[[\"@userId\",\"@isSliderOpen\"],[\"12\",true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context7.next = 5;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-entity-switcher-trigger"]');

              case 5:
                _context7.next = 7;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-entity-switcher-option-project_task"]');

              case 7:
                task1 = this.server.db.projectTasks.findBy({
                  'id': 1
                });
                displayIdEle = this.element.querySelector('[data-test-id="wlm-manage-assignment-card-display-id-1"]');
                assert.equal(displayIdEle.textContent.trim(), "#".concat(task1.key));
                titleEle = this.element.querySelector('[data-test-id="wlm-manage-assignment-card-title-1"]');
                assert.equal(titleEle.textContent.trim(), task1.title);
                psdEle = this.element.querySelector('[data-test-id="wlm-manage-assignment-card-psd-1"]');
                assert.equal(psdEle.textContent.trim(), task1.start_date && (0, _moment.default)(task1.start_date).format('DD MMM, YYYY hh:mm A') || 'Planned Start Date: Not set', 'should have planned_start_date');
                pedEle = this.element.querySelector('[data-test-id="wlm-manage-assignment-card-ped-1"]');
                assert.equal(pedEle.textContent.trim(), task1.due_by && (0, _moment.default)(task1.due_by).format('DD MMM, YYYY hh:mm A') || 'Planned End Date Not set', 'should have planned_end_date');
                psEle = this.element.querySelector('[data-test-id="wlm-manage-assignment-card-pe-1"]');
                plannedEffortText = task1.effort ? "Planned Effort: ".concat(task1.effort) : 'Planned Effort Not set';
                assert.equal(psEle.textContent.trim(), plannedEffortText);

              case 19:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x7) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should fetch the tasks on planned_start_date sorted', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var workloadService, infinityModelOptions;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                this.owner.register('service:workload', MOCK_WORKLOAD_SERVICE);
                _context8.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider @userId={{'12'}} @isSliderOpen={{true}} />
                */
                {
                  id: "ntFreGed",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider\",[],[[\"@userId\",\"@isSliderOpen\"],[\"12\",true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context8.next = 5;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-sort-trigger"]');

              case 5:
                _context8.next = 7;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-sort-by-option-planned_start_date"]');

              case 7:
                workloadService = this.owner.lookup('service:workload');
                infinityModelOptions = workloadService.infinityModelOptions;
                assert.equal(workloadService.modelName, 'task', 'entity type should be task');
                assert.equal(infinityModelOptions.sortBy, 'planned_start_date', 'sort by should be planned_start_date');
                assert.equal(infinityModelOptions.sortOrder, 'asc', 'sort order should be ascending ');
                assert.equal(infinityModelOptions.per_page, '30', 'page size should be 30');
                assert.equal(infinityModelOptions.page, '1', 'page should be 1');
                assert.equal(infinityModelOptions.planType, 'all', 'planType should be all');
                assert.equal(infinityModelOptions.statusType, 'all', 'statusType should be all');

              case 16:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x8) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should fetch the tasks on once sort order change to decending sorted', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        var workloadService, infinityModelOptions;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                this.owner.register('service:workload', MOCK_WORKLOAD_SERVICE);
                _context9.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider @userId={{'12'}} @isSliderOpen={{true}} />
                */
                {
                  id: "ntFreGed",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider\",[],[[\"@userId\",\"@isSliderOpen\"],[\"12\",true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context9.next = 5;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-sort-trigger"]');

              case 5:
                _context9.next = 7;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-sort-order-option-desc"]');

              case 7:
                workloadService = this.owner.lookup('service:workload');
                infinityModelOptions = workloadService.infinityModelOptions;
                assert.equal(workloadService.modelName, 'task', 'entity type should be task');
                assert.equal(infinityModelOptions.sortBy, 'created_at', 'sort by should be created_at');
                assert.equal(infinityModelOptions.sortOrder, 'desc', 'sort order should be descending ');

              case 12:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x9) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should fetch the tasks once filter by planType unplanned', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var workloadService, infinityModelOptions;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                this.owner.register('service:workload', MOCK_WORKLOAD_SERVICE);
                _context10.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider @userId={{'12'}} @isSliderOpen={{true}} />
                */
                {
                  id: "ntFreGed",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider\",[],[[\"@userId\",\"@isSliderOpen\"],[\"12\",true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context10.next = 5;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-filter-trigger"]');

              case 5:
                _context10.next = 7;
                return (0, _testHelpers.click)('[id="assignment_entity_plan_unplanned"]');

              case 7:
                _context10.next = 9;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-filter-action-apply"]');

              case 9:
                workloadService = this.owner.lookup('service:workload');
                infinityModelOptions = workloadService.infinityModelOptions;
                assert.equal(workloadService.modelName, 'task', 'entity type should be task');
                assert.equal(infinityModelOptions.planType, 'unplanned', 'planType should be unplanned');
                assert.equal(infinityModelOptions.statusType, 'all', 'statusType should be all');

              case 14:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x10) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should fetch the tasks once filter by statusType due today', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        var workloadService, infinityModelOptions;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                this.owner.register('service:workload', MOCK_WORKLOAD_SERVICE);
                _context11.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider @userId={{'12'}} @isSliderOpen={{true}} />
                */
                {
                  id: "ntFreGed",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider\",[],[[\"@userId\",\"@isSliderOpen\"],[\"12\",true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context11.next = 5;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-filter-trigger"]');

              case 5:
                _context11.next = 7;
                return (0, _testHelpers.click)('[id="assignment_entity_status_due_today"]');

              case 7:
                _context11.next = 9;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-filter-action-apply"]');

              case 9:
                workloadService = this.owner.lookup('service:workload');
                infinityModelOptions = workloadService.infinityModelOptions;
                assert.equal(workloadService.modelName, 'task', 'entity type should be task');
                assert.equal(infinityModelOptions.planType, 'all', 'planType should be all');
                assert.equal(infinityModelOptions.statusType, 'due_today', 'statusType should be due_today');

              case 14:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x11) {
        return _ref12.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should fetch the tasks once filter by planType unplanned and statusType as overdue', /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        var workloadService, infinityModelOptions;
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                this.owner.register('service:workload', MOCK_WORKLOAD_SERVICE);
                _context12.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider @userId={{'12'}} @isSliderOpen={{true}} />
                */
                {
                  id: "ntFreGed",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider\",[],[[\"@userId\",\"@isSliderOpen\"],[\"12\",true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context12.next = 5;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-filter-trigger"]');

              case 5:
                _context12.next = 7;
                return (0, _testHelpers.click)('[id="assignment_entity_plan_unplanned"]');

              case 7:
                _context12.next = 9;
                return (0, _testHelpers.click)('[id="assignment_entity_status_overdue"]');

              case 9:
                _context12.next = 11;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-filter-action-apply"]');

              case 11:
                workloadService = this.owner.lookup('service:workload');
                infinityModelOptions = workloadService.infinityModelOptions;
                assert.equal(workloadService.modelName, 'task', 'entity type should be task');
                assert.equal(infinityModelOptions.planType, 'unplanned', 'planType should be unplanned');
                assert.equal(infinityModelOptions.statusType, 'overdue', 'statusType should be overdue');

              case 16:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x12) {
        return _ref13.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render empty state if data is empty', /*#__PURE__*/function () {
      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
        var messageDom;
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                this.owner.register('service:workload', MOCK_WORKLOAD_SERVICE);
                _context13.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider @userId={{'12'}} @isSliderOpen={{true}} />
                */
                {
                  id: "ntFreGed",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider\",[],[[\"@userId\",\"@isSliderOpen\"],[\"12\",true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                messageDom = this.element.querySelector('[data-test-id="wlm-mas-empty-state-message"]');
                assert.equal(messageDom.textContent.trim(), 'There is no open or in progress work to display');

              case 5:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      return function (_x13) {
        return _ref14.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should load more data for tasks on infinty scroll', /*#__PURE__*/function () {
      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {
        var cardWithInfiLoaders, loaderCard;
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                this.server.createList('task', 64);
                _context14.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider @userId={{'12'}} @isSliderOpen={{true}} />
                */
                {
                  id: "ntFreGed",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider\",[],[[\"@userId\",\"@isSliderOpen\"],[\"12\",true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                cardWithInfiLoaders = (0, _testHelpers.findAll)('.assignment-card');
                assert.equal(cardWithInfiLoaders.length, 30, 'should have 30 assignment');
                loaderCard = (0, _testHelpers.find)('.assignment-card-loader');
                assert.ok(loaderCard, 'should have loader element in UI');
                (0, _testHelpers.find)('.assignment-card-loader').scrollIntoView();
                _context14.next = 10;
                return (0, _testHelpers.waitUntil)(function () {
                  return (0, _testHelpers.findAll)('.assignment-card').length === 30;
                }, {
                  timeoutMessage: 'infinity loader not appear in the dom'
                });

              case 10:
                cardWithInfiLoaders = (0, _testHelpers.findAll)('.assignment-card');
                assert.equal(cardWithInfiLoaders.length, 30, 'should have 30 assignment');

              case 12:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      return function (_x14) {
        return _ref15.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-workloads/manage-assignment-slider/date-banner/component-test", ["@ember/test-helpers", "qunit", "freshservice/tests/lib/intl", "ember-qunit"], function (_testHelpers, _qunit, _intl, _emberQunit) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-workloads/manage-assignment-slider/date-banner', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      Ember.set(this, 'store', this.owner.lookup('service:store'));
      this.store.pushPayload({
        agents: [{
          id: 41,
          time_zone: 'Chennai',
          timeZone: 'Chennai'
        }]
      });
    });
    (0, _qunit.test)('it renders date banner', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var dateElementText, notSetElementText;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.set('modelSchema', {
                  agentId: '41',
                  humanDisplayId: 'CHN-8',
                  plannedStartDate: '2022-05-22T18:30:00.000Z',
                  plannedEndDate: '',
                  displayId: 8,
                  get: function get() {
                    return '41';
                  },
                  description: "change form"
                });
                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider::DateBanner @modelSchema={{this.modelSchema}} @fieldName="planned_start_date"
                  @entityName="change" @agentKey="agentId" />
                */
                {
                  id: "qGadjfxf",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider/date-banner\",[],[[\"@modelSchema\",\"@fieldName\",\"@entityName\",\"@agentKey\"],[[23,0,[\"modelSchema\"]],\"planned_start_date\",\"change\",\"agentId\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                dateElementText = this.element.querySelector('[data-test-id="wlm-edit-banner-date"]').innerText;
                assert.equal(dateElementText, '05-23-2022, 12:00 AM', 'Timezone converted date');
                _context.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider::DateBanner @modelSchema={{this.modelSchema}} @fieldName="planned_end_date"
                  @entityName="change" @agentKey="agentId" />
                */
                {
                  id: "82ZId5ML",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider/date-banner\",[],[[\"@modelSchema\",\"@fieldName\",\"@entityName\",\"@agentKey\"],[[23,0,[\"modelSchema\"]],\"planned_end_date\",\"change\",\"agentId\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                notSetElementText = this.element.querySelector('[data-test-id="wlm-edit-banner-date"]').innerText;
                assert.equal(notSetElementText, 'Not set', 'Not set date');
                assert.ok('Converted and rendered dates');

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-workloads/manage-assignment-slider/edit-assignment/change-form/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl"], function (_qunit, _emberQunit, _testHelpers, _intl) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-workloads/manage-assignment-slider/edit-assignment/change-form', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      Ember.set(this, 'store', this.owner.lookup('service:store'));
      this.store.pushPayload({
        'change_form_fields': [{
          id: '120',
          name: 'description',
          label: 'Description',
          choices: []
        }]
      });
    });
    (0, _qunit.test)('it renders change form', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var editForDisplayId, entityUrl;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.set('assignment', {
                  entityName: 'change'
                });
                this.set('modelSchema', {
                  agentId: '41',
                  humanDisplayId: 'CHN-8',
                  displayId: 8,
                  description: "change form",
                  id: 8,
                  get: function get() {}
                });
                this.set('onUpdate', function () {});
                this.set('isDisabled', function () {
                  return false;
                });
                this.set('applyBusinessRules', function () {});
                this.set('brFormFields', []);
                this.set('agentOptions', []);
                _context.next = 9;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                      <ModuleWorkloads::ManageAssignmentSlider::EditAssignment::ChangeForm @assignment={{this.assignment}}
                        @onUpdate={{this.onUpdate}} @agentKey="agentId" @modelSchema={{this.modelSchema}} @isDisabled={{this.isDisabled}}
                        @brFormFields={{this.brFormFields}} @agentOptions={{this.agentOptions}}
                        @applyBusinessRules={{this.applyBusinessRules}}>
                      </ModuleWorkloads::ManageAssignmentSlider::EditAssignment::ChangeForm>
                    
                */
                {
                  id: "r+myODY7",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n      \"],[5,\"module-workloads/manage-assignment-slider/edit-assignment/change-form\",[],[[\"@assignment\",\"@onUpdate\",\"@agentKey\",\"@modelSchema\",\"@isDisabled\",\"@brFormFields\",\"@agentOptions\",\"@applyBusinessRules\"],[[23,0,[\"assignment\"]],[23,0,[\"onUpdate\"]],\"agentId\",[23,0,[\"modelSchema\"]],[23,0,[\"isDisabled\"]],[23,0,[\"brFormFields\"]],[23,0,[\"agentOptions\"]],[23,0,[\"applyBusinessRules\"]]]],{\"statements\":[[0,\"\\n      \"]],\"parameters\":[]}],[0,\"\\n    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 9:
                editForDisplayId = this.element.querySelector('[data-test-id="wlm-edit-heading"]');
                entityUrl = editForDisplayId.href.includes('itil/changes/8');
                assert.equal(editForDisplayId.innerText, '#CHN-8', 'Display Id matches');
                assert.ok(entityUrl, 'Entity link matches');
                _context.next = 15;
                return (0, _testHelpers.waitFor)('.fr-element.fr-view', {
                  timeout: 1000
                });

              case 15:
                _context.next = 17;
                return (0, _testHelpers.fillIn)('.fr-element.fr-view', 'updated description');

              case 17:
                assert.equal(this.element.querySelector('.fr-element.fr-view').innerText, 'updated description', 'Description updated');

              case 18:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-workloads/manage-assignment-slider/edit-assignment/component-test", ["@ember/test-helpers", "ember-cli-mirage/test-support", "qunit", "freshservice/tests/lib/intl", "ember-qunit"], function (_testHelpers, _testSupport, _qunit, _intl, _emberQunit) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-workloads/manage-assignment-slider/edit-assignment', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    hooks.beforeEach(function () {
      Ember.set(this, 'store', this.owner.lookup('service:store'));
      this.store.pushPayload({
        agents: [{
          id: 41,
          time_zone: 'Chennai',
          timeZone: 'Chennai'
        }]
      });
      this.store.pushPayload({
        changes: [{
          id: 8,
          humanDisplayId: "CHN-8",
          agentId: 41,
          groupId: 81,
          time_zone: 'Chennai',
          timeZone: 'Chennai'
        }]
      });
    });
    (0, _qunit.test)('it renders edit form', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var editFormTitle;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.set('closeSlider', function () {});
                this.set('updateModelSchema', function () {});
                this.set('assignmentToBeEdited', {
                  entityName: 'change',
                  humanDisplayId: "CHN-8",
                  id: 8,
                  displayId: 8,
                  isEditable: true
                });
                _context.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                    <UiComponents::UiModal @toggleModal={{true}} @defaultModal={{false}}
                      @modalClassBindings="manage-assignment-slider"
                      @closeOnOutsideClick={{false}} @sideModalDirection="right" @closeAction={{this.closeSlider}} as |modal|>
                     <ModuleWorkloads::ManageAssignmentSlider::EditAssignment @updateModelSchema={{this.updateModelSchema}} @refreshMatrixData={{this.closeSlider}} @modalSlider={{modal}} @showBackLink={{true}} @assignment={{
                        this.assignmentToBeEdited }} @cancelEditAssignment={{this.closeSlider}} />
                    </UiComponents::UiModal>
                */
                {
                  id: "x5w7cXQZ",
                  block: "{\"symbols\":[\"modal\"],\"statements\":[[0,\"\\n    \"],[5,\"ui-components/ui-modal\",[],[[\"@toggleModal\",\"@defaultModal\",\"@modalClassBindings\",\"@closeOnOutsideClick\",\"@sideModalDirection\",\"@closeAction\"],[true,false,\"manage-assignment-slider\",false,\"right\",[23,0,[\"closeSlider\"]]]],{\"statements\":[[0,\"\\n     \"],[5,\"module-workloads/manage-assignment-slider/edit-assignment\",[],[[\"@updateModelSchema\",\"@refreshMatrixData\",\"@modalSlider\",\"@showBackLink\",\"@assignment\",\"@cancelEditAssignment\"],[[23,0,[\"updateModelSchema\"]],[23,0,[\"closeSlider\"]],[23,1,[]],true,[23,0,[\"assignmentToBeEdited\"]],[23,0,[\"closeSlider\"]]]]],[0,\"\\n    \"]],\"parameters\":[1]}]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                editFormTitle = this.element.querySelector('.wlm-edit-assignments-title');
                assert.ok(editFormTitle, 'Test for Gannt udpate', 'Title rendered');

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-workloads/manage-assignment-slider/edit-assignment/details-section/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl"], function (_qunit, _emberQunit, _testHelpers, _intl) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-workloads/manage-assignment-slider/edit-assignment/details-section', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _qunit.test)('it renders details section', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var agentDetailSection;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Set any properties with this.set('myProperty', 'value');
                // Handle any actions with this.set('myAction', function(val) { ... });
                this.set('onUpdate', function () {});
                this.set('assignment', {
                  entityName: 'change',
                  isEditable: true
                });
                this.set('isDisabled', function () {});
                this.set('applyBusinessRules', function () {});
                this.set('brFormFields', []);
                this.set('agentOptions', [{
                  id: 41,
                  name: 'agent one'
                }]);
                this.set('formFields', [{
                  name: 'planned_start_date',
                  choices: []
                }, {
                  name: 'planned_end_date',
                  choices: []
                }, {
                  name: 'planned_effort',
                  choices: []
                }]);
                this.set('modelSchema', {
                  agentId: '41',
                  humanDisplayId: 'TSK-8',
                  id: 8,
                  get: function get() {},
                  taskableType: 'tickets',
                  taskableDisplayId: '1',
                  description: "Task form",
                  plannedStartDate: '2022-05-22T18:30:00.000Z',
                  plannedEndDate: '',
                  plannedEffort: '1hr 20m'
                });
                _context.next = 10;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                    <FormFor
                        data-test-id    = "wlm-edit-assignments-form"
                        @object         = {{this.modelSchema}} @update = {{this.onUpdate}} as |f|>
                     <ModuleWorkloads::ManageAssignmentSlider::EditAssignment::DetailsSection
                        @f={{f}}
                        @onUpdate={{this.onUpdate}}
                				@brFormFields={{this.brFormFields}}
                				@agentOptions={{this.agentOptions}}
                        @planProperties={{this.planProperties}}
                				@assignment={{this.assignment}}
                        @entityName={{this.assignment.entityName}}
                        @isEditable={{this.assignment.isEditable}}
                        @isDisabled={{this.isDisabled}}
                        @applyBusinessRules={{this.applyBusinessRules}}
                        @formFields={{this.formFields}}
                        @zoneOffset="Chennai"
                				@agentKey="agentId"
                        @modelSchema={{this.modelSchema}}
                      />
                    </FormFor>
                */
                {
                  id: "JvI5uXBB",
                  block: "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n    \"],[5,\"form-for\",[[12,\"data-test-id\",\"wlm-edit-assignments-form\"]],[[\"@object\",\"@update\"],[[23,0,[\"modelSchema\"]],[23,0,[\"onUpdate\"]]]],{\"statements\":[[0,\"\\n     \"],[5,\"module-workloads/manage-assignment-slider/edit-assignment/details-section\",[],[[\"@f\",\"@onUpdate\",\"@brFormFields\",\"@agentOptions\",\"@planProperties\",\"@assignment\",\"@entityName\",\"@isEditable\",\"@isDisabled\",\"@applyBusinessRules\",\"@formFields\",\"@zoneOffset\",\"@agentKey\",\"@modelSchema\"],[[23,1,[]],[23,0,[\"onUpdate\"]],[23,0,[\"brFormFields\"]],[23,0,[\"agentOptions\"]],[23,0,[\"planProperties\"]],[23,0,[\"assignment\"]],[23,0,[\"assignment\",\"entityName\"]],[23,0,[\"assignment\",\"isEditable\"]],[23,0,[\"isDisabled\"]],[23,0,[\"applyBusinessRules\"]],[23,0,[\"formFields\"]],\"Chennai\",\"agentId\",[23,0,[\"modelSchema\"]]]]],[0,\"\\n    \"]],\"parameters\":[1]}]],\"hasEval\":false}",
                  meta: {}
                }));

              case 10:
                agentDetailSection = this.element.querySelector('[data-test-field-name="agentId"]');
                assert.equal(agentDetailSection.querySelector('.ember-power-select-selected-item').innerText, this.agentOptions[0].name, 'Agent details rendered');

              case 12:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-workloads/manage-assignment-slider/edit-assignment/plan-section/component-test", ["qunit", "ember-qunit", "ember-cli-mirage/test-support", "@ember/test-helpers", "freshservice/tests/lib/intl"], function (_qunit, _emberQunit, _testSupport, _testHelpers, _intl) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-workloads/manage-assignment-slider/edit-assignment/plan-section', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    hooks.beforeEach(function () {
      Ember.set(this, 'store', this.owner.lookup('service:store'));
      this.store.pushPayload({
        agents: [{
          id: 41,
          time_zone: 'Chennai'
        }]
      });
      this.server.loadFixtures('tickets');
    });
    (0, _qunit.test)('it renders plan section', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var dateBannerMessage, timezoneOffset, toggleSwitch;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.set('onUpdate', function () {});
                this.set('assignment', {
                  entityName: 'task',
                  isEditable: true
                });
                this.set('isDisabled', function () {});
                this.set('applyBusinessRules', function () {});
                this.set('brFormFields', []);
                this.set('agentOptions', []);
                this.set('formFields', [{
                  name: 'planned_start_date',
                  choices: []
                }, {
                  name: 'planned_end_date',
                  choices: []
                }, {
                  name: 'planned_effort',
                  choices: []
                }]);
                this.set('modelSchema', {
                  agentId: '41',
                  humanDisplayId: 'TSK-8',
                  id: 8,
                  get: function get() {
                    return '41';
                  },
                  taskableType: 'tickets',
                  taskableDisplayId: 12,
                  description: "Task form",
                  plannedStartDate: '2022-05-22T18:30:00.000Z',
                  plannedEndDate: '',
                  plannedEffort: '1hr 20m'
                });
                _context.next = 10;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                    <FormFor
                        data-test-id    = "wlm-edit-assignments-form"
                        @object         = {{this.modelSchema}} @update = {{this.onUpdate}} as |f|>
                     <ModuleWorkloads::ManageAssignmentSlider::EditAssignment::PlanSection
                        @f={{f}}
                        @onUpdate={{this.onUpdate}}
                        @planProperties={{this.planProperties}}
                				@assignment={{this.assignment}}
                        @entityName={{this.assignment.entityName}}
                        @isEditable={{this.assignment.isEditable}}
                        @isDisabled={{this.isDisabled}}
                        @applyBusinessRules={{this.applyBusinessRules}}
                        @formFields={{this.formFields}}
                        @zoneOffset="Chennai"
                				@agentKey="agentId"
                        @modelSchema={{this.modelSchema}}
                      />
                    </FormFor>
                */
                {
                  id: "9tlpT0PW",
                  block: "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n    \"],[5,\"form-for\",[[12,\"data-test-id\",\"wlm-edit-assignments-form\"]],[[\"@object\",\"@update\"],[[23,0,[\"modelSchema\"]],[23,0,[\"onUpdate\"]]]],{\"statements\":[[0,\"\\n     \"],[5,\"module-workloads/manage-assignment-slider/edit-assignment/plan-section\",[],[[\"@f\",\"@onUpdate\",\"@planProperties\",\"@assignment\",\"@entityName\",\"@isEditable\",\"@isDisabled\",\"@applyBusinessRules\",\"@formFields\",\"@zoneOffset\",\"@agentKey\",\"@modelSchema\"],[[23,1,[]],[23,0,[\"onUpdate\"]],[23,0,[\"planProperties\"]],[23,0,[\"assignment\"]],[23,0,[\"assignment\",\"entityName\"]],[23,0,[\"assignment\",\"isEditable\"]],[23,0,[\"isDisabled\"]],[23,0,[\"applyBusinessRules\"]],[23,0,[\"formFields\"]],\"Chennai\",\"agentId\",[23,0,[\"modelSchema\"]]]]],[0,\"\\n    \"]],\"parameters\":[1]}]],\"hasEval\":false}",
                  meta: {}
                }));

              case 10:
                dateBannerMessage = this.element.querySelectorAll('[data-test-id="wlm-edit-banner-date"]');
                timezoneOffset = this.element.querySelector('[data-test-id="wlm-edit-zoneOffset"]');
                assert.equal(timezoneOffset.innerText, 'Chennai', 'Agent timezone matched');
                assert.equal(dateBannerMessage[0].innerText, '05-23-2022, 12:00 AM', 'Timezone converted');
                assert.equal(dateBannerMessage[1].innerText, 'Not set', 'No date set flow');
                toggleSwitch = this.element.querySelector('[data-test-id="data-test-manage-assignment-user-timezone"]');
                _context.next = 18;
                return (0, _testHelpers.click)(toggleSwitch.children[0]);

              case 18:
                assert.equal(toggleSwitch.children[0].checked, false, 'Timezone switch disabled');

              case 19:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-workloads/manage-assignment-slider/edit-assignment/problem-form/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl"], function (_qunit, _emberQunit, _testHelpers, _intl) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-workloads/manage-assignment-slider/edit-assignment/problem-form', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      Ember.set(this, 'store', this.owner.lookup('service:store'));
      this.store.pushPayload({
        'problem_form_fields': [{
          id: '120',
          name: 'description',
          label: 'Description',
          choices: []
        }]
      });
    });
    (0, _qunit.test)('it renders problem form', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var editForDisplayId, entityUrl;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.set('assignment', {
                  entityName: 'problem'
                });
                this.set('modelSchema', {
                  agentId: '41',
                  humanDisplayId: 'PRB-8',
                  id: 8,
                  description: "problem form",
                  get: function get() {}
                });
                this.set('onUpdate', function () {});
                this.set('isDisabled', function () {});
                this.set('applyBusinessRules', function () {});
                this.set('brFormFields', []);
                this.set('agentOptions', []);
                _context.next = 9;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                      <ModuleWorkloads::ManageAssignmentSlider::EditAssignment::ProblemForm @agentKey="agentId" @assignment={{this.assignment}} @onUpdate={{this.onUpdate}}
                        @modelSchema={{this.modelSchema}} @isDisabled={{this.isDisabled}} @brFormFields={{this.brFormFields}}
                        @agentOptions={{this.agentOptions}} @applyBusinessRules={{this.applyBusinessRules}}>
                      </ModuleWorkloads::ManageAssignmentSlider::EditAssignment::ProblemForm>
                    
                */
                {
                  id: "PNz0Z1KB",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n      \"],[5,\"module-workloads/manage-assignment-slider/edit-assignment/problem-form\",[],[[\"@agentKey\",\"@assignment\",\"@onUpdate\",\"@modelSchema\",\"@isDisabled\",\"@brFormFields\",\"@agentOptions\",\"@applyBusinessRules\"],[\"agentId\",[23,0,[\"assignment\"]],[23,0,[\"onUpdate\"]],[23,0,[\"modelSchema\"]],[23,0,[\"isDisabled\"]],[23,0,[\"brFormFields\"]],[23,0,[\"agentOptions\"]],[23,0,[\"applyBusinessRules\"]]]],{\"statements\":[[0,\"\\n      \"]],\"parameters\":[]}],[0,\"\\n    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 9:
                editForDisplayId = this.element.querySelector('[data-test-id="wlm-edit-heading"]');
                entityUrl = editForDisplayId.href.includes('itil/problems/8');
                assert.equal(editForDisplayId.innerText, '#PRB-8', 'Display Id matches');
                assert.ok(entityUrl, 'Entity link matches');
                _context.next = 15;
                return (0, _testHelpers.waitFor)('.fr-element.fr-view', {
                  timeout: 1000
                });

              case 15:
                _context.next = 17;
                return (0, _testHelpers.fillIn)('.fr-element.fr-view', 'updated description');

              case 17:
                assert.equal(this.element.querySelector('.fr-element.fr-view').innerText, 'updated description', 'Description updated');

              case 18:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-workloads/manage-assignment-slider/edit-assignment/project-task-form/component-test", ["@ember/test-helpers", "ember-cli-mirage/test-support", "qunit", "ember-qunit", "freshservice/tests/lib/intl"], function (_testHelpers, _testSupport, _qunit, _emberQunit, _intl) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-workloads/manage-assignment-slider/edit-assignment/project-task-form', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _qunit.test)('it renders project task form', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var projectDisplayId;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Set any properties with this.set('myProperty', 'value');
                // Handle any actions with this.set('myAction', function(val) { ... });
                this.set('assignment', {
                  entityName: 'project_task'
                });
                this.set('modelSchema', {
                  agentId: '41',
                  ownerId: '41',
                  humanDisplayId: 'PRJ-8',
                  key: 'PRJ-8',
                  id: 8,
                  get: function get() {},
                  description: "Project task form",
                  project: {
                    get: function get() {
                      return 'PRJ';
                    }
                  }
                });
                this.set('onUpdate', function () {});
                this.set('isDisabled', function () {});
                this.set('applyBusinessRules', function () {});
                this.set('brFormFields', []);
                this.set('agentOptions', []);
                _context.next = 9;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider::EditAssignment::ProjectTaskForm @assignment={{this.assignment}} @onUpdate={{this.onUpdate}}
                  @agentKey="agentId" @modelSchema={{this.modelSchema}} @isDisabled={{this.isDisabled}}
                  @brFormFields={{this.brFormFields}} @agentOptions={{this.agentOptions}}
                  @applyBusinessRules={{this.applyBusinessRules}} />
                */
                {
                  id: "UjDP/3BE",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider/edit-assignment/project-task-form\",[],[[\"@assignment\",\"@onUpdate\",\"@agentKey\",\"@modelSchema\",\"@isDisabled\",\"@brFormFields\",\"@agentOptions\",\"@applyBusinessRules\"],[[23,0,[\"assignment\"]],[23,0,[\"onUpdate\"]],\"agentId\",[23,0,[\"modelSchema\"]],[23,0,[\"isDisabled\"]],[23,0,[\"brFormFields\"]],[23,0,[\"agentOptions\"]],[23,0,[\"applyBusinessRules\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 9:
                projectDisplayId = this.element.querySelector('[data-test-id="goto-project-task-page"]');
                assert.equal(projectDisplayId.innerText, '#PRJ-8', 'Display Id matches');
                _context.next = 13;
                return (0, _testHelpers.waitFor)('.fr-element.fr-view', {
                  timeout: 1000
                });

              case 13:
                _context.next = 15;
                return (0, _testHelpers.fillIn)('.fr-element.fr-view', 'updated description');

              case 15:
                assert.equal(this.element.querySelector('.fr-element.fr-view').innerText, 'updated description', 'Description updated');
                assert.ok(true);

              case 17:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-workloads/manage-assignment-slider/edit-assignment/release-form/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl"], function (_qunit, _emberQunit, _testHelpers, _intl) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-workloads/manage-assignment-slider/edit-assignment/release-form', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      Ember.set(this, 'store', this.owner.lookup('service:store'));
      this.store.pushPayload({
        'release_form_fields': [{
          id: '120',
          name: 'description',
          label: 'Description',
          choices: []
        }]
      });
    });
    (0, _qunit.test)('it renders release form', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var editForDisplayId, entityUrl;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.set('assignment', {
                  entityName: 'release'
                });
                this.set('modelSchema', {
                  agentId: '41',
                  humanDisplayId: 'PRB-8',
                  id: 8,
                  description: "Release form",
                  get: function get() {}
                });
                this.set('onUpdate', function () {});
                this.set('isDisabled', function () {});
                this.set('applyBusinessRules', function () {});
                this.set('brFormFields', []);
                this.set('agentOptions', []);
                _context.next = 9;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                      <ModuleWorkloads::ManageAssignmentSlider::EditAssignment::ReleaseForm
                				@assignment={{this.assignment}}
                				@onUpdate={{this.onUpdate}}
                				@agentKey="agentId"
                        @modelSchema={{this.modelSchema}} @isDisabled={{this.isDisabled}} @brFormFields={{this.brFormFields}}
                        @agentOptions={{this.agentOptions}} @applyBusinessRules={{this.applyBusinessRules}}>
                      </ModuleWorkloads::ManageAssignmentSlider::EditAssignment::ReleaseForm>
                    
                */
                {
                  id: "gb3xaDlH",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n      \"],[5,\"module-workloads/manage-assignment-slider/edit-assignment/release-form\",[],[[\"@assignment\",\"@onUpdate\",\"@agentKey\",\"@modelSchema\",\"@isDisabled\",\"@brFormFields\",\"@agentOptions\",\"@applyBusinessRules\"],[[23,0,[\"assignment\"]],[23,0,[\"onUpdate\"]],\"agentId\",[23,0,[\"modelSchema\"]],[23,0,[\"isDisabled\"]],[23,0,[\"brFormFields\"]],[23,0,[\"agentOptions\"]],[23,0,[\"applyBusinessRules\"]]]],{\"statements\":[[0,\"\\n      \"]],\"parameters\":[]}],[0,\"\\n    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 9:
                editForDisplayId = this.element.querySelector('[data-test-id="wlm-edit-heading"]');
                entityUrl = editForDisplayId.href.includes('itil/releases/8');
                assert.equal(editForDisplayId.innerText, '#PRB-8', 'Display Id matches');
                assert.ok(entityUrl, 'Entity link matches');
                _context.next = 15;
                return (0, _testHelpers.waitFor)('.fr-element.fr-view', {
                  timeout: 1000
                });

              case 15:
                _context.next = 17;
                return (0, _testHelpers.fillIn)('.fr-element.fr-view', 'updated description');

              case 17:
                assert.equal(this.element.querySelector('.fr-element.fr-view').innerText, 'updated description', 'Description updated');

              case 18:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-workloads/manage-assignment-slider/edit-assignment/task-form/component-test", ["ember-cli-mirage/test-support", "qunit", "freshservice/tests/lib/intl", "ember-qunit", "@ember/test-helpers"], function (_testSupport, _qunit, _intl, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-workloads/manage-assignment-slider/edit-assignment/task-form', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    hooks.beforeEach(function () {
      Ember.set(this, 'store', this.owner.lookup('service:store'));
      this.store.pushPayload({
        agents: [{
          id: 41,
          timeZone: 'chennai'
        }]
      });
      this.server.loadFixtures('tickets');
    });
    (0, _qunit.test)('it renders task form', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var editForDisplayId;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.set('assignment', {
                  entityName: 'task'
                });
                this.set('modelSchema', {
                  agentId: '41',
                  humanDisplayId: 'TSK-8',
                  id: 8,
                  get: function get() {},
                  taskableType: 'tickets',
                  taskableDisplayId: '12',
                  description: "Task form",
                  planned_effort: {
                    'choices': []
                  }
                });
                this.set('onUpdate', function () {});
                this.set('isDisabled', function () {});
                this.set('applyBusinessRules', function () {});
                this.set('brFormFields', []);
                this.set('agentOptions', []);
                _context.next = 9;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                      <ModuleWorkloads::ManageAssignmentSlider::EditAssignment::TaskForm @assignment={{this.assignment}} @onUpdate={{this.onUpdate}}
                			@agentKey="agentId"
                        @modelSchema={{this.modelSchema}} @isDisabled={{this.isDisabled}} @brFormFields={{this.brFormFields}}
                        @agentOptions={{this.agentOptions}} @applyBusinessRules={{this.applyBusinessRules}}>
                      </ModuleWorkloads::ManageAssignmentSlider::EditAssignment::TaskForm>
                    
                */
                {
                  id: "b1frruHv",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n      \"],[5,\"module-workloads/manage-assignment-slider/edit-assignment/task-form\",[],[[\"@assignment\",\"@onUpdate\",\"@agentKey\",\"@modelSchema\",\"@isDisabled\",\"@brFormFields\",\"@agentOptions\",\"@applyBusinessRules\"],[[23,0,[\"assignment\"]],[23,0,[\"onUpdate\"]],\"agentId\",[23,0,[\"modelSchema\"]],[23,0,[\"isDisabled\"]],[23,0,[\"brFormFields\"]],[23,0,[\"agentOptions\"]],[23,0,[\"applyBusinessRules\"]]]],{\"statements\":[[0,\"\\n      \"]],\"parameters\":[]}],[0,\"\\n    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 9:
                editForDisplayId = this.element.querySelector('[data-test-id="wlm-edit-heading"]');
                assert.equal(editForDisplayId.innerText, '#TSK-8', 'Display Id matches');
                _context.next = 13;
                return (0, _testHelpers.waitFor)('.fr-element.fr-view', {
                  timeout: 1000
                });

              case 13:
                _context.next = 15;
                return (0, _testHelpers.fillIn)('.fr-element.fr-view', 'updated description');

              case 15:
                assert.equal(this.element.querySelector('.fr-element.fr-view').innerText, 'updated description', 'Description updated');

              case 16:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-workloads/manage-assignment-slider/edit-assignment/ticket-form/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl"], function (_qunit, _emberQunit, _testHelpers, _intl) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-workloads/manage-assignment-slider/edit-assignment/ticket-form', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      Ember.set(this, 'store', this.owner.lookup('service:store'));
      this.store.pushPayload({
        'ticket_form_fields': [{
          id: '120',
          name: 'description',
          label: 'Description',
          choices: []
        }]
      });
    });
    (0, _qunit.test)('it renders ticket form', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var editForDisplayId, entityUrl;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.set('assignment', {
                  entityName: 'ticket'
                });
                this.set('modelSchema', {
                  agentId: '41',
                  humanDisplayId: 'INC-8',
                  displayId: 8,
                  description: "Incident form",
                  get: function get() {}
                });
                this.set('onUpdate', function () {});
                this.set('isDisabled', function () {
                  return false;
                });
                this.set('applyBusinessRules', function () {});
                this.set('brFormFields', []);
                this.set('agentOptions', []);
                _context.next = 9;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                      <ModuleWorkloads::ManageAssignmentSlider::EditAssignment::TicketForm @agentKey="agentId" @assignment={{this.assignment}} @onUpdate={{this.onUpdate}}
                        @modelSchema={{this.modelSchema}} @isDisabled={{this.isDisabled}} @brFormFields={{this.brFormFields}}
                        @agentOptions={{this.agentOptions}} @applyBusinessRules={{this.applyBusinessRules}}>
                      </ModuleWorkloads::ManageAssignmentSlider::EditAssignment::TicketForm>
                    
                */
                {
                  id: "K8oQhaGM",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n      \"],[5,\"module-workloads/manage-assignment-slider/edit-assignment/ticket-form\",[],[[\"@agentKey\",\"@assignment\",\"@onUpdate\",\"@modelSchema\",\"@isDisabled\",\"@brFormFields\",\"@agentOptions\",\"@applyBusinessRules\"],[\"agentId\",[23,0,[\"assignment\"]],[23,0,[\"onUpdate\"]],[23,0,[\"modelSchema\"]],[23,0,[\"isDisabled\"]],[23,0,[\"brFormFields\"]],[23,0,[\"agentOptions\"]],[23,0,[\"applyBusinessRules\"]]]],{\"statements\":[[0,\"\\n      \"]],\"parameters\":[]}],[0,\"\\n    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 9:
                editForDisplayId = this.element.querySelector('[data-test-id="wlm-edit-heading"]');
                entityUrl = editForDisplayId.href.includes('helpdesk/tickets/8');
                assert.equal(editForDisplayId.innerText, '#INC-8', 'Display Id matches');
                assert.ok(entityUrl, 'Entity link matches');
                _context.next = 15;
                return (0, _testHelpers.waitFor)('.fr-element.fr-view', {
                  timeout: 1000
                });

              case 15:
                _context.next = 17;
                return (0, _testHelpers.fillIn)('.fr-element.fr-view', 'updated description');

              case 17:
                assert.equal(this.element.querySelector('.fr-element.fr-view').innerText, 'updated description', 'Description updated');

              case 18:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-workloads/manage-assignment-slider/empty-state/component-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-workloads/manage-assignment-slider/empty-state', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the passed empty message', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var messageDom;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.set('emptyMessage', 'No Assignment found');
                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider::EmptyState @emptyMessage={{this.emptyMessage}}/>
                */
                {
                  id: "y3CR41Ej",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider/empty-state\",[],[[\"@emptyMessage\"],[[23,0,[\"emptyMessage\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                messageDom = this.element.querySelector('[data-test-id="wlm-mas-empty-state-message"]');
                assert.equal(messageDom.textContent.trim(), 'No Assignment found');
                this.set('emptyMessage', 'No Search found for');
                assert.equal(messageDom.textContent.trim(), 'No Search found for');

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-workloads/manage-assignment-slider/list/entity-switcher/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/stub-current-account", "freshservice/tests/data/custom-translations"], function (_qunit, _emberQunit, _testHelpers, _intl, _stubCurrentUser, _stubCurrentAccount, _customTranslations) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-workloads/manage-assignment-slider/list/entity-switcher', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      (0, _stubCurrentAccount.stubCurrentAccount)({
        customTranslations: _customTranslations.defaultCustomTranslations,
        features: ['fr_project', 'itil_modules']
      });
      (0, _stubCurrentUser.stubCurrentUser)({
        privileges: ['view_changes', 'view_problems', 'view_releases', 'manage_tickets', 'view_projects']
      });
    });
    (0, _qunit.test)('it should render task type selected in the component', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var triggerEle;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.set('currentEntityType', 'task');
                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider::List::EntitySwitcher
                			 @currentEntity = {{this.currentEntityType}}/>
                */
                {
                  id: "vused2EZ",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider/list/entity-switcher\",[],[[\"@currentEntity\"],[[23,0,[\"currentEntityType\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                triggerEle = this.element.querySelector('[data-test-id="wlm-mas-entity-switcher-trigger"]');
                assert.equal(triggerEle.textContent.trim(), 'Tasks');

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should all the available entity types in the dropdown', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.set('currentEntityType', 'task');
                this.set('onChangeEntityType', function () {});
                _context2.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider::List::EntitySwitcher
                			 @currentEntity = {{this.currentEntityType}}
                			/>
                */
                {
                  id: "vused2EZ",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider/list/entity-switcher\",[],[[\"@currentEntity\"],[[23,0,[\"currentEntityType\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context2.next = 6;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-entity-switcher-trigger"]');

              case 6:
                assert.dom('[data-test-id="wlm-mas-entity-switcher-option-task"]').exists();
                assert.dom('[data-test-id="wlm-mas-entity-switcher-option-project_task"]').exists();
                assert.dom('[data-test-id="wlm-mas-entity-switcher-option-ticket"]').exists();
                assert.dom('[data-test-id="wlm-mas-entity-switcher-option-change"]').exists();
                assert.dom('[data-test-id="wlm-mas-entity-switcher-option-release"]').exists();
                assert.dom('[data-test-id="wlm-mas-entity-switcher-option-problem"]').exists();

              case 12:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should call onChangeEntityType with ticket on selecting ticket type', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var _this = this;

        var triggerEle;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this.set('currentEntityType', 'task');
                this.set('onChangeEntityType', function (value) {
                  assert.equal(value, 'ticket');

                  _this.set('currentEntityType', value);
                });
                _context3.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider::List::EntitySwitcher
                			 @currentEntity = {{this.currentEntityType}}
                			 @onChangeEntityType = {{this.onChangeEntityType}}/>
                */
                {
                  id: "D+JliA5B",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider/list/entity-switcher\",[],[[\"@currentEntity\",\"@onChangeEntityType\"],[[23,0,[\"currentEntityType\"]],[23,0,[\"onChangeEntityType\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                triggerEle = this.element.querySelector('[data-test-id="wlm-mas-entity-switcher-trigger"]');
                assert.equal(triggerEle.textContent.trim(), 'Tasks');
                _context3.next = 8;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-entity-switcher-trigger"]');

              case 8:
                _context3.next = 10;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-entity-switcher-option-ticket"]');

              case 10:
                assert.equal(triggerEle.textContent.trim(), 'Tickets');

              case 11:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should call onChangeEntityType with problem on selecting problem type', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var _this2 = this;

        var triggerEle;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                this.set('currentEntityType', 'task');
                this.set('onChangeEntityType', function (value) {
                  assert.equal(value, 'problem');

                  _this2.set('currentEntityType', value);
                });
                _context4.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider::List::EntitySwitcher
                			 @currentEntity = {{this.currentEntityType}}
                			 @onChangeEntityType = {{this.onChangeEntityType}}/>
                */
                {
                  id: "D+JliA5B",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider/list/entity-switcher\",[],[[\"@currentEntity\",\"@onChangeEntityType\"],[[23,0,[\"currentEntityType\"]],[23,0,[\"onChangeEntityType\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                triggerEle = this.element.querySelector('[data-test-id="wlm-mas-entity-switcher-trigger"]');
                assert.equal(triggerEle.textContent.trim(), 'Tasks');
                _context4.next = 8;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-entity-switcher-trigger"]');

              case 8:
                _context4.next = 10;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-entity-switcher-option-problem"]');

              case 10:
                assert.equal(triggerEle.textContent.trim(), 'Problems');

              case 11:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should call onChangeEntityType with change on selecting change type', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var _this3 = this;

        var triggerEle;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                this.set('currentEntityType', 'task');
                this.set('onChangeEntityType', function (value) {
                  assert.equal(value, 'change');

                  _this3.set('currentEntityType', value);
                });
                _context5.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider::List::EntitySwitcher
                			 @currentEntity = {{this.currentEntityType}}
                			 @onChangeEntityType = {{this.onChangeEntityType}}/>
                */
                {
                  id: "D+JliA5B",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider/list/entity-switcher\",[],[[\"@currentEntity\",\"@onChangeEntityType\"],[[23,0,[\"currentEntityType\"]],[23,0,[\"onChangeEntityType\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                triggerEle = this.element.querySelector('[data-test-id="wlm-mas-entity-switcher-trigger"]');
                assert.equal(triggerEle.textContent.trim(), 'Tasks');
                _context5.next = 8;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-entity-switcher-trigger"]');

              case 8:
                _context5.next = 10;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-entity-switcher-option-change"]');

              case 10:
                assert.equal(triggerEle.textContent.trim(), 'Changes');

              case 11:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should call onChangeEntityType with release on selecting release type', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var _this4 = this;

        var triggerEle;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                this.set('currentEntityType', 'task');
                this.set('onChangeEntityType', function (value) {
                  assert.equal(value, 'release');

                  _this4.set('currentEntityType', value);
                });
                _context6.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider::List::EntitySwitcher
                			 @currentEntity = {{this.currentEntityType}}
                			 @onChangeEntityType = {{this.onChangeEntityType}}/>
                */
                {
                  id: "D+JliA5B",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider/list/entity-switcher\",[],[[\"@currentEntity\",\"@onChangeEntityType\"],[[23,0,[\"currentEntityType\"]],[23,0,[\"onChangeEntityType\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                triggerEle = this.element.querySelector('[data-test-id="wlm-mas-entity-switcher-trigger"]');
                assert.equal(triggerEle.textContent.trim(), 'Tasks');
                _context6.next = 8;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-entity-switcher-trigger"]');

              case 8:
                _context6.next = 10;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-entity-switcher-option-release"]');

              case 10:
                assert.equal(triggerEle.textContent.trim(), 'Releases');

              case 11:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x6) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should call onChangeEntityType with project_task on selecting project_task type', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var _this5 = this;

        var triggerEle;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                this.set('currentEntityType', 'task');
                this.set('onChangeEntityType', function (value) {
                  assert.equal(value, 'project_task');

                  _this5.set('currentEntityType', value);
                });
                _context7.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider::List::EntitySwitcher
                			 @currentEntity = {{this.currentEntityType}}
                			 @onChangeEntityType = {{this.onChangeEntityType}}/>
                */
                {
                  id: "D+JliA5B",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider/list/entity-switcher\",[],[[\"@currentEntity\",\"@onChangeEntityType\"],[[23,0,[\"currentEntityType\"]],[23,0,[\"onChangeEntityType\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                triggerEle = this.element.querySelector('[data-test-id="wlm-mas-entity-switcher-trigger"]');
                assert.equal(triggerEle.textContent.trim(), 'Tasks');
                _context7.next = 8;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-entity-switcher-trigger"]');

              case 8:
                _context7.next = 10;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-entity-switcher-option-project_task"]');

              case 10:
                assert.equal(triggerEle.textContent.trim(), 'Project Tasks');

              case 11:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x7) {
        return _ref8.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-workloads/manage-assignment-slider/list/filter/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl"], function (_qunit, _emberQunit, _testHelpers, _intl) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-workloads/manage-assignment-slider/list/filter', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _qunit.test)('it should render the component', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var ddTrigger;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider::List::Filter
                			@planType={{'all'}}
                			@statusType={{'all'}}/>
                */
                {
                  id: "qKGDY+tU",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider/list/filter\",[],[[\"@planType\",\"@statusType\"],[\"all\",\"all\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                ddTrigger = this.element.querySelector('[data-test-id="wlm-mas-filter-trigger"]');
                assert.ok(ddTrigger);

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render plan types for the filter', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var allEle, unplannedEle, plannedTypeEle;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider::List::Filter
                			@planType={{'all'}}
                			@statusType={{'all'}}/>
                */
                {
                  id: "qKGDY+tU",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider/list/filter\",[],[[\"@planType\",\"@statusType\"],[\"all\",\"all\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context2.next = 4;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-filter-trigger"]');

              case 4:
                allEle = this.element.querySelector('[data-test-id="wlm-mas-filter-plan-type-all"]');
                unplannedEle = this.element.querySelector('[data-test-id="wlm-mas-filter-plan-type-unplanned"]');
                plannedTypeEle = this.element.querySelector('[data-test-id="wlm-mas-filter-plan-type-planned"]');
                assert.ok(allEle, 'should render the all entity type filter');
                assert.ok(unplannedEle, 'should render the unplanned entity type filter');
                assert.ok(plannedTypeEle, 'should render the planned entity type filter');

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should change plan type filter on selecting planned', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var allRadio, plannedRadio;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider::List::Filter
                			@planType={{'all'}}
                			@statusType={{'all'}}/>
                */
                {
                  id: "qKGDY+tU",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider/list/filter\",[],[[\"@planType\",\"@statusType\"],[\"all\",\"all\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context3.next = 4;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-filter-trigger"]');

              case 4:
                allRadio = this.element.querySelector('[id="assignment_entity_plan_all"]');
                assert.ok(allRadio.checked, 'should selected all entity plan type');
                _context3.next = 8;
                return (0, _testHelpers.click)('[id="assignment_entity_plan_planned"]');

              case 8:
                plannedRadio = this.element.querySelector('[id="assignment_entity_plan_planned"]');
                assert.notOk(allRadio.checked, 'should not be selected all entity type, as click on planned');
                assert.ok(plannedRadio.checked, 'should selected planned for plan filter');

              case 11:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should change plan type filter on selecting unplanned', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var allRadio, unplannedRadio;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider::List::Filter
                			@planType={{'all'}}
                			@statusType={{'all'}}/>
                */
                {
                  id: "qKGDY+tU",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider/list/filter\",[],[[\"@planType\",\"@statusType\"],[\"all\",\"all\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context4.next = 4;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-filter-trigger"]');

              case 4:
                allRadio = this.element.querySelector('[id="assignment_entity_plan_all"]');
                assert.ok(allRadio.checked, 'should selected all entity plan type');
                _context4.next = 8;
                return (0, _testHelpers.click)('[id="assignment_entity_plan_unplanned"]');

              case 8:
                unplannedRadio = this.element.querySelector('[id="assignment_entity_plan_unplanned"]');
                assert.notOk(allRadio.checked, 'should not be selected all entity type, as click on planned');
                assert.ok(unplannedRadio.checked, 'should selected unplanned for plan filter');

              case 11:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render status types for the filter', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var allEle, overdueEle, dueTodayEle;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider::List::Filter
                			@planType={{'all'}}
                			@statusType={{'all'}}/>
                */
                {
                  id: "qKGDY+tU",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider/list/filter\",[],[[\"@planType\",\"@statusType\"],[\"all\",\"all\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context5.next = 4;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-filter-trigger"]');

              case 4:
                allEle = this.element.querySelector('[data-test-id="wlm-mas-filter-status-type-all"]');
                overdueEle = this.element.querySelector('[data-test-id="wlm-mas-filter-status-type-overdue"]');
                dueTodayEle = this.element.querySelector('[data-test-id="wlm-mas-filter-status-type-due_today"]');
                assert.ok(allEle, 'should render the all status type filter');
                assert.ok(overdueEle, 'should render the overdue status type filter');
                assert.ok(dueTodayEle, 'should render the due today status type filter');

              case 10:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should change status types filter on selecting overdue', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var allRadio, overdueRadio;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider::List::Filter
                			@planType={{'all'}}
                			@statusType={{'all'}}/>
                */
                {
                  id: "qKGDY+tU",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider/list/filter\",[],[[\"@planType\",\"@statusType\"],[\"all\",\"all\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context6.next = 4;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-filter-trigger"]');

              case 4:
                allRadio = this.element.querySelector('[id="assignment_entity_status_all"]');
                assert.ok(allRadio.checked, 'should selected all status');
                _context6.next = 8;
                return (0, _testHelpers.click)('[id="assignment_entity_status_overdue"]');

              case 8:
                assert.notOk(allRadio.checked, 'should not be selected all status type, as click on overdue');
                overdueRadio = this.element.querySelector('[id="assignment_entity_status_overdue"]');
                assert.ok(overdueRadio.checked, 'should selected overdue status');

              case 11:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x6) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should change status types filter on selecting due-today', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var allRadio, dueTodayRadio;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider::List::Filter
                			@planType={{'all'}}
                			@statusType={{'all'}}/>
                */
                {
                  id: "qKGDY+tU",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider/list/filter\",[],[[\"@planType\",\"@statusType\"],[\"all\",\"all\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context7.next = 4;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-filter-trigger"]');

              case 4:
                allRadio = this.element.querySelector('[id="assignment_entity_status_all"]');
                assert.ok(allRadio.checked, 'should selected all status');
                _context7.next = 8;
                return (0, _testHelpers.click)('[id="assignment_entity_status_due_today"]');

              case 8:
                assert.notOk(allRadio.checked, 'should not be selected all status type, as click on overdue');
                dueTodayRadio = this.element.querySelector('[id="assignment_entity_status_due_today"]');
                assert.ok(dueTodayRadio.checked, 'should selected overdue status');

              case 11:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x7) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should call doFilter action on clicking apply button with selected plan and status', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var allEntityStatusRadio, allPlanRadio, dueTodayRadio;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                this.set('onFilter', function (entityType, statusType) {
                  assert.equal(entityType, 'all');
                  assert.equal(statusType, 'due_today');
                });
                _context8.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider::List::Filter
                			@planType={{'all'}}
                			@statusType={{'all'}}
                			@doFilter = {{this.onFilter}}/>
                */
                {
                  id: "v1z7J3do",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider/list/filter\",[],[[\"@planType\",\"@statusType\",\"@doFilter\"],[\"all\",\"all\",[23,0,[\"onFilter\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context8.next = 5;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-filter-trigger"]');

              case 5:
                allEntityStatusRadio = this.element.querySelector('[id="assignment_entity_status_all"]');
                assert.ok(allEntityStatusRadio.checked, 'should selected all status');
                allPlanRadio = this.element.querySelector('[id="assignment_entity_plan_all"]');
                assert.ok(allPlanRadio.checked, 'should selected all entity plan type');
                _context8.next = 11;
                return (0, _testHelpers.click)('[id="assignment_entity_status_due_today"]');

              case 11:
                dueTodayRadio = this.element.querySelector('[id="assignment_entity_status_due_today"]');
                assert.ok(dueTodayRadio.checked, 'should selected overdue status');
                _context8.next = 15;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-filter-action-apply"]');

              case 15:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x8) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should call doFilter action on clicking apply button with selected unplanned and overdue', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        var allEntityStatusRadio, allPlanRadio, overdueRadio;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                this.set('onFilter', function (planType, statusType) {
                  assert.equal(planType, 'unplanned');
                  assert.equal(statusType, 'overdue');
                });
                _context9.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider::List::Filter
                			@planType={{'all'}}
                			@statusType={{'all'}}
                			@doFilter = {{this.onFilter}}/>
                */
                {
                  id: "v1z7J3do",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider/list/filter\",[],[[\"@planType\",\"@statusType\",\"@doFilter\"],[\"all\",\"all\",[23,0,[\"onFilter\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context9.next = 5;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-filter-trigger"]');

              case 5:
                allEntityStatusRadio = this.element.querySelector('[id="assignment_entity_status_all"]');
                assert.ok(allEntityStatusRadio.checked, 'should selected all status');
                allPlanRadio = this.element.querySelector('[id="assignment_entity_plan_all"]');
                assert.ok(allPlanRadio.checked, 'should selected all entity plan type');
                _context9.next = 11;
                return (0, _testHelpers.click)('[id="assignment_entity_status_overdue"]');

              case 11:
                _context9.next = 13;
                return (0, _testHelpers.click)('[id="assignment_entity_plan_unplanned"]');

              case 13:
                overdueRadio = this.element.querySelector('[id="assignment_entity_status_overdue"]');
                assert.ok(overdueRadio.checked, 'should selected overdue status');
                _context9.next = 17;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-filter-action-apply"]');

              case 17:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x9) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should call doFilter action on clicking reset button with all plan and all status', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var allEntityStatusRadio, allPlanRadio, overdueRadio;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                this.set('onFilter', function (planType, statusType) {
                  assert.equal(planType, 'all');
                  assert.equal(statusType, 'all');
                });
                _context10.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider::List::Filter
                			@planType={{'all'}}
                			@statusType={{'all'}}
                			@doFilter = {{this.onFilter}}/>
                */
                {
                  id: "v1z7J3do",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider/list/filter\",[],[[\"@planType\",\"@statusType\",\"@doFilter\"],[\"all\",\"all\",[23,0,[\"onFilter\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context10.next = 5;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-filter-trigger"]');

              case 5:
                allEntityStatusRadio = this.element.querySelector('[id="assignment_entity_status_all"]');
                assert.ok(allEntityStatusRadio.checked, 'should selected all status');
                allPlanRadio = this.element.querySelector('[id="assignment_entity_plan_all"]');
                assert.ok(allPlanRadio.checked, 'should selected all entity plan type');
                _context10.next = 11;
                return (0, _testHelpers.click)('[id="assignment_entity_status_overdue"]');

              case 11:
                _context10.next = 13;
                return (0, _testHelpers.click)('[id="assignment_entity_plan_unplanned"]');

              case 13:
                overdueRadio = this.element.querySelector('[id="assignment_entity_status_overdue"]');
                assert.ok(overdueRadio.checked, 'should selected overdue status');
                _context10.next = 17;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-filter-action-reset"]');

              case 17:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x10) {
        return _ref11.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-workloads/manage-assignment-slider/list/sort/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl"], function (_qunit, _emberQunit, _testHelpers, _intl) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | module-workloads/manage-assignment-slider/list/sort', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      var sortOptions = ['created_at', 'updated_at', 'planned_start_date', 'planned_end_date'];
      this.set('sortOptions', sortOptions);
    });
    (0, _qunit.test)('it should renders the component', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider::List::Sort
                			@sortBy = {{'created_at'}}
                			@sortOptions = {{this.sortOptions}}
                			@sortOrder = 'desc'/>
                */
                {
                  id: "u2YOzzWh",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider/list/sort\",[],[[\"@sortBy\",\"@sortOptions\",\"@sortOrder\"],[\"created_at\",[23,0,[\"sortOptions\"]],\"desc\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.dom('[data-test-id="wlm-mas-sort-trigger"]').exists();

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should display all the sort by options in dropdown', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider::List::Sort
                			@sortBy = {{'created_at'}}
                			@sortOptions = {{this.sortOptions}}
                			@sortOrder = 'desc'/>
                */
                {
                  id: "u2YOzzWh",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider/list/sort\",[],[[\"@sortBy\",\"@sortOptions\",\"@sortOrder\"],[\"created_at\",[23,0,[\"sortOptions\"]],\"desc\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context2.next = 4;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-sort-trigger"]');

              case 4:
                assert.dom('[data-test-id="wlm-mas-sort-by-option-created_at"]').exists();
                assert.dom('[data-test-id="wlm-mas-sort-by-option-updated_at"]').exists();
                assert.dom('[data-test-id="wlm-mas-sort-by-option-planned_start_date"]').exists();
                assert.dom('[data-test-id="wlm-mas-sort-by-option-planned_end_date"]').exists();

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should asc and desc sort order options in dropdown', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider::List::Sort
                			@sortBy = {{'created_at'}}
                			@sortOptions = {{this.sortOptions}}
                			@sortOrder = 'desc'/>
                */
                {
                  id: "u2YOzzWh",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider/list/sort\",[],[[\"@sortBy\",\"@sortOptions\",\"@sortOrder\"],[\"created_at\",[23,0,[\"sortOptions\"]],\"desc\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context3.next = 4;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-sort-trigger"]');

              case 4:
                assert.dom('[data-test-id="wlm-mas-sort-order-option-asc"]').exists();
                assert.dom('[data-test-id="wlm-mas-sort-order-option-desc"]').exists();

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should call the doSort method with ascending sortOrder', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                this.set('doSort', function (sortBy, sortOrder) {
                  assert.equal(sortBy, 'created_at');
                  assert.equal(sortOrder, 'asc');
                });
                _context4.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider::List::Sort
                			@sortBy = {{'created_at'}}
                			@sortOptions = {{this.sortOptions}}
                			@sortOrder = 'desc'
                			@doSort = {{this.doSort}}/>
                */
                {
                  id: "VLYbQ0m5",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider/list/sort\",[],[[\"@sortBy\",\"@sortOptions\",\"@sortOrder\",\"@doSort\"],[\"created_at\",[23,0,[\"sortOptions\"]],\"desc\",[23,0,[\"doSort\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context4.next = 5;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-sort-trigger"]');

              case 5:
                _context4.next = 7;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-sort-order-option-asc"]');

              case 7:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should call the doSort method with descending sortOrder', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                this.set('doSort', function (sortBy, sortOrder) {
                  assert.equal(sortBy, 'created_at');
                  assert.equal(sortOrder, 'desc');
                });
                _context5.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider::List::Sort
                			@sortBy = {{'created_at'}}
                			@sortOptions = {{this.sortOptions}}
                			@sortOrder = 'asc'
                			@doSort = {{this.doSort}}/>
                */
                {
                  id: "+LKZoIy8",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider/list/sort\",[],[[\"@sortBy\",\"@sortOptions\",\"@sortOrder\",\"@doSort\"],[\"created_at\",[23,0,[\"sortOptions\"]],\"asc\",[23,0,[\"doSort\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context5.next = 5;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-sort-trigger"]');

              case 5:
                _context5.next = 7;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-sort-order-option-desc"]');

              case 7:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should call the doSort method with sort-by planned start date', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                this.set('doSort', function (sortBy, sortOrder) {
                  assert.equal(sortBy, 'planned_start_date');
                  assert.equal(sortOrder, 'asc');
                });
                _context6.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider::List::Sort
                			@sortBy = {{'created_at'}}
                			@sortOptions = {{this.sortOptions}}
                			@sortOrder = 'asc'
                			@doSort = {{this.doSort}}/>
                */
                {
                  id: "+LKZoIy8",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider/list/sort\",[],[[\"@sortBy\",\"@sortOptions\",\"@sortOrder\",\"@doSort\"],[\"created_at\",[23,0,[\"sortOptions\"]],\"asc\",[23,0,[\"doSort\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context6.next = 5;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-sort-trigger"]');

              case 5:
                _context6.next = 7;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-sort-by-option-planned_start_date"]');

              case 7:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x6) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should call the doSort method with sort-by planned end date', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                this.set('doSort', function (sortBy, sortOrder) {
                  assert.equal(sortBy, 'planned_end_date');
                  assert.equal(sortOrder, 'asc');
                });
                _context7.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider::List::Sort
                			@sortBy = {{'created_at'}}
                			@sortOptions = {{this.sortOptions}}
                			@sortOrder = 'asc'
                			@doSort = {{this.doSort}}/>
                */
                {
                  id: "+LKZoIy8",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider/list/sort\",[],[[\"@sortBy\",\"@sortOptions\",\"@sortOrder\",\"@doSort\"],[\"created_at\",[23,0,[\"sortOptions\"]],\"asc\",[23,0,[\"doSort\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context7.next = 5;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-sort-trigger"]');

              case 5:
                _context7.next = 7;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-sort-by-option-planned_end_date"]');

              case 7:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x7) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should call the doSort method with sort-by update at', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                this.set('doSort', function (sortBy, sortOrder) {
                  assert.equal(sortBy, 'updated_at');
                  assert.equal(sortOrder, 'asc');
                });
                _context8.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::ManageAssignmentSlider::List::Sort
                			@sortBy = {{'created_at'}}
                			@sortOptions = {{this.sortOptions}}
                			@sortOrder = 'asc'
                			@doSort = {{this.doSort}}/>
                */
                {
                  id: "+LKZoIy8",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/manage-assignment-slider/list/sort\",[],[[\"@sortBy\",\"@sortOptions\",\"@sortOrder\",\"@doSort\"],[\"created_at\",[23,0,[\"sortOptions\"]],\"asc\",[23,0,[\"doSort\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context8.next = 5;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-sort-trigger"]');

              case 5:
                _context8.next = 7;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-sort-by-option-updated_at"]');

              case 7:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x8) {
        return _ref9.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-workloads/people-filter-test", ["freshservice/config/environment", "@ember/test-helpers", "ember-qunit", "freshservice/constants/workload", "qunit", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/intl"], function (_environment, _testHelpers, _emberQunit, _workload, _qunit, _stubCurrentUser, _intl) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var GROUP_PAYLOAD = [{
    "id": 81,
    "name": "Change Team",
    "description": "Change Management Team",
    "escalate_to": null,
    "unassigned_for": "15m",
    "business_hours_id": null,
    "created_at": "2022-03-25T10:22:57Z",
    "updated_at": "2022-03-25T14:51:32Z",
    "auto_ticket_assign": false,
    "restricted": false,
    "approval_required": false,
    "agent_ids": [34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90],
    "members": [34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90],
    "observers": [],
    "leaders": [],
    "members_pending_approval": [],
    "leaders_pending_approval": [],
    "observers_pending_approval": []
  }, {
    "id": 78,
    "name": "Major Incident Team",
    "description": "Major Incident Management Team",
    "escalate_to": null,
    "unassigned_for": "15m",
    "business_hours_id": null,
    "created_at": "2022-03-25T10:22:57Z",
    "updated_at": "2022-04-02T17:16:15Z",
    "auto_ticket_assign": false,
    "restricted": false,
    "approval_required": false,
    "agent_ids": [34, 91, 92],
    "members": [34, 91, 92],
    "observers": [],
    "leaders": [],
    "members_pending_approval": [],
    "leaders_pending_approval": [],
    "observers_pending_approval": []
  }];
  var USER_PAYLOAD = [{
    "avatar_url": "",
    "email": "agent52@gmail.com",
    "id": 91,
    "name": "1agent fiftytwo"
  }, {
    "avatar_url": "",
    "email": "agent53@gmail.com",
    "id": 92,
    "name": "agent fiftythree"
  }, {
    "email": "chris.blesson@freshworks.com",
    "id": 34,
    "name": "Blesson"
  }, {
    "avatar_url": "https://freshworks173.freshworks.com/api/v2/users/152806053332157138/image?variant=SMALL",
    "email": "chris.blesson@freshworks.com",
    "id": 41,
    "name": "1Blesson"
  }];
  var USER_PAYLOAD_SINGLE_USER = {
    users: [{
      "avatar_url": "https://freshworks173.freshworks.com/api/v2/users/152806053332157138/image?variant=SMALL",
      "email": "chris.blesson@freshworks.com",
      "id": 41,
      "name": "1Blesson"
    }],
    "meta": {
      "total_pages": 2,
      "total": 53,
      "page": 2
    }
  };
  var PROJECT_PAYLOAD = [{
    "id": 1,
    "name": "New application rollout (sample project)",
    "key": "NARSP",
    "description": null,
    "start_date": "2022-03-24T18:30:00.000Z",
    "end_date": "2022-04-25T18:29:59.000Z",
    "progress": {
      "todo": 11,
      "in_progress": 0,
      "done": 0
    },
    "created_at": "2022-03-25T10:28:10.000Z",
    "archived_at": null,
    "actual_start_date": null,
    "actual_end_date": null,
    "template_flag": false,
    "project_category": 1,
    "priority": "medium",
    "state": "Active",
    "status": "Yet to start",
    "owner_id": 1000000003,
    "user_ids": [1000000004, 1000000005, 1000000003]
  }];
  var USER_STATE = {
    "users": USER_PAYLOAD,
    "groups": GROUP_PAYLOAD,
    "body": {
      "projects": PROJECT_PAYLOAD
    },
    "meta": {
      "total_pages": 2,
      "total": 53,
      "page": 2
    }
  };

  var MOCK_RESPONSE = _objectSpread({
    json: function json() {
      return USER_STATE;
    }
  }, USER_STATE);

  var EMPTY_MOCK_RESPONSE = _objectSpread({
    json: function json() {
      return USER_PAYLOAD_SINGLE_USER;
    }
  }, USER_PAYLOAD_SINGLE_USER);

  var FALLBACK_STATE = {
    "users": [],
    "groups": [],
    "body": {
      "projects": []
    },
    "meta": {
      "total_pages": 1,
      "total": 1,
      "page": 1
    }
  };

  var FALLBACK_MOCK_RESPONSE = _objectSpread(_objectSpread({}, FALLBACK_STATE), {}, {
    json: function json() {
      return _objectSpread({}, FALLBACK_STATE);
    }
  });

  var MOCK_FETCH_SERVICE = Ember.Service.extend({
    request: function request(path, options) {
      var response = null;
      this.setProperties({
        path: path,
        options: options
      });

      if (path === '/itil/members/suggest?q=Agent') {
        response = MOCK_RESPONSE;
      } else if (path === '/itil/members/suggest?q=') {
        response = MOCK_RESPONSE;
      } else if (path === '/itil/members?page=1&per_page=30') {
        response = MOCK_RESPONSE;
      } else if (path === '/itil/members?page=1&per_page=50') {
        response = MOCK_RESPONSE;
      } else if (path === '/itil/members?ids=41,42&per_page=30') {
        response = MOCK_RESPONSE;
      } else if (path === '/itil/members?ids=41&per_page=30') {
        response = EMPTY_MOCK_RESPONSE;
      } else if (path === 'freshrelease/settings/suggest-my-projects?placeholder[query]=New') {
        response = MOCK_RESPONSE;
      } else if (path === 'freshrelease/settings/suggest-my-projects?placeholder[query]=') {
        response = MOCK_RESPONSE;
      } else if (path === '/itil/members/filter_by_projects?ids=1&page=1&per_page=30') {
        response = MOCK_RESPONSE;
      } else if (path === 'groups?filter=my_agent_groups') {
        response = MOCK_RESPONSE;
      } else if (path === '/itil/members/filter_by_groups?ids=81,78&page=1&per_page=30') {
        response = MOCK_RESPONSE;
      } else if (path === '/itil/members/filter_by_groups?ids=81,78&page=1&per_page=50') {
        response = MOCK_RESPONSE;
      } else if (path === 'freshrelease/settings/filter_projects?query_params[id]=1&placeholder[query]=') {
        response = MOCK_RESPONSE;
      } else if (path === 'workload/allocations?period=2022-04-24,2022-04-27&user_ids=41&entity_type=problem,change,ticket,release,task,issue') {
        response = {
          "user_allocations": []
        };
      } else if (path === 'workload/allocations?period=2022-04-24,2022-04-12&user_ids=91&entity_type=problem,change,ticket,release,task,issue') {
        response = {
          "user_allocations": [{
            "user_id": 41,
            "allocations": [{
              "allocation_minutes": 0,
              "item_count": 1,
              "allocation_percentage": 0,
              "allocation_status": null,
              "date": "2022-04-06"
            }]
          }]
        };
      } else {
        response = FALLBACK_MOCK_RESPONSE;
      }

      return Ember.RSVP.resolve(response);
    },
    json: function json() {
      return [];
    },
    host: _environment.default.environment === 'development' ? "".concat(_environment.default.APP.hostURL, "/api/_/") : '/api/_/'
  });
  var OWN_WORKLOAD_USER = {
    privileges: ['manage_tickets', 'view_problems', 'view_changes', 'view_releases', 'view_projects'],
    hasActiveFreshId: true,
    isAssumedUser: false
  };
  var GROUP_MEMBERS_WORKLOAD_USER = {
    privileges: ['manage_group_members_workload'],
    hasActiveFreshId: true,
    isAssumedUser: false
  };
  var PROJECT_MEMBER_WORKLOAD_USER = {
    privileges: ['manage_project_members_workload'],
    hasActiveFreshId: true,
    isAssumedUser: false
  };

  var emptyFunction = function emptyFunction() {};

  (0, _qunit.module)('Integration | Component | module-workloads/people-filter', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      this.router = this.owner.lookup('router:main');
      this.model = _objectSpread(_objectSpread({}, _workload.ALLOCATION_MATRIX_DEFAULT_QUERY_PARAMS), {}, {
        entity_filters: 'problem,change,ticket,release,task,project_task'
      });
      this.owner.register('service:fetch', MOCK_FETCH_SERVICE);
      this.set('agentGroups', [{
        id: '81',
        name: 'Change Team'
      }, {
        id: '78',
        name: 'Asset Team'
      }]);
      this.set('selectedList', [{
        id: '1',
        name: 'Agent One'
      }, {
        id: '2',
        name: 'Agent Two'
      }]);
      this.set('filteredList', [{
        id: '1',
        name: 'Agent One'
      }, {
        id: '2',
        name: 'Agent Two'
      }, {
        id: '3',
        name: 'Agent Three'
      }]);
      this.set('selectedProjectsById', [{
        id: '1',
        name: 'New Project'
      }]);
      this.set('filteredProjectList', [{
        id: '1',
        name: 'New Project'
      }, {
        id: '2',
        name: 'New Project 1'
      }]);
      this.set('resetFilter', emptyFunction);
      this.set('updateSelectedGroupUsers', emptyFunction);
      this.set('updateSelectedProjectUsers', emptyFunction);
      this.set('setUsers', emptyFunction);
      this.set('updateCurrentFilter', emptyFunction);
      this.set('resetCurrentPage', emptyFunction);
      this.set('updateSelectedProjects', emptyFunction);
      this.set('updateSelectedGroups', emptyFunction);
    });

    function renderComponent() {
      return _renderComponent.apply(this, arguments);
    }

    function _renderComponent() {
      _renderComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18() {
        return regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                _context18.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <div id="wlm-module-container">
                                    <div data-wlm-filter-test="wlm-filter-test"></div>
                                    <div id="people-header">
                                     <div id="wlm-filter-wormhole" data-wlm-filter="wlm-filter">
                                      <ModuleWorkloads::PeopleFilter
                                        @model={{this.model}}
                                        @agentGroups={{this.agentGroups}}
                                        @resetFilter={{this.resetFilter}}
                                        @resetCurrentPage={{this.resetCurrentPage}}
                                        @setUsers={{this.setUsers}}
                                        @updateSelectedProjectUsers={{this.updateSelectedProjectUsers}}
                                        @updateSelectedUsers={{this.updateSelectedUsers}}
                                        @updateCurrentFilter={{this.updateCurrentFilter}}
                                        @updateSelectedGroups={{this.updateSelectedGroups}}
                                       >
                                      </ModuleWorkloads::PeopleFilter>
                                     </div>
                                     <div data-wlm-filter-reset="wlm-filter-reset"></div>
                                    </div>
                                   </div>
                */
                {
                  id: "Qm4elJD0",
                  block: "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"id\",\"wlm-module-container\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"data-wlm-filter-test\",\"wlm-filter-test\"],[8],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"id\",\"people-header\"],[8],[0,\"\\n                     \"],[7,\"div\",true],[10,\"id\",\"wlm-filter-wormhole\"],[10,\"data-wlm-filter\",\"wlm-filter\"],[8],[0,\"\\n                      \"],[5,\"module-workloads/people-filter\",[],[[\"@model\",\"@agentGroups\",\"@resetFilter\",\"@resetCurrentPage\",\"@setUsers\",\"@updateSelectedProjectUsers\",\"@updateSelectedUsers\",\"@updateCurrentFilter\",\"@updateSelectedGroups\"],[[23,0,[\"model\"]],[23,0,[\"agentGroups\"]],[23,0,[\"resetFilter\"]],[23,0,[\"resetCurrentPage\"]],[23,0,[\"setUsers\"]],[23,0,[\"updateSelectedProjectUsers\"]],[23,0,[\"updateSelectedUsers\"]],[23,0,[\"updateCurrentFilter\"]],[23,0,[\"updateSelectedGroups\"]]]],{\"statements\":[[0,\"\\n                      \"]],\"parameters\":[]}],[0,\"\\n                     \"],[9],[0,\"\\n                     \"],[7,\"div\",true],[10,\"data-wlm-filter-reset\",\"wlm-filter-reset\"],[8],[9],[0,\"\\n                    \"],[9],[0,\"\\n                   \"],[9]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18);
      }));
      return _renderComponent.apply(this, arguments);
    }

    (0, _qunit.test)('it checks groups clear filter flow', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var dropdownElement, clearBtn, applyBtn;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                Ember.set(this, 'model.filter', 'groups-view');
                Ember.set(this, 'model.group_ids', '81,78');
                _context.next = 4;
                return renderComponent();

              case 4:
                _context.next = 6;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-people-filter-dd-trigger"]');

              case 6:
                dropdownElement = this.element.querySelector('.ember-power-select-trigger');
                _context.next = 9;
                return (0, _testHelpers.click)(dropdownElement);

              case 9:
                _context.next = 11;
                return (0, _testHelpers.click)('[data-option-index="1"]');

              case 11:
                clearBtn = this.element.querySelector('.btn');
                _context.next = 14;
                return (0, _testHelpers.click)(clearBtn);

              case 14:
                _context.next = 16;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-people-filter-dd-trigger"]');

              case 16:
                _context.next = 18;
                return (0, _testHelpers.click)(dropdownElement);

              case 18:
                applyBtn = this.element.querySelectorAll('.btn')[2];
                _context.next = 21;
                return (0, _testHelpers.click)(applyBtn);

              case 21:
                assert.ok(true);

              case 22:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it checks groups apply filter flow', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var dropdownElement, applyBtn;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                Ember.set(this, 'model.filter', 'groups-view');
                Ember.set(this, 'model.group_ids', '81,78');
                _context2.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <div id="wlm-module-container">
                
                                      <div data-wlm-filter="wlm-filter">
                                       <ModuleWorkloads::PeopleFilter
                                        @model={{this.model}}
                                        @setUsers={{this.setUsers}}
                                        @agentGroups={{this.agentGroups}}
                                        @resetFilter={{this.resetFilter}}
                                        @resetCurrentPage={{this.resetCurrentPage}}
                                        @updateSelectedGroupUsers={{this.updateSelectedGroupUsers}}
                                        @updateSelectedProjectUsers={{this.updateSelectedProjectUsers}}
                                        @updateSelectedUsers={{this.updateSelectedUsers}}
                                        @updateCurrentFilter={{this.updateCurrentFilter}}
                                        @updateSelectedGroups={{this.updateSelectedGroups}}
                                       >
                                       </ModuleWorkloads::PeopleFilter>
                                      </div>
                                      <div data-wlm-filter-reset="wlm-filter-reset"></div>
                                     </div>
                */
                {
                  id: "EdUiui79",
                  block: "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"id\",\"wlm-module-container\"],[8],[0,\"\\n\\n                      \"],[7,\"div\",true],[10,\"data-wlm-filter\",\"wlm-filter\"],[8],[0,\"\\n                       \"],[5,\"module-workloads/people-filter\",[],[[\"@model\",\"@setUsers\",\"@agentGroups\",\"@resetFilter\",\"@resetCurrentPage\",\"@updateSelectedGroupUsers\",\"@updateSelectedProjectUsers\",\"@updateSelectedUsers\",\"@updateCurrentFilter\",\"@updateSelectedGroups\"],[[23,0,[\"model\"]],[23,0,[\"setUsers\"]],[23,0,[\"agentGroups\"]],[23,0,[\"resetFilter\"]],[23,0,[\"resetCurrentPage\"]],[23,0,[\"updateSelectedGroupUsers\"]],[23,0,[\"updateSelectedProjectUsers\"]],[23,0,[\"updateSelectedUsers\"]],[23,0,[\"updateCurrentFilter\"]],[23,0,[\"updateSelectedGroups\"]]]],{\"statements\":[[0,\"\\n                       \"]],\"parameters\":[]}],[0,\"\\n                      \"],[9],[0,\"\\n                      \"],[7,\"div\",true],[10,\"data-wlm-filter-reset\",\"wlm-filter-reset\"],[8],[9],[0,\"\\n                     \"],[9]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context2.next = 6;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-people-filter-dd-trigger"]');

              case 6:
                dropdownElement = this.element.querySelector('.ember-power-select-trigger');
                _context2.next = 9;
                return (0, _testHelpers.click)(dropdownElement);

              case 9:
                _context2.next = 11;
                return (0, _testHelpers.click)('[data-option-index="1"]');

              case 11:
                applyBtn = this.element.querySelectorAll('.btn')[2];
                _context2.next = 14;
                return (0, _testHelpers.click)(applyBtn);

              case 14:
                assert.ok(true);

              case 15:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it checks reset filter flow', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var groupsView, applyBtn;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                Ember.set(this, 'model.filter', 'groups-view');
                Ember.set(this, 'model.group_ids', '81,78');
                _context3.next = 4;
                return renderComponent();

              case 4:
                _context3.next = 6;
                return (0, _testHelpers.click)('[data-wlm-filter-reset="wlm-filter-reset"]');

              case 6:
                _context3.next = 8;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-people-filter-dd-trigger"]');

              case 8:
                groupsView = this.element.querySelector('#wlm-people-filter-groups-view');
                _context3.next = 11;
                return (0, _testHelpers.click)(groupsView);

              case 11:
                applyBtn = this.element.querySelectorAll('.btn')[2];
                _context3.next = 14;
                return (0, _testHelpers.click)(applyBtn);

              case 14:
                assert.ok(true);

              case 15:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it checks project clear filter flow', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var dropdownElement, removeBtn;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                Ember.set(this, 'model.filter', 'projects-view');
                _context4.next = 3;
                return renderComponent();

              case 3:
                _context4.next = 5;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-people-filter-dd-trigger"]');

              case 5:
                dropdownElement = this.element.querySelector('.ember-power-select-trigger');
                _context4.next = 8;
                return (0, _testHelpers.click)(dropdownElement);

              case 8:
                _context4.next = 10;
                return (0, _testHelpers.click)('[data-option-index="0"]');

              case 10:
                removeBtn = this.element.querySelector('.ember-power-select-multiple-remove-btn');
                _context4.next = 13;
                return (0, _testHelpers.click)(removeBtn);

              case 13:
                assert.ok(true);

              case 14:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it checks project apply filter flow', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var inputOptions, applyBtn, choiceKeyUp;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                Ember.set(this, 'model.filter', 'projects-view');
                _context5.next = 3;
                return renderComponent();

              case 3:
                _context5.next = 5;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-people-filter-dd-trigger"]');

              case 5:
                inputOptions = this.element.querySelector('.ember-power-select-trigger-multiple-input');
                _context5.next = 8;
                return (0, _testHelpers.click)(inputOptions);

              case 8:
                applyBtn = this.element.querySelectorAll('.btn')[1];
                choiceKeyUp = this.element.querySelector('[data-option-index="0"]');
                _context5.next = 12;
                return (0, _testHelpers.click)(choiceKeyUp);

              case 12:
                _context5.next = 14;
                return (0, _testHelpers.click)(applyBtn);

              case 14:
                assert.ok(true);

              case 15:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it checks people clear filter flow', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var dropdownElement, choiceKeyUp, removeBtn, clearBtn;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                Ember.set(this, 'model.filter', 'people-view');
                _context6.next = 3;
                return renderComponent();

              case 3:
                _context6.next = 5;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-people-filter-dd-trigger"]');

              case 5:
                _context6.next = 7;
                return (0, _testHelpers.click)('[data-wlm-filter-test="wlm-filter-test"]');

              case 7:
                _context6.next = 9;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-people-filter-dd-trigger"]');

              case 9:
                dropdownElement = this.element.querySelector('.ember-power-select-trigger');
                _context6.next = 12;
                return (0, _testHelpers.click)(dropdownElement);

              case 12:
                choiceKeyUp = this.element.querySelector('[data-option-index="0"]');
                _context6.next = 15;
                return (0, _testHelpers.click)(choiceKeyUp);

              case 15:
                removeBtn = this.element.querySelector('.ember-power-select-multiple-remove-btn');
                _context6.next = 18;
                return (0, _testHelpers.click)(removeBtn);

              case 18:
                clearBtn = this.element.querySelector('.btn');
                _context6.next = 21;
                return (0, _testHelpers.click)(clearBtn);

              case 21:
                assert.ok(true);

              case 22:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x6) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it checks people apply filter flow', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var applyBtn, dropdownElement, choiceKeyUp;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                Ember.set(this, 'model.filter', 'people-view');
                _context7.next = 3;
                return renderComponent();

              case 3:
                _context7.next = 5;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-people-filter-dd-trigger"]');

              case 5:
                applyBtn = this.element.querySelectorAll('.btn')[1];
                _context7.next = 8;
                return (0, _testHelpers.click)(applyBtn);

              case 8:
                _context7.next = 10;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-people-filter-dd-trigger"]');

              case 10:
                dropdownElement = this.element.querySelector('.ember-power-select-trigger');
                _context7.next = 13;
                return (0, _testHelpers.click)(dropdownElement);

              case 13:
                choiceKeyUp = this.element.querySelector('[data-option-index="2"]');
                (0, _testHelpers.triggerKeyEvent)(choiceKeyUp, 'keyup', 'Enter');
                assert.ok(true);

              case 16:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x7) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it checks people with user Id flow', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var clearBtn;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                Ember.set(this, 'model.filter', 'people-view');
                Ember.set(this, 'model.user_ids', '41');
                _context8.next = 4;
                return renderComponent();

              case 4:
                _context8.next = 6;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-people-filter-dd-trigger"]');

              case 6:
                clearBtn = this.element.querySelectorAll('.btn')[0];
                _context8.next = 9;
                return (0, _testHelpers.click)(clearBtn);

              case 9:
                assert.ok(true);

              case 10:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x8) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it checks projects with project Id flow', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        var clearBtn;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                Ember.set(this, 'model.filter', 'projects-view');
                Ember.set(this, 'model.project_ids', '1');
                _context9.next = 4;
                return renderComponent();

              case 4:
                _context9.next = 6;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-people-filter-dd-trigger"]');

              case 6:
                clearBtn = this.element.querySelectorAll('.btn')[0];
                _context9.next = 9;
                return (0, _testHelpers.click)(clearBtn);

              case 9:
                assert.ok(true);

              case 10:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x9) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it checks select people options', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var applyBtn, inputOptions, choiceKeyUp;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                Ember.set(this, 'model.filter', 'people-view');
                Ember.set(this, 'model.user_ids', '41');
                _context10.next = 4;
                return renderComponent();

              case 4:
                _context10.next = 6;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-people-filter-dd-trigger"]');

              case 6:
                applyBtn = this.element.querySelectorAll('.btn')[1];
                inputOptions = this.element.querySelector('.ember-power-select-trigger-multiple-input');
                _context10.next = 10;
                return (0, _testHelpers.click)(inputOptions);

              case 10:
                choiceKeyUp = this.element.querySelector('[data-option-index="0"]');
                _context10.next = 13;
                return (0, _testHelpers.click)(choiceKeyUp);

              case 13:
                _context10.next = 15;
                return (0, _testHelpers.click)(applyBtn);

              case 15:
                assert.ok(true);

              case 16:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x10) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it checks enter key press project options', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        var inputOptions, choiceKeyUp;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                Ember.set(this, 'model.filter', 'projects-view');
                Ember.set(this, 'model.project_ids', '1');
                _context11.next = 4;
                return renderComponent();

              case 4:
                _context11.next = 6;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-people-filter-dd-trigger"]');

              case 6:
                inputOptions = this.element.querySelector('.ember-power-select-trigger-multiple-input');
                _context11.next = 9;
                return (0, _testHelpers.click)(inputOptions);

              case 9:
                choiceKeyUp = this.element.querySelector('[data-option-index="0"]');
                (0, _testHelpers.triggerKeyEvent)(choiceKeyUp, 'keyup', 'Enter');
                assert.ok(true);

              case 12:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x11) {
        return _ref12.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it checks for queryFallbacks', /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                Ember.set(this, 'model.filter', 'projects-v');
                _context12.next = 3;
                return renderComponent();

              case 3:
                Ember.set(this, 'model.filter', 'groups-view');
                _context12.next = 6;
                return renderComponent();

              case 6:
                Ember.set(this, 'model.filter', 'people-view');
                Ember.set(this, 'model.user_ids', '100');
                _context12.next = 10;
                return renderComponent();

              case 10:
                Ember.set(this, 'model.filter', 'projects-view');
                Ember.set(this, 'model.project_ids', '100');
                _context12.next = 14;
                return renderComponent();

              case 14:
                Ember.set(this, 'model.filter', 'groups-view');
                Ember.set(this, 'model.group_ids', '200');
                _context12.next = 18;
                return renderComponent();

              case 18:
                assert.ok(true);

              case 19:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x12) {
        return _ref13.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it checks with group privilege', /*#__PURE__*/function () {
      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)(GROUP_MEMBERS_WORKLOAD_USER);
                Ember.set(this, 'model.filter', 'groups-view');
                _context13.next = 4;
                return renderComponent();

              case 4:
                _context13.next = 6;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-people-filter-dd-trigger"]');

              case 6:
                assert.ok(true);
                Ember.set(this, 'model.filter', 'people-view');
                _context13.next = 10;
                return renderComponent();

              case 10:
                _context13.next = 12;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-people-filter-dd-trigger"]');

              case 12:
                assert.ok(true);

              case 13:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      return function (_x13) {
        return _ref14.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it checks without group privilege', /*#__PURE__*/function () {
      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {
        var groupButton;
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)(PROJECT_MEMBER_WORKLOAD_USER);
                Ember.set(this, 'model.filter', 'groups-view');
                _context14.next = 4;
                return renderComponent();

              case 4:
                assert.ok('Flow reached query fallback');
                _context14.next = 7;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-people-filter-dd-trigger"]');

              case 7:
                groupButton = this.element.querySelector('#wlm-people-filter-groups-view');
                assert.dom(groupButton).doesNotExist();

              case 9:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      return function (_x14) {
        return _ref15.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it checks with project privilege', /*#__PURE__*/function () {
      var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {
        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)(PROJECT_MEMBER_WORKLOAD_USER);
                Ember.set(this, 'model.filter', 'projects-view');
                _context15.next = 4;
                return renderComponent();

              case 4:
                _context15.next = 6;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-people-filter-dd-trigger"]');

              case 6:
                assert.ok(true);
                Ember.set(this, 'model.filter', 'people-view');
                _context15.next = 10;
                return renderComponent();

              case 10:
                _context15.next = 12;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-people-filter-dd-trigger"]');

              case 12:
                assert.ok(true);

              case 13:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      return function (_x15) {
        return _ref16.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it checks without project privilege', /*#__PURE__*/function () {
      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(assert) {
        var projectButton;
        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)(GROUP_MEMBERS_WORKLOAD_USER);
                Ember.set(this, 'model.filter', 'projects-view');
                _context16.next = 4;
                return renderComponent();

              case 4:
                assert.ok('Flow reached query fallback');
                _context16.next = 7;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-people-filter-dd-trigger"]');

              case 7:
                projectButton = this.element.querySelector('#wlm-people-filter-projects-view');
                assert.dom(projectButton).doesNotExist();

              case 9:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      return function (_x16) {
        return _ref17.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it checks without project and group privilege', /*#__PURE__*/function () {
      var _ref18 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(assert) {
        return regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)(OWN_WORKLOAD_USER);
                Ember.set(this, 'model.filter', 'people-view');
                _context17.next = 4;
                return renderComponent();

              case 4:
                assert.dom('[data-test-id="wlm-capacity-people-filter-dd-trigger"]').doesNotExist();

              case 5:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      return function (_x17) {
        return _ref18.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/module-workloads/people-filter/dropdown-content-test", ["freshservice/config/environment", "@ember/test-helpers", "freshservice/tests/lib/intl", "ember-qunit", "qunit", "ember-power-select/test-support"], function (_environment, _testHelpers, _intl, _emberQunit, _qunit, _testSupport) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var EMPTY_USER_STATE = {
    "users": [],
    "meta": {
      "total_pages": 1,
      "total": 0,
      "page": 1
    },
    json: function json() {
      return {
        "users": [],
        "body": {
          "projects": []
        },
        "meta": {
          "total_pages": 1,
          "total": 0,
          "page": 1
        }
      };
    }
  };

  var EMPTY_MOCK_RESPONSE = _objectSpread({
    json: function json() {
      return EMPTY_USER_STATE;
    }
  }, EMPTY_USER_STATE);

  var MOCK_FETCH_SERVICE = Ember.Service.extend({
    request: function request(path, options) {
      var response = null;
      this.setProperties({
        path: path,
        options: options
      });

      if (path === '/itil/members/suggest?q=Agent') {
        response = EMPTY_MOCK_RESPONSE;
      } else if (path === '/itil/members/suggest?q=') {
        response = EMPTY_MOCK_RESPONSE;
      } else if (path === '/api/_/freshrelease/settings/suggest_my_projects?placeholder[query]=New') {
        response = EMPTY_MOCK_RESPONSE;
      } else {
        response = {
          data: [],
          has_next: false
        };
      }

      return Ember.RSVP.resolve(response);
    },
    json: function json() {
      return [];
    },
    host: _environment.default.environment === 'development' ? "".concat(_environment.default.APP.hostURL, "/api/_/") : '/api/_/'
  });
  var PROJECT_MOCK_DATA = [{
    "id": 1,
    "name": "New application rollout (sample project)",
    "key": "NARSP",
    "description": null,
    "start_date": "2022-03-24T18:30:00.000Z",
    "end_date": "2022-04-25T18:29:59.000Z",
    "progress": {
      "todo": 11,
      "in_progress": 0,
      "done": 0
    },
    "created_at": "2022-03-25T10:28:10.000Z",
    "archived_at": null,
    "actual_start_date": null,
    "actual_end_date": null,
    "template_flag": false,
    "project_category": 1,
    "priority": "medium",
    "state": "Active",
    "status": "Yet to start",
    "owner_id": 1000000003,
    "user_ids": [1000000004, 1000000005, 1000000003]
  }];
  var PEOPLE_MOCK_DATA = [{
    "avatar_url": "https://fsfrlocal-427412052509114932.int.myfreshworks.dev/api/v2/users/427449037762945027/image?variant=SMALL",
    "email": "agent1@gmail.comm",
    "id": 41,
    "name": "agent one"
  }, {
    "avatar_url": "https://fsfrlocal-427412052509114932.int.myfreshworks.dev/api/v2/users/427481650884076345/image?variant=SMALL",
    "email": "agent2@gmail.com",
    "id": 42,
    "name": "agent two"
  }, {
    "avatar_url": "https://fsfrlocal-427412052509114932.int.myfreshworks.dev/api/v2/users/427482566429336387/image?variant=SMALL",
    "email": "agent3@gmail.com",
    "id": 43,
    "name": "agent three"
  }];

  var emptyFunction = function emptyFunction() {};

  (0, _qunit.module)('Integration | Component | module-workloads/people-filter/dropdown-content', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      var _this = this;

      this.owner.register('service:fetch', MOCK_FETCH_SERVICE);
      this.set('setCurrentView', function (view) {
        _this.set('currentActiveView', view);
      });
      this.set('applyFilter', emptyFunction);
      this.set('closeDropdown', emptyFunction);
      this.set('onChange', emptyFunction);
      this.set('setFilterOptions', emptyFunction);
      this.set('updateFilteredList', emptyFunction);
      this.set('onKeyUp', emptyFunction);
      this.set('clear', emptyFunction);
      this.set('selectedChoice', [{
        id: 81
      }, {
        id: 82
      }]);
    });
    (0, _qunit.test)('it checks group dropdown', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.set('currentActiveView', 'groups-view');
                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::PeopleFilter::DropdownContent @applyFilter={{this.applyFilter}}
                    @closeDropdown={{this.closeDropdown}} @setCurrentView={{this.setCurrentView}} @isGroupsView={{true}}
                    @selectedChoice={{this.selectedChoice}}
                    @currentActiveView={{this.currentActiveView}} @onChange={{this.onChange}} @clear={{this.clear}} />
                */
                {
                  id: "10QtO/SI",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/people-filter/dropdown-content\",[],[[\"@applyFilter\",\"@closeDropdown\",\"@setCurrentView\",\"@isGroupsView\",\"@selectedChoice\",\"@currentActiveView\",\"@onChange\",\"@clear\"],[[23,0,[\"applyFilter\"]],[23,0,[\"closeDropdown\"]],[23,0,[\"setCurrentView\"]],true,[23,0,[\"selectedChoice\"]],[23,0,[\"currentActiveView\"]],[23,0,[\"onChange\"]],[23,0,[\"clear\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.ok("Groups filter rendered");

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it checks people dropdown', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.set('searchEnabled', true);
                this.set('currentOptions', PEOPLE_MOCK_DATA);
                this.set('currentActiveView', 'people-view');
                _context2.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::PeopleFilter::DropdownContent @applyFilter={{this.applyFilter}}
                    @currentOptions={{this.currentOptions}}
                    @setFilterOptions={{this.setFilterOptions}}
                    @closeDropdown={{this.closeDropdown}} 
                    @setCurrentView={{this.setCurrentView}} 
                    @searchEnabled={{this.searchEnabled}}
                    @selectedChoice={{this.selectedChoice}}
                    @onKeyUp={{this.onKeyUp}}
                    @optionsComponent={{component 'module-workloads/people-filter/options/people-option'
                    currentActiveView=this.currentActiveView}} @currentActiveView={{this.currentActiveView}} @onChange={{this.onChange}}
                    @clear={{this.clear}} 
                    @options={{this.options}} 
                    @updateFilteredList={{this.updateFilteredList}} />
                */
                {
                  id: "tsionhNL",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/people-filter/dropdown-content\",[],[[\"@applyFilter\",\"@currentOptions\",\"@setFilterOptions\",\"@closeDropdown\",\"@setCurrentView\",\"@searchEnabled\",\"@selectedChoice\",\"@onKeyUp\",\"@optionsComponent\",\"@currentActiveView\",\"@onChange\",\"@clear\",\"@options\",\"@updateFilteredList\"],[[23,0,[\"applyFilter\"]],[23,0,[\"currentOptions\"]],[23,0,[\"setFilterOptions\"]],[23,0,[\"closeDropdown\"]],[23,0,[\"setCurrentView\"]],[23,0,[\"searchEnabled\"]],[23,0,[\"selectedChoice\"]],[23,0,[\"onKeyUp\"]],[28,\"component\",[\"module-workloads/people-filter/options/people-option\"],[[\"currentActiveView\"],[[23,0,[\"currentActiveView\"]]]]],[23,0,[\"currentActiveView\"]],[23,0,[\"onChange\"]],[23,0,[\"clear\"]],[23,0,[\"options\"]],[23,0,[\"updateFilteredList\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                _context2.next = 7;
                return (0, _testSupport.selectSearch)('.ember-basic-dropdown-trigger', 'Agent');

              case 7:
                this.set('currentOptions', []);
                _context2.next = 10;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::PeopleFilter::DropdownContent @applyFilter={{this.applyFilter}}
                    @currentOptions={{this.currentOptions}}
                    @closeDropdown={{this.closeDropdown}} 
                    @setCurrentView={{this.setCurrentView}}
                    @setFilterOptions={{this.setFilterOptions}}
                    @searchEnabled={{this.searchEnabled}}
                    @selectedChoice={{this.selectedChoice}}
                    @onKeyUp={{this.onKeyUp}}
                    @optionsComponent={{component 'module-workloads/people-filter/options/people-option'
                    currentActiveView=this.currentActiveView}} @currentActiveView={{this.currentActiveView}} @onChange={{this.onChange}}
                    @clear={{this.clear}} 
                    @options={{this.options}} 
                    @updateFilteredList={{this.updateFilteredList}} />
                */
                {
                  id: "PcNtL4xa",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/people-filter/dropdown-content\",[],[[\"@applyFilter\",\"@currentOptions\",\"@closeDropdown\",\"@setCurrentView\",\"@setFilterOptions\",\"@searchEnabled\",\"@selectedChoice\",\"@onKeyUp\",\"@optionsComponent\",\"@currentActiveView\",\"@onChange\",\"@clear\",\"@options\",\"@updateFilteredList\"],[[23,0,[\"applyFilter\"]],[23,0,[\"currentOptions\"]],[23,0,[\"closeDropdown\"]],[23,0,[\"setCurrentView\"]],[23,0,[\"setFilterOptions\"]],[23,0,[\"searchEnabled\"]],[23,0,[\"selectedChoice\"]],[23,0,[\"onKeyUp\"]],[28,\"component\",[\"module-workloads/people-filter/options/people-option\"],[[\"currentActiveView\"],[[23,0,[\"currentActiveView\"]]]]],[23,0,[\"currentActiveView\"]],[23,0,[\"onChange\"]],[23,0,[\"clear\"]],[23,0,[\"options\"]],[23,0,[\"updateFilteredList\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 10:
                _context2.next = 12;
                return (0, _testSupport.selectSearch)('.ember-basic-dropdown-trigger', 'Agent');

              case 12:
                assert.ok("People filter rendered");

              case 13:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it checks projects dropdown', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this.set('currentOptions', PROJECT_MOCK_DATA);
                this.set('currentActiveView', 'projects-view');
                this.set('searchEnabled', true);
                _context3.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::PeopleFilter::DropdownContent @applyFilter={{this.applyFilter}}
                      @selectedChoice={{this.selectedChoice}}
                      @closeDropdown={{this.closeDropdown}}
                      @setCurrentView={{this.setCurrentView}} 
                      @currentActiveView={{this.currentActiveView}} 
                      @onKeyUp={{this.onKeyUp}}
                      @onChange={{this.onChange}}
                      @clear={{this.clear}}
                      @searchEnabled={{this.searchEnabled}}
                      @setFilterOptions={{this.setFilterOptions}}
                      @updateFilteredList={{this.updateFilteredList}}
                      @currentOptions={{this.currentOptions}} />
                */
                {
                  id: "kirdIevK",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/people-filter/dropdown-content\",[],[[\"@applyFilter\",\"@selectedChoice\",\"@closeDropdown\",\"@setCurrentView\",\"@currentActiveView\",\"@onKeyUp\",\"@onChange\",\"@clear\",\"@searchEnabled\",\"@setFilterOptions\",\"@updateFilteredList\",\"@currentOptions\"],[[23,0,[\"applyFilter\"]],[23,0,[\"selectedChoice\"]],[23,0,[\"closeDropdown\"]],[23,0,[\"setCurrentView\"]],[23,0,[\"currentActiveView\"]],[23,0,[\"onKeyUp\"]],[23,0,[\"onChange\"]],[23,0,[\"clear\"]],[23,0,[\"searchEnabled\"]],[23,0,[\"setFilterOptions\"]],[23,0,[\"updateFilteredList\"]],[23,0,[\"currentOptions\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                _context3.next = 7;
                return (0, _testSupport.selectSearch)('.ember-basic-dropdown-trigger', 'New');

              case 7:
                assert.ok("Projects filter rendered");

              case 8:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

define("freshservice/tests/integration/components/module-workloads/scheduler-chart-test", ["freshservice/config/environment", "ember-concurrency", "ember-cli-mirage/test-support", "@ember/test-helpers", "ember-qunit", "freshservice/constants/workload", "qunit", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/stub-current-account"], function (_environment, _emberConcurrency, _testSupport, _testHelpers, _emberQunit, _workload, _qunit, _intl, _stubCurrentUser, _stubCurrentAccount) {
  "use strict";

  var _dec, _class, _descriptor, _temp;

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  var MockService1 = (_dec = (0, _emberConcurrency.task)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _emberConcurrency.timeout)(50);

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })).restartable(), (_class = (_temp = /*#__PURE__*/function (_Ember$Service) {
    _inherits(MockService1, _Ember$Service);

    var _super = _createSuper(MockService1);

    function MockService1() {
      var _this;

      _classCallCheck(this, MockService1);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _defineProperty(_assertThisInitialized(_this), "ticketFormFieldHash", Object.freeze({
        status: {
          choices: [{
            id: 1,
            value: 'Low'
          }, {
            id: 2,
            value: 'Medium'
          }, {
            id: 3,
            value: 'High'
          }]
        }
      }));

      _initializerDefineProperty(_assertThisInitialized(_this), "fetchModuleFields", _descriptor, _assertThisInitialized(_this));

      _defineProperty(_assertThisInitialized(_this), "getFormField", function () {
        return {
          choices: [{
            id: 1,
            value: 'Open'
          }, {
            id: 2,
            value: 'Pending'
          }, {
            id: 3,
            value: 'Resolved'
          }]
        };
      });

      return _this;
    }

    return MockService1;
  }(Ember.Service), _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "fetchModuleFields", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));

  window.__CLASSIC_OWN_CLASSES__.set(MockService1, true);

  var GROUP_PAYLOAD = [{
    "id": 81,
    "name": "Change Team",
    "description": "Change Management Team",
    "escalate_to": null,
    "unassigned_for": "15m",
    "business_hours_id": null,
    "created_at": "2022-03-25T10:22:57Z",
    "updated_at": "2022-03-25T14:51:32Z",
    "auto_ticket_assign": false,
    "restricted": false,
    "approval_required": false,
    "agent_ids": [34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90],
    "members": [34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90],
    "observers": [],
    "leaders": [],
    "members_pending_approval": [],
    "leaders_pending_approval": [],
    "observers_pending_approval": []
  }, {
    "id": 78,
    "name": "Major Incident Team",
    "description": "Major Incident Management Team",
    "escalate_to": null,
    "unassigned_for": "15m",
    "business_hours_id": null,
    "created_at": "2022-03-25T10:22:57Z",
    "updated_at": "2022-04-02T17:16:15Z",
    "auto_ticket_assign": false,
    "restricted": false,
    "approval_required": false,
    "agent_ids": [34, 91, 92],
    "members": [34, 91, 92],
    "observers": [],
    "leaders": [],
    "members_pending_approval": [],
    "leaders_pending_approval": [],
    "observers_pending_approval": []
  }];
  var USER_PAYLOAD = [{
    "avatar_url": "",
    "email": "agent52@gmail.com",
    "id": 91,
    "name": "1agent fiftytwo",
    "time_zone": "Chennai"
  }, {
    "avatar_url": "",
    "email": "agent53@gmail.com",
    "id": 92,
    "name": "agent fiftythree",
    "time_zone": "Chennai"
  }, {
    "email": "chris.blesson@freshworks.com",
    "id": 34,
    "name": "Blesson",
    "time_zone": "Chennai"
  }, {
    "avatar_url": "https://freshworks173.freshworks.com/api/v2/users/152806053332157138/image?variant=SMALL",
    "email": "chris.blesson@freshworks.com",
    "id": 41,
    "name": "1Blesson",
    "time_zone": "Chennai"
  }];
  var USER_PAYLOAD_SINGLE_USER = {
    users: [{
      "avatar_url": "https://freshworks173.freshworks.com/api/v2/users/152806053332157138/image?variant=SMALL",
      "email": "chris.blesson@freshworks.com",
      "id": 41,
      "name": "1Blesson",
      "time_zone": "Chennai"
    }],
    "meta": {
      "total_pages": 2,
      "total": 53,
      "page": 2
    }
  };
  var PROJECT_PAYLOAD = [{
    "id": 1,
    "name": "New application rollout (sample project)",
    "key": "NARSP",
    "description": null,
    "start_date": "2022-03-24T18:30:00.000Z",
    "end_date": "2022-04-25T18:29:59.000Z",
    "progress": {
      "todo": 11,
      "in_progress": 0,
      "done": 0
    },
    "created_at": "2022-03-25T10:28:10.000Z",
    "archived_at": null,
    "actual_start_date": null,
    "actual_end_date": null,
    "template_flag": false,
    "project_category": 1,
    "priority": "medium",
    "state": "Active",
    "status": "Yet to start",
    "owner_id": 1000000003,
    "user_ids": [1000000004, 1000000005, 1000000003]
  }];
  var GANTT_PAYLOAD = [{
    "id": 23,
    "human_display_id": "PRB-6",
    "subject": "Change test",
    "status": 1,
    "priority": 1,
    "status_category": "delayed",
    "planned_start_date": "2022-05-02T00:15:00+05:30",
    "planned_end_date": "2022-05-11T00:30:00+05:30",
    "change_type": 1,
    "agent_id": 41,
    "is_editable": true
  }, {
    "id": 24,
    "human_display_id": "PRB-7",
    "subject": "Gannt",
    "status": 1,
    "priority": 1,
    "status_category": "open",
    "planned_start_date": "2022-04-06T00:30:00+05:30",
    "planned_end_date": "2022-05-24T00:15:00+05:30",
    "change_type": 1,
    "agent_id": 41,
    "is_editable": true
  }, {
    "id": 25,
    "human_display_id": "PRB-8",
    "subject": "Test for Gannt",
    "status": 2,
    "priority": 1,
    "status_category": "in-progress",
    "planned_start_date": "2022-05-09T00:30:00+05:30",
    "planned_end_date": "2022-05-31T00:00:00+05:30",
    "change_type": 1,
    "agent_id": 41,
    "is_editable": true
  }, {
    "id": 26,
    "human_display_id": "PRB-9",
    "subject": "Test for Done Gannt",
    "status": 2,
    "priority": 1,
    "status_category": "delayed",
    "planned_start_date": "2022-05-09T00:00:00+05:30",
    "planned_end_date": "2022-05-13T00:30:00+05:30",
    "change_type": 1,
    "agent_id": 41,
    "is_editable": true
  }, {
    "id": 27,
    "human_display_id": "PRB-10",
    "subject": "Test for Done Gannt - 2",
    "status": 2,
    "priority": 1,
    "status_category": "delayed",
    "planned_start_date": "2022-05-09T00:00:00+05:30",
    "planned_end_date": "2022-05-13T01:00:00+05:30",
    "change_type": 1,
    "agent_id": 41,
    "is_editable": true
  }, {
    "id": 28,
    "human_display_id": "PRB-11",
    "subject": "Test for Done Gannt - 3",
    "status": 3,
    "priority": 1,
    "status_category": "delayed",
    "planned_start_date": "2022-05-09T01:00:00+05:30",
    "planned_end_date": "2022-05-13T00:15:00+05:30",
    "change_type": 1,
    "agent_id": 41,
    "is_editable": true
  }, {
    "id": 30,
    "human_display_id": "PRB-8",
    "subject": "Test for Gannt",
    "status": 2,
    "priority": 1,
    "status_category": "in-progress",
    "planned_start_date": "2022-05-31T00:30:00+05:30",
    "planned_end_date": "2022-06-03T00:00:00+05:30",
    "change_type": 1,
    "agent_id": 91,
    "is_editable": true
  }];
  var ALLOCATION_PAYLOAD = [{
    "user_id": 41,
    "allocations": [{
      "allocation_minutes": 700,
      "item_count": 1,
      "allocation_percentage": 129,
      "allocation_status": 1,
      "date": "2022-05-01"
    }, {
      "allocation_minutes": 600,
      "item_count": 1,
      "allocation_percentage": 111,
      "allocation_status": 1,
      "date": "2022-05-02"
    }, {
      "allocation_minutes": 100,
      "item_count": 1,
      "allocation_percentage": 18,
      "allocation_status": 3,
      "date": "2022-05-03"
    }, {
      "allocation_minutes": 520,
      "item_count": 1,
      "allocation_percentage": 96,
      "allocation_status": 3,
      "date": "2022-05-04"
    }, {
      "allocation_minutes": 540,
      "item_count": 1,
      "allocation_percentage": 100,
      "allocation_status": 2,
      "date": "2022-05-05"
    }, {
      "allocation_minutes": 545,
      "item_count": 1,
      "allocation_percentage": 100,
      "allocation_status": null,
      "date": "2022-05-06"
    }]
  }];
  var USER_STATE = {
    "users": USER_PAYLOAD,
    "groups": GROUP_PAYLOAD,
    "body": {
      "projects": PROJECT_PAYLOAD
    },
    "meta": {
      "total_pages": 2,
      "total": 53,
      "page": 2
    }
  };

  var MOCK_RESPONSE = _objectSpread({
    json: function json() {
      return USER_STATE;
    }
  }, USER_STATE);

  var EMPTY_MOCK_RESPONSE = _objectSpread({
    json: function json() {
      return USER_PAYLOAD_SINGLE_USER;
    }
  }, USER_PAYLOAD_SINGLE_USER);

  var MOCK_FETCH_SERVICE = Ember.Service.extend({
    request: function request(path, options) {
      var response = null;
      this.setProperties({
        path: path,
        options: options
      });

      if (path === '/itil/members/suggest?q=Agent') {
        response = MOCK_RESPONSE;
      } else if (path === '/itil/members?page=1&per_page=30') {
        response = MOCK_RESPONSE;
      } else if (path === '/itil/members?page=1&per_page=50') {
        response = MOCK_RESPONSE;
      } else if (path === 'workload/settings') {
        response = {
          'workload_settings': {
            'allocation_levels': {
              'low_workload': {
                'inclusive': false,
                "percentage": 80
              },
              'high_workload': {
                'inclusive': true,
                'percentage': 100
              }
            }
          }
        };
      } else if (path === '/itil/members?page=1&per_page=30&ids=41,42') {
        response = MOCK_RESPONSE;
      } else if (path === '/itil/members?page=1&per_page=30&ids=41') {
        response = EMPTY_MOCK_RESPONSE;
      } else if (path === '/freshrelease/settings/suggest_my_projects?placeholder[query]=New') {
        response = MOCK_RESPONSE;
      } else if (path === '/itil/members/filter-by-projects?page=1&per_page=30&ids=1') {
        response = MOCK_RESPONSE;
      } else if (path === 'groups?filter=my_agent_groups') {
        response = MOCK_RESPONSE;
      } else if (path === '/itil/members/filter-by-groups?page=1&per_page=30&ids=81,78') {
        response = MOCK_RESPONSE;
      } else if (path === '/itil/members/filter-by-groups?page=1&per_page=50&ids=81,78') {
        response = MOCK_RESPONSE;
      } else if (path === 'freshrelease/settings/filter_projects?query_params[id]=1&placeholder[query]=') {
        response = MOCK_RESPONSE;
      } else if (path === 'workload/allocations?period=2022-04-24,2022-04-27&user_ids=91,92,34,41&entity_type=problem,change,ticket,release,task,issue') {
        response = {
          "user_allocations": ALLOCATION_PAYLOAD
        };
      } else if (path === 'workload/allocations?period=2022-04-24,2022-04-27&user_ids=41&entity_type=problem,change,ticket,release,task,issue') {
        response = {
          "user_allocations": []
        };
      } else if (path === 'workload/allocations?period=2022-04-24,2022-04-12&user_ids=91&entity_type=problem,change,ticket,release,task,issue') {
        response = {
          "user_allocations": [{
            "user_id": 41,
            "allocations": [{
              "allocation_minutes": 0,
              "item_count": 1,
              "allocation_percentage": 0,
              "allocation_status": null,
              "date": "2022-04-06"
            }]
          }]
        };
      } else if (path === 'workload/problems?user_ids=41&period=2022-04-24,2022-05-01&offset=0') {
        return {
          "problems": [],
          "meta": {
            "has_next": false,
            "offset": 7
          }
        };
      } else if (path === 'workload/changes?user_ids=41&period=2022-04-24,2022-05-01&offset=0') {
        return {
          "changes": [],
          "meta": {
            "has_next": false,
            "offset": 7
          }
        };
      } else if (path === 'workload/tickets?user_ids=41&period=2022-04-24,2022-05-01&offset=0') {
        return {
          "tickets": [],
          "meta": {
            "has_next": false,
            "offset": 7
          }
        };
      } else if (path === 'workload/releases?user_ids=41&period=2022-04-24,2022-05-01&offset=0') {
        return {
          "releases": [],
          "meta": {
            "has_next": false,
            "offset": 7
          }
        };
      } else if (path === 'workload/tasks?user_ids=41&period=2022-04-24,2022-05-01&offset=0') {
        return {
          "tasks": [],
          "meta": {
            "has_next": false,
            "offset": 7
          }
        };
      } else if (path === 'workload/project-tasks?user_ids=41&period=2022-04-24,2022-05-01&offset=0') {
        return {
          "issues": [],
          "meta": {
            "has_next": false,
            "offset": 7
          }
        };
      } else if (path === 'workload/users/1/assignment-metrics' || path === 'workload/users/91/assignment-metrics') {
        return {
          planned: 10,
          unplanned: 20
        };
      } else if (path.includes('workload/problems')) {
        return {
          "problems": GANTT_PAYLOAD,
          "meta": {
            "has_next": false,
            "offset": 7
          }
        };
      } else if (path.includes('workload/changes')) {
        return {
          "changes": GANTT_PAYLOAD,
          "meta": {
            "has_next": false,
            "offset": 7
          }
        };
      } else if (path.includes('workload/tickets')) {
        return {
          "tickets": GANTT_PAYLOAD,
          "meta": {
            "has_next": false,
            "offset": 7
          }
        };
      } else if (path.includes('workload/releases')) {
        return {
          "releases": GANTT_PAYLOAD,
          "meta": {
            "has_next": false,
            "offset": 7
          }
        };
      } else if (path.includes('workload/tasks')) {
        return {
          "tasks": GANTT_PAYLOAD,
          "meta": {
            "has_next": false,
            "offset": 7
          }
        };
      } else if (path.includes('workload/project-tasks')) {
        return {
          "issues": GANTT_PAYLOAD,
          "statuses": [{
            "label": "Open",
            "description": "This is the description for Open",
            "id": 1000000003,
            "name": "open",
            "status_category_id": 1,
            "estimatable": false,
            "default": true,
            "removable": false
          }],
          "meta": {
            "has_next": false,
            "offset": 7
          }
        };
      } else if (path.includes('/itil/members')) {
        response = MOCK_RESPONSE;
      } else {
        response = {
          "user_allocations": [{
            "user_id": 41,
            "allocations": [{
              "allocation_minutes": 700,
              "item_count": 1,
              "allocation_percentage": 129,
              "allocation_status": 1,
              "date": "2022-04-24"
            }, {
              "allocation_minutes": 600,
              "item_count": 1,
              "allocation_percentage": 111,
              "allocation_status": 1,
              "date": "2022-04-15"
            }, {
              "allocation_minutes": 100,
              "item_count": 1,
              "allocation_percentage": 18,
              "allocation_status": 3,
              "date": "2022-04-16"
            }, {
              "allocation_minutes": 520,
              "item_count": 1,
              "allocation_percentage": 96,
              "allocation_status": 3,
              "date": "2022-04-17"
            }, {
              "allocation_minutes": 540,
              "item_count": 1,
              "allocation_percentage": 100,
              "allocation_status": 2,
              "date": "2022-04-18"
            }, {
              "allocation_minutes": 545,
              "item_count": 1,
              "allocation_percentage": 100,
              "allocation_status": 2,
              "date": "2022-04-19"
            }]
          }]
        };
      }

      return Ember.RSVP.resolve(response);
    },
    json: function json() {
      return [];
    },
    host: _environment.default.environment === 'development' ? "".concat(_environment.default.APP.hostURL, "/api/_/") : '/api/_/'
  });
  (0, _qunit.module)('Integration | Component | module-workloads/scheduler-chart', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      var defaultParams;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              (0, _stubCurrentAccount.stubCurrentAccount)({
                features: ['fr_project', 'itil_modules']
              });
              (0, _stubCurrentUser.stubCurrentUser)({
                privileges: ['view_changes', 'view_problems', 'view_releases', 'manage_tickets', 'view_projects', 'manage_group_members_workload', 'manage_project_members_workload']
              });
              defaultParams = _objectSpread(_objectSpread({}, _workload.ALLOCATION_MATRIX_DEFAULT_QUERY_PARAMS), {}, {
                entity_filters: 'problem,change,ticket,release,task,project_task'
              });
              this.model = _objectSpread(_objectSpread({}, defaultParams), {}, {
                date: '2022-05-24,2022-05-01'
              });
              this.queryParams = _objectSpread(_objectSpread({}, defaultParams), {}, {
                effort_view: 'item_assigned',
                date: '2022-04-24,2022-05-01'
              });
              this.hourQueryParams = _objectSpread(_objectSpread({}, defaultParams), {}, {
                effort_view: 'hour',
                date: '2022-04-24,2022-05-01'
              });
              this.percentQueryParams = _objectSpread(_objectSpread({}, defaultParams), {}, {
                effort_view: 'percent',
                date: '2022-04-24,2022-05-01'
              });
              _context2.next = 9;
              return emberAutoImportDynamic("dhtmlx-scheduler");

            case 9:
              this.owner.register('service:fetch', MOCK_FETCH_SERVICE);
              this.owner.lookup('service:workload');
              this.set('resetFilter', function () {});
              this.owner.register('service:module-fields', MockService1);
              this.server.loadFixtures('users');

            case 14:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    })));
    (0, _qunit.test)('it renders Core Gantt', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <div id="wlm-module-container">
                                      <ModuleWorkloads::SchedulerChart @model={{this.model}} @toggleSlider={{this.resetFilter}} @currentView="week" @resetFilter={{this.resetFilter}} @toggleUnassignedSlider={{this.resetFilter}}
                											@userId = ""
                											@isSliderOpen = {{false}}
                											@showUnassignedItemSlider = {{false}}></ModuleWorkloads::SchedulerChart>
                                     </div>
                */
                {
                  id: "dpTKuMGC",
                  block: "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"id\",\"wlm-module-container\"],[8],[0,\"\\n                      \"],[5,\"module-workloads/scheduler-chart\",[],[[\"@model\",\"@toggleSlider\",\"@currentView\",\"@resetFilter\",\"@toggleUnassignedSlider\",\"@userId\",\"@isSliderOpen\",\"@showUnassignedItemSlider\"],[[23,0,[\"model\"]],[23,0,[\"resetFilter\"]],\"week\",[23,0,[\"resetFilter\"]],[23,0,[\"resetFilter\"]],\"\",false,false]],{\"statements\":[],\"parameters\":[]}],[0,\"\\n                     \"],[9]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.ok(true);

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.skip)('it renders gantt bars ', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var schedulerService, ganttBars, infoIcon, quickInfoSection, infoHeader;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                schedulerService = this.owner.lookup('service:dhtmlx-scheduler');
                Ember.set(this, 'model.effort_view', 'percent');
                Ember.set(this, 'model.entity_filters', 'problem');
                _context4.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <div id="wlm-module-container">
                                      <ModuleWorkloads::SchedulerChart  @model={{this.model}} @currentView="week" @toggleUnassignedSlider={{this.resetFilter}} @toggleSlider={{this.resetFilter}} @resetFilter={{this.resetFilter}}></ModuleWorkloads::SchedulerChart>
                                     </div>
                */
                {
                  id: "y5ac7Cky",
                  block: "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"id\",\"wlm-module-container\"],[8],[0,\"\\n                      \"],[5,\"module-workloads/scheduler-chart\",[],[[\"@model\",\"@currentView\",\"@toggleUnassignedSlider\",\"@toggleSlider\",\"@resetFilter\"],[[23,0,[\"model\"]],\"week\",[23,0,[\"resetFilter\"]],[23,0,[\"resetFilter\"]],[23,0,[\"resetFilter\"]]]],{\"statements\":[],\"parameters\":[]}],[0,\"\\n                     \"],[9]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                // close login user gantt
                schedulerService.closeSection('1');
                _context4.next = 8;
                return (0, _emberConcurrency.timeout)(5);

              case 8:
                // expand the section for user 91
                schedulerService._schedulerInstance.callEvent('onYScaleClick', [1, schedulerService._schedulerInstance.getSection('91')]); // schedulerService.openSection('91');


                _context4.next = 11;
                return (0, _testHelpers.waitFor)('[data-section-id="91_count"]', {
                  timeout: 1000
                });

              case 11:
                assert.dom('[data-section-id="91_count"]').exists();
                ganttBars = this.element.querySelector('.gantt-status');
                assert.dom(ganttBars).exists();
                infoIcon = this.element.querySelector('.wlm-gantt-bar-info');
                _context4.next = 17;
                return (0, _testHelpers.triggerEvent)(infoIcon, 'mouseenter');

              case 17:
                quickInfoSection = this.element.querySelector('.dhx_cal_quick_info');
                assert.dom(quickInfoSection).exists('Quick info hover exists');
                infoHeader = this.element.querySelector('.gantt-info-status');
                assert.equal(infoHeader.innerText, 'In Progress');

              case 21:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it resets incase of invalid route', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                Ember.set(this, 'model.effort_view', 'percen');
                _context5.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <div id="wlm-module-container">
                                      <ModuleWorkloads::SchedulerChart @toggleUnassignedSlider={{this.resetFilter}} @toggleSlider={{this.resetFilter}} @model={{this.model}} @currentView="week" @resetFilter={{this.resetFilter}}></ModuleWorkloads::SchedulerChart>
                                     </div>
                */
                {
                  id: "grS4gEXU",
                  block: "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"id\",\"wlm-module-container\"],[8],[0,\"\\n                      \"],[5,\"module-workloads/scheduler-chart\",[],[[\"@toggleUnassignedSlider\",\"@toggleSlider\",\"@model\",\"@currentView\",\"@resetFilter\"],[[23,0,[\"resetFilter\"]],[23,0,[\"resetFilter\"]],[23,0,[\"model\"]],\"week\",[23,0,[\"resetFilter\"]]]],{\"statements\":[],\"parameters\":[]}],[0,\"\\n                     \"],[9]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                Ember.set(this, 'model.effort_view', 'percent');
                Ember.set(this, 'model.entity_filters', 'chan');
                _context5.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <div id="wlm-module-container">
                                      <ModuleWorkloads::SchedulerChart  @toggleSlider={{this.resetFilter}} @model={{this.model}} @currentView="week" @resetFilter={{this.resetFilter}}
                											@toggleUnassignedSlider={{this.resetFilter}}
                											@userId = ""
                											@isSliderOpen = {{false}}
                											@showUnassignedItemSlider = {{false}}
                											></ModuleWorkloads::SchedulerChart>
                                     </div>
                */
                {
                  id: "+q+Gg7uI",
                  block: "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"id\",\"wlm-module-container\"],[8],[0,\"\\n                      \"],[5,\"module-workloads/scheduler-chart\",[],[[\"@toggleSlider\",\"@model\",\"@currentView\",\"@resetFilter\",\"@toggleUnassignedSlider\",\"@userId\",\"@isSliderOpen\",\"@showUnassignedItemSlider\"],[[23,0,[\"resetFilter\"]],[23,0,[\"model\"]],\"week\",[23,0,[\"resetFilter\"]],[23,0,[\"resetFilter\"]],\"\",false,false]],{\"statements\":[],\"parameters\":[]}],[0,\"\\n                     \"],[9]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                Ember.set(this, 'model.entity_filters', 'change');
                Ember.set(this, 'model.filter', 'groups-view');
                Ember.set(this, 'model.group_ids', '');
                delete this.model.group_ids;
                _context5.next = 13;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <div id="wlm-module-container">
                                      <ModuleWorkloads::SchedulerChart @toggleUnassignedSlider={{this.resetFilter}}
                											@userId = ""
                											@isSliderOpen = {{false}}
                											@toggleSlider={{this.resetFilter}}
                											@showUnassignedItemSlider = {{false}} @model={{this.model}} @currentView="week" @resetFilter={{this.resetFilter}}></ModuleWorkloads::SchedulerChart>
                                     </div>
                */
                {
                  id: "J/Bl3ztt",
                  block: "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"id\",\"wlm-module-container\"],[8],[0,\"\\n                      \"],[5,\"module-workloads/scheduler-chart\",[],[[\"@toggleUnassignedSlider\",\"@userId\",\"@isSliderOpen\",\"@toggleSlider\",\"@showUnassignedItemSlider\",\"@model\",\"@currentView\",\"@resetFilter\"],[[23,0,[\"resetFilter\"]],\"\",false,[23,0,[\"resetFilter\"]],false,[23,0,[\"model\"]],\"week\",[23,0,[\"resetFilter\"]]]],{\"statements\":[],\"parameters\":[]}],[0,\"\\n                     \"],[9]],\"hasEval\":false}",
                  meta: {}
                }));

              case 13:
                Ember.set(this, 'model.filter', 'projects-view');
                Ember.set(this, 'model.project_ids', '');
                _context5.next = 17;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <div id="wlm-module-container">
                                      <ModuleWorkloads::SchedulerChart @toggleUnassignedSlider={{this.resetFilter}}
                											@userId = ""
                											@toggleSlider={{this.resetFilter}}
                											@isSliderOpen = {{false}}
                											@showUnassignedItemSlider = {{false}} @model={{this.model}} @currentView="week" @resetFilter={{this.resetFilter}}></ModuleWorkloads::SchedulerChart>
                                     </div>
                */
                {
                  id: "o6c6miMg",
                  block: "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"id\",\"wlm-module-container\"],[8],[0,\"\\n                      \"],[5,\"module-workloads/scheduler-chart\",[],[[\"@toggleUnassignedSlider\",\"@userId\",\"@toggleSlider\",\"@isSliderOpen\",\"@showUnassignedItemSlider\",\"@model\",\"@currentView\",\"@resetFilter\"],[[23,0,[\"resetFilter\"]],\"\",[23,0,[\"resetFilter\"]],false,false,[23,0,[\"model\"]],\"week\",[23,0,[\"resetFilter\"]]]],{\"statements\":[],\"parameters\":[]}],[0,\"\\n                     \"],[9]],\"hasEval\":false}",
                  meta: {}
                }));

              case 17:
                delete this.model.filter;
                _context5.next = 20;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <div id="wlm-module-container">
                                      <ModuleWorkloads::SchedulerChart @toggleUnassignedSlider={{this.resetFilter}}
                											@userId = ""
                											@toggleSlider={{this.resetFilter}}
                											@isSliderOpen = {{false}}
                											@showUnassignedItemSlider = {{false}} @model={{this.model}} @currentView="week" @resetFilter={{this.resetFilter}}></ModuleWorkloads::SchedulerChart>
                                     </div>
                */
                {
                  id: "o6c6miMg",
                  block: "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"id\",\"wlm-module-container\"],[8],[0,\"\\n                      \"],[5,\"module-workloads/scheduler-chart\",[],[[\"@toggleUnassignedSlider\",\"@userId\",\"@toggleSlider\",\"@isSliderOpen\",\"@showUnassignedItemSlider\",\"@model\",\"@currentView\",\"@resetFilter\"],[[23,0,[\"resetFilter\"]],\"\",[23,0,[\"resetFilter\"]],false,false,[23,0,[\"model\"]],\"week\",[23,0,[\"resetFilter\"]]]],{\"statements\":[],\"parameters\":[]}],[0,\"\\n                     \"],[9]],\"hasEval\":false}",
                  meta: {}
                }));

              case 20:
                Ember.set(this, 'model.filter', 'peoples-view');
                _context5.next = 23;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <div id="wlm-module-container">
                                      <ModuleWorkloads::SchedulerChart @toggleUnassignedSlider={{this.resetFilter}}
                											@userId = ""
                											@isSliderOpen = {{false}}
                											@toggleSlider={{this.resetFilter}}
                											@showUnassignedItemSlider = {{false}} @model={{this.model}} @currentView="week" @resetFilter={{this.resetFilter}}></ModuleWorkloads::SchedulerChart>
                                     </div>
                */
                {
                  id: "J/Bl3ztt",
                  block: "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"id\",\"wlm-module-container\"],[8],[0,\"\\n                      \"],[5,\"module-workloads/scheduler-chart\",[],[[\"@toggleUnassignedSlider\",\"@userId\",\"@isSliderOpen\",\"@toggleSlider\",\"@showUnassignedItemSlider\",\"@model\",\"@currentView\",\"@resetFilter\"],[[23,0,[\"resetFilter\"]],\"\",false,[23,0,[\"resetFilter\"]],false,[23,0,[\"model\"]],\"week\",[23,0,[\"resetFilter\"]]]],{\"statements\":[],\"parameters\":[]}],[0,\"\\n                     \"],[9]],\"hasEval\":false}",
                  meta: {}
                }));

              case 23:
                assert.ok(true);

              case 24:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it checks groups-view flow', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                Ember.set(this, 'model.filter', 'groups-view');
                Ember.set(this, 'model.group_ids', '81,78');
                _context6.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <div id="wlm-module-container">
                                      <ModuleWorkloads::SchedulerChart @toggleUnassignedSlider={{this.resetFilter}}
                											@userId = ""
                											@isSliderOpen = {{false}}
                											@showUnassignedItemSlider = {{false}} @model={{this.model}} @currentView="week" @resetFilter={{this.resetFilter}}></ModuleWorkloads::SchedulerChart>
                                     </div>
                */
                {
                  id: "QlH0mVhx",
                  block: "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"id\",\"wlm-module-container\"],[8],[0,\"\\n                      \"],[5,\"module-workloads/scheduler-chart\",[],[[\"@toggleUnassignedSlider\",\"@userId\",\"@isSliderOpen\",\"@showUnassignedItemSlider\",\"@model\",\"@currentView\",\"@resetFilter\"],[[23,0,[\"resetFilter\"]],\"\",false,false,[23,0,[\"model\"]],\"week\",[23,0,[\"resetFilter\"]]]],{\"statements\":[],\"parameters\":[]}],[0,\"\\n                     \"],[9]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                assert.ok(true);

              case 5:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it checks people-view flow', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                Ember.set(this, 'model.filter', 'people-view');
                Ember.set(this, 'model.user_ids', '41,42');
                _context7.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <div id="wlm-module-container">
                                      <ModuleWorkloads::SchedulerChart @toggleUnassignedSlider={{this.resetFilter}}
                											@userId = ""
                											@isSliderOpen = {{false}}
                											@showUnassignedItemSlider = {{false}} @model={{this.model}} @currentView="week" @resetFilter={{this.resetFilter}}></ModuleWorkloads::SchedulerChart>
                                     </div>
                */
                {
                  id: "QlH0mVhx",
                  block: "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"id\",\"wlm-module-container\"],[8],[0,\"\\n                      \"],[5,\"module-workloads/scheduler-chart\",[],[[\"@toggleUnassignedSlider\",\"@userId\",\"@isSliderOpen\",\"@showUnassignedItemSlider\",\"@model\",\"@currentView\",\"@resetFilter\"],[[23,0,[\"resetFilter\"]],\"\",false,false,[23,0,[\"model\"]],\"week\",[23,0,[\"resetFilter\"]]]],{\"statements\":[],\"parameters\":[]}],[0,\"\\n                     \"],[9]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                assert.ok(true);

              case 5:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it checks projects flow', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                Ember.set(this, 'model.filter', 'projects-view');
                Ember.set(this, 'model.project_ids', '1');
                _context8.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <div id="wlm-module-container">
                                        <ModuleWorkloads::SchedulerChart @toggleUnassignedSlider={{this.resetFilter}}
                											@userId = ""
                											@isSliderOpen = {{false}}
                											@showUnassignedItemSlider = {{false}} @model={{this.model}} @currentView="week" @resetFilter={{this.resetFilter}}></ModuleWorkloads::SchedulerChart>
                                       </div>
                */
                {
                  id: "rVWAk4zy",
                  block: "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"id\",\"wlm-module-container\"],[8],[0,\"\\n                        \"],[5,\"module-workloads/scheduler-chart\",[],[[\"@toggleUnassignedSlider\",\"@userId\",\"@isSliderOpen\",\"@showUnassignedItemSlider\",\"@model\",\"@currentView\",\"@resetFilter\"],[[23,0,[\"resetFilter\"]],\"\",false,false,[23,0,[\"model\"]],\"week\",[23,0,[\"resetFilter\"]]]],{\"statements\":[],\"parameters\":[]}],[0,\"\\n                       \"],[9]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                assert.ok(true);

              case 5:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x6) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it checks hour allocations', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                Ember.set(this, 'model.filter', 'people-view');
                Ember.set(this, 'model.user_ids', '41,42');
                _context9.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <div id="wlm-module-container">
                                      <ModuleWorkloads::SchedulerChart @toggleUnassignedSlider={{this.resetFilter}}
                											@userId = ""
                											@isSliderOpen = {{false}}
                											@showUnassignedItemSlider = {{false}} @model={{this.model}} @currentView="week" @resetFilter={{this.resetFilter}}
                											></ModuleWorkloads::SchedulerChart>
                                     </div>
                */
                {
                  id: "QlH0mVhx",
                  block: "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"id\",\"wlm-module-container\"],[8],[0,\"\\n                      \"],[5,\"module-workloads/scheduler-chart\",[],[[\"@toggleUnassignedSlider\",\"@userId\",\"@isSliderOpen\",\"@showUnassignedItemSlider\",\"@model\",\"@currentView\",\"@resetFilter\"],[[23,0,[\"resetFilter\"]],\"\",false,false,[23,0,[\"model\"]],\"week\",[23,0,[\"resetFilter\"]]]],{\"statements\":[],\"parameters\":[]}],[0,\"\\n                     \"],[9]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                assert.ok(true);

              case 5:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x7) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it checks item assigned', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                Ember.set(this, 'model.filter', 'people-view');
                Ember.set(this, 'model.user_ids', '41,42');
                _context10.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <div id="wlm-module-container"><ModuleWorkloads::SchedulerChart @model={{this.model}} @toggleSlider={{this.resetFilter}} @currentView="week" @resetFilter={{this.resetFilter}} @toggleUnassignedSlider={{this.resetFilter}} @userId = "" @isSliderOpen = {{false}} @showUnassignedItemSlider = {{false}}/></div>
                */
                {
                  id: "KN5pnWU6",
                  block: "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"id\",\"wlm-module-container\"],[8],[5,\"module-workloads/scheduler-chart\",[],[[\"@model\",\"@toggleSlider\",\"@currentView\",\"@resetFilter\",\"@toggleUnassignedSlider\",\"@userId\",\"@isSliderOpen\",\"@showUnassignedItemSlider\"],[[23,0,[\"model\"]],[23,0,[\"resetFilter\"]],\"week\",[23,0,[\"resetFilter\"]],[23,0,[\"resetFilter\"]],\"\",false,false]]],[9]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                assert.ok(true);

              case 5:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x8) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it resets selected filters', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                Ember.set(this, 'model.filter', 'people-view');
                Ember.set(this, 'model.user_ids', '41,42');
                _context11.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <div id="wlm-module-container"><ModuleWorkloads::SchedulerChart @model={{this.model}} @currentView="week" @resetFilter={{this.resetFilter}}  @toggleSlider={{this.resetFilter}} @toggleUnassignedSlider={{this.resetFilter}} @userId = "" @isSliderOpen = {{false}} @showUnassignedItemSlider = {{false}} /></div>
                */
                {
                  id: "HhefYZHB",
                  block: "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"id\",\"wlm-module-container\"],[8],[5,\"module-workloads/scheduler-chart\",[],[[\"@model\",\"@currentView\",\"@resetFilter\",\"@toggleSlider\",\"@toggleUnassignedSlider\",\"@userId\",\"@isSliderOpen\",\"@showUnassignedItemSlider\"],[[23,0,[\"model\"]],\"week\",[23,0,[\"resetFilter\"]],[23,0,[\"resetFilter\"]],[23,0,[\"resetFilter\"]],\"\",false,false]]],[9]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context11.next = 6;
                return (0, _testHelpers.click)('[data-wlm-filter-reset="wlm-filter-reset"]');

              case 6:
                assert.ok(true);

              case 7:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x9) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it checks empty allocation', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                Ember.set(this, 'model.filter', 'people-view');
                Ember.set(this, 'model.user_ids', '41');
                _context12.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <div id="wlm-module-container"><ModuleWorkloads::SchedulerChart @toggleSlider={{this.resetFilter}} @model={{this.model}} @toggleUnassignedSlider={{this.resetFilter}} @userId = "" @isSliderOpen = {{false}} @showUnassignedItemSlider = {{false}} @currentView="week" @resetFilter={{this.resetFilter}} /></div>
                */
                {
                  id: "TpLwP2Wg",
                  block: "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"id\",\"wlm-module-container\"],[8],[5,\"module-workloads/scheduler-chart\",[],[[\"@toggleSlider\",\"@model\",\"@toggleUnassignedSlider\",\"@userId\",\"@isSliderOpen\",\"@showUnassignedItemSlider\",\"@currentView\",\"@resetFilter\"],[[23,0,[\"resetFilter\"]],[23,0,[\"model\"]],[23,0,[\"resetFilter\"]],\"\",false,false,\"week\",[23,0,[\"resetFilter\"]]]]],[9]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                assert.ok(true);

              case 5:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x10) {
        return _ref12.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it checks percent allocation', /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                Ember.set(this, 'model.filter', 'people-view');
                Ember.set(this, 'model.user_ids', '41');
                _context13.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <div id="wlm-module-container"><ModuleWorkloads::SchedulerChart @toggleSlider={{this.resetFilter}} @model={{this.model}} @toggleUnassignedSlider={{this.resetFilter}} @userId = "" @isSliderOpen = {{false}} @showUnassignedItemSlider = {{false}} @currentView="week" @resetFilter={{this.resetFilter}} /></div>
                */
                {
                  id: "TpLwP2Wg",
                  block: "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"id\",\"wlm-module-container\"],[8],[5,\"module-workloads/scheduler-chart\",[],[[\"@toggleSlider\",\"@model\",\"@toggleUnassignedSlider\",\"@userId\",\"@isSliderOpen\",\"@showUnassignedItemSlider\",\"@currentView\",\"@resetFilter\"],[[23,0,[\"resetFilter\"]],[23,0,[\"model\"]],[23,0,[\"resetFilter\"]],\"\",false,false,\"week\",[23,0,[\"resetFilter\"]]]]],[9]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                assert.ok(true);

              case 5:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      return function (_x11) {
        return _ref13.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it checks item assigned allocation', /*#__PURE__*/function () {
      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                Ember.set(this, 'model.filter', 'people-view');
                Ember.set(this, 'model.user_ids', '41');
                Ember.set(this, 'model.effort_view', 'item_assigned');
                _context14.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <div id="wlm-module-container"><ModuleWorkloads::SchedulerChart @toggleSlider={{this.resetFilter}} @model={{this.queryParams}}  @toggleUnassignedSlider={{this.resetFilter}} @userId = "" @isSliderOpen = {{false}} @showUnassignedItemSlider = {{false}} @currentView="week" @resetFilter={{this.resetFilter}} /></div>
                */
                {
                  id: "fK8Hm95O",
                  block: "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"id\",\"wlm-module-container\"],[8],[5,\"module-workloads/scheduler-chart\",[],[[\"@toggleSlider\",\"@model\",\"@toggleUnassignedSlider\",\"@userId\",\"@isSliderOpen\",\"@showUnassignedItemSlider\",\"@currentView\",\"@resetFilter\"],[[23,0,[\"resetFilter\"]],[23,0,[\"queryParams\"]],[23,0,[\"resetFilter\"]],\"\",false,false,\"week\",[23,0,[\"resetFilter\"]]]]],[9]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                _context14.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <div id="wlm-module-container"><ModuleWorkloads::SchedulerChart @model={{this.hourQueryParams}}  @toggleSlider={{this.resetFilter}} @toggleUnassignedSlider={{this.resetFilter}} @userId = "" @isSliderOpen = {{false}} @showUnassignedItemSlider = {{false}} @currentView="week" @resetFilter={{this.resetFilter}} /></div>
                */
                {
                  id: "Lgl0S03E",
                  block: "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"id\",\"wlm-module-container\"],[8],[5,\"module-workloads/scheduler-chart\",[],[[\"@model\",\"@toggleSlider\",\"@toggleUnassignedSlider\",\"@userId\",\"@isSliderOpen\",\"@showUnassignedItemSlider\",\"@currentView\",\"@resetFilter\"],[[23,0,[\"hourQueryParams\"]],[23,0,[\"resetFilter\"]],[23,0,[\"resetFilter\"]],\"\",false,false,\"week\",[23,0,[\"resetFilter\"]]]]],[9]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context14.next = 9;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <div id="wlm-module-container"><ModuleWorkloads::SchedulerChart @model={{this.percentQueryParams}} @isSliderOpen = {{false}} @toggleUnassignedSlider={{this.resetFilter}} @toggleSlider={{this.resetFilter}} @currentView="week" @resetFilter={{this.resetFilter}} /></div>
                */
                {
                  id: "Oow2qlUi",
                  block: "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"id\",\"wlm-module-container\"],[8],[5,\"module-workloads/scheduler-chart\",[],[[\"@model\",\"@isSliderOpen\",\"@toggleUnassignedSlider\",\"@toggleSlider\",\"@currentView\",\"@resetFilter\"],[[23,0,[\"percentQueryParams\"]],false,[23,0,[\"resetFilter\"]],[23,0,[\"resetFilter\"]],\"week\",[23,0,[\"resetFilter\"]]]]],[9]],\"hasEval\":false}",
                  meta: {}
                }));

              case 9:
                assert.ok(true);

              case 10:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      return function (_x12) {
        return _ref14.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it checks timeline navigation', /*#__PURE__*/function () {
      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {
        var prevView, nextView;
        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                Ember.set(this, 'model.filter', 'people-view');
                Ember.set(this, 'model.user_ids', '41');
                _context15.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <div id="wlm-module-container"><ModuleWorkloads::SchedulerChart @toggleSlider={{this.resetFilter}} @model={{this.model}} @toggleUnassignedSlider={{this.resetFilter}} @userId = "" @isSliderOpen = {{false}} @showUnassignedItemSlider = {{false}} @currentView="week" @resetFilter={{this.resetFilter}} /></div>
                */
                {
                  id: "TpLwP2Wg",
                  block: "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"id\",\"wlm-module-container\"],[8],[5,\"module-workloads/scheduler-chart\",[],[[\"@toggleSlider\",\"@model\",\"@toggleUnassignedSlider\",\"@userId\",\"@isSliderOpen\",\"@showUnassignedItemSlider\",\"@currentView\",\"@resetFilter\"],[[23,0,[\"resetFilter\"]],[23,0,[\"model\"]],[23,0,[\"resetFilter\"]],\"\",false,false,\"week\",[23,0,[\"resetFilter\"]]]]],[9]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                prevView = this.element.querySelector('.btn-prev');
                nextView = this.element.querySelector('.btn-next');
                _context15.next = 8;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-header-today"]');

              case 8:
                _context15.next = 10;
                return (0, _testHelpers.click)(prevView);

              case 10:
                _context15.next = 12;
                return (0, _testHelpers.click)(nextView);

              case 12:
                assert.ok(true);

              case 13:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      return function (_x13) {
        return _ref15.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it checks summary and entity changes', /*#__PURE__*/function () {
      var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(assert) {
        var changeSummaryView;
        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                Ember.set(this, 'model.filter', 'people-view');
                Ember.set(this, 'model.user_ids', '41');
                _context16.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <div id="wlm-module-container"><ModuleWorkloads::SchedulerChart @toggleSlider={{this.resetFilter}} @toggleUnassignedSlider={{this.resetFilter}} @userId = "" @isSliderOpen = {{false}} @showUnassignedItemSlider = {{false}} @model={{this.model}} @currentView="week" @resetFilter={{this.resetFilter}} /></div>
                */
                {
                  id: "TMdXrcqr",
                  block: "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"id\",\"wlm-module-container\"],[8],[5,\"module-workloads/scheduler-chart\",[],[[\"@toggleSlider\",\"@toggleUnassignedSlider\",\"@userId\",\"@isSliderOpen\",\"@showUnassignedItemSlider\",\"@model\",\"@currentView\",\"@resetFilter\"],[[23,0,[\"resetFilter\"]],[23,0,[\"resetFilter\"]],\"\",false,false,[23,0,[\"model\"]],\"week\",[23,0,[\"resetFilter\"]]]]],[9]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context16.next = 6;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-header-today"]');

              case 6:
                changeSummaryView = this.element.querySelectorAll('.ember-basic-dropdown-trigger')[0];
                _context16.next = 9;
                return (0, _testHelpers.click)(changeSummaryView);

              case 9:
                _context16.next = 11;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-header-effort-option-hour"]');

              case 11:
                _context16.next = 13;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-header-entity-filter-dd-trigger"]');

              case 13:
                _context16.next = 15;
                return (0, _testHelpers.click)('[data-test-id="wlm-capacity-entity-filter-apply"]');

              case 15:
                assert.ok(true);

              case 16:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      return function (_x14) {
        return _ref16.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it does not render gantt bars', /*#__PURE__*/function () {
      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(assert) {
        var schedulerService, ganttBars;
        return regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                Ember.set(this, 'model.filter', 'people-view');
                Ember.set(this, 'model.user_ids', '41');
                Ember.set(this, 'model.date', '2022-05-11,2022-05-16');
                schedulerService = this.owner.lookup('service:dhtmlx-scheduler');
                this.set('_schedulerInstance', schedulerService);
                _context17.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <div id="wlm-module-container">
                                      <ModuleWorkloads::SchedulerChart @toggleUnassignedSlider={{this.resetFilter}} @userId = "" @isSliderOpen = {{false}} @showUnassignedItemSlider = {{false}} @model={{this.model}} @toggleSlider={{this.resetFilter}} @currentView="week" @resetFilter={{this.resetFilter}}></ModuleWorkloads::SchedulerChart>
                                     </div>
                */
                {
                  id: "ERQA8UuX",
                  block: "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"id\",\"wlm-module-container\"],[8],[0,\"\\n                      \"],[5,\"module-workloads/scheduler-chart\",[],[[\"@toggleUnassignedSlider\",\"@userId\",\"@isSliderOpen\",\"@showUnassignedItemSlider\",\"@model\",\"@toggleSlider\",\"@currentView\",\"@resetFilter\"],[[23,0,[\"resetFilter\"]],\"\",false,false,[23,0,[\"model\"]],[23,0,[\"resetFilter\"]],\"week\",[23,0,[\"resetFilter\"]]]],{\"statements\":[],\"parameters\":[]}],[0,\"\\n                     \"],[9]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                this._schedulerInstance.openSection('41');

                ganttBars = this.element.querySelector('.gantt-status');
                assert.dom(ganttBars).doesNotExist();

              case 10:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      return function (_x15) {
        return _ref17.apply(this, arguments);
      };
    }());
  });
});
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

define("freshservice/tests/integration/components/module-workloads/unassigned-items-slider/component-test", ["qunit", "ember-qunit", "ember-concurrency", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "@ember/test-helpers", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/stub-current-account", "freshservice/tests/lib/set-locale-timezone-moment"], function (_qunit, _emberQunit, _emberConcurrency, _testSupport, _intl, _testHelpers, _stubCurrentUser, _stubCurrentAccount, _setLocaleTimezoneMoment) {
  "use strict";

  var _dec, _class, _descriptor, _temp;

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  var MOCK_WORKLOAD_SERVICE = Ember.Service.extend({
    init: function init() {
      this._super.apply(this, arguments);

      this.allowedEntities = ['task', 'project_task', 'change', 'problem', 'release', 'ticket'];
    },
    getAllowedEntityTypes: function getAllowedEntityTypes() {
      return this.allowedEntities.map(function (entity) {
        return {
          label: entity,
          value: entity,
          hasAccess: true
        };
      });
    },
    fetchAssignments: function fetchAssignments(modelName, infinityModelOptions) {
      this.setProperties({
        modelName: modelName,
        infinityModelOptions: infinityModelOptions
      });
      return Ember.RSVP.resolve(Ember.ArrayProxy.create({
        content: Ember.A([]),
        meta: {
          has_next: false
        }
      }));
    }
  });
  var MockService1 = (_dec = (0, _emberConcurrency.task)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _emberConcurrency.timeout)(50);

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })).restartable(), (_class = (_temp = /*#__PURE__*/function (_Ember$Service) {
    _inherits(MockService1, _Ember$Service);

    var _super = _createSuper(MockService1);

    function MockService1() {
      var _this;

      _classCallCheck(this, MockService1);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _defineProperty(_assertThisInitialized(_this), "changeFormFieldHash", Object.freeze({
        status: {
          choices: [{
            id: 1,
            value: 'Open'
          }, {
            id: 2,
            value: 'Planning'
          }, {
            id: 3,
            value: 'Awaiting Approval'
          }, {
            id: 4,
            value: 'Pending Release'
          }, {
            id: 5,
            value: 'Pending Review'
          }, {
            id: 6,
            value: 'Closed'
          }]
        }
      }));

      _initializerDefineProperty(_assertThisInitialized(_this), "fetchModuleFields", _descriptor, _assertThisInitialized(_this));

      return _this;
    }

    return MockService1;
  }(Ember.Service), _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "fetchModuleFields", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));

  window.__CLASSIC_OWN_CLASSES__.set(MockService1, true);

  (0, _qunit.module)('Integration | Component | module-workloads/unassigned-items-slider', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _setLocaleTimezoneMoment.setLocaleAndTimeZoneForMoment)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      (0, _stubCurrentAccount.stubCurrentAccount)({
        features: ['fr_project', 'itil_modules']
      });
      (0, _stubCurrentUser.stubCurrentUser)({
        privileges: ['view_changes', 'view_problems', 'view_releases', 'manage_tickets', 'view_projects']
      });
      this.server.createList('task', 64);
      this.server.loadFixtures('users');
    });
    (0, _qunit.test)('it should render 30 assignment for the task type', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var assignementElements, infinityLoaderEle;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::UnassignedItemsSlider
                			@isSliderOpen = {{true}}/>
                */
                {
                  id: "rx6ZUtWo",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/unassigned-items-slider\",[],[[\"@isSliderOpen\"],[true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assignementElements = this.element.querySelectorAll('.unassigned-assignment-card');
                infinityLoaderEle = this.element.querySelectorAll('.assignment-card-loader');
                assert.equal(infinityLoaderEle.length, 1, 'Loader should be visible');
                assert.equal(assignementElements.length, 30, '30 assignemnt to be render');

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should fetch the changes list on change entity selected', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var task1, displayIdEle, titleEle;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this.server.createList('change', 62);
                this.owner.register('service:moduleFields', MockService1);
                _context3.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::UnassignedItemsSlider
                			@isSliderOpen = {{true}}/>
                */
                {
                  id: "rx6ZUtWo",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/unassigned-items-slider\",[],[[\"@isSliderOpen\"],[true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context3.next = 6;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-entity-switcher-trigger"]');

              case 6:
                _context3.next = 8;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-entity-switcher-option-change"]');

              case 8:
                task1 = this.server.db.changes.findBy({
                  'id': 1
                });
                displayIdEle = this.element.querySelector('[data-test-id="wlm-manage-assignment-card-display-id-1"]');
                assert.equal(displayIdEle.textContent.trim(), "#".concat(task1.human_display_id));
                titleEle = this.element.querySelector('[data-test-id="wlm-manage-assignment-card-title-1"]');
                assert.equal(titleEle.textContent.trim(), task1.ticket_subject);

              case 13:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should fetch the tasks once filter is applied', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var statusFilter, statusOption;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                this.owner.register('service:workload', MOCK_WORKLOAD_SERVICE);
                _context4.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::UnassignedItemsSlider
                			@isSliderOpen = {{true}}/>
                */
                {
                  id: "rx6ZUtWo",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/unassigned-items-slider\",[],[[\"@isSliderOpen\"],[true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context4.next = 5;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-filter-trigger"]');

              case 5:
                statusFilter = this.element.querySelectorAll('.ember-power-select-trigger')[0];
                _context4.next = 8;
                return (0, _testHelpers.click)(statusFilter);

              case 8:
                statusOption = this.element.querySelector('[data-option-index="1"]');
                _context4.next = 11;
                return (0, _testHelpers.click)(statusOption);

              case 11:
                _context4.next = 13;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-filter-action-apply"]');

              case 13:
                assert.ok('Filter apply test passed');

              case 14:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should fetch the project tasks on project task entity selected', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var task1, displayIdEle, titleEle;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                this.server.createList('project_task', 62);
                _context5.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::UnassignedItemsSlider
                			@isSliderOpen = {{true}}/>
                */
                {
                  id: "rx6ZUtWo",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/unassigned-items-slider\",[],[[\"@isSliderOpen\"],[true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context5.next = 5;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-entity-switcher-trigger"]');

              case 5:
                _context5.next = 7;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-entity-switcher-option-project_task"]');

              case 7:
                task1 = this.server.db.projectTasks.findBy({
                  'id': 1
                });
                displayIdEle = this.element.querySelector('[data-test-id="wlm-manage-assignment-card-display-id-1"]');
                assert.equal(displayIdEle.textContent.trim(), "#".concat(task1.key));
                titleEle = this.element.querySelector('[data-test-id="wlm-manage-assignment-card-title-1"]');
                assert.equal(titleEle.textContent.trim(), task1.title);

              case 12:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should fetch the tasks on due_date sorted', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var workloadService, infinityModelOptions;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                this.owner.register('service:workload', MOCK_WORKLOAD_SERVICE);
                _context6.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::UnassignedItemsSlider
                			@isSliderOpen = {{true}}/>
                */
                {
                  id: "rx6ZUtWo",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/unassigned-items-slider\",[],[[\"@isSliderOpen\"],[true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context6.next = 5;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-sort-trigger"]');

              case 5:
                _context6.next = 7;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-sort-by-option-due_date"]');

              case 7:
                workloadService = this.owner.lookup('service:workload');
                infinityModelOptions = workloadService.infinityModelOptions;
                assert.equal(workloadService.modelName, 'task', 'entity type should be task');
                assert.equal(infinityModelOptions.sortBy, 'due_date', 'sort by should be due_date');
                assert.equal(infinityModelOptions.sortOrder, 'asc', 'sort order should be ascending ');
                assert.equal(infinityModelOptions.per_page, '30', 'page size should be 30');
                assert.equal(infinityModelOptions.page, '1', 'page should be 1');

              case 14:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should fetch the changes on once sorted', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var workloadService, infinityModelOptions;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                this.owner.register('service:workload', MOCK_WORKLOAD_SERVICE);
                this.owner.register('service:moduleFields', MockService1);
                _context7.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::UnassignedItemsSlider
                			@isSliderOpen = {{true}}/>
                */
                {
                  id: "rx6ZUtWo",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/unassigned-items-slider\",[],[[\"@isSliderOpen\"],[true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context7.next = 6;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-entity-switcher-trigger"]');

              case 6:
                _context7.next = 8;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-entity-switcher-option-change"]');

              case 8:
                _context7.next = 10;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-sort-trigger"]');

              case 10:
                _context7.next = 12;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-sort-by-option-created_at"]');

              case 12:
                workloadService = this.owner.lookup('service:workload');
                infinityModelOptions = workloadService.infinityModelOptions;
                assert.equal(workloadService.modelName, 'change', 'entity type should be change');
                assert.equal(infinityModelOptions.sortBy, 'created_at', 'sort by should be created_at');
                assert.equal(infinityModelOptions.sortOrder, 'asc', 'sort order should be ascending ');
                assert.equal(infinityModelOptions.per_page, '30', 'page size should be 30');
                assert.equal(infinityModelOptions.page, '1', 'page should be 1');

              case 19:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x6) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should fetch the tasks on once sort order change to decending sorted', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var workloadService, infinityModelOptions;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                this.owner.register('service:workload', MOCK_WORKLOAD_SERVICE);
                _context8.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::UnassignedItemsSlider
                			@isSliderOpen = {{true}}/>
                */
                {
                  id: "rx6ZUtWo",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/unassigned-items-slider\",[],[[\"@isSliderOpen\"],[true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context8.next = 5;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-sort-trigger"]');

              case 5:
                _context8.next = 7;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-sort-order-option-desc"]');

              case 7:
                workloadService = this.owner.lookup('service:workload');
                infinityModelOptions = workloadService.infinityModelOptions;
                assert.equal(workloadService.modelName, 'task', 'entity type should be task');
                assert.equal(infinityModelOptions.sortBy, 'created_at', 'sort by should be created_at');
                assert.equal(infinityModelOptions.sortOrder, 'desc', 'sort order should be descending ');

              case 12:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x7) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render empty state if data is empty', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        var messageDom;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                this.owner.register('service:workload', MOCK_WORKLOAD_SERVICE);
                _context9.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::UnassignedItemsSlider
                			@isSliderOpen = {{true}}/>
                */
                {
                  id: "rx6ZUtWo",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/unassigned-items-slider\",[],[[\"@isSliderOpen\"],[true]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                messageDom = this.element.querySelector('[data-test-id="wlm-mas-empty-state-message"]');
                assert.equal(messageDom.textContent.trim(), 'There is no unassigned work to display');

              case 5:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x8) {
        return _ref9.apply(this, arguments);
      };
    }());
  });
});
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

define("freshservice/tests/integration/components/module-workloads/unassigned-items-slider/filter/component-test", ["freshservice/config/environment", "qunit", "ember-qunit", "ember-concurrency", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl"], function (_environment, _qunit, _emberQunit, _emberConcurrency, _testHelpers, _testSupport, _intl) {
  "use strict";

  var _dec, _class, _descriptor, _temp;

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  var MOCK_FETCH_SERVICE = Ember.Service.extend({
    request: function request(path, options) {
      var response = null;
      this.setProperties({
        path: path,
        options: options
      });

      if (path === 'freshrelease/settings/suggest-priorities?q=') {
        response = PRIORITIES_MOCK_RESPONSE;
      } else if (path === 'freshrelease/settings/filter_projects?placeholder[query]=') {
        response = PROJECT_RESPONSE;
      } else if (path === 'freshrelease/settings/suggest-statuses?q=&scope=unresolved') {
        response = STATUS_RESPONSE;
      }

      return Ember.RSVP.resolve(response);
    },
    json: function json() {
      return [];
    },
    host: _environment.default.environment === 'development' ? "".concat(_environment.default.APP.hostURL, "/api/_/") : '/api/_/'
  });
  var PRIORITIES_MOCK_RESPONSE = {
    "priorities": [{
      "id": 3,
      "name": "high",
      "label": "High"
    }, {
      "id": 1,
      "name": "low",
      "label": "Low"
    }, {
      "id": 2,
      "name": "medium",
      "label": "Medium"
    }, {
      "id": 4,
      "name": "urgent",
      "label": "Urgent"
    }],
    "meta": {
      "total": 4,
      "total_pages": 1,
      "page": 1
    }
  };
  var STATUS_RESPONSE = {
    "statuses": [{
      "id": 3,
      "name": "closed",
      "label": "Closed"
    }, {
      "id": 2,
      "name": "in_progress",
      "label": "In Progress"
    }, {
      "id": 1,
      "name": "open",
      "label": "Open"
    }],
    "meta": {
      "total": 3,
      "total_pages": 1,
      "page": 1
    }
  };
  var PROJECT_RESPONSE = {
    "body": {
      "projects": [{
        "id": 1,
        "name": "New application rollout (sample project)"
      }, {
        "id": 2,
        "name": "New application rollout 1"
      }, {
        "id": 3,
        "name": "New application rollout 2"
      }],
      "users": [{
        "id": 1,
        "name": "Shahid",
        "avatar_url": null,
        "email": "shahid.afridi@freshworks.com",
        "account_admin": true,
        "confirmed": false,
        "status": 1,
        "user_type": 0,
        "time_zone": "Chennai",
        "default_workspace_id": 1,
        "language": "en",
        "uuid": "427391067913536449",
        "access_level": 4,
        "fs_user_id": 6,
        "onboarding_flag": 0,
        "links": {
          "notification_settings": "/notification_settings"
        },
        "analytics_opt_in": true
      }],
      "meta": {
        "total": 3,
        "total_pages": 1,
        "page": 1
      }
    }
  };
  var MockService1 = (_dec = (0, _emberConcurrency.task)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _emberConcurrency.timeout)(50);

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })).restartable(), (_class = (_temp = /*#__PURE__*/function (_Ember$Service) {
    _inherits(MockService1, _Ember$Service);

    var _super = _createSuper(MockService1);

    function MockService1() {
      var _this;

      _classCallCheck(this, MockService1);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _defineProperty(_assertThisInitialized(_this), "changeFormFieldHash", Object.freeze({
        status: {
          choices: [{
            id: 1,
            value: 'Open'
          }, {
            id: 2,
            value: 'Planning'
          }, {
            id: 3,
            value: 'Awaiting Approval'
          }, {
            id: 4,
            value: 'Pending Release'
          }, {
            id: 5,
            value: 'Pending Review'
          }, {
            id: 6,
            value: 'Closed'
          }]
        }
      }));

      _defineProperty(_assertThisInitialized(_this), "getFormField", function () {
        return {
          choices: [{
            id: 1,
            value: 'Open'
          }, {
            id: 2,
            value: 'Planning'
          }, {
            id: 3,
            value: 'Awaiting Approval'
          }, {
            id: 4,
            value: 'Pending Release'
          }, {
            id: 5,
            value: 'Pending Review'
          }, {
            id: 6,
            value: 'Closed'
          }]
        };
      });

      _initializerDefineProperty(_assertThisInitialized(_this), "fetchModuleFields", _descriptor, _assertThisInitialized(_this));

      return _this;
    }

    return MockService1;
  }(Ember.Service), _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "fetchModuleFields", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class));

  window.__CLASSIC_OWN_CLASSES__.set(MockService1, true);

  var MOCK_WORKLOAD_SERVICE = Ember.Service.extend({
    fetchAssignments: function fetchAssignments(modelName, infinityModelOptions) {
      this.setProperties({
        modelName: modelName,
        infinityModelOptions: infinityModelOptions
      });
      return Ember.RSVP.resolve(Ember.ArrayProxy.create({
        content: Ember.A([]),
        meta: {
          has_next: false
        }
      }));
    }
  });
  (0, _qunit.module)('Integration | Component | module-workloads/unassigned-items-slider/filter', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      this.owner.register('service:module-fields', MockService1);
      this.server.loadFixtures('agentsGroups');
    });
    (0, _qunit.test)('it should render the component', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var ddTrigger;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::UnassignedItemsSlider::Filter
                      @currentEntityType = {{'task'}}/>
                */
                {
                  id: "jBRGgDAC",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/unassigned-items-slider/filter\",[],[[\"@currentEntityType\"],[\"task\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                ddTrigger = this.element.querySelector('[data-test-id="wlm-mas-filter-trigger"]');
                assert.ok(ddTrigger);

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render change filter status dropdown in the component', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var statusFilter, statusOption;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::UnassignedItemsSlider::Filter
                      @currentEntityType = {{'change'}}/>
                */
                {
                  id: "BPhhcGn7",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/unassigned-items-slider/filter\",[],[[\"@currentEntityType\"],[\"change\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context3.next = 4;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-filter-trigger"]');

              case 4:
                statusFilter = this.element.querySelectorAll('.ember-power-select-trigger')[0];
                _context3.next = 7;
                return (0, _testHelpers.click)(statusFilter);

              case 7:
                statusOption = this.element.querySelector('[data-option-index="0"]');
                _context3.next = 10;
                return (0, _testHelpers.click)(statusOption);

              case 10:
                assert.ok('Status dropdown test passed');

              case 11:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render change filter priority dropdown in the component', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var priorityFilter, priorityOption;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::UnassignedItemsSlider::Filter
                      @currentEntityType = {{'change'}}/>
                */
                {
                  id: "BPhhcGn7",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/unassigned-items-slider/filter\",[],[[\"@currentEntityType\"],[\"change\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context4.next = 4;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-filter-trigger"]');

              case 4:
                priorityFilter = this.element.querySelectorAll('.ember-power-select-trigger')[1];
                _context4.next = 7;
                return (0, _testHelpers.click)(priorityFilter);

              case 7:
                priorityOption = this.element.querySelector('[data-option-index="0"]');
                _context4.next = 10;
                return (0, _testHelpers.click)(priorityOption);

              case 10:
                assert.ok('Priority dropdown test passed');

              case 11:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render change filter group dropdown in the component', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var groupFilter, groupOption;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::UnassignedItemsSlider::Filter
                      @currentEntityType = {{'change'}}/>
                */
                {
                  id: "BPhhcGn7",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/unassigned-items-slider/filter\",[],[[\"@currentEntityType\"],[\"change\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context5.next = 4;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-filter-trigger"]');

              case 4:
                groupFilter = this.element.querySelectorAll('.ember-power-select-trigger')[2];
                _context5.next = 7;
                return (0, _testHelpers.click)(groupFilter);

              case 7:
                groupOption = this.element.querySelector('[data-option-index="0"]');
                _context5.next = 10;
                return (0, _testHelpers.click)(groupOption);

              case 10:
                assert.ok('Group dropdown test passed');

              case 11:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render task filter status dropdown in the component', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var statusFilter, statusOption;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::UnassignedItemsSlider::Filter
                      @currentEntityType = {{'task'}}/>
                */
                {
                  id: "jBRGgDAC",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/unassigned-items-slider/filter\",[],[[\"@currentEntityType\"],[\"task\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context6.next = 4;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-filter-trigger"]');

              case 4:
                statusFilter = this.element.querySelectorAll('.ember-power-select-trigger')[0];
                _context6.next = 7;
                return (0, _testHelpers.click)(statusFilter);

              case 7:
                statusOption = this.element.querySelector('[data-option-index="0"]');
                _context6.next = 10;
                return (0, _testHelpers.click)(statusOption);

              case 10:
                assert.ok('Status dropdown test passed');

              case 11:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should apply filter in the component', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var statusFilter, statusOption, priorityFilter, priorityOption, groupFilter, groupOption;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                this.set('onFilter', function (filterObject) {
                  assert.deepEqual(filterObject.status, {
                    "id": 1,
                    "value": "Open"
                  });
                  assert.deepEqual(filterObject.priority, {
                    "id": 1,
                    "value": "Open"
                  });
                  assert.deepEqual(filterObject.group, {
                    "id": "-1",
                    "value": "Unassigned"
                  });
                  assert.deepEqual(filterObject.project, {
                    "id": "all",
                    "label": "All",
                    "name": "All",
                    "value": "All"
                  });
                });
                _context7.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::UnassignedItemsSlider::Filter
                      @doFilter = {{this.onFilter}}
                      @currentEntityType = {{'change'}}/>
                */
                {
                  id: "SQ1pK/4b",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/unassigned-items-slider/filter\",[],[[\"@doFilter\",\"@currentEntityType\"],[[23,0,[\"onFilter\"]],\"change\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context7.next = 5;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-filter-trigger"]');

              case 5:
                statusFilter = this.element.querySelectorAll('.ember-power-select-trigger')[0];
                _context7.next = 8;
                return (0, _testHelpers.click)(statusFilter);

              case 8:
                statusOption = this.element.querySelector('[data-option-index="1"]');
                _context7.next = 11;
                return (0, _testHelpers.click)(statusOption);

              case 11:
                priorityFilter = this.element.querySelectorAll('.ember-power-select-trigger')[1];
                _context7.next = 14;
                return (0, _testHelpers.click)(priorityFilter);

              case 14:
                priorityOption = this.element.querySelector('[data-option-index="1"]');
                _context7.next = 17;
                return (0, _testHelpers.click)(priorityOption);

              case 17:
                groupFilter = this.element.querySelectorAll('.ember-power-select-trigger')[2];
                _context7.next = 20;
                return (0, _testHelpers.click)(groupFilter);

              case 20:
                groupOption = this.element.querySelector('[data-option-index="1"]');
                _context7.next = 23;
                return (0, _testHelpers.click)(groupOption);

              case 23:
                _context7.next = 25;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-filter-action-apply"]');

              case 25:
                assert.ok('Filter apply test passed');

              case 26:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x6) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should reset selected choices in the component', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var statusFilter, statusOption;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                this.set('onFilter', function (filterObject) {
                  assert.deepEqual(filterObject.status, {
                    "id": "all",
                    "label": "All",
                    "name": "All",
                    "value": "All"
                  });
                  assert.deepEqual(filterObject.priority, {
                    "id": "all",
                    "label": "All",
                    "name": "All",
                    "value": "All"
                  });
                  assert.deepEqual(filterObject.group, {
                    "id": "all",
                    "label": "All",
                    "name": "All",
                    "value": "All"
                  });
                  assert.deepEqual(filterObject.project, {
                    "id": "all",
                    "label": "All",
                    "name": "All",
                    "value": "All"
                  });
                });
                _context8.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::UnassignedItemsSlider::Filter
                      @doFilter = {{this.onFilter}}
                      @currentEntityType = {{'task'}}/>
                */
                {
                  id: "DPfckiTe",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/unassigned-items-slider/filter\",[],[[\"@doFilter\",\"@currentEntityType\"],[[23,0,[\"onFilter\"]],\"task\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context8.next = 5;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-filter-trigger"]');

              case 5:
                statusFilter = this.element.querySelectorAll('.ember-power-select-trigger')[0];
                _context8.next = 8;
                return (0, _testHelpers.click)(statusFilter);

              case 8:
                statusOption = this.element.querySelector('[data-option-index="2"]');
                _context8.next = 11;
                return (0, _testHelpers.click)(statusOption);

              case 11:
                _context8.next = 13;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-filter-action-reset"]');

              case 13:
                assert.ok('Reset selected test passed');

              case 14:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x7) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should apply project task priority filter in the component', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        var priorityFilter, priorityOption;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                this.owner.register('service:workload', MOCK_WORKLOAD_SERVICE);
                this.owner.register('service:fetch', MOCK_FETCH_SERVICE);
                this.set('onFilter', function (filterObject) {
                  assert.deepEqual(filterObject.status, {
                    "id": "all",
                    "label": "All",
                    "name": "All",
                    "value": "All"
                  });
                  assert.deepEqual(filterObject.priority, {
                    "id": 3,
                    "label": "High",
                    "name": "high"
                  });
                  assert.deepEqual(filterObject.group, {
                    "id": "all",
                    "label": "All",
                    "name": "All",
                    "value": "All"
                  });
                  assert.deepEqual(filterObject.project, {
                    "id": "all",
                    "label": "All",
                    "name": "All",
                    "value": "All"
                  });
                });
                _context9.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::UnassignedItemsSlider::Filter
                			@doFilter = {{this.onFilter}}
                      @currentEntityType = {{'project_task'}}/>
                */
                {
                  id: "u4cJNxeq",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/unassigned-items-slider/filter\",[],[[\"@doFilter\",\"@currentEntityType\"],[[23,0,[\"onFilter\"]],\"project_task\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                _context9.next = 7;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-filter-trigger"]');

              case 7:
                priorityFilter = this.element.querySelectorAll('.ember-power-select-trigger')[1];
                _context9.next = 10;
                return (0, _testHelpers.click)(priorityFilter);

              case 10:
                priorityOption = this.element.querySelector('[data-option-index="1"]');
                _context9.next = 13;
                return (0, _testHelpers.click)(priorityOption);

              case 13:
                _context9.next = 15;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-filter-action-apply"]');

              case 15:
                assert.ok('Filter apply test passed');

              case 16:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x8) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render project task filter priority dropdown in the component', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var priorityFilter, priorityOption;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                this.owner.register('service:fetch', MOCK_FETCH_SERVICE);
                this.owner.register('service:workload', MOCK_WORKLOAD_SERVICE);
                _context10.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::UnassignedItemsSlider::Filter
                      @currentEntityType = {{'project_task'}}/>
                */
                {
                  id: "HvbiRdDw",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/unassigned-items-slider/filter\",[],[[\"@currentEntityType\"],[\"project_task\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context10.next = 6;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-filter-trigger"]');

              case 6:
                priorityFilter = this.element.querySelectorAll('.ember-power-select-trigger')[1];
                _context10.next = 9;
                return (0, _testHelpers.click)(priorityFilter);

              case 9:
                priorityOption = this.element.querySelector('[data-option-index="0"]');
                _context10.next = 12;
                return (0, _testHelpers.click)(priorityOption);

              case 12:
                assert.ok('Priority dropdown test passed');

              case 13:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x9) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render project task filter project dropdown in the component', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        var projectFilter, projectOption;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                this.owner.register('service:fetch', MOCK_FETCH_SERVICE);
                this.owner.register('service:workload', MOCK_WORKLOAD_SERVICE);
                _context11.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::UnassignedItemsSlider::Filter
                      @currentEntityType = {{'project_task'}}/>
                */
                {
                  id: "HvbiRdDw",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/unassigned-items-slider/filter\",[],[[\"@currentEntityType\"],[\"project_task\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context11.next = 6;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-filter-trigger"]');

              case 6:
                projectFilter = this.element.querySelectorAll('.ember-power-select-trigger')[2];
                _context11.next = 9;
                return (0, _testHelpers.click)(projectFilter);

              case 9:
                projectOption = this.element.querySelector('[data-option-index="0"]');
                _context11.next = 12;
                return (0, _testHelpers.click)(projectOption);

              case 12:
                assert.ok('Projects dropdown test passed');

              case 13:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x10) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render priority dropdown in the component', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        var priorityFilter, priorityOption;
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                _context12.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::UnassignedItemsSlider::Filter
                      @currentEntityType = {{'ticket'}}/>
                */
                {
                  id: "6W4Qa0Gh",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/unassigned-items-slider/filter\",[],[[\"@currentEntityType\"],[\"ticket\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context12.next = 4;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-filter-trigger"]');

              case 4:
                priorityFilter = this.element.querySelectorAll('.ember-power-select-trigger')[1];
                _context12.next = 7;
                return (0, _testHelpers.click)(priorityFilter);

              case 7:
                priorityOption = this.element.querySelector('[data-option-index="0"]');
                _context12.next = 10;
                return (0, _testHelpers.click)(priorityOption);

              case 10:
                assert.ok('Priority dropdown test passed');

              case 11:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x11) {
        return _ref12.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render group dropdown in the component', /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
        var groupFilter, groupOption;
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                _context13.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <ModuleWorkloads::UnassignedItemsSlider::Filter
                      @currentEntityType = {{'ticket'}}/>
                */
                {
                  id: "6W4Qa0Gh",
                  block: "{\"symbols\":[],\"statements\":[[5,\"module-workloads/unassigned-items-slider/filter\",[],[[\"@currentEntityType\"],[\"ticket\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context13.next = 4;
                return (0, _testHelpers.click)('[data-test-id="wlm-mas-filter-trigger"]');

              case 4:
                groupFilter = this.element.querySelectorAll('.ember-power-select-trigger')[2];
                _context13.next = 7;
                return (0, _testHelpers.click)(groupFilter);

              case 7:
                groupOption = this.element.querySelector('[data-option-index="0"]');
                _context13.next = 10;
                return (0, _testHelpers.click)(groupOption);

              case 10:
                assert.ok('Group dropdown test passed');

              case 11:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      return function (_x12) {
        return _ref13.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/portal-designer/custom-translations/component-test", ["qunit", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "@ember/test-helpers"], function (_qunit, _emberQunit, _testSupport, _intl, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var PRIMARY_TRANSLATION = "<p>Hi, how can we help you ?</p>";
  var LANG_PATH = "portal.home_title";
  var SUPPORTED_LANGUAGES = [{
    "id": "da",
    "value": "Danish",
    "primary": false
  }, {
    "id": "fr",
    "value": "French",
    "primary": false
  }, {
    "id": "es",
    "value": "Spanish",
    "primary": false
  }];
  var CUSTOM_TRANSLATIONS = {
    "en": {
      "portal": {
        "home_title": "How can we help you ?"
      }
    },
    "da": {
      "portal": {
        "home_title": "Hi in Danish"
      }
    }
  };

  var UPDATE_SECONDARY_TRANSLATIONS_COUNT = function UPDATE_SECONDARY_TRANSLATIONS_COUNT() {//do nothing
  };

  var MOCK_TRANSLATIONS = {
    "en": {
      "portal": {
        "home_title": "How can we help you ?"
      }
    }
  };
  var BUILDER_SERVICE_STUB = Ember.Service.extend({
    translations: MOCK_TRANSLATIONS,
    sendToPortal: function sendToPortal() {//do nothing
    },
    postDraft: function postDraft() {//do nothing
    }
  }); // Wait method implemented to account for the froala toggle delay

  function wait() {
    return _wait.apply(this, arguments);
  }

  function _wait() {
    _wait = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
      var timeout,
          _args6 = arguments;
      return regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              timeout = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : 500;
              return _context6.abrupt("return", new Promise(function (resolve) {
                setTimeout(resolve, timeout);
              }));

            case 2:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    }));
    return _wait.apply(this, arguments);
  }

  (0, _qunit.module)('Integration | Component | portal-designer/custom-translations', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      var _this = this;

      this.server.loadFixtures('languages');
      this.owner.lookup('service:store');
      this.owner.register('service:portal-builder', BUILDER_SERVICE_STUB);
      var translationService = this.owner.lookup('service:portal-designer-translations');
      translationService.set('primaryLanguage', {
        id: 'en',
        value: 'English'
      });
      translationService.initTextTranslations(LANG_PATH);
      this.set('portalDesignerTranslations', translationService);
      this.set('portalDesignerTranslations.supportedLanguages', SUPPORTED_LANGUAGES);
      this.set('portalDesignerTranslations.customTranslations', CUSTOM_TRANSLATIONS);
      this.set('isModalOpen', true);
      this.set('toggleModal', function () {
        _this.set('isModalOpen', !_this.isModalOpen);
      });
      this.set('primaryTranslation', PRIMARY_TRANSLATION);
      this.set('updateSecondaryTranslationsCount', UPDATE_SECONDARY_TRANSLATIONS_COUNT);
    });
    (0, _qunit.test)('it renders', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                    <PortalDesigner::CustomTranslations
                      @isModalOpen        							= {{this.isModalOpen}}
                      @toggleModal        							= {{this.toggleModal}}
                      @primaryTranslation 							= {{this.primaryTranslation}}
                			@updateSecondaryTranslationsCount = {{this.updateSecondaryTranslationsCount}}
                    />
                */
                {
                  id: "5BcaORY+",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n    \"],[5,\"portal-designer/custom-translations\",[],[[\"@isModalOpen\",\"@toggleModal\",\"@primaryTranslation\",\"@updateSecondaryTranslationsCount\"],[[23,0,[\"isModalOpen\"]],[23,0,[\"toggleModal\"]],[23,0,[\"primaryTranslation\"]],[23,0,[\"updateSecondaryTranslationsCount\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.ok(true);

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it displays existing translations', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                    <PortalDesigner::CustomTranslations
                      @isModalOpen        							= {{this.isModalOpen}}
                      @toggleModal        							= {{this.toggleModal}}
                      @primaryTranslation 							= {{this.primaryTranslation}}
                			@updateSecondaryTranslationsCount = {{this.updateSecondaryTranslationsCount}}
                    />
                */
                {
                  id: "5BcaORY+",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n    \"],[5,\"portal-designer/custom-translations\",[],[[\"@isModalOpen\",\"@toggleModal\",\"@primaryTranslation\",\"@updateSecondaryTranslationsCount\"],[[23,0,[\"isModalOpen\"]],[23,0,[\"toggleModal\"]],[23,0,[\"primaryTranslation\"]],[23,0,[\"updateSecondaryTranslationsCount\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.equal(this.element.querySelector('[data-test-id="translated-text"]').innerText, 'Hi in Danish', 'displays existing translation');

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it deletes existing translation', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                    <PortalDesigner::CustomTranslations
                      @isModalOpen        							= {{this.isModalOpen}}
                      @toggleModal        							= {{this.toggleModal}}
                      @primaryTranslation 							= {{this.primaryTranslation}}
                			@updateSecondaryTranslationsCount = {{this.updateSecondaryTranslationsCount}}
                    />
                */
                {
                  id: "5BcaORY+",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n    \"],[5,\"portal-designer/custom-translations\",[],[[\"@isModalOpen\",\"@toggleModal\",\"@primaryTranslation\",\"@updateSecondaryTranslationsCount\"],[[23,0,[\"isModalOpen\"]],[23,0,[\"toggleModal\"]],[23,0,[\"primaryTranslation\"]],[23,0,[\"updateSecondaryTranslationsCount\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.equal(this.element.querySelector('[data-test-id="translated-text"]').innerText, 'Hi in Danish', 'displays existing translation');
                _context3.next = 5;
                return (0, _testHelpers.click)('[data-test-id="delete-card"]');

              case 5:
                assert.notOk(this.element.querySelector('[data-test-id="translated-text"]'), 'deleted existing translation');

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it closes modal', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                    <PortalDesigner::CustomTranslations
                      @isModalOpen        							= {{this.isModalOpen}}
                      @toggleModal        							= {{this.toggleModal}}
                      @primaryTranslation 							= {{this.primaryTranslation}}
                			@updateSecondaryTranslationsCount = {{this.updateSecondaryTranslationsCount}}
                    />
                */
                {
                  id: "5BcaORY+",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n    \"],[5,\"portal-designer/custom-translations\",[],[[\"@isModalOpen\",\"@toggleModal\",\"@primaryTranslation\",\"@updateSecondaryTranslationsCount\"],[[23,0,[\"isModalOpen\"]],[23,0,[\"toggleModal\"]],[23,0,[\"primaryTranslation\"]],[23,0,[\"updateSecondaryTranslationsCount\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context4.next = 4;
                return (0, _testHelpers.click)('[data-test-id="modal-cancel"]');

              case 4:
                assert.notOk(this.element.querySelector('[data-test-id="translation-modal"]'), 'modal closed on cancel');
                this.toggleModal();
                assert.ok(this.element.querySelector('[data-test-id="translation-modal"]'), 'modal opened');
                _context4.next = 9;
                return (0, _testHelpers.click)('[data-test-id="ember-modal-close"]');

              case 9:
                assert.notOk(this.element.querySelector('[data-test-id="translation-modal"]'), 'modal closed on close icon click');
                this.toggleModal();
                assert.ok(this.element.querySelector('[data-test-id="translation-modal"]'), 'modal opened');
                _context4.next = 14;
                return (0, _testHelpers.click)('[data-test-id="modal-submit"]');

              case 14:
                assert.notOk(this.element.querySelector('[data-test-id="translation-modal"]'), 'modal closed on save');

              case 15:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it adds and saves new translation', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                this.set('portalDesignerTranslations.placeholderModalStatus', function () {
                  return false;
                });
                this.set('portalDesignerTranslations.customTranslations.da', '');
                _context5.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                    <PortalDesigner::CustomTranslations
                      @isModalOpen        							= {{this.isModalOpen}}
                      @toggleModal        							= {{this.toggleModal}}
                      @primaryTranslation 							= {{this.primaryTranslation}}
                			@updateSecondaryTranslationsCount = {{this.updateSecondaryTranslationsCount}}
                    />
                */
                {
                  id: "5BcaORY+",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n    \"],[5,\"portal-designer/custom-translations\",[],[[\"@isModalOpen\",\"@toggleModal\",\"@primaryTranslation\",\"@updateSecondaryTranslationsCount\"],[[23,0,[\"isModalOpen\"]],[23,0,[\"toggleModal\"]],[23,0,[\"primaryTranslation\"]],[23,0,[\"updateSecondaryTranslationsCount\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context5.next = 6;
                return (0, _testHelpers.click)('.ember-power-select-trigger');

              case 6:
                _context5.next = 8;
                return (0, _testHelpers.click)('[data-option-index="0"]');

              case 8:
                _context5.next = 10;
                return (0, _testHelpers.click)('[data-test-id="translated-text"]');

              case 10:
                _context5.next = 12;
                return wait();

              case 12:
                _context5.next = 14;
                return (0, _testHelpers.fillIn)('.fr-translation-editor .fr-element.fr-view', 'Hi in Danish');

              case 14:
                _context5.next = 16;
                return (0, _testHelpers.click)('[data-test-id="translation-modal"]');

              case 16:
                //?clicking outside
                assert.ok(this.element.querySelector('[data-test-id="translated-text"]'), 'new translation card added');
                _context5.next = 19;
                return (0, _testHelpers.click)('[data-test-id="modal-submit"]');

              case 19:
                assert.equal(this.get('portalDesignerTranslations.customTranslations.da.portal.home_title'), 'Hi in Danish', 'new translation saved');

              case 20:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/portal-designer/custom-translations/language-card/component-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var MOCK_TRANSLATIONS = {
    "en": {
      "portal": {
        "home_title": "How can we help you ?"
      }
    }
  };
  var BUILDER_SERVICE_STUB = Ember.Service.extend({
    translations: MOCK_TRANSLATIONS,
    sendToPortal: function sendToPortal() {//do nothing
    }
  });
  (0, _qunit.module)('Integration | Component | portal-designer/custom-translations/language-card', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      this.owner.register('service:portal-builder', BUILDER_SERVICE_STUB);
      var translationService = this.owner.lookup('service:portal-designer-translations');
      translationService.set('placeholderModalStatus', function () {
        return false;
      });
      translationService.set('primaryLanguage', {
        code: 'en',
        name: 'English'
      });
      this.set('portalDesignerTranslations', translationService);
      this.set('cardLabel', 'Title');
      this.set('onUpdate', function () {//do nothing
      });
      this.set('onDelete', function () {//do nothing
      });
      this.set('langCode', 'fr');
      this.set('langName', 'French');
      this.set('translations', 'Comment pouvons-nous vous aider ?');
    });
    (0, _qunit.test)('it renders primary translation card', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.set('langCode', 'en');
                this.set('langName', 'English');
                this.set('translations', 'How can we help you ?');
                this.set('isPrimaryLang', true);
                _context.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                    <PortalDesigner::CustomTranslations::LanguageCard 
                      @langCode       = {{this.langCode}}
                      @langName       = {{this.langName}}
                      @translation    = {{this.translation}}
                      @isPrimaryLang  = {{this.isPrimaryLang}}
                      @label          = {{this.cardLabel}}
                      @onUpdate       = {{this.onUpdate}}
                    />
                */
                {
                  id: "RlPhLjEv",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n    \"],[5,\"portal-designer/custom-translations/language-card\",[],[[\"@langCode\",\"@langName\",\"@translation\",\"@isPrimaryLang\",\"@label\",\"@onUpdate\"],[[23,0,[\"langCode\"]],[23,0,[\"langName\"]],[23,0,[\"translation\"]],[23,0,[\"isPrimaryLang\"]],[23,0,[\"cardLabel\"]],[23,0,[\"onUpdate\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                assert.notOk(this.element.querySelector('[data-test-id="delete-card"]'), 'no delete option');
                assert.notOk(this.element.querySelector('[data-test-id="translated-text"]'), 'no edit option');

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it renders supported language translation card', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                    <PortalDesigner::CustomTranslations::LanguageCard 
                      @langCode    = {{this.langCode}}
                      @langName    = {{this.langName}}
                      @translation = {{this.translation}}
                      @label       = {{this.cardLabel}}
                      @onUpdate    = {{this.onUpdate}}
                      @onDelete    = {{this.onDelete}}
                    />
                */
                {
                  id: "7KSB8lhs",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n    \"],[5,\"portal-designer/custom-translations/language-card\",[],[[\"@langCode\",\"@langName\",\"@translation\",\"@label\",\"@onUpdate\",\"@onDelete\"],[[23,0,[\"langCode\"]],[23,0,[\"langName\"]],[23,0,[\"translation\"]],[23,0,[\"cardLabel\"]],[23,0,[\"onUpdate\"]],[23,0,[\"onDelete\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.ok(this.element.querySelector('[data-test-id="delete-card"]'), 'delete option');
                assert.ok(this.element.querySelector('[data-test-id="translated-text"]'), 'edit option');

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/portal-designer/manage-versions-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl"], function (_qunit, _emberQunit, _testHelpers, _intl) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | portal-designer/manage-versions', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.intl = this.owner.lookup("service:intl");

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    hooks.after(function () {
      this.owner.destroy("service:intl");
    });
    (0, _qunit.test)('it renders manage versions dropdown button', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <PortalDesigner::ManageVersions />
                */
                {
                  id: "LRT4scq4",
                  block: "{\"symbols\":[],\"statements\":[[5,\"portal-designer/manage-versions\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.dom('.ember-basic-dropdown').exists();
                assert.equal(this.element.querySelector('.ember-basic-dropdown .manage-versions-title').innerText.trim(), this.intl.t("portal_designer.manage_versions"));

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/portal-designer/page-switcher-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-current-account", "freshservice/tests/data/custom-translations"], function (_qunit, _emberQunit, _testHelpers, _intl, _stubCurrentAccount, _customTranslations) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | portal-designer/page-switcher', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.intl = this.owner.lookup("service:intl");

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    hooks.after(function () {
      this.owner.destroy("service:intl");
    });
    (0, _qunit.test)('it renders Page Switcher element', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <PortalDesigner::PageSwitcher />
                */
                {
                  id: "s5txKoz4",
                  block: "{\"symbols\":[],\"statements\":[[5,\"portal-designer/page-switcher\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.dom('.page-switcher.ember-basic-dropdown').exists();
                assert.dom('.page-switcher .selected-page').exists();
                assert.equal(document.querySelector('.page-switcher .selected-page').innerText.trim(), this.intl.t("portal_designer.home_page_designer"));

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it clicks Page Switcher element ', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <PortalDesigner::PageSwitcher />
                */
                {
                  id: "s5txKoz4",
                  block: "{\"symbols\":[],\"statements\":[[5,\"portal-designer/page-switcher\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context3.next = 4;
                return (0, _testHelpers.click)('.selected-page');

              case 4:
                assert.dom('#search-pages').exists();

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it fills in search page text box', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var expected_output;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                (0, _stubCurrentAccount.stubCurrentAccount)({
                  customTranslations: _customTranslations.defaultCustomTranslations
                });
                expected_output = [this.intl.t('portal_designer.solutions_home'), this.intl.t('portal_designer.solution_category')];
                _context4.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <PortalDesigner::PageSwitcher />
                */
                {
                  id: "s5txKoz4",
                  block: "{\"symbols\":[],\"statements\":[[5,\"portal-designer/page-switcher\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context4.next = 6;
                return (0, _testHelpers.click)('.selected-page');

              case 6:
                _context4.next = 8;
                return (0, _testHelpers.fillIn)('input#search-pages', 'solution');

              case 8:
                assert.equal(this.element.querySelector('.portal-pages .portal-pages-label').innerText.trim(), this.intl.t("portal_designer.solutions"), 'Section headings are as expected');
                assert.dom('#search-pages').exists();
                this.element.querySelectorAll('.portal-pages button').forEach(function (current_element) {
                  assert.equal(expected_output.includes(current_element.innerText.trim()), true, 'Listed items are as expected');
                });

              case 11:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/portal-designer/placeholder-modal/component-test", ["qunit", "ember-qunit", "freshservice/tests/lib/intl", "@ember/test-helpers"], function (_qunit, _emberQunit, _intl, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var MOCK_TRANSLATIONS = {
    "en": {
      "portal": {
        "home_title": "How can we help you ?"
      }
    }
  };
  var BUILDER_SERVICE_STUB = Ember.Service.extend({
    translations: MOCK_TRANSLATIONS,
    sendToPortal: function sendToPortal() {//do nothing
    }
  });
  (0, _qunit.module)('Integration | Component | portal-designer/placeholder-modal', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      var _this = this;

      this.owner.register('service:portal-builder', BUILDER_SERVICE_STUB);
      var translationService = this.owner.lookup('service:portal-designer-translations');
      this.set('portalDesignerTranslations', translationService);
      this.set('isModalOpen', true);
      this.set('toggleModal', function () {
        _this.set('isModalOpen', !_this.isModalOpen);
      });
    });
    (0, _qunit.test)('it renders', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                    <PortalDesigner::PlaceholderModal 
                      @isModalOpen = {{this.isModalOpen}}
                      @toggleModal = {{this.toggleModal}}
                    />
                */
                {
                  id: "1eCQKe3P",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n    \"],[5,\"portal-designer/placeholder-modal\",[],[[\"@isModalOpen\",\"@toggleModal\"],[[23,0,[\"isModalOpen\"]],[23,0,[\"toggleModal\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.ok(this.element.querySelector('[data-test-placeholders="container"]'), 'it renders modal');
                assert.equal(this.element.querySelectorAll('[data-test-placeholders="notAvailable"]').length, 2, 'no placeholders available');
                assert.ok(true);

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it closes modal on close icon click', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                    <PortalDesigner::PlaceholderModal 
                      @isModalOpen = {{this.isModalOpen}}
                      @toggleModal = {{this.toggleModal}}
                    />
                */
                {
                  id: "1eCQKe3P",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n    \"],[5,\"portal-designer/placeholder-modal\",[],[[\"@isModalOpen\",\"@toggleModal\"],[[23,0,[\"isModalOpen\"]],[23,0,[\"toggleModal\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context2.next = 4;
                return (0, _testHelpers.click)('[data-test-placeholders="close"]');

              case 4:
                assert.notOk(this.element.querySelector('[data-test-placeholders="container"]'), 'modal closed');

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it shows placeholders', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this.set('portalDesignerTranslations.placeholderForPortal', true);
                _context3.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                    <PortalDesigner::PlaceholderModal 
                      @isModalOpen = {{this.isModalOpen}}
                      @toggleModal = {{this.toggleModal}}
                    />
                */
                {
                  id: "1eCQKe3P",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n    \"],[5,\"portal-designer/placeholder-modal\",[],[[\"@isModalOpen\",\"@toggleModal\"],[[23,0,[\"isModalOpen\"]],[23,0,[\"toggleModal\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.ok(this.element.querySelector('[data-test-placeholders="placeholder"]'), 'placeholders rendered');

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it closes modal on placeholders click', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                this.set('portalDesignerTranslations.placeholderForPortal', true);
                _context4.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                    <PortalDesigner::PlaceholderModal 
                      @isModalOpen = {{this.isModalOpen}}
                      @toggleModal = {{this.toggleModal}}
                    />
                */
                {
                  id: "1eCQKe3P",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n    \"],[5,\"portal-designer/placeholder-modal\",[],[[\"@isModalOpen\",\"@toggleModal\"],[[23,0,[\"isModalOpen\"]],[23,0,[\"toggleModal\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context4.next = 5;
                return (0, _testHelpers.click)('[data-test-placeholders="placeholder"]');

              case 5:
                assert.notOk(this.element.querySelector('[data-test-placeholders="container"]'), 'modal closed');

              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/portal-designer/sidebar/edit/section/section-settings/background-color/component-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | portal-designer/sidebar/edit/section/section-settings/background-color', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('should render the color text', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                      <PortalDesigner::Sidebar::Edit::Section::SectionSettings::BackgroundColor
                        @value="rgb(180, 75, 75)"
                      />
                    
                */
                {
                  id: "YfVCbYka",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n      \"],[5,\"portal-designer/sidebar/edit/section/section-settings/background-color\",[],[[\"@value\"],[\"rgb(180, 75, 75)\"]]],[0,\"\\n    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.dom('[data-test-id="color-value"]').hasText('#b44b4b');

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/portal-designer/sidebar/edit/section/section-settings/background-image/component-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | portal-designer/sidebar/edit/section/section-settings/background-image', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('should set thumbnail based on image', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                      <PortalDesigner::Sidebar::Edit::Section::SectionSettings::BackgroundImage
                        @background='none, url("/assets/portal_v2/hero-left.svg") left bottom no-repeat, url("/assets/portal_v2/hero-right.svg") right bottom no-repeat, linear-gradient(356.12deg, rgb(87, 86, 209) 0%, rgb(57, 36, 167) 100%)'
                      />
                    
                */
                {
                  id: "zffnPxDn",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n      \"],[5,\"portal-designer/sidebar/edit/section/section-settings/background-image\",[],[[\"@background\"],[\"none, url(\\\"/assets/portal_v2/hero-left.svg\\\") left bottom no-repeat, url(\\\"/assets/portal_v2/hero-right.svg\\\") right bottom no-repeat, linear-gradient(356.12deg, rgb(87, 86, 209) 0%, rgb(57, 36, 167) 100%)\"]]],[0,\"\\n    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.dom('[data-test-id="image-swatch"]').hasAttribute('style', 'background-image: url("/a/assets/images/portal-designer/banner-thumbnails/default.png")');

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should hide controls if the image is default', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                      <PortalDesigner::Sidebar::Edit::Section::SectionSettings::BackgroundImage
                        @background='none, url("/assets/portal_v2/hero-left.svg") left bottom no-repeat, url("/assets/portal_v2/hero-right.svg") right bottom no-repeat, linear-gradient(356.12deg, rgb(87, 86, 209) 0%, rgb(57, 36, 167) 100%)'
                      />
                    
                */
                {
                  id: "zffnPxDn",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n      \"],[5,\"portal-designer/sidebar/edit/section/section-settings/background-image\",[],[[\"@background\"],[\"none, url(\\\"/assets/portal_v2/hero-left.svg\\\") left bottom no-repeat, url(\\\"/assets/portal_v2/hero-right.svg\\\") right bottom no-repeat, linear-gradient(356.12deg, rgb(87, 86, 209) 0%, rgb(57, 36, 167) 100%)\"]]],[0,\"\\n    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.dom('[data-test-id="image-size-position-controls"]').doesNotExist();

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should hide controls if the image is initial', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                      <PortalDesigner::Sidebar::Edit::Section::SectionSettings::BackgroundImage
                        @background='initial'
                      />
                    
                */
                {
                  id: "3pcaBEnM",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n      \"],[5,\"portal-designer/sidebar/edit/section/section-settings/background-image\",[],[[\"@background\"],[\"initial\"]]],[0,\"\\n    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.dom('[data-test-id="image-size-position-controls"]').doesNotExist();

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/portal-designer/sidebar/edit/section/section-settings/background-image/controls/component-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | portal-designer/sidebar/edit/section/section-settings/background-image/controls', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('should check fit to section radio if the size is fit', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<PortalDesigner::Sidebar::Edit::Section::SectionSettings::BackgroundImage::Controls 
                				@backgroundSize="cover"
                				@backgroundPosition="initial"
                			/>
                		
                */
                {
                  id: "TUTy2cR+",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\"],[5,\"portal-designer/sidebar/edit/section/section-settings/background-image/controls\",[],[[\"@backgroundSize\",\"@backgroundPosition\"],[\"cover\",\"initial\"]]],[0,\"\\n\\t\\t\"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.dom('[data-test-id="radio-fit"]').isChecked();
                assert.dom('[data-test-id="custom-size-controls"]').doesNotExist();

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should update controls based on size and position', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<PortalDesigner::Sidebar::Edit::Section::SectionSettings::BackgroundImage::Controls 
                				@backgroundSize="90%"
                				@backgroundPosition="20% 30%"
                			/>
                		
                */
                {
                  id: "fE2IZFJ6",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\"],[5,\"portal-designer/sidebar/edit/section/section-settings/background-image/controls\",[],[[\"@backgroundSize\",\"@backgroundPosition\"],[\"90%\",\"20% 30%\"]]],[0,\"\\n\\t\\t\"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.dom('#radio-custom').isChecked();
                assert.dom('[data-test-id="custom-size-controls"]').exists();
                assert.dom('[data-test-id="size-input"]').hasValue('90');
                assert.dom('[data-test-id="position-x-input"]').hasValue('20');
                assert.dom('[data-test-id="position-y-input"]').hasValue('30');

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/portal-designer/sidebar/edit/section/section-settings/background-image/list/component-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | portal-designer/sidebar/edit/section/section-settings/background-image/list', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('should select rendered image', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                      <PortalDesigner::Sidebar::Edit::Section::SectionSettings::BackgroundImage::List 
                        @isVisible={{true}}
                        @backgroundImage='url("/a/assets/images/portal-designer/portal-banners/celebration.png")'
                      />
                    
                */
                {
                  id: "fVRwPoZ9",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n      \"],[5,\"portal-designer/sidebar/edit/section/section-settings/background-image/list\",[],[[\"@isVisible\",\"@backgroundImage\"],[true,\"url(\\\"/a/assets/images/portal-designer/portal-banners/celebration.png\\\")\"]]],[0,\"\\n    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.dom('[data-test-id="image-radio"][value="celebration"]').isChecked();

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should select none if the image is initial', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                      <PortalDesigner::Sidebar::Edit::Section::SectionSettings::BackgroundImage::List 
                        @isVisible={{true}}
                        @backgroundImage='initial'
                      />
                    
                */
                {
                  id: "U6pqI611",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n      \"],[5,\"portal-designer/sidebar/edit/section/section-settings/background-image/list\",[],[[\"@isVisible\",\"@backgroundImage\"],[true,\"initial\"]]],[0,\"\\n    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.dom('[data-test-id="no-image-radio"]').isChecked();

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/portal-designer/sidebar/edit/text/component-test", ["qunit", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "@ember/test-helpers"], function (_qunit, _emberQunit, _testSupport, _intl, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var PRIMARY_TRANSLATION = "<p>Hi, how can.&nbsp; we help you?</p>";
  var LANG_PATH = "portal.home_title";
  var MOCK_TRANSLATIONS = {
    "en": {
      "portal": {
        "home_title": "How can we help you ?"
      }
    }
  };
  var BUILDER_SERVICE_STUB = Ember.Service.extend({
    translations: MOCK_TRANSLATIONS
  });
  (0, _qunit.module)('Integration | Component | portal-designer/sidebar/edit/text', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      this.server.loadFixtures('languages');
      this.owner.register('service:portal-builder', BUILDER_SERVICE_STUB);
      var translationService = this.owner.lookup('service:portal-designer-translations');
      translationService.initTextTranslations(LANG_PATH);
      var store = this.owner.lookup('service:store');
      Ember.set(this, 'portalDesignerTranslations', translationService);
      Ember.set(this, 'store', store);
      Ember.set(this, 'primaryTranslation', PRIMARY_TRANSLATION);
    });
    (0, _qunit.test)('it renders text-settings', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                    <PortalDesigner::Sidebar::Edit::Text
                      @primaryTranslation = {{this.primaryTranslation}}
                    />
                */
                {
                  id: "MqlTlBOj",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n    \"],[5,\"portal-designer/sidebar/edit/text\",[],[[\"@primaryTranslation\"],[[23,0,[\"primaryTranslation\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.ok(true);

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it fetches language', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                    <PortalDesigner::Sidebar::Edit::Text
                      @primaryTranslation = {{this.primaryTranslation}}
                    />
                */
                {
                  id: "MqlTlBOj",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n    \"],[5,\"portal-designer/sidebar/edit/text\",[],[[\"@primaryTranslation\"],[[23,0,[\"primaryTranslation\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.deepEqual(this.portalDesignerTranslations.primaryLanguage, {
                  "id": "en",
                  "primary": true,
                  "value": "English"
                }, 'Primary language is updated');
                assert.equal(this.portalDesignerTranslations.supportedLanguages.length, 3, 'secondary languages fetched');

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/portal-designer/sidebar/edit/text/settings/component-test", ["qunit", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "@ember/test-helpers"], function (_qunit, _emberQunit, _testSupport, _intl, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var PRIMARY_TRANSLATION = "Hi, how can we help you ?";
  var MOCK_TRANSLATIONS = {
    "en": {
      "portal": {
        "home_title": "How can we help you ?"
      }
    },
    "da": {
      "portal": {
        "home_title": "Hi in Danish"
      }
    }
  };
  (0, _qunit.module)('Integration | Component | portal-designer/sidebar/edit/text/settings', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      this.server.loadFixtures('languages');
      var translationService = this.owner.lookup('service:portal-designer-translations');
      Ember.set(translationService, 'primaryLanguage', {
        id: 'en',
        value: 'English'
      });
      Ember.set(translationService, 'translationsLangPath', "portal.home_title");
      Ember.set(translationService, 'customTranslations', MOCK_TRANSLATIONS);
      Ember.set(this, 'primaryTranslation', PRIMARY_TRANSLATION);
    });
    (0, _qunit.test)('it renders', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                    <PortalDesigner::Sidebar::Edit::Text::Settings
                     @primaryTranslation = {{this.primaryTranslation}}
                    />
                */
                {
                  id: "HGfpVPME",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n    \"],[5,\"portal-designer/sidebar/edit/text/settings\",[],[[\"@primaryTranslation\"],[[23,0,[\"primaryTranslation\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.equal(this.element.querySelector('[data-test-id="translation-text-primary"]').innerText.trim(), 'Hi, how can we help you ?', 'primary translation renders correctly');
                assert.equal(this.element.querySelector('[data-test-id="secondary-translation-info"').innerText.trim(), "Secondary languages (1)", 'secondary translations count renders correctly');
                _context.next = 6;
                return (0, _testHelpers.click)('[data-test-id="add-translation-button"]');

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/portal-designer/topbar-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl"], function (_qunit, _emberQunit, _testHelpers, _intl) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | portal-designer/topbar', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _qunit.test)('it renders topbar', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.set('model', {
                  "portal_version": {
                    "content": {},
                    "description": "1. Added New Banner \\n 2. Added new tabs",
                    "id": 5,
                    "portal_id": 1,
                    "published_by": {
                      "email": "sample@freshservice.com",
                      "id": 1,
                      "name": "Support"
                    },
                    "title": "Banner & Tabs",
                    "updated_at": "2021-10-19T02:38:11+05:30"
                  }
                });
                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <PortalDesigner::Topbar @model={{this.model}}/>
                */
                {
                  id: "jaA4IFZJ",
                  block: "{\"symbols\":[],\"statements\":[[5,\"portal-designer/topbar\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.dom('.page-switcher').exists();
                assert.dom('.editor-status').exists();
                assert.dom('.version-options').exists();

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/portal-designer/version-options-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl"], function (_qunit, _emberQunit, _testHelpers, _intl) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | portal-designer/version-options', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.intl = this.owner.lookup("service:intl");

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    hooks.after(function () {
      this.owner.destroy("service:intl");
    });
    (0, _qunit.test)('it renders manage versions dropdown button', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.set('model', {
                  "content": {},
                  "description": "1. Added New Banner \\n 2. Added new tabs",
                  "id": 5,
                  "portal_id": 1,
                  "published_by": {
                    "email": "sample@freshservice.com",
                    "id": 1,
                    "name": "Support"
                  },
                  "title": "Banner & Tabs",
                  "updated_at": "2021-10-19T02:38:11+05:30",
                  "draft": false
                });
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <PortalDesigner::VersionOptions @model={{this.model}}/>
                */
                {
                  id: "UxOKq9EI",
                  block: "{\"symbols\":[],\"statements\":[[5,\"portal-designer/version-options\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.dom('.version-options').exists();
                assert.dom('div.btn').exists();

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('when draft is true, Publish button is enabled', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this.set('model', {
                  "content": {},
                  "description": "1. Added New Banner \\n 2. Added new tabs",
                  "id": 5,
                  "portal_id": 1,
                  "published_by": {
                    "email": "sample@freshservice.com",
                    "id": 1,
                    "name": "Support"
                  },
                  "title": "Banner & Tabs",
                  "updated_at": "2021-10-19T02:38:11+05:30",
                  "draft": true
                });
                _context3.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <PortalDesigner::VersionOptions @model={{this.model}}/>
                */
                {
                  id: "UxOKq9EI",
                  block: "{\"symbols\":[],\"statements\":[[5,\"portal-designer/version-options\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.equal(this.element.querySelector('.btn.btn-primary').disabled, false);

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('when draft is false, Publish button is enabled', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                this.set('model', {
                  "content": {},
                  "description": "1. Added New Banner \\n 2. Added new tabs",
                  "id": 5,
                  "portal_id": 1,
                  "published_by": {
                    "email": "sample@freshservice.com",
                    "id": 1,
                    "name": "Support"
                  },
                  "title": "Banner & Tabs",
                  "updated_at": "2021-10-19T02:38:11+05:30",
                  "draft": false
                });
                _context4.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <PortalDesigner::VersionOptions @model={{this.model}}/>
                */
                {
                  id: "UxOKq9EI",
                  block: "{\"symbols\":[],\"statements\":[[5,\"portal-designer/version-options\",[],[[\"@model\"],[[23,0,[\"model\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.equal(this.element.querySelector('.btn.btn-primary').disabled, true);

              case 4:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/relationship-map/component-test", ["qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/sinon-context", "ember-qunit", "sinon", "freshservice/tests/lib/spy-flash-message", "freshservice/tests/pages/components/relationship-map", "freshservice/constants/relationship-map"], function (_qunit, _testHelpers, _testSupport, _intl, _sinonContext, _emberQunit, _sinon, _spyFlashMessage, _relationshipMap, _relationshipMap2) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var ROUTER_STUB = {
    parent: {
      params: {
        asset_id: 1
      }
    }
  };
  var NODE_COUNT = 5;
  var CHILD_PER_NODE_COUNT = 3;
  var ICON_PREPEND = '#map-icon-';
  var INITIAL_SCALE = 1;
  var INDICENT_COUNT_BASE = 50;
  var INITIAL_TRANSLATE = '0,0'; // Wait method implemented to account for the animation duration delay

  function wait() {
    return _wait.apply(this, arguments);
  }

  function _wait() {
    _wait = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {
      var timeout,
          _args17 = arguments;
      return regeneratorRuntime.wrap(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              timeout = _args17.length > 0 && _args17[0] !== undefined ? _args17[0] : 500;
              return _context17.abrupt("return", new Promise(function (resolve) {
                setTimeout(resolve, timeout);
              }));

            case 2:
            case "end":
              return _context17.stop();
          }
        }
      }, _callee17);
    }));
    return _wait.apply(this, arguments);
  }

  (0, _qunit.module)('Integration | Component | relationship-map', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var router;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.intl = this.owner.lookup('service:intl');
              router = this.owner.lookup('router:main');
              router.currentRoute = ROUTER_STUB;
              router.setupRouter();

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('It renders svg with all nodes without any warning messages for a standard map', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var infoFlashSpy;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                infoFlashSpy = (0, _spyFlashMessage.default)('info');
                this.server.create('relationship-map', {
                  nodeCount: NODE_COUNT,
                  childCount: CHILD_PER_NODE_COUNT
                });
                _context2.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <RelationshipMap/>
                */
                {
                  id: "+IZOOEpk",
                  block: "{\"symbols\":[],\"statements\":[[5,\"relationship-map\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context2.next = 6;
                return (0, _testHelpers.waitFor)(_relationshipMap.default.containerSvg);

              case 6:
                assert.ok(_relationshipMap.default.isSvgVisible, 'SVG drawn');
                _context2.t0 = assert;
                _context2.next = 10;
                return infoFlashSpy.calledOnce;

              case 10:
                _context2.t1 = _context2.sent;

                _context2.t0.notOk.call(_context2.t0, _context2.t1, 'No warning message is displayed');

              case 12:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('It throws proper warning when number of connected nodes for an asset is more than the threshold', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var infoFlashSpy;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                infoFlashSpy = (0, _spyFlashMessage.default)('info');
                this.server.create('relationship-map', {
                  nodeCount: NODE_COUNT,
                  childCount: CHILD_PER_NODE_COUNT,
                  meta: {
                    max_relationships_per_level_reached: true
                  }
                });
                _context3.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <RelationshipMap/>
                */
                {
                  id: "+IZOOEpk",
                  block: "{\"symbols\":[],\"statements\":[[5,\"relationship-map\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context3.t0 = assert;
                _context3.next = 7;
                return infoFlashSpy.calledOnce;

              case 7:
                _context3.t1 = _context3.sent;

                _context3.t0.ok.call(_context3.t0, _context3.t1, 'Warning flash displayed');

              case 9:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('It should not duplicate the nodes in case of circular dependency', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                this.server.create('relationship-map', {
                  nodeCount: NODE_COUNT,
                  childCount: CHILD_PER_NODE_COUNT,
                  circular: true
                });
                _context4.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <RelationshipMap/>
                */
                {
                  id: "+IZOOEpk",
                  block: "{\"symbols\":[],\"statements\":[[5,\"relationship-map\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context4.next = 5;
                return (0, _testHelpers.waitFor)(_relationshipMap.default.containerSvg);

              case 5:
                assert.ok(_relationshipMap.default.isSvgVisible, 'SVG drawn');
                assert.equal(_relationshipMap.default.nodes.length, NODE_COUNT, 'Nodes not duplicated');

              case 7:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('It should show correct level of Map when map level is changed', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var mapLevel2Label, mockRequest, mapLevelSwitch;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                // Mocking the api to throw error
                mapLevel2Label = "Level ".concat(_relationshipMap2.MAP_LEVEL_CHOICES[2].level);
                mockRequest = _sinon.default.fake(function () {
                  return {
                    relationships: this.server.db.relationshipMaps[0],
                    meta: this.server.db.relationshipMaps[0].meta
                  };
                }.bind(this));
                this.server.get('/api/_/assets/:id/relationships', mockRequest, 200);
                this.server.create('relationship-map', {
                  nodeCount: NODE_COUNT,
                  childCount: CHILD_PER_NODE_COUNT
                });
                _context5.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <RelationshipMap/>
                */
                {
                  id: "+IZOOEpk",
                  block: "{\"symbols\":[],\"statements\":[[5,\"relationship-map\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                _context5.next = 8;
                return _relationshipMap.default.clickMapSettingsButton();

              case 8:
                _context5.next = 10;
                return _relationshipMap.default.formUtils.selectBasicDropdown('map-level-switch', mapLevel2Label);

              case 10:
                _context5.next = 12;
                return _relationshipMap.default.clickMapSettingsButton();

              case 12:
                mapLevelSwitch = _relationshipMap.default.formUtils.getBasicDropdownSelectedText('map-level-switch');
                assert.equal(mapLevelSwitch, mapLevel2Label, 'Map Level is as expected');
                assert.ok(mockRequest.lastArg.queryParams.level == _relationshipMap2.MAP_LEVEL_CHOICES[2].level, "Relationship Get Request is called with correct level param"); //Checking if Map loading indicator is not visible meaning map is loaded

                assert.notOk(_relationshipMap.default.isMapLoadingIndicatorVisible, 'Map Loading is complete');

              case 16:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Name and type of the nodes should be properly rendered', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var nodes, rootNodeName, assetNodeName, assetNodeType, nonAssetNodeType;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                this.server.create('relationship-map', {
                  nodeCount: NODE_COUNT,
                  childCount: CHILD_PER_NODE_COUNT
                });
                nodes = this.server.db.relationshipMaps[0].nodes; // nodes generated using faker will be in this order as we have seeded the faker

                rootNodeName = nodes[0].name;
                assetNodeName = nodes[1].name;
                assetNodeType = nodes[1].asset_type_name;
                nonAssetNodeType = nodes[2].type;
                _context6.next = 8;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <RelationshipMap/>
                */
                {
                  id: "+IZOOEpk",
                  block: "{\"symbols\":[],\"statements\":[[5,\"relationship-map\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 8:
                _context6.next = 10;
                return (0, _testHelpers.waitFor)(_relationshipMap.default.containerSvg);

              case 10:
                assert.equal(_relationshipMap.default.nodes[0].name, rootNodeName, 'Root node name displayed');
                assert.equal(_relationshipMap.default.nodes[1].name, assetNodeName, 'asset node name displayed');
                assert.equal(_relationshipMap.default.nodes[1].type, assetNodeType, 'asset type rendered for asset nodes');
                assert.equal(_relationshipMap.default.nodes[2].type, nonAssetNodeType, 'node type rendered for non asset nodes');

              case 14:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Proper node icons should be rendered depending on the node type', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var nodes, rootNodeIconRef, servicesNodeIconRef, departmentNodeIconRef, agentNodeIconRef;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                this.server.create('relationship-map', {
                  nodeCount: NODE_COUNT,
                  childCount: CHILD_PER_NODE_COUNT
                });
                nodes = this.server.db.relationshipMaps[0].nodes;
                rootNodeIconRef = ICON_PREPEND + _relationshipMap2.ASSET_TYPE_ID_TO_ICON_MAP[nodes[0].asset_type_ref_id];
                servicesNodeIconRef = ICON_PREPEND + _relationshipMap2.ASSET_TYPE_ID_TO_ICON_MAP[nodes[1].asset_type_ref_id];
                departmentNodeIconRef = "".concat(ICON_PREPEND, "department");
                agentNodeIconRef = "".concat(ICON_PREPEND, "agent");
                _context7.next = 8;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <RelationshipMap/>
                */
                {
                  id: "+IZOOEpk",
                  block: "{\"symbols\":[],\"statements\":[[5,\"relationship-map\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 8:
                _context7.next = 10;
                return (0, _testHelpers.waitFor)(_relationshipMap.default.containerSvg);

              case 10:
                assert.equal(_relationshipMap.default.nodes[0].iconName, rootNodeIconRef, 'root node icon rendered properly');
                assert.equal(_relationshipMap.default.nodes[1].iconName, servicesNodeIconRef, 'services icon rendered properly');
                assert.equal(_relationshipMap.default.nodes[2].iconName, departmentNodeIconRef, 'department icon rendered properly');
                assert.equal(_relationshipMap.default.nodes[3].iconName, agentNodeIconRef, 'agent icon rendered properly');

              case 14:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x6) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('It should render circular bounding-box for service nodes and square for the rest', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                this.server.create('relationship-map', {
                  nodeCount: NODE_COUNT,
                  childCount: CHILD_PER_NODE_COUNT
                });
                _context8.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <RelationshipMap/>
                */
                {
                  id: "+IZOOEpk",
                  block: "{\"symbols\":[],\"statements\":[[5,\"relationship-map\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context8.next = 5;
                return (0, _testHelpers.waitFor)(_relationshipMap.default.containerSvg);

              case 5:
                assert.equal(_relationshipMap.default.nodes[1].boxRadius, _relationshipMap2.NODE_PROPERTIES.CIRCULAR_BOX_BORDER_RADIUS, 'Service nodes have circular bounding area');
                assert.equal(_relationshipMap.default.nodes[0].boxRadius, _relationshipMap2.NODE_PROPERTIES.CIRCULAR_BOX_BORDER_RADIUS, 'Root node circular bounding area');
                assert.equal(_relationshipMap.default.nodes[2].boxRadius, _relationshipMap2.NODE_PROPERTIES.SQUARE_BOX_BORDER_RADIUS, 'Non service nodes have square bounding area');

              case 8:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x7) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Zoom functionalities should work properly', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                this.server.create('relationship-map', {
                  nodeCount: NODE_COUNT,
                  childCount: CHILD_PER_NODE_COUNT
                });
                _context9.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <RelationshipMap/>
                */
                {
                  id: "+IZOOEpk",
                  block: "{\"symbols\":[],\"statements\":[[5,\"relationship-map\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context9.next = 5;
                return (0, _testHelpers.waitFor)(_relationshipMap.default.containerSvg);

              case 5:
                _context9.next = 7;
                return _relationshipMap.default.zoomIn();

              case 7:
                _context9.next = 9;
                return wait();

              case 9:
                assert.equal(_relationshipMap.default.mapScale, INITIAL_SCALE * _relationshipMap2.MAP_PROPERTIES.ZOOM_IN_MULTIPLIER, 'Zoom in action performed properly');
                _context9.next = 12;
                return _relationshipMap.default.zoomOut();

              case 12:
                _context9.next = 14;
                return wait();

              case 14:
                assert.equal(_relationshipMap.default.mapScale, INITIAL_SCALE, 'Zoom out action performed properly');
                _context9.next = 17;
                return _relationshipMap.default.zoomIn();

              case 17:
                _context9.next = 19;
                return _relationshipMap.default.reset();

              case 19:
                _context9.next = 21;
                return wait(1000);

              case 21:
                assert.equal(_relationshipMap.default.mapScale, INITIAL_SCALE, 'Reset scaling performed properly');
                assert.equal(_relationshipMap.default.mapTranslate, INITIAL_TRANSLATE, 'Reset translation performed properly');

              case 23:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x8) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Drag action should move the node to the final dropped position', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var initialNodePosition, finalNodePosition;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                this.server.create('relationship-map', {
                  nodeCount: NODE_COUNT,
                  childCount: CHILD_PER_NODE_COUNT
                });
                _context10.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <RelationshipMap/>
                */
                {
                  id: "+IZOOEpk",
                  block: "{\"symbols\":[],\"statements\":[[5,\"relationship-map\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context10.next = 5;
                return (0, _testHelpers.waitFor)(_relationshipMap.default.containerSvg);

              case 5:
                initialNodePosition = _relationshipMap.default.rootNodeTranslate; // drag interactions

                _context10.next = 8;
                return _relationshipMap.default.nodes[0].startDrag();

              case 8:
                _context10.next = 10;
                return _relationshipMap.default.nodes[0].dragToPosition();

              case 10:
                _context10.next = 12;
                return _relationshipMap.default.nodes[0].stopDrag();

              case 12:
                finalNodePosition = _relationshipMap.default.rootNodeTranslate;
                /*
                	we are just checking that the node has moved and not checking the exact drop location,
                	as it is inconsistant due to the use of viewbox in the map
                */

                assert.notDeepEqual(finalNodePosition, initialNodePosition, 'Root node moved from initial position');

              case 14:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x9) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Clicking on View Map of a node should load the subsequent Relationship Map', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        var mockRequest;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                mockRequest = _sinon.default.fake(function () {
                  return {
                    relationships: this.server.db.relationshipMaps[0],
                    meta: this.server.db.relationshipMaps[0].meta
                  };
                }.bind(this));
                this.server.get('/api/_/assets/:id/relationships', mockRequest, 200);
                this.server.create('relationship-map', {
                  nodeCount: NODE_COUNT,
                  childCount: CHILD_PER_NODE_COUNT
                });
                _context11.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <RelationshipMap/>
                */
                {
                  id: "+IZOOEpk",
                  block: "{\"symbols\":[],\"statements\":[[5,\"relationship-map\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                _context11.next = 7;
                return (0, _testHelpers.waitFor)(_relationshipMap.default.containerSvg);

              case 7:
                _context11.next = 9;
                return _relationshipMap.default.nodes[1].showHoverTooltip();

              case 9:
                assert.ok(_relationshipMap.default.isHoverTooltipVisible, 'Hover tooltip is visible');
                _context11.next = 12;
                return _relationshipMap.default.routeMapToCurrentNode();

              case 12:
                //checking if the Relationship data is fetched for current node based on ID
                assert.ok(mockRequest.lastArg.params.id === '1', "Relationship Get Request is called with correct node Id");

              case 13:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x10) {
        return _ref12.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Hovering over link should show tooltip', /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                this.server.create('relationship-map', {
                  nodeCount: NODE_COUNT,
                  childCount: CHILD_PER_NODE_COUNT
                });
                _context12.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <RelationshipMap/>
                */
                {
                  id: "+IZOOEpk",
                  block: "{\"symbols\":[],\"statements\":[[5,\"relationship-map\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context12.next = 5;
                return (0, _testHelpers.waitFor)(_relationshipMap.default.containerSvg);

              case 5:
                _context12.next = 7;
                return _relationshipMap.default.links[0].mouseHover();

              case 7:
                assert.ok(_relationshipMap.default.isMapTooltipVisible, "Rel map tooltip is visible on hovering of link");
                _context12.next = 10;
                return _relationshipMap.default.links[0].mouseOut();

              case 10:
                assert.notOk(_relationshipMap.default.isMapTooltipVisible, "Rel map tooltip is hidden on mouseOut of link");

              case 11:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x11) {
        return _ref13.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Hovering on node must show tooltip and clicking on details should load details modal', /*#__PURE__*/function () {
      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                this.server.create('relationship-map', {
                  nodeCount: NODE_COUNT,
                  childCount: CHILD_PER_NODE_COUNT
                });
                _context13.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <RelationshipMap/>
                */
                {
                  id: "+IZOOEpk",
                  block: "{\"symbols\":[],\"statements\":[[5,\"relationship-map\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context13.next = 5;
                return (0, _testHelpers.waitFor)(_relationshipMap.default.containerSvg);

              case 5:
                _context13.next = 7;
                return _relationshipMap.default.nodes[0].showHoverTooltip();

              case 7:
                assert.ok(_relationshipMap.default.isHoverTooltipVisible, 'Hover tooltip is visible');
                _context13.next = 10;
                return _relationshipMap.default.viewNodeDetails();

              case 10:
                _context13.t0 = assert;
                _context13.next = 13;
                return _relationshipMap.default.isRelDetailsModalVisible;

              case 13:
                _context13.t1 = _context13.sent;

                _context13.t0.ok.call(_context13.t0, _context13.t1, "Relationship Map details modal is visible");

              case 15:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      return function (_x12) {
        return _ref14.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Hovering on node must show tooltip and clicking on add relationship should load add modal', /*#__PURE__*/function () {
      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                this.server.create('relationship-map', {
                  nodeCount: NODE_COUNT,
                  childCount: CHILD_PER_NODE_COUNT
                });
                _context14.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <RelationshipMap/>
                */
                {
                  id: "+IZOOEpk",
                  block: "{\"symbols\":[],\"statements\":[[5,\"relationship-map\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context14.next = 5;
                return (0, _testHelpers.waitFor)(_relationshipMap.default.containerSvg);

              case 5:
                _context14.next = 7;
                return _relationshipMap.default.nodes[0].showHoverTooltip();

              case 7:
                assert.ok(_relationshipMap.default.isHoverTooltipVisible, 'Hover tooltip is visible');
                _context14.next = 10;
                return _relationshipMap.default.viewAddModal();

              case 10:
                _context14.t0 = assert;
                _context14.next = 13;
                return _relationshipMap.default.viewAddModalVisible;

              case 13:
                _context14.t1 = _context14.sent;

                _context14.t0.ok.call(_context14.t0, _context14.t1, "Relationship map add modal is visible");

              case 15:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      return function (_x13) {
        return _ref15.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Hovering on node must highlight path to root node', /*#__PURE__*/function () {
      var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {
        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                this.server.create('relationship-map', {
                  nodeCount: NODE_COUNT,
                  childCount: CHILD_PER_NODE_COUNT
                });
                _context15.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <RelationshipMap/>
                */
                {
                  id: "+IZOOEpk",
                  block: "{\"symbols\":[],\"statements\":[[5,\"relationship-map\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context15.next = 5;
                return (0, _testHelpers.waitFor)(_relationshipMap.default.containerSvg);

              case 5:
                _context15.next = 7;
                return _relationshipMap.default.nodes[1].showHoverTooltip();

              case 7:
                assert.ok(_relationshipMap.default.isHoverTooltipVisible, 'Hover tooltip is visible');
                assert.ok(_relationshipMap.default.links[0].hasActiveClass, 'Links are highlighted to root node');
                assert.ok(_relationshipMap.default.nodes[0].hasActiveClass, 'Root Node is highlighted');

              case 10:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      return function (_x14) {
        return _ref16.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Incident count should be displayed properly in the nodes', /*#__PURE__*/function () {
      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(assert) {
        var intl;
        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                intl = this.owner.lookup("service:intl");
                this.server.create('relationship-map', {
                  nodeCount: NODE_COUNT,
                  childCount: CHILD_PER_NODE_COUNT
                });
                _context16.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <RelationshipMap/>
                */
                {
                  id: "+IZOOEpk",
                  block: "{\"symbols\":[],\"statements\":[[5,\"relationship-map\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context16.next = 6;
                return (0, _testHelpers.waitFor)(_relationshipMap.default.containerSvg);

              case 6:
                _context16.next = 8;
                return _relationshipMap.default.nodes[1].showHoverTooltip();

              case 8:
                assert.notOk(_relationshipMap.default.nodes[0].isIncidentCountDisplayed, 'Incident count pill not displayed if count is 0');
                assert.equal(_relationshipMap.default.nodes[1].incidentCount, INDICENT_COUNT_BASE, 'Proper incident count displayed for nodes with associated incidents');
                assert.equal(_relationshipMap.default.openIncidentCount, intl.t('fs.assets.relationship_map.open_incidents', {
                  visual_incident_count: INDICENT_COUNT_BASE,
                  incident_count: INDICENT_COUNT_BASE
                }), 'Proper incident count displayed for nodes on hover');
                assert.equal(_relationshipMap.default.nodes[2].incidentCount, "".concat(_relationshipMap2.NODE_PROPERTIES.MAX_INCIDENT_COUNT, "+"), "Incident count displayed as ".concat(_relationshipMap2.NODE_PROPERTIES.MAX_INCIDENT_COUNT, "+ for higher counts"));

              case 12:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      return function (_x15) {
        return _ref17.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/relationship-map/relationship-side-panes/component-test", ["qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "ember-qunit", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/set-locale-timezone-moment", "freshservice/tests/lib/spy-flash-message", "freshservice/tests/pages/components/relationship-map", "freshservice/utils/time-util", "sinon"], function (_qunit, _testHelpers, _testSupport, _intl, _emberQunit, _sinonContext, _setLocaleTimezoneMoment, _spyFlashMessage, _relationshipMap, _timeUtil, _sinon) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var JOB_ID = 'b5c94fd5-56a2-4ec2-8942-8a67cab380cc';
  var NODE_TYPE = 'Consumable';
  var DATE_FORMAT = 'ddd, D MMM YYYY h:mm A';
  var NODE = {
    id: 858,
    asset_type_id: 4,
    type: 'asset',
    name: 'Logitech Mouse',
    asset_type_name: 'Consumable',
    asset_type_ref_id: 125000000000000
  };
  var REQUESTER_NODE = {
    id: 1,
    name: "Jack",
    type: "requester"
  };
  var DEPARTMENT_NODE = {
    id: 1,
    name: "Development",
    type: "department"
  };
  (0, _qunit.module)('Integration | Component | relationship-map | relationship-side-panes', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _setLocaleTimezoneMoment.setLocaleAndTimeZoneForMoment)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.server.createList('relationship-type', 10);
              this.server.createList('asset-type', 30);
              this.server.createList('relationship-map-node', 10);

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('Add relationship side pane should trigger the save call and reload the map on submit', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var reloadRelationshipMapSpy, clearMapSpy, successFlashSpy, mockRequest, expectedRequestBody;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                reloadRelationshipMapSpy = _sinon.default.spy(), clearMapSpy = _sinon.default.spy(), successFlashSpy = (0, _spyFlashMessage.default)(), mockRequest = _sinon.default.spy(function () {
                  return {
                    job_id: JOB_ID
                  };
                }), expectedRequestBody = {
                  relationships: [{
                    relationship_type: {
                      id: '1',
                      stream: 'down'
                    },
                    node_type: 'asset',
                    node_id: 0
                  }]
                };
                this.server.post('/api/_/assets/:id/relationships', function (schema, request) {
                  return mockRequest(JSON.parse(request.requestBody));
                }, 201);
                this.setProperties({
                  hoveredNodeData: NODE,
                  hoveredNodeType: NODE_TYPE,
                  clearMap: clearMapSpy,
                  reloadRelationshipMap: reloadRelationshipMapSpy
                });
                _context2.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <RelationshipMap::RelationshipSidePanes
                			@toggleModal			= 	{{true}}
                			@isAddModal				= 	{{true}}
                			@reloadRelationshipMap	=	{{this.reloadRelationshipMap}}
                			@clearMap				=	{{this.clearMap}}
                			@currentNodeData		= 	{{this.hoveredNodeData}}
                			@hoveredNodeType		=	{{this.hoveredNodeType}}
                		/>
                */
                {
                  id: "yZ14i8Hv",
                  block: "{\"symbols\":[],\"statements\":[[5,\"relationship-map/relationship-side-panes\",[],[[\"@toggleModal\",\"@isAddModal\",\"@reloadRelationshipMap\",\"@clearMap\",\"@currentNodeData\",\"@hoveredNodeType\"],[true,true,[23,0,[\"reloadRelationshipMap\"]],[23,0,[\"clearMap\"]],[23,0,[\"hoveredNodeData\"]],[23,0,[\"hoveredNodeType\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                _context2.next = 7;
                return _relationshipMap.default.assetsList[0].selectRow();

              case 7:
                _context2.next = 9;
                return _relationshipMap.default.formUtils.selectSingle('relationship-type-wrapper', 1);

              case 9:
                _context2.next = 11;
                return _relationshipMap.default.addRelationship();

              case 11:
                _context2.t0 = assert;
                _context2.next = 14;
                return clearMapSpy.calledOnce;

              case 14:
                _context2.t1 = _context2.sent;

                _context2.t0.ok.call(_context2.t0, _context2.t1, 'Existing map cleared');

                _context2.t2 = assert;
                _context2.next = 19;
                return mockRequest.calledOnceWithMatch(expectedRequestBody);

              case 19:
                _context2.t3 = _context2.sent;

                _context2.t2.ok.call(_context2.t2, _context2.t3, 'API successfully triggered');

                _context2.t4 = assert;
                _context2.next = 24;
                return successFlashSpy.calledOnce;

              case 24:
                _context2.t5 = _context2.sent;

                _context2.t4.ok.call(_context2.t4, _context2.t5, 'Success message shown');

                _context2.t6 = assert;
                _context2.next = 29;
                return reloadRelationshipMapSpy.calledOnce;

              case 29:
                _context2.t7 = _context2.sent;

                _context2.t6.ok.call(_context2.t6, _context2.t7, 'Map reloaded with new data');

              case 31:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Add relationship side pane should throw error message and reload  on submit in case of api errors', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var errorFlashSpy, reloadRelationshipMapSpy;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                errorFlashSpy = (0, _spyFlashMessage.default)('danger'), reloadRelationshipMapSpy = _sinon.default.spy();
                this.server.get("/api/_/jobs/".concat(JOB_ID), function () {
                  return {
                    relationships: [{
                      success: false
                    }]
                  };
                }, 500);
                this.setProperties({
                  hoveredNodeData: NODE,
                  hoveredNodeType: NODE_TYPE,
                  reloadRelationshipMap: reloadRelationshipMapSpy,
                  clearMap: function clearMap() {}
                });
                _context3.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <RelationshipMap::RelationshipSidePanes
                			@toggleModal			= 	{{true}}
                			@isAddModal				= 	{{true}}
                			@reloadRelationshipMap	=	{{this.reloadRelationshipMap}}
                			@clearMap				=	{{this.clearMap}}
                			@currentNodeData		= 	{{this.hoveredNodeData}}
                			@hoveredNodeType		=	{{this.hoveredNodeType}}
                		/>
                */
                {
                  id: "yZ14i8Hv",
                  block: "{\"symbols\":[],\"statements\":[[5,\"relationship-map/relationship-side-panes\",[],[[\"@toggleModal\",\"@isAddModal\",\"@reloadRelationshipMap\",\"@clearMap\",\"@currentNodeData\",\"@hoveredNodeType\"],[true,true,[23,0,[\"reloadRelationshipMap\"]],[23,0,[\"clearMap\"]],[23,0,[\"hoveredNodeData\"]],[23,0,[\"hoveredNodeType\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                _context3.next = 7;
                return _relationshipMap.default.assetsList[0].selectRow();

              case 7:
                _context3.next = 9;
                return _relationshipMap.default.formUtils.selectSingle('relationship-type-wrapper', 1);

              case 9:
                _context3.next = 11;
                return _relationshipMap.default.addRelationship();

              case 11:
                _context3.t0 = assert;
                _context3.next = 14;
                return errorFlashSpy.calledOnce;

              case 14:
                _context3.t1 = _context3.sent;

                _context3.t0.ok.call(_context3.t0, _context3.t1, 'Error message thrown');

                _context3.t2 = assert;
                _context3.next = 19;
                return reloadRelationshipMapSpy.calledOnce;

              case 19:
                _context3.t3 = _context3.sent;

                _context3.t2.ok.call(_context3.t2, _context3.t3, 'Map reloaded with new data');

              case 21:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Changing relationship type should reload the node list with selected node type', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var relationshipMapNodes, mockRequest, expectedRequestBody;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                relationshipMapNodes = this.server.db.relationshipMapNodes, mockRequest = _sinon.default.fake.returns({
                  nodes: relationshipMapNodes,
                  meta: {
                    count: relationshipMapNodes.length
                  }
                }), expectedRequestBody = {
                  ci_type_id: '0',
                  page: '1',
                  per_page: '20',
                  option: 'assets'
                };
                this.setProperties({
                  hoveredNodeData: NODE,
                  hoveredNodeType: NODE_TYPE,
                  reloadRelationshipMap: function reloadRelationshipMap() {},
                  clearMap: function clearMap() {}
                });
                this.server.get('/api/_/nodes/:module/:node_id', function (schema, request) {
                  return mockRequest(request.queryParams, schema);
                }, 200);
                _context4.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <RelationshipMap::RelationshipSidePanes
                			@toggleModal			= 	{{true}}
                			@isAddModal				= 	{{true}}
                			@reloadRelationshipMap	=	{{this.reloadRelationshipMap}}
                			@clearMap				=	{{this.clearMap}}
                			@currentNodeData		= 	{{this.hoveredNodeData}}
                			@hoveredNodeType		=	{{this.hoveredNodeType}}
                		/>
                */
                {
                  id: "yZ14i8Hv",
                  block: "{\"symbols\":[],\"statements\":[[5,\"relationship-map/relationship-side-panes\",[],[[\"@toggleModal\",\"@isAddModal\",\"@reloadRelationshipMap\",\"@clearMap\",\"@currentNodeData\",\"@hoveredNodeType\"],[true,true,[23,0,[\"reloadRelationshipMap\"]],[23,0,[\"clearMap\"]],[23,0,[\"hoveredNodeData\"]],[23,0,[\"hoveredNodeType\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                _context4.next = 7;
                return _relationshipMap.default.formUtils.selectSingleByClassName('.select-entityType', 0);

              case 7:
                _context4.next = 9;
                return _relationshipMap.default.formUtils.selectSingleByClassName('.select-sub-entityType', 1);

              case 9:
                _context4.t0 = assert;
                _context4.next = 12;
                return mockRequest.calledWithMatch(expectedRequestBody);

              case 12:
                _context4.t1 = _context4.sent;

                _context4.t0.ok.call(_context4.t0, _context4.t1, 'API triggered with proper node type');

              case 14:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Pagination in the node list table should work as expected', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var relationshipMapNodes, mockRequest;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                relationshipMapNodes = this.server.db.relationshipMapNodes, mockRequest = _sinon.default.fake.returns({
                  nodes: relationshipMapNodes,
                  meta: {
                    count: 30
                  }
                });
                this.setProperties({
                  hoveredNodeData: NODE,
                  hoveredNodeType: NODE_TYPE,
                  reloadRelationshipMap: function reloadRelationshipMap() {},
                  clearMap: function clearMap() {}
                });
                this.server.get('/api/_/nodes/:module/:node_id', function (schema, request) {
                  return mockRequest(request.queryParams, schema);
                }, 200);
                _context5.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <RelationshipMap::RelationshipSidePanes
                			@toggleModal			= 	{{true}}
                			@isAddModal				= 	{{true}}
                			@reloadRelationshipMap	=	{{this.reloadRelationshipMap}}
                			@clearMap				=	{{this.clearMap}}
                			@currentNodeData		= 	{{this.hoveredNodeData}}
                			@hoveredNodeType		=	{{this.hoveredNodeType}}
                		/>
                */
                {
                  id: "yZ14i8Hv",
                  block: "{\"symbols\":[],\"statements\":[[5,\"relationship-map/relationship-side-panes\",[],[[\"@toggleModal\",\"@isAddModal\",\"@reloadRelationshipMap\",\"@clearMap\",\"@currentNodeData\",\"@hoveredNodeType\"],[true,true,[23,0,[\"reloadRelationshipMap\"]],[23,0,[\"clearMap\"]],[23,0,[\"hoveredNodeData\"]],[23,0,[\"hoveredNodeType\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                _context5.next = 7;
                return _relationshipMap.default.navigateToNextPage();

              case 7:
                _context5.next = 9;
                return _relationshipMap.default.navigateToPrevPage();

              case 9:
                assert.equal(mockRequest.firstCall.args[0].page, '1', 'Side pane loaded in first page');
                assert.equal(mockRequest.secondCall.args[0].page, '2', 'Navigated to second page');
                assert.equal(mockRequest.thirdCall.args[0].page, '1', 'Returned back to first page');

              case 12:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Relationship type search should work as expected', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var searchTerm;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                searchTerm = this.server.db.relationshipTypes[0].downstream_relation;
                this.setProperties({
                  hoveredNodeData: NODE,
                  hoveredNodeType: NODE_TYPE,
                  reloadRelationshipMap: function reloadRelationshipMap() {},
                  clearMap: function clearMap() {}
                });
                _context6.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <RelationshipMap::RelationshipSidePanes
                			@toggleModal			= 	{{true}}
                			@isAddModal				= 	{{true}}
                			@reloadRelationshipMap	=	{{this.reloadRelationshipMap}}
                			@clearMap				=	{{this.clearMap}}
                			@currentNodeData		= 	{{this.hoveredNodeData}}
                			@hoveredNodeType		=	{{this.hoveredNodeType}}
                		/>
                */
                {
                  id: "yZ14i8Hv",
                  block: "{\"symbols\":[],\"statements\":[[5,\"relationship-map/relationship-side-panes\",[],[[\"@toggleModal\",\"@isAddModal\",\"@reloadRelationshipMap\",\"@clearMap\",\"@currentNodeData\",\"@hoveredNodeType\"],[true,true,[23,0,[\"reloadRelationshipMap\"]],[23,0,[\"clearMap\"]],[23,0,[\"hoveredNodeData\"]],[23,0,[\"hoveredNodeType\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context6.next = 6;
                return _relationshipMap.default.assetsList[0].selectRow();

              case 6:
                _context6.next = 8;
                return _relationshipMap.default.searchRelationshipType(searchTerm);

              case 8:
                assert.equal(_relationshipMap.default.relationshipDropdownOptions[0].name, searchTerm, 'Search result populated');

              case 9:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Clicking on Department node should load deparment details', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                this.server.loadFixtures('relationshipDeptDetails');
                this.setProperties({
                  hoveredNodeData: DEPARTMENT_NODE,
                  hoveredNodeType: DEPARTMENT_NODE.type,
                  navigateToModule: function navigateToModule() {},
                  clearMap: function clearMap() {}
                });
                _context7.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <RelationshipMap::RelationshipSidePanes
                			@toggleModal			= 	{{true}}
                			@isAddModal				= 	{{false}}
                			@reloadRelationshipMap	=	{{this.reloadRelationshipMap}}
                			@clearMap				=	{{this.clearMap}}
                			@navigateToModule = {{this.navigateToModule}}
                			@currentNodeData		= 	{{this.hoveredNodeData}}
                			@hoveredNodeType		=	{{this.hoveredNodeType}}
                		/>
                */
                {
                  id: "3DRpKwr7",
                  block: "{\"symbols\":[],\"statements\":[[5,\"relationship-map/relationship-side-panes\",[],[[\"@toggleModal\",\"@isAddModal\",\"@reloadRelationshipMap\",\"@clearMap\",\"@navigateToModule\",\"@currentNodeData\",\"@hoveredNodeType\"],[true,false,[23,0,[\"reloadRelationshipMap\"]],[23,0,[\"clearMap\"]],[23,0,[\"navigateToModule\"]],[23,0,[\"hoveredNodeData\"]],[23,0,[\"hoveredNodeType\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context7.next = 6;
                return assert.equal(_relationshipMap.default.departmentHeadValue, Ember.String.capitalize(this.server.db.relationshipDeptDetails[0].department_head.name), 'Department head is as expected');

              case 6:
                _context7.next = 8;
                return assert.equal(_relationshipMap.default.primeUserValue, Ember.String.capitalize(this.server.db.relationshipDeptDetails[0].prime_user.name), 'Prime user is as expected');

              case 8:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x6) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Clicking on Asset node should load Asset details', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                this.server.loadFixtures('relationshipAssetDetails');
                this.setProperties({
                  hoveredNodeData: NODE,
                  hoveredNodeType: NODE_TYPE,
                  navigateToModule: function navigateToModule() {},
                  clearMap: function clearMap() {}
                });
                _context8.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <RelationshipMap::RelationshipSidePanes
                			@toggleModal			= 	{{true}}
                			@isAddModal				= 	{{false}}
                			@reloadRelationshipMap	=	{{this.reloadRelationshipMap}}
                			@clearMap				=	{{this.clearMap}}
                			@navigateToModule = {{this.navigateToModule}}
                			@currentNodeData		= 	{{this.hoveredNodeData}}
                			@hoveredNodeType		=	{{this.hoveredNodeType}}
                		/>
                */
                {
                  id: "3DRpKwr7",
                  block: "{\"symbols\":[],\"statements\":[[5,\"relationship-map/relationship-side-panes\",[],[[\"@toggleModal\",\"@isAddModal\",\"@reloadRelationshipMap\",\"@clearMap\",\"@navigateToModule\",\"@currentNodeData\",\"@hoveredNodeType\"],[true,false,[23,0,[\"reloadRelationshipMap\"]],[23,0,[\"clearMap\"]],[23,0,[\"navigateToModule\"]],[23,0,[\"hoveredNodeData\"]],[23,0,[\"hoveredNodeType\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                assert.equal(_relationshipMap.default.assetStateValue, Ember.String.capitalize(this.server.db.relationshipAssetDetails[0].state_name), 'Asset state is as expected');
                assert.equal(_relationshipMap.default.usedByValue, Ember.String.capitalize(this.server.db.relationshipAssetDetails[0].used_by.name), 'Used by is as expected');
                assert.equal(_relationshipMap.default.managedByValue, Ember.String.capitalize(this.server.db.relationshipAssetDetails[0].managed_by.name), 'Managed by is as expected');
                assert.equal(_relationshipMap.default.assetImpactValue, this.server.db.relationshipAssetDetails[0].impact, 'Impact is as expected');

              case 8:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x7) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Clicking on Requester node should load Requester details', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                this.server.loadFixtures('relationshipReqDetails');
                this.setProperties({
                  hoveredNodeData: REQUESTER_NODE,
                  hoveredNodeType: REQUESTER_NODE.type,
                  navigateToModule: function navigateToModule() {},
                  clearMap: function clearMap() {}
                });
                _context9.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <RelationshipMap::RelationshipSidePanes
                			@toggleModal			= 	{{true}}
                			@isAddModal				= 	{{false}}
                			@reloadRelationshipMap	=	{{this.reloadRelationshipMap}}
                			@clearMap				=	{{this.clearMap}}
                			@navigateToModule 		= {{this.navigateToModule}}
                			@currentNodeData		= 	{{this.hoveredNodeData}}
                			@hoveredNodeType		=	{{this.hoveredNodeType}}
                		/>
                */
                {
                  id: "3DRpKwr7",
                  block: "{\"symbols\":[],\"statements\":[[5,\"relationship-map/relationship-side-panes\",[],[[\"@toggleModal\",\"@isAddModal\",\"@reloadRelationshipMap\",\"@clearMap\",\"@navigateToModule\",\"@currentNodeData\",\"@hoveredNodeType\"],[true,false,[23,0,[\"reloadRelationshipMap\"]],[23,0,[\"clearMap\"]],[23,0,[\"navigateToModule\"]],[23,0,[\"hoveredNodeData\"]],[23,0,[\"hoveredNodeType\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context9.next = 6;
                return assert.equal(_relationshipMap.default.locationNameValue, Ember.String.capitalize(this.server.db.relationshipReqDetails[0].location.name), 'Location is as expected');

              case 6:
                _context9.next = 8;
                return assert.equal(_relationshipMap.default.reportingManagerValue, Ember.String.capitalize(this.server.db.relationshipReqDetails[0].reporting_manager.name), 'Reporting manager is as expected');

              case 8:
                _context9.next = 10;
                return assert.equal(_relationshipMap.default.userEmailValue, this.server.db.relationshipReqDetails[0].email, 'Email Id  is as expected');

              case 10:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x8) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Each tab of unresolved issues should display corresponding details', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var firstIssue, moment;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                moment = this.owner.lookup("service:moment");
                this.server.loadFixtures('relationshipAssetDetails');
                this.server.createList('relationship-map-issue', 10);
                firstIssue = this.server.db.relationshipMapIssues[0];
                this.setProperties({
                  hoveredNodeData: NODE,
                  hoveredNodeType: NODE_TYPE,
                  navigateToModule: function navigateToModule() {},
                  clearMap: function clearMap() {}
                });
                _context10.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <RelationshipMap::RelationshipSidePanes
                			@toggleModal			= 	{{true}}
                			@isAddModal				= 	{{false}}
                			@reloadRelationshipMap	=	{{this.reloadRelationshipMap}}
                			@clearMap				=	{{this.clearMap}}
                			@navigateToModule 		=	{{this.navigateToModule}}
                			@currentNodeData		= 	{{this.hoveredNodeData}}
                			@hoveredNodeType		=	{{this.hoveredNodeType}}
                		/>
                */
                {
                  id: "3DRpKwr7",
                  block: "{\"symbols\":[],\"statements\":[[5,\"relationship-map/relationship-side-panes\",[],[[\"@toggleModal\",\"@isAddModal\",\"@reloadRelationshipMap\",\"@clearMap\",\"@navigateToModule\",\"@currentNodeData\",\"@hoveredNodeType\"],[true,false,[23,0,[\"reloadRelationshipMap\"]],[23,0,[\"clearMap\"]],[23,0,[\"navigateToModule\"]],[23,0,[\"hoveredNodeData\"]],[23,0,[\"hoveredNodeType\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context10.next = 9;
                return assert.equal(_relationshipMap.default.ticketCards[0].issueName, "".concat(firstIssue.subject, " #").concat(firstIssue.human_display_id), 'Subject displayed as expected in tickets');

              case 9:
                _context10.next = 11;
                return assert.equal(_relationshipMap.default.ticketCards[0].userName, firstIssue.requester_name, 'User name dislplayed as expected in tickets');

              case 11:
                _context10.next = 13;
                return _relationshipMap.default.selectChangeTab();

              case 13:
                _context10.next = 15;
                return assert.equal(_relationshipMap.default.changeCards[0].issueName, "".concat(firstIssue.subject, " #").concat(firstIssue.human_display_id), 'Subject displayed as expected in changes');

              case 15:
                _context10.next = 17;
                return assert.equal(_relationshipMap.default.changeCards[0].userName, firstIssue.requester_name, 'User name dislplayed as expected in changes');

              case 17:
                _context10.next = 19;
                return assert.equal(_relationshipMap.default.changeCards[0].startDate, _timeUtil.default.formatDate(firstIssue.planned_start_date, DATE_FORMAT, moment), 'Start date displayed as expected in changes');

              case 19:
                _context10.next = 21;
                return assert.equal(_relationshipMap.default.changeCards[0].endDate, _timeUtil.default.formatDate(firstIssue.planned_end_date, DATE_FORMAT, moment), 'End date dislplayed as expected in changes');

              case 21:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x9) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Node type search should work as expected', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        var searchTerm;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                searchTerm = this.server.db.relationshipMapNodes[0].name;
                this.setProperties({
                  hoveredNodeData: NODE,
                  hoveredNodeType: NODE_TYPE,
                  reloadRelationshipMap: function reloadRelationshipMap() {},
                  clearMap: function clearMap() {}
                });
                _context11.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <RelationshipMap::RelationshipSidePanes
                			@toggleModal			= 	{{true}}
                			@isAddModal				= 	{{true}}
                			@reloadRelationshipMap	=	{{this.reloadRelationshipMap}}
                			@clearMap				=	{{this.clearMap}}
                			@currentNodeData		= 	{{this.hoveredNodeData}}
                			@hoveredNodeType		=	{{this.hoveredNodeType}}
                		/>
                */
                {
                  id: "yZ14i8Hv",
                  block: "{\"symbols\":[],\"statements\":[[5,\"relationship-map/relationship-side-panes\",[],[[\"@toggleModal\",\"@isAddModal\",\"@reloadRelationshipMap\",\"@clearMap\",\"@currentNodeData\",\"@hoveredNodeType\"],[true,true,[23,0,[\"reloadRelationshipMap\"]],[23,0,[\"clearMap\"]],[23,0,[\"hoveredNodeData\"]],[23,0,[\"hoveredNodeType\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context11.next = 6;
                return _relationshipMap.default.searchNode(searchTerm);

              case 6:
                assert.equal(_relationshipMap.default.assetsList[0].assetName, searchTerm, 'Search result populated');

              case 7:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x10) {
        return _ref12.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("Should be able to view sub entity type dropdowns for some selected entities", /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                this.setProperties({
                  hoveredNodeData: NODE,
                  hoveredNodeType: NODE_TYPE,
                  reloadRelationshipMap: function reloadRelationshipMap() {},
                  clearMap: function clearMap() {}
                });
                _context12.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <RelationshipMap::RelationshipSidePanes
                			@toggleModal			= 	{{true}}
                			@isAddModal				= 	{{true}}
                			@reloadRelationshipMap	=	{{this.reloadRelationshipMap}}
                			@clearMap				=	{{this.clearMap}}
                			@currentNodeData		= 	{{this.hoveredNodeData}}
                			@hoveredNodeType		=	{{this.hoveredNodeType}}
                		/>
                */
                {
                  id: "yZ14i8Hv",
                  block: "{\"symbols\":[],\"statements\":[[5,\"relationship-map/relationship-side-panes\",[],[[\"@toggleModal\",\"@isAddModal\",\"@reloadRelationshipMap\",\"@clearMap\",\"@currentNodeData\",\"@hoveredNodeType\"],[true,true,[23,0,[\"reloadRelationshipMap\"]],[23,0,[\"clearMap\"]],[23,0,[\"hoveredNodeData\"]],[23,0,[\"hoveredNodeType\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context12.next = 5;
                return _relationshipMap.default.formUtils.selectSingle('entityType', 0);

              case 5:
                assert.ok(_relationshipMap.default.isSubEntityTypeDropdownVisible, "Sub entity dropdown should be visible if entity type is asset");
                _context12.next = 8;
                return _relationshipMap.default.formUtils.selectSingle('entityType', 4);

              case 8:
                assert.ok(_relationshipMap.default.isSubEntityTypeDropdownVisible, "Sub entity dropdown should not be visible if entity type is department");
                _context12.next = 11;
                return _relationshipMap.default.formUtils.selectSingle('entityType', 2);

              case 11:
                assert.notOk(_relationshipMap.default.isSubEntityTypeDropdownVisible, "Sub entity dropdown should be visible if entity type is software");

              case 12:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x11) {
        return _ref13.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should be able search software types', /*#__PURE__*/function () {
      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
        var mockRequest, filterParam, searchTerm, requestArgs;
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                mockRequest = _sinon.default.fake.returns({
                  applications: [{
                    id: 1,
                    name: "Freshservice"
                  }]
                }), filterParam = '[{"condition":"status_id","operator":"is_in","value":"managed"}]', searchTerm = 'Freshservice', requestArgs = {
                  search_term: searchTerm,
                  page: '1',
                  per_page: '20'
                };
                this.setProperties({
                  hoveredNodeData: NODE,
                  hoveredNodeType: NODE_TYPE,
                  reloadRelationshipMap: function reloadRelationshipMap() {},
                  clearMap: function clearMap() {}
                });
                _context13.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <RelationshipMap::RelationshipSidePanes
                			@toggleModal			= 	{{true}}
                			@isAddModal				= 	{{true}}
                			@reloadRelationshipMap	=	{{this.reloadRelationshipMap}}
                			@clearMap				=	{{this.clearMap}}
                			@currentNodeData		= 	{{this.hoveredNodeData}}
                			@hoveredNodeType		=	{{this.hoveredNodeType}}
                		/>
                */
                {
                  id: "yZ14i8Hv",
                  block: "{\"symbols\":[],\"statements\":[[5,\"relationship-map/relationship-side-panes\",[],[[\"@toggleModal\",\"@isAddModal\",\"@reloadRelationshipMap\",\"@clearMap\",\"@currentNodeData\",\"@hoveredNodeType\"],[true,true,[23,0,[\"reloadRelationshipMap\"]],[23,0,[\"clearMap\"]],[23,0,[\"hoveredNodeData\"]],[23,0,[\"hoveredNodeType\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                this.server.get('/api/_/applications', function (schema, request) {
                  return mockRequest(request.queryParams, schema);
                }, 200);
                _context13.next = 7;
                return _relationshipMap.default.formUtils.selectSingle('entityType', 4);

              case 7:
                _context13.next = 9;
                return _relationshipMap.default.searchNode(searchTerm);

              case 9:
                assert.equal(_relationshipMap.default.assetsList[0].assetName, searchTerm, 'Search result populated');
                assert.ok(mockRequest.calledWithMatch(requestArgs), "API is triggered and arguments matched");
                assert.ok(_relationshipMap.default.isSubEntityTypeDropdownVisible, "Sub entity dropdown is visible");
                _context13.next = 14;
                return _relationshipMap.default.formUtils.selectSingle('subEntityType', 1);

              case 14:
                requestArgs['filter'] = filterParam;
                _context13.next = 17;
                return _relationshipMap.default.searchNode(searchTerm);

              case 17:
                assert.ok(mockRequest.calledWithMatch(requestArgs), "API arguments match with status");

              case 18:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      return function (_x12) {
        return _ref14.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/ui-components/account-activation/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-current-user"], function (_qunit, _emberQunit, _testHelpers, _intl, _stubCurrentUser) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var TEST_USER_DATA = {
    hasActiveFreshId: true
  };
  (0, _qunit.module)("Integration | Component | ui-components/account-activation", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      this.intl = this.owner.lookup("service:intl");
    });
    (0, _qunit.test)("should render account activation screen", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var activationTitle, activationDescription;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::AccountActivation />
                */
                {
                  id: "KicKJM1c",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/account-activation\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                activationTitle = this.intl.t("fs.projects.activation_title");
                activationDescription = this.intl.t("fs.projects.activation_description");
                assert.ok(this.element.textContent.trim().includes(activationTitle));
                assert.ok(this.element.textContent.trim().includes(activationDescription));

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("should render given child components", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)(TEST_USER_DATA);
                this.set('test_data', 'template block text');
                _context2.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			 <UiComponents::AccountActivation>
                			   <h1>{{this.test_data}}</h1>
                			 </UiComponents::AccountActivation>
                	   
                */
                {
                  id: "um91ryGR",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t \"],[5,\"ui-components/account-activation\",[],[[],[]],{\"statements\":[[0,\"\\n\\t\\t\\t   \"],[7,\"h1\",true],[8],[1,[23,0,[\"test_data\"]],false],[9],[0,\"\\n\\t\\t\\t \"]],\"parameters\":[]}],[0,\"\\n\\t   \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                assert.equal(this.element.textContent.trim(), this.test_data);

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/ui-components/alerts/component-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var DATA_TEST_ID = '[data-test-id="fs-alert-id"]';
  var DATA_TEST_CLOSE_ID = '[data-test-id="fs-alert-close"]';
  (0, _qunit.module)('Integration | Component | ui-components | alerts', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the alert with default option when no type is passed', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::Alerts />
                */
                {
                  id: "HWMZnfwU",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/alerts\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                // Assert
                assert.dom(DATA_TEST_ID).hasClass('alert-error');

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render the alert with option type warning', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::Alerts @type={{'warning'}}/>
                */
                {
                  id: "Dter/ERS",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/alerts\",[],[[\"@type\"],[\"warning\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                // Assert
                assert.dom(DATA_TEST_ID).hasClass('alert-warning');

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render the alert with option icon', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::Alerts @icon = {{'alert-orange'}}/>
                */
                {
                  id: "ako2jPxL",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/alerts\",[],[[\"@icon\"],[\"alert-orange\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                // Assert
                assert.dom('.alert-icon').hasClass('icon-separator-error');

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render the alert with option removable', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::Alerts @removable = {{'true'}}/>
                */
                {
                  id: "iZ76/cMp",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/alerts\",[],[[\"@removable\"],[\"true\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                // Assert
                assert.dom(DATA_TEST_CLOSE_ID).hasClass('btn-close');

              case 3:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/ui-components/app-toaster/component-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | ui-components/app-toaster', function (hooks) {
    var flashMessages;
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var typesUsed;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              //We have to register any types we expect to use in this component
              typesUsed = ['info', 'warning', 'success'];
              flashMessages = this.owner.lookup('service:flash-messages').registerTypes(typesUsed);

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('Should render one success flashMessages ', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                flashMessages.success('Success message'); // render

                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::AppToaster />
                */
                {
                  id: "rk23J7BX",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/app-toaster\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                // assert
                assert.dom('.alert.alert-success').exists({
                  count: 1
                });
                assert.dom('.alert.alert-success .toaster__message').hasText("Success message");

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render muiltiple flashMessages ', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                flashMessages.success('Success message');
                flashMessages.success('Success message 1');
                flashMessages.danger('Danger message 2'); // render

                _context3.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::AppToaster />
                */
                {
                  id: "rk23J7BX",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/app-toaster\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                // assert
                assert.dom('.alert.alert-success').exists({
                  count: 2
                });
                assert.dom('.alert.alert-danger').exists({
                  count: 1
                }); // Click the second success toster.

                _context3.next = 9;
                return (0, _testHelpers.click)((0, _testHelpers.findAll)('.alert.alert-success')[1]);

              case 9:
                // assert
                assert.dom('.alert.alert-success').exists({
                  count: 1
                });
                assert.dom('.alert.alert-danger').exists({
                  count: 1
                });

              case 11:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/ui-components/assign-to/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl", "ember-cli-mirage/test-support", "freshservice/tests/lib/stub-current-user"], function (_qunit, _emberQunit, _testHelpers, _intl, _testSupport, _stubCurrentUser) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | ui-components/assign-to', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              (0, _stubCurrentUser.stubCurrentUser)();
              Ember.set(this, 'store', this.owner.lookup('service:store'));

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('Should render Assign Filter Component', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var tickets;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.store.findAll('ticket');

              case 2:
                tickets = _context2.sent;
                this.set('newTickets', tickets.firstObject);
                this.set('selectedRows', [tickets]);
                _context2.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::AssignTo
                			@row = {{this.newTickets}}
                			@selectedRows = {{this.selectedRows}}
                			@options = {{hash canEdit=true}}
                			@modulePlural = 'tickets'
                		/>
                */
                {
                  id: "KgDC+yQ9",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/assign-to\",[],[[\"@row\",\"@selectedRows\",\"@options\",\"@modulePlural\"],[[23,0,[\"newTickets\"]],[23,0,[\"selectedRows\"]],[28,\"hash\",null,[[\"canEdit\"],[true]]],\"tickets\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                assert.dom('.agent-group-trigger').exists({
                  count: 1
                });

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should open and close Assign Filter Component Dropdown', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var tickets;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.store.findAll('ticket');

              case 2:
                tickets = _context3.sent;
                this.set('newTickets', tickets.firstObject);
                this.set('selectedRows', [tickets]);
                _context3.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::AssignTo
                			@row = {{this.newTickets}}
                			@selectedRows = {{this.selectedRows}}
                			@options = {{hash canEdit=true}}
                			@modulePlural = 'tickets'
                		/>
                */
                {
                  id: "KgDC+yQ9",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/assign-to\",[],[[\"@row\",\"@selectedRows\",\"@options\",\"@modulePlural\"],[[23,0,[\"newTickets\"]],[23,0,[\"selectedRows\"]],[28,\"hash\",null,[[\"canEdit\"],[true]]],\"tickets\"]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                assert.dom('.agent-group-trigger').exists({
                  count: 1
                });
                _context3.next = 10;
                return (0, _testHelpers.click)('.agent-group-trigger');

              case 10:
                assert.dom('.agent-group-content').exists({
                  count: 1
                });
                _context3.next = 13;
                return (0, _testHelpers.click)('.agent-group-trigger');

              case 13:
                assert.dom('.agent-group-content').exists({
                  count: 0
                });

              case 14:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should execute custom search action', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var tickets;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.store.findAll('ticket');

              case 2:
                tickets = _context4.sent;
                this.set('newTickets', tickets.firstObject);
                this.set('selectedRows', [tickets]);
                this.set('loadCustomAction', {
                  perform: function perform(searchName) {
                    var mockCustomActionData = [{
                      'id': 41,
                      displayName: 'agent one'
                    }, {
                      'id': 42,
                      displayName: 'current user'
                    }];
                    return mockCustomActionData.filter(function (data) {
                      return data.displayName.includes(searchName);
                    });
                  }
                });
                _context4.next = 8;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::AssignTo
                			@row = {{this.newTickets}}
                			@selectedRows = {{this.selectedRows}}
                			@options = {{hash canEdit=true}}
                			@modulePlural = 'tickets'
                			@searchPlaceholder = 'fs.common.search_agents_requesters'
                			@customSearchTask = {{this.loadCustomAction}}
                		/>
                */
                {
                  id: "gbr126o8",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/assign-to\",[],[[\"@row\",\"@selectedRows\",\"@options\",\"@modulePlural\",\"@searchPlaceholder\",\"@customSearchTask\"],[[23,0,[\"newTickets\"]],[23,0,[\"selectedRows\"]],[28,\"hash\",null,[[\"canEdit\"],[true]]],\"tickets\",\"fs.common.search_agents_requesters\",[23,0,[\"loadCustomAction\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 8:
                _context4.next = 10;
                return (0, _testHelpers.click)('.agent-group-trigger');

              case 10:
                assert.dom('.agent-group-content').exists();

              case 11:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }()); // FIXME: To be fixed by `@chandra-mouli-E3933`. Not consistent in CI vs local runs.

    (0, _qunit.skip)('Should open and close Assign Filter Component Nested Dropdown', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var tickets;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this.store.findAll('ticket');

              case 2:
                tickets = _context5.sent;
                this.set('newTickets', tickets.firstObject);
                this.set('selectedRows', [tickets]);
                _context5.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::AssignTo @row = {{this.newTickets}}
                				@selectedRows = {{this.selectedRows}}
                				@options = {{hash canEdit=true}}
                				/>
                */
                {
                  id: "VP5EMieM",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/assign-to\",[],[[\"@row\",\"@selectedRows\",\"@options\"],[[23,0,[\"newTickets\"]],[23,0,[\"selectedRows\"]],[28,\"hash\",null,[[\"canEdit\"],[true]]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context5.next = 9;
                return (0, _testHelpers.click)('.agent-group-trigger');

              case 9:
                _context5.next = 11;
                return (0, _testHelpers.waitUntil)(function () {
                  return document.querySelector('.group-trigger') ? true : false;
                }, {
                  timeout: 2000
                });

              case 11:
                _context5.next = 13;
                return (0, _testHelpers.click)(document.querySelector('.group-trigger'));

              case 13:
                assert.dom('.nested-agent-group-content').exists({
                  count: 1
                });
                _context5.next = 16;
                return (0, _testHelpers.click)(document.querySelector('.group-trigger'));

              case 16:
                assert.dom('.nested-agent-group-content').exists({
                  count: 0
                });

              case 17:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/ui-components/attach-files/component-test", ["qunit", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/sinon-context", "@ember/test-helpers", "freshservice/tests/pages/components/ui-components/attach-files/attach-files", "sinon"], function (_qunit, _emberQunit, _testSupport, _intl, _sinonContext, _testHelpers, _attachFiles, _sinon) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var MOCK_DATA = {
    attachment: 'new attachment.png',
    unsupportedAttachment: 'unsupported.dmg',
    folder: 'folder'
  };
  (0, _qunit.module)('Integration | Component | ui-components/attach-files', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      var _this = this;

      this.set('attachments', Ember.A([]));
      this.set('cloudFiles', Ember.A([]));
      this.set('updateAttachments', function () {});
      this.set('onFileSelected', function (selectedFiles) {
        _this.attachments.pushObjects(selectedFiles);
      });
      this.set('deleteAttachment', function (targetFile) {
        _this.attachments.removeObject(targetFile);
      });
      this.intl = this.owner.lookup("service:intl");
    });
    (0, _qunit.test)('should show attach files component with extra info', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::AttachFiles
                			data-test-id="attach-files"
                			@extraInfo={{true}}
                			@attachments={{this.attachments}}
                			@cloudFiles={{this.cloudFiles}}
                			@onUpdate={{this.updateAttachments}}
                			@onFileSelected={{this.onFileSelected}}
                			@deleteAttachment={{this.deleteAttachment}}></UiComponents::AttachFiles>
                */
                {
                  id: "/mu6xtAV",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/attach-files\",[[12,\"data-test-id\",\"attach-files\"]],[[\"@extraInfo\",\"@attachments\",\"@cloudFiles\",\"@onUpdate\",\"@onFileSelected\",\"@deleteAttachment\"],[true,[23,0,[\"attachments\"]],[23,0,[\"cloudFiles\"]],[23,0,[\"updateAttachments\"]],[23,0,[\"onFileSelected\"]],[23,0,[\"deleteAttachment\"]]]],{\"statements\":[],\"parameters\":[]}]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.ok(_attachFiles.default.hasAttachFilesContainer);
                assert.ok(_attachFiles.default.hasAttachFilesBtn);
                assert.ok(_attachFiles.default.hasExtraInfo);

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should not show extra info if extra-info is not passed', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::AttachFiles></UiComponents::AttachFiles>
                */
                {
                  id: "rZikZ7jy",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/attach-files\",[],[[],[]],{\"statements\":[],\"parameters\":[]}]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.notOk(_attachFiles.default.hasExtraInfo);

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should be able to attach files', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::AttachFiles
                			data-test-id="attach-files"
                			@extraInfo={{true}}
                			@attachments={{this.attachments}}
                			@cloudFiles={{this.cloudFiles}}
                			@onUpdate={{this.updateAttachments}}
                			@onFileSelected={{this.onFileSelected}}
                			@deleteAttachment={{this.deleteAttachment}}></UiComponents::AttachFiles>
                */
                {
                  id: "/mu6xtAV",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/attach-files\",[[12,\"data-test-id\",\"attach-files\"]],[[\"@extraInfo\",\"@attachments\",\"@cloudFiles\",\"@onUpdate\",\"@onFileSelected\",\"@deleteAttachment\"],[true,[23,0,[\"attachments\"]],[23,0,[\"cloudFiles\"]],[23,0,[\"updateAttachments\"]],[23,0,[\"onFileSelected\"]],[23,0,[\"deleteAttachment\"]]]],{\"statements\":[],\"parameters\":[]}]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context3.next = 4;
                return _attachFiles.default.addAttachment(MOCK_DATA.attachment);

              case 4:
                assert.equal(_attachFiles.default.attachmentsCount, 1);

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should be able to delete attached files', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::AttachFiles
                			data-test-id="attach-files"
                			@extraInfo={{true}}
                			@attachments={{this.attachments}}
                			@cloudFiles={{this.cloudFiles}}
                			@onUpdate={{this.updateAttachments}}
                			@onFileSelected={{this.onFileSelected}}
                			@deleteAttachment={{this.deleteAttachment}}></UiComponents::AttachFiles>
                */
                {
                  id: "/mu6xtAV",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/attach-files\",[[12,\"data-test-id\",\"attach-files\"]],[[\"@extraInfo\",\"@attachments\",\"@cloudFiles\",\"@onUpdate\",\"@onFileSelected\",\"@deleteAttachment\"],[true,[23,0,[\"attachments\"]],[23,0,[\"cloudFiles\"]],[23,0,[\"updateAttachments\"]],[23,0,[\"onFileSelected\"]],[23,0,[\"deleteAttachment\"]]]],{\"statements\":[],\"parameters\":[]}]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context4.next = 4;
                return _attachFiles.default.addAttachment(MOCK_DATA.attachment);

              case 4:
                assert.equal(_attachFiles.default.attachmentsCount, 1);
                _context4.next = 7;
                return _attachFiles.default.removeAttachment.objectAt(0).deleteFile();

              case 7:
                assert.equal(_attachFiles.default.attachmentsCount, 0);

              case 8:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should call onFileSelected action when file is attached', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var onFileSelectedCallbackSpy;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                onFileSelectedCallbackSpy = _sinon.default.spy();
                this.set('onFileSelected', onFileSelectedCallbackSpy);
                _context5.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::AttachFiles
                			data-test-id="attach-files"
                			@extraInfo={{true}}
                			@attachments={{this.attachments}}
                			@cloudFiles={{this.cloudFiles}}
                			@onUpdate={{this.updateAttachments}}
                			@onFileSelected={{this.onFileSelected}}
                			@deleteAttachment={{this.deleteAttachment}}></UiComponents::AttachFiles>
                */
                {
                  id: "/mu6xtAV",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/attach-files\",[[12,\"data-test-id\",\"attach-files\"]],[[\"@extraInfo\",\"@attachments\",\"@cloudFiles\",\"@onUpdate\",\"@onFileSelected\",\"@deleteAttachment\"],[true,[23,0,[\"attachments\"]],[23,0,[\"cloudFiles\"]],[23,0,[\"updateAttachments\"]],[23,0,[\"onFileSelected\"]],[23,0,[\"deleteAttachment\"]]]],{\"statements\":[],\"parameters\":[]}]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context5.next = 6;
                return _attachFiles.default.addAttachment(MOCK_DATA.attachment);

              case 6:
                assert.true(onFileSelectedCallbackSpy.calledOnce);

              case 7:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should call deleteAttachment action when file is deleted', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var onDeleteAttachmentCallbackSpy;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                onDeleteAttachmentCallbackSpy = _sinon.default.spy();
                this.set('deleteAttachment', onDeleteAttachmentCallbackSpy);
                _context6.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::AttachFiles
                			data-test-id="attach-files"
                			@extraInfo={{true}}
                			@attachments={{this.attachments}}
                			@cloudFiles={{this.cloudFiles}}
                			@onUpdate={{this.updateAttachments}}
                			@onFileSelected={{this.onFileSelected}}
                			@deleteAttachment={{this.deleteAttachment}}></UiComponents::AttachFiles>
                */
                {
                  id: "/mu6xtAV",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/attach-files\",[[12,\"data-test-id\",\"attach-files\"]],[[\"@extraInfo\",\"@attachments\",\"@cloudFiles\",\"@onUpdate\",\"@onFileSelected\",\"@deleteAttachment\"],[true,[23,0,[\"attachments\"]],[23,0,[\"cloudFiles\"]],[23,0,[\"updateAttachments\"]],[23,0,[\"onFileSelected\"]],[23,0,[\"deleteAttachment\"]]]],{\"statements\":[],\"parameters\":[]}]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context6.next = 6;
                return _attachFiles.default.addAttachment(MOCK_DATA.attachment);

              case 6:
                assert.equal(_attachFiles.default.attachmentsCount, 1);
                _context6.next = 9;
                return _attachFiles.default.removeAttachment.objectAt(0).deleteFile();

              case 9:
                assert.true(onDeleteAttachmentCallbackSpy.calledOnce);

              case 10:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x6) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should show loader icon when file is uploading', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var _this2 = this;

        var onFileSelectedCallbackSpy;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                onFileSelectedCallbackSpy = _sinon.default.fake(function (selectedFiles) {
                  _this2.attachments.pushObjects(selectedFiles);
                });
                this.set('onFileSelected', onFileSelectedCallbackSpy);
                _context7.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::AttachFiles
                			data-test-id="attach-files"
                			@extraInfo={{true}}
                			@attachments={{this.attachments}}
                			@cloudFiles={{this.cloudFiles}}
                			@onUpdate={{this.updateAttachments}}
                			@onFileSelected={{this.onFileSelected}}
                			@deleteAttachment={{this.deleteAttachment}}></UiComponents::AttachFiles>
                */
                {
                  id: "/mu6xtAV",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/attach-files\",[[12,\"data-test-id\",\"attach-files\"]],[[\"@extraInfo\",\"@attachments\",\"@cloudFiles\",\"@onUpdate\",\"@onFileSelected\",\"@deleteAttachment\"],[true,[23,0,[\"attachments\"]],[23,0,[\"cloudFiles\"]],[23,0,[\"updateAttachments\"]],[23,0,[\"onFileSelected\"]],[23,0,[\"deleteAttachment\"]]]],{\"statements\":[],\"parameters\":[]}]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context7.next = 6;
                return _attachFiles.default.addAttachment(MOCK_DATA.attachment);

              case 6:
                assert.ok(_attachFiles.default.hasLoader);

              case 7:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x7) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('By default drag and drop feature should be disabled', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::AttachFiles
                			data-test-id="attach-files"
                			@extraInfo={{true}}
                			@attachments={{this.attachments}}
                			@cloudFiles={{this.cloudFiles}}
                			@onUpdate={{this.updateAttachments}}
                			@onFileSelected={{this.onFileSelected}}
                			@deleteAttachment={{this.deleteAttachment}}></UiComponents::AttachFiles>
                */
                {
                  id: "/mu6xtAV",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/attach-files\",[[12,\"data-test-id\",\"attach-files\"]],[[\"@extraInfo\",\"@attachments\",\"@cloudFiles\",\"@onUpdate\",\"@onFileSelected\",\"@deleteAttachment\"],[true,[23,0,[\"attachments\"]],[23,0,[\"cloudFiles\"]],[23,0,[\"updateAttachments\"]],[23,0,[\"onFileSelected\"]],[23,0,[\"deleteAttachment\"]]]],{\"statements\":[],\"parameters\":[]}]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.notOk(_attachFiles.default.hasDragAndDrop);

              case 3:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }));

      return function (_x8) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('when allowDragAndDropis passed as true drag and drop feature should be enabled', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::AttachFiles
                			data-test-id="attach-files"
                			@extraInfo={{true}}
                			@allowDragAndDrop={{true}}
                			@attachments={{this.attachments}}
                			@cloudFiles={{this.cloudFiles}}
                			@onUpdate={{this.updateAttachments}}
                			@onFileSelected={{this.onFileSelected}}
                			@deleteAttachment={{this.deleteAttachment}}></UiComponents::AttachFiles>
                */
                {
                  id: "92opFk6u",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/attach-files\",[[12,\"data-test-id\",\"attach-files\"]],[[\"@extraInfo\",\"@allowDragAndDrop\",\"@attachments\",\"@cloudFiles\",\"@onUpdate\",\"@onFileSelected\",\"@deleteAttachment\"],[true,true,[23,0,[\"attachments\"]],[23,0,[\"cloudFiles\"]],[23,0,[\"updateAttachments\"]],[23,0,[\"onFileSelected\"]],[23,0,[\"deleteAttachment\"]]]],{\"statements\":[],\"parameters\":[]}]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.ok(_attachFiles.default.hasDragAndDrop);

              case 3:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9);
      }));

      return function (_x9) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should be able to attach files through drag and drop', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::AttachFiles
                			data-test-id="attach-files"
                			@extraInfo={{true}}
                			@allowDragAndDrop={{true}}
                			@attachments={{this.attachments}}
                			@cloudFiles={{this.cloudFiles}}
                			@onUpdate={{this.updateAttachments}}
                			@onFileSelected={{this.onFileSelected}}
                			@deleteAttachment={{this.deleteAttachment}}></UiComponents::AttachFiles>
                */
                {
                  id: "92opFk6u",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/attach-files\",[[12,\"data-test-id\",\"attach-files\"]],[[\"@extraInfo\",\"@allowDragAndDrop\",\"@attachments\",\"@cloudFiles\",\"@onUpdate\",\"@onFileSelected\",\"@deleteAttachment\"],[true,true,[23,0,[\"attachments\"]],[23,0,[\"cloudFiles\"]],[23,0,[\"updateAttachments\"]],[23,0,[\"onFileSelected\"]],[23,0,[\"deleteAttachment\"]]]],{\"statements\":[],\"parameters\":[]}]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context10.next = 4;
                return _attachFiles.default.dropAttachments(MOCK_DATA.attachment);

              case 4:
                assert.equal(_attachFiles.default.attachmentsCount, 1);

              case 5:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10);
      }));

      return function (_x10) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should not be able to attach unsupported files through drag and drop', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _context11.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::AttachFiles
                			data-test-id="attach-files"
                			@extraInfo={{true}}
                			@allowDragAndDrop={{true}}
                			@attachments={{this.attachments}}
                			@cloudFiles={{this.cloudFiles}}
                			@onUpdate={{this.updateAttachments}}
                			@onFileSelected={{this.onFileSelected}}
                			@deleteAttachment={{this.deleteAttachment}}></UiComponents::AttachFiles>
                */
                {
                  id: "92opFk6u",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/attach-files\",[[12,\"data-test-id\",\"attach-files\"]],[[\"@extraInfo\",\"@allowDragAndDrop\",\"@attachments\",\"@cloudFiles\",\"@onUpdate\",\"@onFileSelected\",\"@deleteAttachment\"],[true,true,[23,0,[\"attachments\"]],[23,0,[\"cloudFiles\"]],[23,0,[\"updateAttachments\"]],[23,0,[\"onFileSelected\"]],[23,0,[\"deleteAttachment\"]]]],{\"statements\":[],\"parameters\":[]}]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context11.next = 4;
                return _attachFiles.default.dropAttachments(MOCK_DATA.unsupportedAttachment);

              case 4:
                assert.equal(_attachFiles.default.attachmentsCount, 0);
                assert.ok(_attachFiles.default.hasUnsupportedDataWarningModal);
                assert.equal(_attachFiles.default.unsupportedDataWarningModalText, this.intl.t("fs.form.attachfile.drop_un_supported_files_warning"));

              case 7:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x11) {
        return _ref12.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should not be able to attach folders through drag and drop', /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                _context12.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::AttachFiles
                			data-test-id="attach-files"
                			@extraInfo={{true}}
                			@allowDragAndDrop={{true}}
                			@attachments={{this.attachments}}
                			@cloudFiles={{this.cloudFiles}}
                			@onUpdate={{this.updateAttachments}}
                			@onFileSelected={{this.onFileSelected}}
                			@deleteAttachment={{this.deleteAttachment}}></UiComponents::AttachFiles>
                */
                {
                  id: "92opFk6u",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/attach-files\",[[12,\"data-test-id\",\"attach-files\"]],[[\"@extraInfo\",\"@allowDragAndDrop\",\"@attachments\",\"@cloudFiles\",\"@onUpdate\",\"@onFileSelected\",\"@deleteAttachment\"],[true,true,[23,0,[\"attachments\"]],[23,0,[\"cloudFiles\"]],[23,0,[\"updateAttachments\"]],[23,0,[\"onFileSelected\"]],[23,0,[\"deleteAttachment\"]]]],{\"statements\":[],\"parameters\":[]}]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context12.next = 4;
                return _attachFiles.default.dropAttachments(MOCK_DATA.folder, '');

              case 4:
                assert.equal(_attachFiles.default.attachmentsCount, 0);
                assert.equal(_attachFiles.default.unsupportedDataWarningModalText, this.intl.t("fs.form.attachfile.drop_folder_warning"));

              case 6:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x12) {
        return _ref13.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should be able to close modal when click on OK', /*#__PURE__*/function () {
      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                _context13.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::AttachFiles
                			data-test-id="attach-files"
                			@extraInfo={{true}}
                			@allowDragAndDrop={{true}}
                			@attachments={{this.attachments}}
                			@cloudFiles={{this.cloudFiles}}
                			@onUpdate={{this.updateAttachments}}
                			@onFileSelected={{this.onFileSelected}}
                			@deleteAttachment={{this.deleteAttachment}}></UiComponents::AttachFiles>
                */
                {
                  id: "92opFk6u",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/attach-files\",[[12,\"data-test-id\",\"attach-files\"]],[[\"@extraInfo\",\"@allowDragAndDrop\",\"@attachments\",\"@cloudFiles\",\"@onUpdate\",\"@onFileSelected\",\"@deleteAttachment\"],[true,true,[23,0,[\"attachments\"]],[23,0,[\"cloudFiles\"]],[23,0,[\"updateAttachments\"]],[23,0,[\"onFileSelected\"]],[23,0,[\"deleteAttachment\"]]]],{\"statements\":[],\"parameters\":[]}]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context13.next = 4;
                return _attachFiles.default.dropAttachments(MOCK_DATA.folder, '');

              case 4:
                assert.ok(_attachFiles.default.hasUnsupportedDataWarningModal);
                _context13.next = 7;
                return _attachFiles.default.closeUnsupportedDataWarningModal();

              case 7:
                assert.notOk(_attachFiles.default.hasUnsupportedDataWarningModal);

              case 8:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13);
      }));

      return function (_x13) {
        return _ref14.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('When ever files are present, drop zone should be hidden', /*#__PURE__*/function () {
      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                _context14.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::AttachFiles
                			data-test-id="attach-files"
                			@extraInfo={{true}}
                			@allowDragAndDrop={{true}}
                			@attachments={{this.attachments}}
                			@cloudFiles={{this.cloudFiles}}
                			@onUpdate={{this.updateAttachments}}
                			@onFileSelected={{this.onFileSelected}}
                			@deleteAttachment={{this.deleteAttachment}}></UiComponents::AttachFiles>
                */
                {
                  id: "92opFk6u",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/attach-files\",[[12,\"data-test-id\",\"attach-files\"]],[[\"@extraInfo\",\"@allowDragAndDrop\",\"@attachments\",\"@cloudFiles\",\"@onUpdate\",\"@onFileSelected\",\"@deleteAttachment\"],[true,true,[23,0,[\"attachments\"]],[23,0,[\"cloudFiles\"]],[23,0,[\"updateAttachments\"]],[23,0,[\"onFileSelected\"]],[23,0,[\"deleteAttachment\"]]]],{\"statements\":[],\"parameters\":[]}]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.notOk(_attachFiles.default.isDragAndDropZoneHidden);
                _context14.next = 5;
                return _attachFiles.default.dropAttachments(MOCK_DATA.attachment);

              case 5:
                assert.equal(_attachFiles.default.attachmentsCount, 1);
                assert.ok(_attachFiles.default.isDragAndDropZoneHidden);

              case 7:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14);
      }));

      return function (_x14) {
        return _ref15.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('When drag over drop zone we should show drop zone even though its hidden if allowDragAndDrop is true', /*#__PURE__*/function () {
      var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {
        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                _context15.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::AttachFiles
                			data-test-id="attach-files"
                			@extraInfo={{true}}
                			@allowDragAndDrop={{true}}
                			@attachments={{this.attachments}}
                			@cloudFiles={{this.cloudFiles}}
                			@onUpdate={{this.updateAttachments}}
                			@onFileSelected={{this.onFileSelected}}
                			@deleteAttachment={{this.deleteAttachment}}></UiComponents::AttachFiles>
                */
                {
                  id: "92opFk6u",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/attach-files\",[[12,\"data-test-id\",\"attach-files\"]],[[\"@extraInfo\",\"@allowDragAndDrop\",\"@attachments\",\"@cloudFiles\",\"@onUpdate\",\"@onFileSelected\",\"@deleteAttachment\"],[true,true,[23,0,[\"attachments\"]],[23,0,[\"cloudFiles\"]],[23,0,[\"updateAttachments\"]],[23,0,[\"onFileSelected\"]],[23,0,[\"deleteAttachment\"]]]],{\"statements\":[],\"parameters\":[]}]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                // When file list is empty we will show the drop zone
                assert.notOk(_attachFiles.default.isDragAndDropZoneHidden);
                _context15.next = 5;
                return _attachFiles.default.dropAttachments(MOCK_DATA.attachment);

              case 5:
                assert.equal(_attachFiles.default.attachmentsCount, 1); // When file list is not empty we will hide the drop zone

                assert.ok(_attachFiles.default.isDragAndDropZoneHidden);
                _context15.next = 9;
                return _attachFiles.default.dragOver(MOCK_DATA.attachment);

              case 9:
                // When drag over we will show the drop zone irrespective of file list length
                assert.notOk(_attachFiles.default.isDragAndDropZoneHidden);

              case 10:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15);
      }));

      return function (_x15) {
        return _ref16.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('When user enters drop zone we should show drop zone even though its hidden if allowDragAndDrop is true', /*#__PURE__*/function () {
      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(assert) {
        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                _context16.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::AttachFiles
                			data-test-id="attach-files"
                			@extraInfo={{true}}
                			@allowDragAndDrop={{true}}
                			@attachments={{this.attachments}}
                			@cloudFiles={{this.cloudFiles}}
                			@onUpdate={{this.updateAttachments}}
                			@onFileSelected={{this.onFileSelected}}
                			@deleteAttachment={{this.deleteAttachment}}></UiComponents::AttachFiles>
                */
                {
                  id: "92opFk6u",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/attach-files\",[[12,\"data-test-id\",\"attach-files\"]],[[\"@extraInfo\",\"@allowDragAndDrop\",\"@attachments\",\"@cloudFiles\",\"@onUpdate\",\"@onFileSelected\",\"@deleteAttachment\"],[true,true,[23,0,[\"attachments\"]],[23,0,[\"cloudFiles\"]],[23,0,[\"updateAttachments\"]],[23,0,[\"onFileSelected\"]],[23,0,[\"deleteAttachment\"]]]],{\"statements\":[],\"parameters\":[]}]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                // When file list is empty we will show the drop zone
                assert.notOk(_attachFiles.default.isDragAndDropZoneHidden);
                _context16.next = 5;
                return _attachFiles.default.dropAttachments(MOCK_DATA.attachment);

              case 5:
                assert.equal(_attachFiles.default.attachmentsCount, 1); // When file list is not empty we will hide the drop zone

                assert.ok(_attachFiles.default.isDragAndDropZoneHidden);
                _context16.next = 9;
                return _attachFiles.default.dragEnter(MOCK_DATA.attachment);

              case 9:
                // When drag over we will show the drop zone irrespective of file list length
                assert.notOk(_attachFiles.default.isDragAndDropZoneHidden);

              case 10:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16);
      }));

      return function (_x16) {
        return _ref17.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('When user leaves the drop zone during drag over we will hide the drop zone if file list is not empty and allowDragAndDrop is true', /*#__PURE__*/function () {
      var _ref18 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(assert) {
        return regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                _context17.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::AttachFiles
                			data-test-id="attach-files"
                			@extraInfo={{true}}
                			@allowDragAndDrop={{true}}
                			@attachments={{this.attachments}}
                			@cloudFiles={{this.cloudFiles}}
                			@onUpdate={{this.updateAttachments}}
                			@onFileSelected={{this.onFileSelected}}
                			@deleteAttachment={{this.deleteAttachment}}></UiComponents::AttachFiles>
                */
                {
                  id: "92opFk6u",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/attach-files\",[[12,\"data-test-id\",\"attach-files\"]],[[\"@extraInfo\",\"@allowDragAndDrop\",\"@attachments\",\"@cloudFiles\",\"@onUpdate\",\"@onFileSelected\",\"@deleteAttachment\"],[true,true,[23,0,[\"attachments\"]],[23,0,[\"cloudFiles\"]],[23,0,[\"updateAttachments\"]],[23,0,[\"onFileSelected\"]],[23,0,[\"deleteAttachment\"]]]],{\"statements\":[],\"parameters\":[]}]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                // When file list is empty we will show the drop zone
                assert.notOk(_attachFiles.default.isDragAndDropZoneHidden);
                _context17.next = 5;
                return _attachFiles.default.dropAttachments(MOCK_DATA.attachment);

              case 5:
                assert.equal(_attachFiles.default.attachmentsCount, 1); // When file list is not empty we will hide the drop zone

                assert.ok(_attachFiles.default.isDragAndDropZoneHidden);
                _context17.next = 9;
                return _attachFiles.default.dragOver(MOCK_DATA.attachment);

              case 9:
                // When drag over we will show the drop zone irrespective of file list length
                assert.notOk(_attachFiles.default.isDragAndDropZoneHidden);
                _context17.next = 12;
                return _attachFiles.default.dragLeave();

              case 12:
                assert.ok(_attachFiles.default.isDragAndDropZoneHidden);

              case 13:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17);
      }));

      return function (_x17) {
        return _ref18.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should call onFileSelected action when file is attached through drag and drop', /*#__PURE__*/function () {
      var _ref19 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(assert) {
        var onFileSelectedCallbackSpy;
        return regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                onFileSelectedCallbackSpy = _sinon.default.spy();
                this.set('onFileSelected', onFileSelectedCallbackSpy);
                _context18.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::AttachFiles
                			data-test-id="attach-files"
                			@extraInfo={{true}}
                			@allowDragAndDrop={{true}}
                			@attachments={{this.attachments}}
                			@cloudFiles={{this.cloudFiles}}
                			@onUpdate={{this.updateAttachments}}
                			@onFileSelected={{this.onFileSelected}}
                			@deleteAttachment={{this.deleteAttachment}}></UiComponents::AttachFiles>
                */
                {
                  id: "92opFk6u",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/attach-files\",[[12,\"data-test-id\",\"attach-files\"]],[[\"@extraInfo\",\"@allowDragAndDrop\",\"@attachments\",\"@cloudFiles\",\"@onUpdate\",\"@onFileSelected\",\"@deleteAttachment\"],[true,true,[23,0,[\"attachments\"]],[23,0,[\"cloudFiles\"]],[23,0,[\"updateAttachments\"]],[23,0,[\"onFileSelected\"]],[23,0,[\"deleteAttachment\"]]]],{\"statements\":[],\"parameters\":[]}]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context18.next = 6;
                return _attachFiles.default.dropAttachments(MOCK_DATA.attachment);

              case 6:
                assert.true(onFileSelectedCallbackSpy.calledOnce);

              case 7:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      return function (_x18) {
        return _ref19.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/ui-components/color-input/component-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | ui-components/color-input', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      this.set('onChange', function () {});
    });
    (0, _qunit.test)('it renders', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                      <UiComponents::ColorInput
                        @value="#abcdef"
                        @onChange={{this.onChange}} 
                      />
                    
                */
                {
                  id: "4vI7teQA",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n      \"],[5,\"ui-components/color-input\",[],[[\"@value\",\"@onChange\"],[\"#abcdef\",[23,0,[\"onChange\"]]]]],[0,\"\\n    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.dom('[data-test-id="color-input-wrapper"]').hasAttribute('style', 'background: #abcdef');
                assert.dom('[data-test-id="color-input-wrapper"]').doesNotHaveClass('transparent');

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should add transparent class and no style for transparent color', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                      <UiComponents::ColorInput
                        @value="#00000000"
                        @onChange={{this.onChange}} 
                      />
                    
                */
                {
                  id: "IZAX8q26",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n      \"],[5,\"ui-components/color-input\",[],[[\"@value\",\"@onChange\"],[\"#00000000\",[23,0,[\"onChange\"]]]]],[0,\"\\n    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.dom('[data-test-id="color-input-wrapper"]').doesNotHaveAttribute('style');
                assert.dom('[data-test-id="color-input-wrapper"]').hasClass('transparent');

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should change color and trigger external action on input', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this.set('onInput', function (event) {
                  assert.equal(event.target.value, '#111111');
                });
                _context3.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                      <UiComponents::ColorInput
                        @value="#00000000"
                        @onChange={{this.onChange}} 
                        @onInput={{this.onInput}}
                      />
                    
                */
                {
                  id: "iSJAcniI",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n      \"],[5,\"ui-components/color-input\",[],[[\"@value\",\"@onChange\",\"@onInput\"],[\"#00000000\",[23,0,[\"onChange\"]],[23,0,[\"onInput\"]]]]],[0,\"\\n    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context3.next = 5;
                return (0, _testHelpers.fillIn)('input[type="color"]', '#111111');

              case 5:
                assert.dom('[data-test-id="color-input-wrapper"]').hasAttribute('style', 'background: #111111');

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/ui-components/common-module/entity-templates/component-test", ["qunit", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/sinon-context", "@ember/test-helpers", "freshservice/tests/pages/components/ui-components/common-module/entity-templates", "freshservice/constants/tickets/module-config", "freshservice/tests/pages/components/utils/form-fields", "freshservice/mirage/fixtures/ticket-templates", "sinon", "ember-local-storage/test-support/reset-storage", "ember-power-select/test-support", "freshservice/tests/lib/spy-flash-message"], function (_qunit, _emberQunit, _testSupport, _intl, _sinonContext, _testHelpers, _entityTemplates, _moduleConfig, _formFields, _ticketTemplates, _sinon, _resetStorage, _testSupport2, _spyFlashMessage) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var MOCK_DATA = {
    emptyTicketTemplates: {
      ticket_templates: []
    },
    invalidTemplate: {
      id: '35',
      name: 'template that does not exist'
    }
  };
  var TEMPLATE_MODEL_NAME = "".concat(_moduleConfig.MODULE_CONFIG.module, "-template");
  (0, _qunit.module)('Integration | Component | ui-components/common-module/entity-templates', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      var _this = this;

      this.set('config', _moduleConfig.MODULE_CONFIG);
      this.set('selectedTemplate', null);
      this.set('onTemplateTaskInitiated', _sinon.default.fake(function (task, selectedTemplate) {
        return Ember.set(_this, 'selectedTemplate', selectedTemplate);
      }));
      window.localStorage.removeItem('storage:entity-templates');
      (0, _resetStorage.default)();
    });
    (0, _qunit.test)('Show render ticket templates component', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::CommonModule::EntityTemplates
                			@module={{this.config.module}}
                			@selectedTemplate={{this.selectedTemplate}}
                			@onTemplateTaskInitiated={{this.onTemplateTaskInitiated}}/>
                */
                {
                  id: "NoQCsVXY",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/common-module/entity-templates\",[],[[\"@module\",\"@selectedTemplate\",\"@onTemplateTaskInitiated\"],[[23,0,[\"config\",\"module\"]],[23,0,[\"selectedTemplate\"]],[23,0,[\"onTemplateTaskInitiated\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.ok(_entityTemplates.default.isTemplatesRendered);
                assert.ok(_entityTemplates.default.hasTemplatesDropdown);

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should not show clear button by default', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::CommonModule::EntityTemplates
                			@module={{this.config.module}}
                			@selectedTemplate={{this.selectedTemplate}}
                			@onTemplateTaskInitiated={{this.onTemplateTaskInitiated}}/>
                */
                {
                  id: "NoQCsVXY",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/common-module/entity-templates\",[],[[\"@module\",\"@selectedTemplate\",\"@onTemplateTaskInitiated\"],[[23,0,[\"config\",\"module\"]],[23,0,[\"selectedTemplate\"]],[23,0,[\"onTemplateTaskInitiated\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.notOk(_entityTemplates.default.hasClearTemplatesBtn);

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should be able to select from available list of template', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var templateField;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::CommonModule::EntityTemplates
                			@module={{this.config.module}}
                			@selectedTemplate={{this.selectedTemplate}}
                			@onTemplateTaskInitiated={{this.onTemplateTaskInitiated}}/>
                */
                {
                  id: "NoQCsVXY",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/common-module/entity-templates\",[],[[\"@module\",\"@selectedTemplate\",\"@onTemplateTaskInitiated\"],[[23,0,[\"config\",\"module\"]],[23,0,[\"selectedTemplate\"]],[23,0,[\"onTemplateTaskInitiated\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context3.next = 4;
                return _formFields.default.selectSingle('template', '0');

              case 4:
                _context3.next = 6;
                return _formFields.default.getDataForField('template', true);

              case 6:
                templateField = _context3.sent;
                assert.equal(templateField.selected, _ticketTemplates.default[0].name, '[Template] field is selected with first option value');

              case 8:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should call onTemplateTaskInitiated event when template is selected', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::CommonModule::EntityTemplates
                			@module={{this.config.module}}
                			@selectedTemplate={{this.selectedTemplate}}
                			@onTemplateTaskInitiated={{this.onTemplateTaskInitiated}}/>
                */
                {
                  id: "NoQCsVXY",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/common-module/entity-templates\",[],[[\"@module\",\"@selectedTemplate\",\"@onTemplateTaskInitiated\"],[[23,0,[\"config\",\"module\"]],[23,0,[\"selectedTemplate\"]],[23,0,[\"onTemplateTaskInitiated\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context4.next = 4;
                return _formFields.default.selectSingle('template', '0');

              case 4:
                assert.true(this.onTemplateTaskInitiated.calledOnce);

              case 5:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should call onTemplateSelected event when template is fetched', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                this.set('onTemplateSelected', _sinon.default.spy());
                _context5.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::CommonModule::EntityTemplates
                			@module={{this.config.module}}
                			@selectedTemplate={{this.selectedTemplate}}
                			@onTemplateTaskInitiated={{this.onTemplateTaskInitiated}}
                			@onTemplateSelected={{this.onTemplateSelected}}/>
                */
                {
                  id: "fXh2K/Nk",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/common-module/entity-templates\",[],[[\"@module\",\"@selectedTemplate\",\"@onTemplateTaskInitiated\",\"@onTemplateSelected\"],[[23,0,[\"config\",\"module\"]],[23,0,[\"selectedTemplate\"]],[23,0,[\"onTemplateTaskInitiated\"]],[23,0,[\"onTemplateSelected\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context5.next = 5;
                return _formFields.default.selectSingle('template', '0');

              case 5:
                assert.true(this.onTemplateSelected.calledOnce);

              case 6:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should not show recent list if there are no items in cache', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::CommonModule::EntityTemplates
                			@module={{this.config.module}}
                			@selectedTemplate={{this.selectedTemplate}}
                			@onTemplateTaskInitiated={{this.onTemplateTaskInitiated}}/>
                */
                {
                  id: "NoQCsVXY",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/common-module/entity-templates\",[],[[\"@module\",\"@selectedTemplate\",\"@onTemplateTaskInitiated\"],[[23,0,[\"config\",\"module\"]],[23,0,[\"selectedTemplate\"]],[23,0,[\"onTemplateTaskInitiated\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.notOk(_entityTemplates.default.haRecentTemplates);

              case 3:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      return function (_x6) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should show recent list if there are items in cache', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var entityTemplates;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                entityTemplates = this.owner.lookup('service:entity-templates');
                entityTemplates.addToRecentTemplates(TEMPLATE_MODEL_NAME, _ticketTemplates.default[0]);
                _context7.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::CommonModule::EntityTemplates
                			@module={{this.config.module}}
                			@selectedTemplate={{this.selectedTemplate}}
                			@onTemplateTaskInitiated={{this.onTemplateTaskInitiated}}/>
                */
                {
                  id: "NoQCsVXY",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/common-module/entity-templates\",[],[[\"@module\",\"@selectedTemplate\",\"@onTemplateTaskInitiated\"],[[23,0,[\"config\",\"module\"]],[23,0,[\"selectedTemplate\"]],[23,0,[\"onTemplateTaskInitiated\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                assert.ok(_entityTemplates.default.haRecentTemplates);

              case 5:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x7) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should be able to select template from recent templates', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var entityTemplates, templateField;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                entityTemplates = this.owner.lookup('service:entity-templates');
                entityTemplates.addToRecentTemplates(TEMPLATE_MODEL_NAME, _ticketTemplates.default[0]);
                _context8.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::CommonModule::EntityTemplates
                			@module={{this.config.module}}
                			@selectedTemplate={{this.selectedTemplate}}
                			@onTemplateTaskInitiated={{this.onTemplateTaskInitiated}}/>
                */
                {
                  id: "NoQCsVXY",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/common-module/entity-templates\",[],[[\"@module\",\"@selectedTemplate\",\"@onTemplateTaskInitiated\"],[[23,0,[\"config\",\"module\"]],[23,0,[\"selectedTemplate\"]],[23,0,[\"onTemplateTaskInitiated\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context8.next = 6;
                return _entityTemplates.default.applyRecentTemplate();

              case 6:
                _context8.next = 8;
                return _formFields.default.getDataForField('template', true);

              case 8:
                templateField = _context8.sent;
                assert.equal(templateField.selected, _ticketTemplates.default[0].name, '[Template] field is selected with first option value');

              case 10:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x8) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should show create template button when there are no templates', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::CommonModule::EntityTemplates
                			@module={{this.config.module}}
                			@selectedTemplate={{this.selectedTemplate}}
                			@onTemplateTaskInitiated={{this.onTemplateTaskInitiated}}/>
                */
                {
                  id: "NoQCsVXY",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/common-module/entity-templates\",[],[[\"@module\",\"@selectedTemplate\",\"@onTemplateTaskInitiated\"],[[23,0,[\"config\",\"module\"]],[23,0,[\"selectedTemplate\"]],[23,0,[\"onTemplateTaskInitiated\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                _context9.next = 4;
                return _entityTemplates.default.triggerTemplateDropdown();

              case 4:
                _context9.next = 6;
                return _entityTemplates.default.searchTemplate(MOCK_DATA.invalidTemplate.name);

              case 6:
                assert.ok(_entityTemplates.default.hasCreateTemplateBtn);

              case 7:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9);
      }));

      return function (_x9) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should navigate to legacy create templates page when create template button is clicked', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var sinon;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                sinon = (0, _sinonContext.getSinonContext)();
                sinon.stub(window, 'open');
                _context10.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::CommonModule::EntityTemplates
                			@module={{this.config.module}}
                			@selectedTemplate={{this.selectedTemplate}}
                			@onTemplateTaskInitiated={{this.onTemplateTaskInitiated}}/>
                */
                {
                  id: "NoQCsVXY",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/common-module/entity-templates\",[],[[\"@module\",\"@selectedTemplate\",\"@onTemplateTaskInitiated\"],[[23,0,[\"config\",\"module\"]],[23,0,[\"selectedTemplate\"]],[23,0,[\"onTemplateTaskInitiated\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context10.next = 6;
                return _entityTemplates.default.triggerTemplateDropdown();

              case 6:
                _context10.next = 8;
                return _entityTemplates.default.searchTemplate(MOCK_DATA.invalidTemplate.name);

              case 8:
                _context10.next = 10;
                return (0, _testSupport2.selectChoose)("[data-test-field-name='template']", '.ember-power-select-option', '0');

              case 10:
                assert.ok(window.open.calledWithMatch('itil/ticket_templates/new'));

              case 11:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10);
      }));

      return function (_x10) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should not show search option if templates list is empty', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                this.server.get('/api/_/ticket-templates', function () {
                  return MOCK_DATA.emptyTicketTemplates;
                });
                _context11.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::CommonModule::EntityTemplates
                			@module={{this.config.module}}
                			@selectedTemplate={{this.selectedTemplate}}
                			@onTemplateTaskInitiated={{this.onTemplateTaskInitiated}}/>
                */
                {
                  id: "NoQCsVXY",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/common-module/entity-templates\",[],[[\"@module\",\"@selectedTemplate\",\"@onTemplateTaskInitiated\"],[[23,0,[\"config\",\"module\"]],[23,0,[\"selectedTemplate\"]],[23,0,[\"onTemplateTaskInitiated\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                _context11.next = 5;
                return _entityTemplates.default.triggerTemplateDropdown();

              case 5:
                assert.notOk(_entityTemplates.default.hasTemplateSearch);

              case 6:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x11) {
        return _ref12.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should be able to create new template when templates list is empty', /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        var sinon;
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                sinon = (0, _sinonContext.getSinonContext)();
                sinon.stub(window, 'open');
                this.server.get('/api/_/ticket-templates', function () {
                  return MOCK_DATA.emptyTicketTemplates;
                });
                _context12.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::CommonModule::EntityTemplates
                			@module={{this.config.module}}
                			@selectedTemplate={{this.selectedTemplate}}
                			@onTemplateTaskInitiated={{this.onTemplateTaskInitiated}}/>
                */
                {
                  id: "NoQCsVXY",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/common-module/entity-templates\",[],[[\"@module\",\"@selectedTemplate\",\"@onTemplateTaskInitiated\"],[[23,0,[\"config\",\"module\"]],[23,0,[\"selectedTemplate\"]],[23,0,[\"onTemplateTaskInitiated\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                _context12.next = 7;
                return _entityTemplates.default.triggerTemplateDropdown();

              case 7:
                _context12.next = 9;
                return (0, _testSupport2.selectChoose)("[data-test-field-name='template']", '.ember-power-select-option', '0');

              case 9:
                assert.ok(window.open.calledWithMatch('itil/ticket_templates/new'));

              case 10:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x12) {
        return _ref13.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should be able validate cache by removing invalid templates from cache', /*#__PURE__*/function () {
      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
        var entityTemplates;
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                entityTemplates = this.owner.lookup('service:entity-templates');
                entityTemplates.addToRecentTemplates(TEMPLATE_MODEL_NAME, MOCK_DATA.invalidTemplate);
                _context13.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::CommonModule::EntityTemplates
                			@module={{this.config.module}}
                			@selectedTemplate={{this.selectedTemplate}}
                			@onTemplateTaskInitiated={{this.onTemplateTaskInitiated}}/>
                */
                {
                  id: "NoQCsVXY",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/common-module/entity-templates\",[],[[\"@module\",\"@selectedTemplate\",\"@onTemplateTaskInitiated\"],[[23,0,[\"config\",\"module\"]],[23,0,[\"selectedTemplate\"]],[23,0,[\"onTemplateTaskInitiated\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                assert.notOk(_entityTemplates.default.haRecentTemplates);

              case 5:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      return function (_x13) {
        return _ref14.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should be able to clear template once applied', /*#__PURE__*/function () {
      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {
        var templateField;
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                _context14.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::CommonModule::EntityTemplates
                			@module={{this.config.module}}
                			@selectedTemplate={{this.selectedTemplate}}
                			@onTemplateTaskInitiated={{this.onTemplateTaskInitiated}}/>
                */
                {
                  id: "NoQCsVXY",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/common-module/entity-templates\",[],[[\"@module\",\"@selectedTemplate\",\"@onTemplateTaskInitiated\"],[[23,0,[\"config\",\"module\"]],[23,0,[\"selectedTemplate\"]],[23,0,[\"onTemplateTaskInitiated\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.notOk(_entityTemplates.default.hasClearTemplatesBtn);
                _context14.next = 5;
                return _formFields.default.selectSingle('template', '0');

              case 5:
                assert.ok(_entityTemplates.default.hasClearTemplatesBtn);
                _context14.next = 8;
                return _entityTemplates.default.clearAppliedTemplate();

              case 8:
                assert.notOk(_entityTemplates.default.hasClearTemplatesBtn);
                _context14.next = 11;
                return _formFields.default.getDataForField('template', true);

              case 11:
                templateField = _context14.sent;
                assert.equal(templateField.selected, null, '[Template] field is empty');

              case 13:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14);
      }));

      return function (_x14) {
        return _ref15.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should show flash message when getting template fails', /*#__PURE__*/function () {
      var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {
        var dangerFlashSpy;
        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                this.server.get("/api/_/ticket-templates/".concat(_ticketTemplates.default[0].id), {
                  error: ['Error']
                }, 500);
                dangerFlashSpy = (0, _spyFlashMessage.default)('danger');
                _context15.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::CommonModule::EntityTemplates
                			@module={{this.config.module}}
                			@selectedTemplate={{this.selectedTemplate}}
                			@onTemplateTaskInitiated={{this.onTemplateTaskInitiated}}/>
                */
                {
                  id: "NoQCsVXY",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/common-module/entity-templates\",[],[[\"@module\",\"@selectedTemplate\",\"@onTemplateTaskInitiated\"],[[23,0,[\"config\",\"module\"]],[23,0,[\"selectedTemplate\"]],[23,0,[\"onTemplateTaskInitiated\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context15.next = 6;
                return _formFields.default.selectSingle('template', '0');

              case 6:
                assert.ok(dangerFlashSpy.calledOnce);

              case 7:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      return function (_x15) {
        return _ref16.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/ui-components/common-module/merge-entities/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/sinon-context", "ember-cli-page-object", "freshservice/tests/lib/spy-flash-message", "freshservice/tests/pages/components/utils/form-fields"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _sinonContext, _emberCliPageObject, _spyFlashMessage, _formFields) {
  "use strict";

  var _this = void 0;

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var mergeEntitiesModal = (0, _emberCliPageObject.create)({
    backToSelection: (0, _emberCliPageObject.clickable)('.back-to-selection-view'),
    entities: (0, _emberCliPageObject.collection)('.selected-entities-view .entity-row', {
      removeEntity: (0, _emberCliPageObject.clickable)('.remove-entity'),
      markAsPrimaryEntity: (0, _emberCliPageObject.clickable)('.toggle-entity-primary')
    }),
    searchEntities: (0, _emberCliPageObject.collection)('#entity-search-input-wrapper .entity-row', {
      addEntity: (0, _emberCliPageObject.clickable)('.add-entity')
    }),
    searchEntity: (0, _emberCliPageObject.fillable)('.entity-search-input'),
    clearSearchResults: (0, _emberCliPageObject.clickable)('.entity-search-input-clear'),
    canMerge: (0, _emberCliPageObject.clickable)('[data-test-id="btn-can-merge"]'),
    confirmMerge: (0, _emberCliPageObject.clickable)('[data-test-id="btn-confirm-merge"]'),
    primaryNote: {
      edit: (0, _emberCliPageObject.clickable)('[data-test-id="edit-primary-note"]'),
      description: (0, _emberCliPageObject.fillable)('.froala-editor-container .fr-element'),
      focusOut: (0, _emberCliPageObject.blurrable)('.froala-editor-container .fr-element'),
      save: (0, _emberCliPageObject.clickable)('[data-test-id="save-primary-note"]')
    },
    secondaryNote: {
      edit: (0, _emberCliPageObject.clickable)('[data-test-id="edit-secondary-note"]'),
      description: (0, _emberCliPageObject.fillable)('.froala-editor-container .fr-element'),
      focusOut: (0, _emberCliPageObject.blurrable)('.froala-editor-container .fr-element'),
      save: (0, _emberCliPageObject.clickable)('[data-test-id="save-secondary-note"]')
    }
  });
  var MOCK_DATA = {
    primaryNote: 'hello',
    secondaryNote: 'world',
    selectId: 1
  };

  var getConfig = function getConfig(tickets, start, end) {
    return {
      moduleConfig: {
        module: 'ticket',
        modulePlural: 'tickets',
        showPageUrl: "/helpdesk/tickets/%@",
        API: {
          canMerge: 'merge_tickets/merge',
          confirmMerge: 'merge_tickets/complete_merge'
        }
      },
      mergeSuccessCallback: function mergeSuccessCallback() {},
      resetSelectedEntities: function resetSelectedEntities() {},
      updateModal: function updateModal() {
        return Ember.set(_this, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);
      },
      mergeEntitiesModal: true,
      selectedRows: tickets.slice(start, end),
      mergeSearchEntities: [{
        id: 'subject',
        name: 'Subject',
        url: 'search/tickets/filter/subject',
        placeholder: 'fs.tickets.merge.placeholders.subject'
      }, {
        id: 'display_id',
        name: 'Id',
        url: 'search/tickets/filter/display_id',
        placeholder: 'fs.tickets.merge.placeholders.display_id'
      }]
    };
  };

  var renderComponent = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                
              	<UiComponents::CommonModule::MergeEntities
              		@config                = {{this.moduleConfig}}
              		@callback              = {{fn this.mergeSuccessCallback}}
              		@updateModal           = {{fn this.updateModal}}
              		@toggleModal           = {{this.mergeEntitiesModal}}
              		@searchEntities        = {{this.mergeSearchEntities}}
              		@selectedEntities      = {{selectedRows}}
              		@resetSelectedEntities = {{this.resetSelectedEntities}} />
              
              */
              {
                id: "jXA0opA2",
                block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\"],[5,\"ui-components/common-module/merge-entities\",[],[[\"@config\",\"@callback\",\"@updateModal\",\"@toggleModal\",\"@searchEntities\",\"@selectedEntities\",\"@resetSelectedEntities\"],[[23,0,[\"moduleConfig\"]],[28,\"fn\",[[23,0,[\"mergeSuccessCallback\"]]],null],[28,\"fn\",[[23,0,[\"updateModal\"]]],null],[23,0,[\"mergeEntitiesModal\"]],[23,0,[\"mergeSearchEntities\"]],[22,\"selectedRows\"],[23,0,[\"resetSelectedEntities\"]]]]],[0,\"\\n\"]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function renderComponent() {
      return _ref2.apply(this, arguments);
    };
  }();

  (0, _qunit.module)('Integration | Component | ui-components/common-module/merge-entities', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach(function () {
      this.server.loadFixtures('tickets');
      Ember.set(this, 'store', this.owner.lookup('service:store'));
    });
    (0, _qunit.test)('Should merge 1 target & 1 source entitiy', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var successFlash, tickets;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                successFlash = (0, _spyFlashMessage.default)('success');
                _context2.next = 3;
                return this.store.query('ticket', {
                  page: 1
                });

              case 3:
                tickets = _context2.sent;
                Ember.setProperties(this, getConfig.call(this, tickets, 0, 2));
                _context2.next = 7;
                return renderComponent();

              case 7:
                _context2.next = 9;
                return mergeEntitiesModal.canMerge();

              case 9:
                _context2.next = 11;
                return (0, _testHelpers.waitFor)('.merge-entities-view', {
                  timeout: 1000
                });

              case 11:
                _context2.next = 13;
                return mergeEntitiesModal.backToSelection();

              case 13:
                _context2.next = 15;
                return mergeEntitiesModal.canMerge();

              case 15:
                _context2.next = 17;
                return (0, _testHelpers.waitFor)('.merge-entities-view', {
                  timeout: 1000
                });

              case 17:
                _context2.next = 19;
                return mergeEntitiesModal.confirmMerge();

              case 19:
                assert.ok(successFlash.calledOnce);

              case 20:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should merge 1 target & 2 source entities', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var successFlash, tickets;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                successFlash = (0, _spyFlashMessage.default)('success');
                _context3.next = 3;
                return this.store.query('ticket', {
                  page: 1
                });

              case 3:
                tickets = _context3.sent;
                Ember.setProperties(this, getConfig.call(this, tickets, 0, 3));
                _context3.next = 7;
                return renderComponent();

              case 7:
                _context3.next = 9;
                return mergeEntitiesModal.canMerge();

              case 9:
                _context3.next = 11;
                return (0, _testHelpers.waitFor)('.merge-entities-view', {
                  timeout: 1000
                });

              case 11:
                _context3.next = 13;
                return mergeEntitiesModal.confirmMerge();

              case 13:
                assert.ok(successFlash.calledOnce);

              case 14:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should merge 1 target & 3 source entities, but reject 1 source entitity', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var successFlash, tickets;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                successFlash = (0, _spyFlashMessage.default)('success');
                _context4.next = 3;
                return this.store.query('ticket', {
                  page: 1
                });

              case 3:
                tickets = _context4.sent;
                Ember.setProperties(this, getConfig.call(this, tickets, 0, 4));
                _context4.next = 7;
                return renderComponent();

              case 7:
                _context4.next = 9;
                return mergeEntitiesModal.canMerge();

              case 9:
                _context4.next = 11;
                return (0, _testHelpers.waitFor)('.merge-entities-view', {
                  timeout: 1000
                });

              case 11:
                _context4.next = 13;
                return mergeEntitiesModal.confirmMerge();

              case 13:
                assert.ok(successFlash.calledOnce);

              case 14:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should accept target, but reject all source', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var errorFlash, tickets;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                errorFlash = (0, _spyFlashMessage.default)('danger');
                _context5.next = 3;
                return this.store.query('ticket', {
                  page: 1
                });

              case 3:
                tickets = _context5.sent;
                Ember.setProperties(this, getConfig.call(this, tickets, 0, 5));
                _context5.next = 7;
                return renderComponent();

              case 7:
                _context5.next = 9;
                return mergeEntitiesModal.canMerge();

              case 9:
                assert.ok(errorFlash.calledOnce);

              case 10:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should reject target, but accept all source', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var errorFlash, tickets;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                errorFlash = (0, _spyFlashMessage.default)('danger');
                _context6.next = 3;
                return this.store.query('ticket', {
                  page: 1
                });

              case 3:
                tickets = _context6.sent;
                Ember.setProperties(this, getConfig.call(this, tickets, 0, 6));
                _context6.next = 7;
                return renderComponent();

              case 7:
                _context6.next = 9;
                return mergeEntitiesModal.canMerge();

              case 9:
                assert.ok(errorFlash.calledOnce);

              case 10:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should reject target & reject all source entities', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var errorFlash, tickets;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                errorFlash = (0, _spyFlashMessage.default)('danger');
                _context7.next = 3;
                return this.store.query('ticket', {
                  page: 1
                });

              case 3:
                tickets = _context7.sent;
                Ember.setProperties(this, getConfig.call(this, tickets, 0, 7));
                _context7.next = 7;
                return renderComponent();

              case 7:
                _context7.next = 9;
                return mergeEntitiesModal.canMerge();

              case 9:
                assert.ok(errorFlash.calledTwice);

              case 10:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x6) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should throw 500 error', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var errorFlash, tickets;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                errorFlash = (0, _spyFlashMessage.default)('danger');
                _context8.next = 3;
                return this.store.query('ticket', {
                  page: 1
                });

              case 3:
                tickets = _context8.sent;
                Ember.setProperties(this, getConfig.call(this, tickets, 0, 8));
                _context8.next = 7;
                return renderComponent();

              case 7:
                _context8.next = 9;
                return mergeEntitiesModal.canMerge();

              case 9:
                assert.ok(errorFlash.calledOnce);

              case 10:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x7) {
        return _ref9.apply(this, arguments);
      };
    }()); // Skipping until this gets fixed

    (0, _qunit.skip)('Should perform search, add/remove 1 entity, add notes and perform merge', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        var successFlash, tickets;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                successFlash = (0, _spyFlashMessage.default)('success');
                _context9.next = 3;
                return this.store.query('ticket', {
                  page: 1
                });

              case 3:
                tickets = _context9.sent;
                Ember.setProperties(this, getConfig.call(this, tickets, 0, 4));
                _context9.next = 7;
                return renderComponent();

              case 7:
                _context9.next = 9;
                return mergeEntitiesModal.entities.objectAt(1).removeEntity();

              case 9:
                _context9.next = 11;
                return mergeEntitiesModal.entities.objectAt(2).removeEntity();

              case 11:
                _context9.next = 13;
                return _formFields.default.selectSingleByClassName('.entity-search-dropdown', MOCK_DATA.selectId);

              case 13:
                _context9.next = 15;
                return mergeEntitiesModal.searchEntity('1');

              case 15:
                _context9.next = 17;
                return (0, _testHelpers.waitFor)('#entity-search-input-wrapper .ember-basic-dropdown-content', {
                  timeout: 1000
                });

              case 17:
                _context9.next = 19;
                return mergeEntitiesModal.searchEntities.objectAt(0).addEntity();

              case 19:
                _context9.next = 21;
                return mergeEntitiesModal.clearSearchResults();

              case 21:
                _context9.next = 23;
                return mergeEntitiesModal.entities.objectAt(mergeEntitiesModal.entities.length - 1).markAsPrimaryEntity();

              case 23:
                _context9.next = 25;
                return mergeEntitiesModal.canMerge();

              case 25:
                _context9.next = 27;
                return (0, _testHelpers.waitFor)('.merge-entities-view', {
                  timeout: 1000
                });

              case 27:
                _context9.next = 29;
                return mergeEntitiesModal.primaryNote.edit();

              case 29:
                _context9.next = 31;
                return (0, _testHelpers.waitFor)('.froala-editor-container', {
                  timeout: 1000
                });

              case 31:
                _context9.next = 33;
                return mergeEntitiesModal.primaryNote.description(MOCK_DATA.primaryNote);

              case 33:
                _context9.next = 35;
                return mergeEntitiesModal.primaryNote.focusOut();

              case 35:
                _context9.next = 37;
                return mergeEntitiesModal.primaryNote.save();

              case 37:
                _context9.next = 39;
                return mergeEntitiesModal.secondaryNote.edit();

              case 39:
                _context9.next = 41;
                return (0, _testHelpers.waitFor)('.froala-editor-container', {
                  timeout: 1000
                });

              case 41:
                _context9.next = 43;
                return mergeEntitiesModal.secondaryNote.description(MOCK_DATA.secondaryNote);

              case 43:
                _context9.next = 45;
                return mergeEntitiesModal.secondaryNote.focusOut();

              case 45:
                _context9.next = 47;
                return mergeEntitiesModal.secondaryNote.save();

              case 47:
                _context9.next = 49;
                return mergeEntitiesModal.confirmMerge();

              case 49:
                assert.ok(successFlash.calledOnce);

              case 50:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x8) {
        return _ref10.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/ui-components/common-module/new-form/attachment-and-canned-responses-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-local-storage/test-support/reset-storage", "ember-cli-mirage/test-support", "freshservice/mirage/fixtures/canned-responses-with-details", "freshservice/mirage/fixtures/default-form-fields", "freshservice/tests/pages/components/module-tickets/new-ticket", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/stub-current-account", "freshservice/tests/lib/stub-router", "freshservice/utils/common", "freshservice/constants/tickets/module-config", "freshservice/constants/tickets/new-ticket", "freshservice/constants/common/form-field-configs/new-entity/ticket"], function (_qunit, _emberQunit, _testHelpers, _resetStorage, _testSupport, _cannedResponsesWithDetails, _defaultFormFields, _newTicket, _sinonContext, _stubCurrentAccount, _stubRouter, _common, _moduleConfig, _newTicket2, _ticket) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var MOCK_DATA = {
    newTicket: {
      attachment: 'new attachment.png'
    }
  };

  var renderComponent = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <UiComponents::CommonModule::NewForm @config={{this.config}} @buttonsTargetId="form-footer"/> <div id='form-footer' class='form-footer'></div>
              */
              {
                id: "LxlvWJ5K",
                block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/common-module/new-form\",[],[[\"@config\",\"@buttonsTargetId\"],[[23,0,[\"config\"]],\"form-footer\"]]],[0,\" \"],[7,\"div\",true],[10,\"id\",\"form-footer\"],[10,\"class\",\"form-footer\"],[8],[9]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
              _context.next = 4;
              return (0, _testHelpers.settled)();

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function renderComponent() {
      return _ref2.apply(this, arguments);
    };
  }();

  (0, _qunit.module)('Integration | Component | ui-components/common-module/new-form - Attachments | Canned Response', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      var enabledFeatures;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              enabledFeatures = {
                temp_features: ['ember_ticket_show']
              };
              (0, _stubCurrentAccount.stubCurrentAccount)(enabledFeatures);
              (0, _stubRouter.stubRouter)();
              this.set('config', {
                module: _moduleConfig.MODULE_CONFIG.module,
                excludedFields: _newTicket2.TICKET_EXCLUDED_FIELDS,
                defaultSelectedOptions: _newTicket2.TICKET_DEFAULT_SELECTED_OPTIONS,
                listView: 'tickets.view',
                detailsView: _common.MODULE_URLS.tickets,
                fieldsMap: _newTicket2.NEW_TICKET_FIELDS_MAP,
                fieldConfig: _ticket.NEW_TICKET_FILED_CONFIG
              });

            case 4:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    })));
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              this.server.get('/api/_/ticket_form_fields', function () {
                return {
                  ticket_fields: _defaultFormFields.default
                };
              });

            case 1:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    })));
    hooks.afterEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              window.localStorage.removeItem('storage:tickets/canned-response');
              (0, _resetStorage.default)();

            case 2:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    })));
    (0, _qunit.test)('Should be able to attach files', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return renderComponent();

              case 2:
                _context5.next = 4;
                return _newTicket.default.addAttachment(MOCK_DATA.newTicket.attachment);

              case 4:
                assert.equal(_newTicket.default.attachmentsCount, 1);

              case 5:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      return function (_x) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should be able to attach files through drag and drop', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return renderComponent();

              case 2:
                _context6.next = 4;
                return _newTicket.default.dropAttachments(MOCK_DATA.newTicket.attachment);

              case 4:
                assert.equal(_newTicket.default.attachmentsCount, 1);

              case 5:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      return function (_x2) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should be able to delete attached files', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return renderComponent();

              case 2:
                _context7.next = 4;
                return _newTicket.default.addAttachment(MOCK_DATA.newTicket.attachment);

              case 4:
                assert.equal(_newTicket.default.attachmentsCount, 1);
                _context7.next = 7;
                return _newTicket.default.removeAttachment.objectAt(0).deleteFile();

              case 7:
                assert.equal(_newTicket.default.attachmentsCount, 0);

              case 8:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      return function (_x3) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should be able to insert canned response', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return renderComponent();

              case 2:
                assert.ok(_newTicket.default.hasFroalaEditor);
                _context8.next = 5;
                return _newTicket.default.openCannedResponseModal();

              case 5:
                assert.ok(_newTicket.default.hasCannedResponseModal);
                _context8.next = 8;
                return _newTicket.default.insertCannedResponseContent();

              case 8:
                assert.equal(_newTicket.default.descriptionContent, _cannedResponsesWithDetails.default[0].content);

              case 9:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }));

      return function (_x4) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should be able to insert canned response with attachments', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return renderComponent();

              case 2:
                assert.ok(_newTicket.default.hasFroalaEditor);
                _context9.next = 5;
                return _newTicket.default.openCannedResponseModal();

              case 5:
                assert.ok(_newTicket.default.hasCannedResponseModal);
                _context9.next = 8;
                return _newTicket.default.insertCannedResponseWithAttachment.objectAt(1).click();

              case 8:
                assert.equal(_newTicket.default.descriptionContent, _cannedResponsesWithDetails.default[1].content);
                assert.equal(_newTicket.default.attachmentsCount, 1);

              case 10:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9);
      }));

      return function (_x5) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should be able to delete canned response attachments', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return renderComponent();

              case 2:
                _context10.next = 4;
                return _newTicket.default.openCannedResponseModal();

              case 4:
                assert.ok(_newTicket.default.hasCannedResponseModal);
                _context10.next = 7;
                return _newTicket.default.insertCannedResponseWithAttachment.objectAt(1).click();

              case 7:
                assert.equal(_newTicket.default.attachmentsCount, 1);
                _context10.next = 10;
                return _newTicket.default.removeAttachment.objectAt(0).deleteFile();

              case 10:
                assert.equal(_newTicket.default.attachmentsCount, 0);

              case 11:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10);
      }));

      return function (_x6) {
        return _ref11.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/ui-components/common-module/new-form/business-rules-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/stub-current-account", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/stub-locations", "freshservice/tests/lib/stub-router", "freshservice/tests/pages/components/utils/form-fields", "freshservice/tests/pages/components/module-tickets/new-ticket", "freshservice/mirage/fixtures/requesters", "freshservice/utils/common", "freshservice/constants/tickets/module-config", "freshservice/constants/tickets/new-ticket", "freshservice/constants/common/form-field-configs/new-entity/ticket"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _sinonContext, _stubCurrentAccount, _stubCurrentUser, _stubLocations, _stubRouter, _formFields, _newTicket, _requesters, _common, _moduleConfig, _newTicket2, _ticket) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var renderComponent = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <UiComponents::CommonModule::NewForm @config={{this.config}} @buttonsTargetId="form-footer"/> <div id='form-footer' class='form-footer'></div>
              */
              {
                id: "LxlvWJ5K",
                block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/common-module/new-form\",[],[[\"@config\",\"@buttonsTargetId\"],[[23,0,[\"config\"]],\"form-footer\"]]],[0,\" \"],[7,\"div\",true],[10,\"id\",\"form-footer\"],[10,\"class\",\"form-footer\"],[8],[9]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
              _context.next = 4;
              return (0, _testHelpers.settled)();

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function renderComponent() {
      return _ref2.apply(this, arguments);
    };
  }();

  (0, _qunit.module)('Integration | Component | ui-components/common-module/new-form - Business Rules', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      var enabledFeatures;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              this.server.loadFixtures('ticketFormFields');
              enabledFeatures = {
                temp_features: ['ember_ticket_show'],
                features: ['business_rules']
              };
              (0, _stubCurrentAccount.stubCurrentAccount)(enabledFeatures);
              (0, _stubRouter.stubRouter)();
              this.set('config', {
                module: _moduleConfig.MODULE_CONFIG.module,
                excludedFields: _newTicket2.TICKET_EXCLUDED_FIELDS,
                defaultSelectedOptions: _newTicket2.TICKET_DEFAULT_SELECTED_OPTIONS,
                listView: 'tickets.view',
                detailsView: _common.MODULE_URLS.tickets,
                fieldsMap: _newTicket2.NEW_TICKET_FIELDS_MAP,
                fieldConfig: _ticket.NEW_TICKET_FILED_CONFIG
              });

            case 5:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    })));
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
      var _this = this;

      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              this.server.get('/api/_/ticket_form_fields', function () {
                return {
                  ticket_fields: _this.server.db.ticketFormFields
                };
              });
              this.store = this.owner.lookup('service:store');

            case 2:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    })));
    hooks.afterEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              this.store.unloadAll('ticket');
              this.store.unloadAll('ticket-form-field');
              this.owner.destroy('service:store');

            case 3:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }))); // #1

    (0, _qunit.test)('Verify - Business rules has not loaded without enabling `business_rules` feature', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var withoutBRFeature, statusField, sourceField, urgencyField, impactField, priorityField;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                withoutBRFeature = {
                  temp_features: ['ember_ticket_show']
                };
                (0, _stubCurrentAccount.stubCurrentAccount)(withoutBRFeature);
                _context5.next = 4;
                return renderComponent();

              case 4:
                _context5.next = 6;
                return _formFields.default.getDataForField('status', true);

              case 6:
                statusField = _context5.sent;
                assert.equal(statusField.selected, 'Open', "[Status] field is selected with default value");
                _context5.next = 10;
                return _formFields.default.getDataForField('source', true);

              case 10:
                sourceField = _context5.sent;
                assert.equal(sourceField.properties.editable, true, '[Source] field is enabled by default');
                _context5.next = 14;
                return _formFields.default.getDataForField('urgency', true);

              case 14:
                urgencyField = _context5.sent;
                assert.equal(urgencyField.properties.editable, true, '[Urgency] field is enabled by default');
                _context5.next = 18;
                return _formFields.default.getDataForField('impact', true);

              case 18:
                impactField = _context5.sent;
                assert.equal(impactField.properties.editable, true, '[Impact] field is enabled by default');
                _context5.next = 22;
                return _formFields.default.getDataForField('priority', true);

              case 22:
                priorityField = _context5.sent;
                assert.equal(priorityField.properties.editable, true, '[Priority] field is enabled by default');
                _context5.next = 26;
                return _formFields.default.selectSingle('status', '1');

              case 26:
                _context5.next = 28;
                return _formFields.default.getDataForField('status', true);

              case 28:
                statusField = _context5.sent;
                assert.equal(statusField.selected, 'Pending', 'Updated [Status] field selected value as Pending');
                _context5.next = 32;
                return _formFields.default.getDataForField('source', true);

              case 32:
                sourceField = _context5.sent;
                assert.notEqual(sourceField.properties.editable, false, 'Failed to Update [Source] field to Disabled state');
                _context5.next = 36;
                return _formFields.default.getDataForField('urgency', true);

              case 36:
                urgencyField = _context5.sent;
                assert.notEqual(urgencyField.properties.editable, false, 'Failed to Update [Urgency] field to Disabled state');
                _context5.next = 40;
                return _formFields.default.getDataForField('impact', true);

              case 40:
                impactField = _context5.sent;
                assert.notEqual(impactField.properties.editable, false, 'Failed to Update [Impact] field to Disabled state');

              case 42:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      return function (_x) {
        return _ref6.apply(this, arguments);
      };
    }()); // #2

    (0, _qunit.test)('Enable Business rules and Verify BR actions in fields and its reversal', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var TEST_ACCOUNT, statusField, sourceField, urgencyField, impactField, categoryField, priorityField;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                TEST_ACCOUNT = {
                  features: ["business_rules"]
                };
                this.server.get('/search/autocomplete/requesters', function () {
                  return {
                    results: _requesters.default
                  };
                });
                (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
                _context6.next = 5;
                return renderComponent();

              case 5:
                _context6.next = 7;
                return _formFields.default.getDataForField('status', true);

              case 7:
                statusField = _context6.sent;
                assert.equal(statusField.selected, 'Open', "[Status] field is selected with default value");
                _context6.next = 11;
                return _formFields.default.getDataForField('source', true);

              case 11:
                sourceField = _context6.sent;
                assert.equal(sourceField.properties.editable, true, '[Source] field is enabled by default');
                _context6.next = 15;
                return _formFields.default.getDataForField('urgency', true);

              case 15:
                urgencyField = _context6.sent;
                assert.equal(urgencyField.properties.editable, true, '[Urgency] field is enabled by default');
                _context6.next = 19;
                return _formFields.default.getDataForField('impact', true);

              case 19:
                impactField = _context6.sent;
                assert.equal(impactField.properties.editable, true, '[Impact] field is enabled by default');
                _context6.next = 23;
                return _formFields.default.getDataForField('category', true);

              case 23:
                categoryField = _context6.sent;
                assert.equal(categoryField.properties.required, false, '[Category] field is optional by default');
                _context6.next = 27;
                return _formFields.default.selectSingle('status', '1');

              case 27:
                _context6.next = 29;
                return _formFields.default.autocompleteSelectMultiple('requestedForId', _requesters.default[0].value, '0');

              case 29:
                _context6.next = 31;
                return _formFields.default.getDataForField('status', true);

              case 31:
                statusField = _context6.sent;
                assert.equal(statusField.selected, 'Pending', 'Updated [Status] field selected value as Pending');
                _context6.next = 35;
                return _formFields.default.getDataForField('source', true);

              case 35:
                sourceField = _context6.sent;
                assert.equal(sourceField.properties.editable, false, 'Updated [Source] field to Disabled state');
                _context6.next = 39;
                return _formFields.default.getDataForField('urgency', true);

              case 39:
                urgencyField = _context6.sent;
                assert.equal(urgencyField.properties.editable, false, 'Updated [Urgency] field to Disabled state');
                _context6.next = 43;
                return _formFields.default.getDataForField('impact', true);

              case 43:
                impactField = _context6.sent;
                assert.equal(impactField.properties.editable, false, 'Updated [Impact] field to Disabled state');
                _context6.next = 47;
                return _formFields.default.getDataForField('category', true);

              case 47:
                categoryField = _context6.sent;
                assert.equal(categoryField.properties.required, true, 'Updated [Category] field is Required state');
                _context6.next = 51;
                return _formFields.default.getDataForField('priority', true);

              case 51:
                priorityField = _context6.sent;
                assert.equal(priorityField.properties.required, false, 'Updated [priorityField] field to Optional state');
                assert.equal(priorityField.properties.editable, true, 'Updated [priorityField] field to Editable state');
                _context6.next = 56;
                return _formFields.default.selectSingle('status', '2');

              case 56:
                _context6.next = 58;
                return _formFields.default.getDataForField('status', true);

              case 58:
                statusField = _context6.sent;
                assert.equal(statusField.selected, 'Resolved', 'Updated [Status] field selected value as Resolved');
                _context6.next = 62;
                return _formFields.default.getDataForField('source', true);

              case 62:
                sourceField = _context6.sent;
                assert.equal(sourceField.properties.editable, true, 'Reversed [Source] field to Enabled state');
                _context6.next = 66;
                return _formFields.default.getDataForField('urgency', true);

              case 66:
                urgencyField = _context6.sent;
                assert.equal(urgencyField.properties.editable, true, 'Reversed [Urgency] field to Enabled state');
                _context6.next = 70;
                return _formFields.default.getDataForField('impact', true);

              case 70:
                impactField = _context6.sent;
                assert.equal(impactField.properties.editable, true, 'Reversed [Impact] field to Enabled state');
                _context6.next = 74;
                return _formFields.default.getDataForField('category', true);

              case 74:
                categoryField = _context6.sent;
                assert.equal(categoryField.properties.required, false, 'Reversed [Category] field to Optional state');
                this.owner.destroy("service:current-account");

              case 77:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x2) {
        return _ref7.apply(this, arguments);
      };
    }()); // 3

    (0, _qunit.test)('Business rules - custom lookup field - valid selected value - test', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var TEST_ACCOUNT, deptLookupField;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                TEST_ACCOUNT = {
                  features: ["business_rules"]
                };
                (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
                _context7.next = 4;
                return renderComponent();

              case 4:
                _context7.next = 6;
                return _formFields.default.autocompleteSelectMultiple('customFields.lf_custom_lookup_depts', 'Sales', '0');

              case 6:
                _context7.next = 8;
                return _formFields.default.selectSingle('status', '1');

              case 8:
                _context7.next = 10;
                return _formFields.default.getDataForField('customFields.lf_custom_lookup_depts', true);

              case 10:
                deptLookupField = _context7.sent;
                assert.equal(deptLookupField.selected, 'Sales', "[Department single Lookup] field is selected with valid value");
                this.owner.destroy("service:current-account");

              case 13:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x3) {
        return _ref8.apply(this, arguments);
      };
    }()); // 4

    (0, _qunit.test)('Business rules - custom lookup field - invalid selected value - test', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var TEST_ACCOUNT, deptLookupField;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                TEST_ACCOUNT = {
                  features: ["business_rules"]
                };
                (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
                _context8.next = 4;
                return renderComponent();

              case 4:
                _context8.next = 6;
                return _formFields.default.autocompleteSelectMultiple('customFields.lf_custom_lookup_depts', 'HR', '0');

              case 6:
                _context8.next = 8;
                return _formFields.default.selectSingle('status', '1');

              case 8:
                _context8.next = 10;
                return _formFields.default.getDataForField('customFields.lf_custom_lookup_depts', true);

              case 10:
                deptLookupField = _context8.sent;
                assert.notEqual(deptLookupField.selected, 'Sales', "[Department single Lookup] field invalid selection has been cleared");
                this.owner.destroy("service:current-account");

              case 13:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x4) {
        return _ref9.apply(this, arguments);
      };
    }()); // 5

    (0, _qunit.test)('Business rules - custom multi lookup field - valid selected value - test', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        var TEST_ACCOUNT, deptLookupField;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                TEST_ACCOUNT = {
                  features: ["business_rules"]
                };
                (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
                _context9.next = 4;
                return renderComponent();

              case 4:
                _context9.next = 6;
                return _formFields.default.autocompleteSelectMultiple('customFields.msf_lf_department_custom_multi_lookup', 'Sales', '0');

              case 6:
                _context9.next = 8;
                return _formFields.default.selectSingle('status', '1');

              case 8:
                _context9.next = 10;
                return _formFields.default.getDataForField('customFields.msf_lf_department_custom_multi_lookup', true);

              case 10:
                deptLookupField = _context9.sent;
                assert.equal(deptLookupField.selected, 'Sales', "[Department multi Lookup] field is selected with valid value");
                this.owner.destroy("service:current-account");

              case 13:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x5) {
        return _ref10.apply(this, arguments);
      };
    }()); // 6

    (0, _qunit.test)('Business rules - custom multi lookup field - invalid selected value - test', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var TEST_ACCOUNT, deptLookupField;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                TEST_ACCOUNT = {
                  features: ["business_rules"]
                };
                (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
                _context10.next = 4;
                return renderComponent();

              case 4:
                _context10.next = 6;
                return _formFields.default.autocompleteSelectMultiple('customFields.msf_lf_department_custom_multi_lookup', 'HR', '0');

              case 6:
                _context10.next = 8;
                return _formFields.default.selectSingle('status', '1');

              case 8:
                _context10.next = 10;
                return _formFields.default.getDataForField('customFields.msf_lf_department_custom_multi_lookup', true);

              case 10:
                deptLookupField = _context10.sent;
                assert.notEqual(deptLookupField.selected, 'Sales', "[Department multi Lookup] field invalid selection has been cleared");
                this.owner.destroy("service:current-account");

              case 13:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x6) {
        return _ref11.apply(this, arguments);
      };
    }()); // 7

    (0, _qunit.test)('Business rules - custom multi lookup field - valid & invalid selected values combination handling - test', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        var TEST_ACCOUNT, deptLookupField;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                TEST_ACCOUNT = {
                  features: ["business_rules"]
                };
                (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
                _context11.next = 4;
                return renderComponent();

              case 4:
                _context11.next = 6;
                return _formFields.default.autocompleteSelectMultiple('customFields.msf_lf_department_custom_multi_lookup', 'HR', '0');

              case 6:
                _context11.next = 8;
                return _formFields.default.autocompleteSelectMultiple('customFields.msf_lf_department_custom_multi_lookup', 'Sales', '0');

              case 8:
                _context11.next = 10;
                return _formFields.default.selectSingle('status', '1');

              case 10:
                _context11.next = 12;
                return _formFields.default.getDataForField('customFields.msf_lf_department_custom_multi_lookup', true);

              case 12:
                deptLookupField = _context11.sent;
                assert.equal(deptLookupField.selected, 'Sales', "[Department multi Lookup] field partial invalid selection has been cleared");
                this.owner.destroy("service:current-account");

              case 15:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x7) {
        return _ref12.apply(this, arguments);
      };
    }()); // 8

    (0, _qunit.test)('Business rules - location lookup field - test', /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        var TEST_ACCOUNT, locLookupField;
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                TEST_ACCOUNT = {
                  features: ["business_rules"],
                  temp_features: ['ticket_lookup_field']
                };
                (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
                (0, _stubLocations.stubLocations)();
                _context12.next = 5;
                return renderComponent();

              case 5:
                _context12.next = 7;
                return _formFields.default.selectSingle('customFields.lf_location_lookup', '1');

              case 7:
                _context12.next = 9;
                return _formFields.default.selectSingle('status', '1');

              case 9:
                _context12.next = 11;
                return _formFields.default.getDataForField('customFields.lf_location_lookup', true);

              case 11:
                locLookupField = _context12.sent;
                assert.equal(locLookupField.selected, 'America', "[Location lookup] field is selected with valid value");
                this.owner.destroy("service:current-account");
                this.owner.destroy("service:locations");

              case 15:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x8) {
        return _ref13.apply(this, arguments);
      };
    }()); // 9

    (0, _qunit.test)('Business rules - NonFormSchema fields validation - test', /*#__PURE__*/function () {
      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
        var TEST_ACCOUNT, currentUser;
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                TEST_ACCOUNT = {
                  features: ['business_rules', 'cmdb']
                };
                (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
                currentUser = {
                  privileges: ['view_ci']
                };
                (0, _stubCurrentUser.stubCurrentUser)(currentUser);
                _context13.next = 6;
                return renderComponent();

              case 6:
                assert.ok(_newTicket.default.hasAssociateAsset, "Associate asset link is visible by Default");
                _context13.next = 9;
                return _formFields.default.selectSingle('status', '1');

              case 9:
                _context13.next = 11;
                return _newTicket.default.save();

              case 11:
                assert.notOk(_newTicket.default.isFormValid, "Form has Business rules validation errors");
                assert.equal(document.querySelectorAll('[data-test-id="ticket-new-form-attached-files"] .field-required-error').length, 1, "Attachment field has required error");
                _context13.next = 15;
                return _newTicket.default.dropAttachments('new attachment.png');

              case 15:
                assert.equal(_newTicket.default.attachmentsCount, 1);
                assert.equal(document.querySelectorAll('[data-test-id="ticket-new-form-attached-files"] .field-required-error').length, 0, "Attachment field error state has been updated");
                assert.notOk(_newTicket.default.hasAssociateAsset, "Associate asset link is not visible");
                this.owner.destroy("service:current-account");
                this.owner.destroy("service:locations");

              case 20:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      return function (_x9) {
        return _ref14.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/ui-components/common-module/new-form/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "sinon", "ember-cli-mirage/test-support", "ember-local-storage/test-support/reset-storage", "freshservice/tests/lib/spy-flash-message", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/set-locale-timezone-moment", "freshservice/tests/lib/stub-current-account", "freshservice/tests/lib/stub-router", "freshservice/tests/pages/components/module-tickets/new-ticket", "freshservice/tests/pages/components/utils/form-fields", "freshservice/mirage/fixtures/canned-responses-with-details", "freshservice/mirage/fixtures/user-departments", "freshservice/mirage/fixtures/autocomplete-departments", "freshservice/mirage/fixtures/requesters", "freshservice/mirage/fixtures/default-form-fields", "freshservice/utils/common", "freshservice/constants/tickets/module-config", "freshservice/constants/tickets/new-ticket", "freshservice/constants/common/form-field-configs/new-entity/ticket"], function (_qunit, _emberQunit, _testHelpers, _sinon, _testSupport, _resetStorage, _spyFlashMessage, _sinonContext, _setLocaleTimezoneMoment, _stubCurrentAccount, _stubRouter, _newTicket, _formFields, _cannedResponsesWithDetails, _userDepartments, _autocompleteDepartments, _requesters, _defaultFormFields, _common, _moduleConfig, _newTicket2, _ticket) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

  function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  var MOCK_DATA = {
    newTicket: {
      requesterId: 'support@freshservice.com',
      subject: 'Test Subject',
      description: 'Test Description',
      tags: 'Tag',
      attachment: 'new attachment.png',
      requesterName: 'new_requester',
      email: 'new_requester@gmail.com',
      requesterInputResult: 'new_requester <new_requester@gmail.com>',
      customText: 'Custom text',
      customNumber: 12435
    }
  };
  var MOCK_ERRORS = {
    CLOSURE_RULES_FAILURE: {
      code: "violated_closure_rules",
      description: {
        'check_ticket_time_tracker': 'A time entry should be added'
      },
      message: "Closure rules violated"
    },
    BUSINESS_RULES_FAILURE: {
      code: 'violated_business_rules',
      description: {
        "field_is_disabled": "status",
        "field_is_mandatory": "agent",
        "field_is_invalid": "source",
        "custom_validation": "custom message"
      },
      message: 'Business Rules Violated'
    },
    FORBIDDEN: {
      status: '403'
    },
    SERVER_ERROR: {
      status: '500'
    }
  };

  var hasAllTypesOfFields = function hasAllTypesOfFields(assert) {
    var assertions = [].concat(_toConsumableArray(_newTicket.default.allTypesOfFields.default), _toConsumableArray(_newTicket.default.allTypesOfFields.custom), [_newTicket.default.allTypesOfFields.additional]);
    assertions.forEach(function (assertion) {
      return assert.ok(assertion);
    });
    assert.ok(_newTicket.default.customContentFields.length > 0);
  };

  var renderComponent = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(page) {
      var context;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              context = (0, _testHelpers.getContext)();
              context.set('page', page);
              _context.next = 4;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <UiComponents::CommonModule::NewForm @config={{this.config}} @page={{this.page}} @buttonsTargetId="form-footer"/> <div id='form-footer' class='form-footer'></div>
              */
              {
                id: "f6RQHfgv",
                block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/common-module/new-form\",[],[[\"@config\",\"@page\",\"@buttonsTargetId\"],[[23,0,[\"config\"]],[23,0,[\"page\"]],\"form-footer\"]]],[0,\" \"],[7,\"div\",true],[10,\"id\",\"form-footer\"],[10,\"class\",\"form-footer\"],[8],[9]],\"hasEval\":false}",
                meta: {}
              }));

            case 4:
              _context.next = 6;
              return (0, _testHelpers.settled)();

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function renderComponent(_x) {
      return _ref2.apply(this, arguments);
    };
  }();

  var loadDefaultFields = function loadDefaultFields() {
    var context = (0, _testHelpers.getContext)();
    context.server.get('/api/_/ticket_form_fields', function () {
      return {
        ticket_fields: _defaultFormFields.default
      };
    });
  };

  (0, _qunit.module)('Integration | Component | ui-components/common-module/new-form', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _setLocaleTimezoneMoment.setLocaleAndTimeZoneForMoment)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              this.marketplaceAdapter = this.owner.lookup('service:marketplaceAdapter');

              _sinon.default.stub(this.marketplaceAdapter, 'publishEvent').returns(null);

            case 2:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    })));
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
      var enabledFeatures;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              enabledFeatures = {
                temp_features: ['ember_ticket_show']
              };
              (0, _stubCurrentAccount.stubCurrentAccount)(enabledFeatures);
              (0, _stubRouter.stubRouter)();
              this.intl = this.owner.lookup('service:intl');
              this.store = this.owner.lookup('service:store');
              this.server.loadFixtures('ticketFormFields');
              this.set('config', {
                module: _moduleConfig.MODULE_CONFIG.module,
                excludedFields: _newTicket2.TICKET_EXCLUDED_FIELDS,
                defaultSelectedOptions: _newTicket2.TICKET_DEFAULT_SELECTED_OPTIONS,
                listView: 'tickets.view',
                detailsView: _common.MODULE_URLS.tickets,
                fieldsMap: _newTicket2.NEW_TICKET_FIELDS_MAP,
                fieldConfig: _ticket.NEW_TICKET_FILED_CONFIG
              });

            case 7:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    })));
    hooks.afterEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              this.store.unloadAll('ticket');
              this.store.unloadAll('ticket-form-field');
              this.owner.destroy('service:store');
              this.owner.destroy('service:intl');
              this.owner.destroy('service:marketplaceAdapter');
              window.localStorage.removeItem('storage:tickets/canned-response');
              (0, _resetStorage.default)();

            case 7:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }))); // 1.

    (0, _qunit.test)('Should show all fields when new form is rendered', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return renderComponent();

              case 2:
                hasAllTypesOfFields(assert);

              case 3:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      return function (_x2) {
        return _ref6.apply(this, arguments);
      };
    }()); // 2.

    (0, _qunit.test)('Verify default values pre filled in the form', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var statusField, sourceField, urgencyField, impactField, priorityField;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                loadDefaultFields();
                _context6.next = 3;
                return renderComponent();

              case 3:
                _context6.next = 5;
                return _formFields.default.getDataForField('status', true);

              case 5:
                statusField = _context6.sent;
                assert.equal(statusField.selected, 'Open', '[Status] field is selected with default value - Open');
                _context6.next = 9;
                return _formFields.default.getDataForField('source', true);

              case 9:
                sourceField = _context6.sent;
                assert.equal(sourceField.selected, 'Phone', '[Source] field is selected with default value - Phone');
                _context6.next = 13;
                return _formFields.default.getDataForField('urgency', true);

              case 13:
                urgencyField = _context6.sent;
                assert.equal(urgencyField.selected, 'Low', '[Urgency] field is selected with default value - Low');
                _context6.next = 17;
                return _formFields.default.getDataForField('impact', true);

              case 17:
                impactField = _context6.sent;
                assert.equal(impactField.selected, 'Low', '[Impact] field is selected with default value - Low');
                _context6.next = 21;
                return _formFields.default.getDataForField('priority', true);

              case 21:
                priorityField = _context6.sent;
                assert.equal(priorityField.selected, 'Low', '[Priority] field is selected with default value - Low');

              case 23:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      return function (_x3) {
        return _ref7.apply(this, arguments);
      };
    }()); // 3.

    (0, _qunit.test)('Department field should be set automatically when requester field is set', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                loadDefaultFields();
                _context7.next = 3;
                return renderComponent();

              case 3:
                _context7.next = 5;
                return _formFields.default.autocompleteSelectMultiple("requesterId", MOCK_DATA.newTicket.requesterId, '0');

              case 5:
                assert.equal(_newTicket.default.departmentText, _userDepartments.default[0].name);

              case 6:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      return function (_x4) {
        return _ref8.apply(this, arguments);
      };
    }()); // 4.

    (0, _qunit.test)('Department field should be set to empty if no department is linked to selected requester', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                loadDefaultFields();
                this.server.get('/itil/departments/user_departments', [{
                  id: '',
                  name: ''
                }]);
                _context8.next = 4;
                return renderComponent();

              case 4:
                _context8.next = 6;
                return _formFields.default.autocompleteSelectMultiple("requesterId", MOCK_DATA.newTicket.requesterId, '0');

              case 6:
                assert.notOk(_newTicket.default.isDepartmentSelected);

              case 7:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x5) {
        return _ref9.apply(this, arguments);
      };
    }()); // 5.

    (0, _qunit.test)('Should be able to save the form when all the details are filled', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        var successFlashSpy;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                successFlashSpy = (0, _spyFlashMessage.default)('success');
                _context9.next = 3;
                return renderComponent();

              case 3:
                _context9.next = 5;
                return _formFields.default.autocompleteSelectMultiple('requesterId', MOCK_DATA.newTicket.requesterId, '0');

              case 5:
                _context9.next = 7;
                return _newTicket.default.fillSubject(MOCK_DATA.newTicket.subject);

              case 7:
                _context9.next = 9;
                return _newTicket.default.fillDescription(MOCK_DATA.newTicket.description);

              case 9:
                _context9.next = 11;
                return _newTicket.default.openCannedResponseModal();

              case 11:
                _context9.next = 13;
                return _newTicket.default.insertCannedResponseWithAttachment.objectAt(1).click();

              case 13:
                _context9.next = 15;
                return _formFields.default.selectSingle('source', '0');

              case 15:
                _context9.next = 17;
                return _formFields.default.selectSingle('status', '0');

              case 17:
                _context9.next = 19;
                return _formFields.default.selectSingle('urgency', '0');

              case 19:
                _context9.next = 21;
                return _formFields.default.selectSingle('impact', '0');

              case 21:
                _context9.next = 23;
                return _formFields.default.selectSingle('priority', '0');

              case 23:
                _context9.next = 25;
                return _formFields.default.selectSingle('groupId', '0');

              case 25:
                _context9.next = 27;
                return _formFields.default.selectSingle('responderId', '0');

              case 27:
                _context9.next = 29;
                return _formFields.default.selectSingle('departmentId', '0');

              case 29:
                _context9.next = 31;
                return _formFields.default.selectSingle('category', '0');

              case 31:
                _context9.next = 33;
                return _newTicket.default.fillCustomTextField(MOCK_DATA.newTicket.customText);

              case 33:
                _context9.next = 35;
                return _formFields.default.selectSingle('customFields.cust_dd_1', '1');

              case 35:
                _context9.next = 37;
                return _formFields.default.selectSingle('customFields.msf_cust_multi_dd', '1');

              case 37:
                _context9.next = 39;
                return _formFields.default.selectSingle('customFields.cust_sec_parent_dd', '2');

              case 39:
                _context9.next = 41;
                return _newTicket.default.fillCustomSection2TextField(MOCK_DATA.newTicket.customText);

              case 41:
                _context9.next = 43;
                return _formFields.default.autocompleteSelectMultiple('tags', MOCK_DATA.newTicket.tags, '0');

              case 43:
                _context9.next = 45;
                return _newTicket.default.addAttachment(MOCK_DATA.newTicket.attachment);

              case 45:
                _context9.next = 47;
                return _newTicket.default.addCCBtn();

              case 47:
                _context9.next = 49;
                return _newTicket.default.addCCInput();

              case 49:
                _context9.next = 51;
                return _newTicket.default.fillAddCCInput(MOCK_DATA.newTicket.email);

              case 51:
                _context9.next = 53;
                return _newTicket.default.addCCEmail();

              case 53:
                _context9.next = 55;
                return _newTicket.default.hideCCBtn();

              case 55:
                assert.ok(_newTicket.default.descriptionContent.includes(MOCK_DATA.newTicket.description), 'Description contains given text as expected');
                assert.ok(_newTicket.default.descriptionContent.includes(_cannedResponsesWithDetails.default[1].content), 'Description contains canned response text as expected');
                assert.equal(_newTicket.default.attachmentsCount, 1 + 1, '2 attachments (1 from canned response, 1 from manual)  are found as expected'); // once ember route is completed for ticket details page we need to assert for route navigation check

                _context9.next = 60;
                return _newTicket.default.save();

              case 60:
                assert.ok(successFlashSpy.calledOnce, 'Ticket is created');

              case 61:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9);
      }));

      return function (_x6) {
        return _ref10.apply(this, arguments);
      };
    }()); // 6.

    (0, _qunit.test)('Should create new requester when create requester button is clicked with data ', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var requesterName;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                loadDefaultFields();
                _context10.next = 3;
                return renderComponent();

              case 3:
                assert.ok(_newTicket.default.hasRequestor);
                _context10.next = 6;
                return _newTicket.default.fillSubject(MOCK_DATA.newTicket.subject);

              case 6:
                _context10.next = 8;
                return _newTicket.default.fillDescription(MOCK_DATA.newTicket.description);

              case 8:
                _context10.next = 10;
                return _newTicket.default.requesterInput();

              case 10:
                _context10.next = 12;
                return _newTicket.default.fillRequesterInput(MOCK_DATA.newTicket.requesterName);

              case 12:
                assert.ok(document.querySelector('.add-new-requester-btn'));
                _context10.next = 15;
                return (0, _testHelpers.click)(document.querySelector('.add-new-requester-btn'));

              case 15:
                assert.ok(document.querySelector('.add-new-requester-modal'));
                _context10.next = 18;
                return _newTicket.default.fillRequesterModalFirstName(MOCK_DATA.newTicket.requesterName);

              case 18:
                _context10.next = 20;
                return _newTicket.default.fillRequesterModalEmail(MOCK_DATA.newTicket.email);

              case 20:
                _context10.next = 22;
                return _newTicket.default.requesterModalCreateButton();

              case 22:
                requesterName = document.querySelector('[data-test-field-name="requesterId"] .ember-power-select-selected-item').innerText.trim();
                assert.equal(requesterName, MOCK_DATA.newTicket.requesterInputResult);
                _context10.next = 26;
                return _newTicket.default.save();

              case 26:
                assert.ok(_newTicket.default.requesterFieldDetailsPage);

              case 27:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10);
      }));

      return function (_x7) {
        return _ref11.apply(this, arguments);
      };
    }()); // 7.

    (0, _qunit.test)('Should create new ticket and reset form when submit and new button is clicked with data', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        var successFlashSpy, statusField, urgencyField, sourceField, impactField, priorityField, requesterField;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                loadDefaultFields();
                successFlashSpy = (0, _spyFlashMessage.default)('success');
                _context11.next = 4;
                return renderComponent();

              case 4:
                _context11.next = 6;
                return _formFields.default.autocompleteSelectMultiple('requesterId', MOCK_DATA.newTicket.requesterId, '0');

              case 6:
                _context11.next = 8;
                return _newTicket.default.fillSubject(MOCK_DATA.newTicket.subject);

              case 8:
                _context11.next = 10;
                return _newTicket.default.fillDescription(MOCK_DATA.newTicket.description);

              case 10:
                _context11.next = 12;
                return _formFields.default.selectSingle("source", '0');

              case 12:
                _context11.next = 14;
                return _formFields.default.selectSingle("status", '0');

              case 14:
                _context11.next = 16;
                return _formFields.default.selectSingle("urgency", '0');

              case 16:
                _context11.next = 18;
                return _formFields.default.selectSingle("impact", '0');

              case 18:
                _context11.next = 20;
                return _formFields.default.selectSingle("priority", '0');

              case 20:
                _context11.next = 22;
                return _formFields.default.selectSingle("groupId", '0');

              case 22:
                _context11.next = 24;
                return _formFields.default.selectSingle("responderId", '0');

              case 24:
                _context11.next = 26;
                return _formFields.default.selectSingle("departmentId", '0');

              case 26:
                _context11.next = 28;
                return _newTicket.default.submitDropDown();

              case 28:
                _context11.next = 30;
                return _newTicket.default.saveAndNew();

              case 30:
                assert.ok(successFlashSpy.calledOnce); // Checking for form resets

                _context11.next = 33;
                return _formFields.default.getDataForField('status', true);

              case 33:
                statusField = _context11.sent;
                _context11.next = 36;
                return _formFields.default.getDataForField('urgency', true);

              case 36:
                urgencyField = _context11.sent;
                _context11.next = 39;
                return _formFields.default.getDataForField('source', true);

              case 39:
                sourceField = _context11.sent;
                _context11.next = 42;
                return _formFields.default.getDataForField('impact', true);

              case 42:
                impactField = _context11.sent;
                _context11.next = 45;
                return _formFields.default.getDataForField('priority', true);

              case 45:
                priorityField = _context11.sent;
                _context11.next = 48;
                return _formFields.default.getDataForField('requesterId', true);

              case 48:
                requesterField = _context11.sent;
                assert.equal(statusField.selected, 'Open', '[Status] field is selected with default value');
                assert.equal(requesterField.selected, null, '[Requester] field is reset');
                assert.equal(urgencyField.selected, 'Low', '[Urgency] field is selected with default value');
                assert.equal(sourceField.selected, 'Phone', '[Source] field is selected with default value');
                assert.equal(impactField.selected, 'Low', '[Impact] field is selected with default value');
                assert.equal(priorityField.selected, 'Low', '[Priority] field is selected with default value');

              case 55:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11);
      }));

      return function (_x8) {
        return _ref12.apply(this, arguments);
      };
    }()); // 8.

    (0, _qunit.test)('Should create new ticket with closed status when submit and new button is clicked with data', /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        var moment, nextDay, successFlashSpy, fieldDetails;
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                moment = this.owner.lookup('service:moment');
                nextDay = moment.moment().add(1, 'days').format("YYYY-MM-DD");
                successFlashSpy = (0, _spyFlashMessage.default)('success');
                _context12.next = 5;
                return renderComponent();

              case 5:
                _context12.next = 7;
                return _formFields.default.autocompleteSelectMultiple('requesterId', MOCK_DATA.newTicket.requesterId, '0');

              case 7:
                _context12.next = 9;
                return _newTicket.default.fillSubject(MOCK_DATA.newTicket.subject);

              case 9:
                _context12.next = 11;
                return _newTicket.default.fillDescription(MOCK_DATA.newTicket.description);

              case 11:
                _context12.next = 13;
                return _formFields.default.selectSingle('source', '0');

              case 13:
                _context12.next = 15;
                return _formFields.default.selectSingle('status', '3');

              case 15:
                _context12.next = 17;
                return _formFields.default.getDataForField('status', true);

              case 17:
                fieldDetails = _context12.sent;
                assert.equal(fieldDetails.selected, 'Closed', 'Updated [Status] field is selected value as Closed');
                _context12.next = 21;
                return _formFields.default.selectSingle("urgency", '0');

              case 21:
                _context12.next = 23;
                return _formFields.default.selectSingle("impact", '0');

              case 23:
                _context12.next = 25;
                return _formFields.default.selectSingle("priority", '0');

              case 25:
                _context12.next = 27;
                return _formFields.default.selectSingle("groupId", '0');

              case 27:
                _context12.next = 29;
                return _formFields.default.selectSingle("responderId", '0');

              case 29:
                _context12.next = 31;
                return _formFields.default.selectSingle("departmentId", '0');

              case 31:
                _context12.next = 33;
                return _formFields.default.selectSingle("category", '0');

              case 33:
                _context12.next = 35;
                return _newTicket.default.fillCustomTextField(MOCK_DATA.newTicket.customText);

              case 35:
                _context12.next = 37;
                return _newTicket.default.fillCustomNumberField(MOCK_DATA.newTicket.customNumber);

              case 37:
                _context12.next = 39;
                return _formFields.default.selectSingle('customFields.cust_dd_1', '1');

              case 39:
                _context12.next = 41;
                return _formFields.default.selectSingle('customFields.msf_cust_multi_dd', '1');

              case 41:
                _context12.next = 43;
                return _formFields.default.selectSingle('customFields.cust_sec_parent_dd', '2');

              case 43:
                _context12.next = 45;
                return _newTicket.default.fillCustomSection2TextField(MOCK_DATA.newTicket.customText);

              case 45:
                _context12.next = 47;
                return _formFields.default.calendarSelectSingleDate('customFields.sec_2_datetime', nextDay);

              case 47:
                _context12.next = 49;
                return _formFields.default.autocompleteSelectMultiple("tags", MOCK_DATA.newTicket.tags, '0');

              case 49:
                _context12.next = 51;
                return _newTicket.default.submitDropDown();

              case 51:
                _context12.next = 53;
                return _newTicket.default.saveAndClose();

              case 53:
                assert.ok(successFlashSpy.calledOnce);
                this.owner.destroy('service:moment');

              case 55:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x9) {
        return _ref13.apply(this, arguments);
      };
    }()); // 9.

    (0, _qunit.skip)('Should be able to associate Asset', /*#__PURE__*/function () {
      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
        var successFlashSpy;
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                loadDefaultFields();
                successFlashSpy = (0, _spyFlashMessage.default)('success');
                _context13.next = 4;
                return renderComponent();

              case 4:
                _context13.next = 6;
                return _formFields.default.autocompleteSelectMultiple("requesterId", MOCK_DATA.newTicket.requesterId, '0');

              case 6:
                _context13.next = 8;
                return _newTicket.default.fillSubject(MOCK_DATA.newTicket.subject);

              case 8:
                _context13.next = 10;
                return _newTicket.default.fillDescription(MOCK_DATA.newTicket.description);

              case 10:
                _context13.next = 12;
                return _formFields.default.selectSingle('groupId', '0');

              case 12:
                _context13.next = 14;
                return _formFields.default.selectSingle('responderId', '0');

              case 14:
                _context13.next = 16;
                return _formFields.default.selectSingle('departmentId', '0');

              case 16:
                assert.ok(_newTicket.default.hasAssociateAsset, "Associate asset link is visible");
                _context13.next = 19;
                return _newTicket.default.openAssetModal();

              case 19:
                assert.equal(_newTicket.default.assetsCount, 2, "Asset is associated"); // associating 2 dummy asset

                _context13.next = 22;
                return _newTicket.default.save();

              case 22:
                assert.ok(successFlashSpy.calledOnce, "Ticket is created");

              case 23:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13);
      }));

      return function (_x10) {
        return _ref14.apply(this, arguments);
      };
    }()); // 10.

    (0, _qunit.skip)('Should be able to delete Asset', /*#__PURE__*/function () {
      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                loadDefaultFields();
                _context14.next = 3;
                return renderComponent();

              case 3:
                assert.ok(_newTicket.default.hasAssociateAsset, "Associate asset link is visible");
                _context14.next = 6;
                return _newTicket.default.openAssetModal();

              case 6:
                assert.equal(_newTicket.default.assetsCount, 2);
                _context14.next = 9;
                return _newTicket.default.removeAsset();

              case 9:
                assert.equal(_newTicket.default.assetsCount, 1, 'Asset is removed');

              case 10:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14);
      }));

      return function (_x11) {
        return _ref15.apply(this, arguments);
      };
    }()); // 11.

    (0, _qunit.test)('Verify form submit failure case - Closure rules (400 Bad Request)', /*#__PURE__*/function () {
      var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {
        var dangerFlashSpy;
        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                loadDefaultFields();
                dangerFlashSpy = (0, _spyFlashMessage.default)('danger'); // Mocking the api to throw error

                this.server.post('/api/_/tickets', {
                  errors: [MOCK_ERRORS.CLOSURE_RULES_FAILURE]
                }, 400);
                _context15.next = 5;
                return renderComponent();

              case 5:
                _context15.next = 7;
                return _formFields.default.autocompleteSelectMultiple('requesterId', MOCK_DATA.newTicket.requesterId, '0');

              case 7:
                _context15.next = 9;
                return _newTicket.default.fillSubject(MOCK_DATA.newTicket.subject);

              case 9:
                _context15.next = 11;
                return _newTicket.default.fillDescription(MOCK_DATA.newTicket.description);

              case 11:
                _context15.next = 13;
                return _formFields.default.selectSingle('groupId', '0');

              case 13:
                _context15.next = 15;
                return _formFields.default.selectSingle('responderId', '0');

              case 15:
                _context15.next = 17;
                return _formFields.default.selectSingle('departmentId', '0');

              case 17:
                _context15.next = 19;
                return _newTicket.default.save();

              case 19:
                assert.ok(dangerFlashSpy.calledOnceWithExactly(this.intl.t('fs.tickets.errors.closure_rules_generic_error'), {
                  destroyOnClick: false,
                  sticky: true
                }), 'Ticket creation failed with closure rules error, as expected, with 400');

              case 20:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      return function (_x12) {
        return _ref16.apply(this, arguments);
      };
    }()); // 12.

    (0, _qunit.test)('Verify form submit failure case - Business rules (400 Bad Request)', /*#__PURE__*/function () {
      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(assert) {
        var dangerFlashSpy;
        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                loadDefaultFields();
                dangerFlashSpy = (0, _spyFlashMessage.default)('danger'); // Mocking the api to throw error

                this.server.post('/api/_/tickets', {
                  errors: [MOCK_ERRORS.BUSINESS_RULES_FAILURE]
                }, 400);
                _context16.next = 5;
                return renderComponent();

              case 5:
                _context16.next = 7;
                return _formFields.default.autocompleteSelectMultiple('requesterId', MOCK_DATA.newTicket.requesterId, '0');

              case 7:
                _context16.next = 9;
                return _newTicket.default.fillSubject(MOCK_DATA.newTicket.subject);

              case 9:
                _context16.next = 11;
                return _newTicket.default.fillDescription(MOCK_DATA.newTicket.description);

              case 11:
                _context16.next = 13;
                return _formFields.default.selectSingle('groupId', '0');

              case 13:
                _context16.next = 15;
                return _formFields.default.selectSingle('responderId', '0');

              case 15:
                _context16.next = 17;
                return _formFields.default.selectSingle('departmentId', '0');

              case 17:
                _context16.next = 19;
                return _newTicket.default.save();

              case 19:
                assert.ok(dangerFlashSpy.calledOnce, 'Ticket creation failed with business rules error, as expected, with 400');

              case 20:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      return function (_x13) {
        return _ref17.apply(this, arguments);
      };
    }()); // 13.

    (0, _qunit.test)('Verify form submit failure case - (403 Forbidden)', /*#__PURE__*/function () {
      var _ref18 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(assert) {
        var dangerFlashSpy;
        return regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                loadDefaultFields();
                dangerFlashSpy = (0, _spyFlashMessage.default)('danger'); // Mocking the api to throw error

                this.server.post('/api/_/tickets', {
                  errors: [MOCK_ERRORS.FORBIDDEN]
                }, 403);
                _context17.next = 5;
                return renderComponent();

              case 5:
                _context17.next = 7;
                return _formFields.default.autocompleteSelectMultiple('requesterId', MOCK_DATA.newTicket.requesterId, '0');

              case 7:
                _context17.next = 9;
                return _newTicket.default.fillSubject(MOCK_DATA.newTicket.subject);

              case 9:
                _context17.next = 11;
                return _newTicket.default.fillDescription(MOCK_DATA.newTicket.description);

              case 11:
                _context17.next = 13;
                return _formFields.default.selectSingle('groupId', '0');

              case 13:
                _context17.next = 15;
                return _formFields.default.selectSingle('responderId', '0');

              case 15:
                _context17.next = 17;
                return _formFields.default.selectSingle('departmentId', '0');

              case 17:
                _context17.next = 19;
                return _newTicket.default.save();

              case 19:
                assert.ok(dangerFlashSpy.calledOnceWithExactly(this.intl.t('fs.tickets.errors.invalid_privilege'), undefined), 'Ticket creation failed with unauthorized error, as expected, with 403');

              case 20:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      return function (_x14) {
        return _ref18.apply(this, arguments);
      };
    }()); // 14.

    (0, _qunit.test)('Verify form submit failure case - (500 Server Error)', /*#__PURE__*/function () {
      var _ref19 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(assert) {
        var dangerFlashSpy;
        return regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                loadDefaultFields();
                dangerFlashSpy = (0, _spyFlashMessage.default)('danger'); // Mocking the api to throw error

                this.server.post('/api/_/tickets', {
                  errors: [MOCK_ERRORS.SERVER_ERROR]
                }, 500);
                _context18.next = 5;
                return renderComponent();

              case 5:
                _context18.next = 7;
                return _formFields.default.autocompleteSelectMultiple('requesterId', MOCK_DATA.newTicket.requesterId, '0');

              case 7:
                _context18.next = 9;
                return _newTicket.default.fillSubject(MOCK_DATA.newTicket.subject);

              case 9:
                _context18.next = 11;
                return _newTicket.default.fillDescription(MOCK_DATA.newTicket.description);

              case 11:
                _context18.next = 13;
                return _formFields.default.selectSingle('groupId', '0');

              case 13:
                _context18.next = 15;
                return _formFields.default.selectSingle('responderId', '0');

              case 15:
                _context18.next = 17;
                return _formFields.default.selectSingle('departmentId', '0');

              case 17:
                _context18.next = 19;
                return _newTicket.default.save();

              case 19:
                assert.ok(dangerFlashSpy.calledOnceWithExactly(this.intl.t('fs.errors.something_went_wrong'), undefined), 'Ticket creation failed with server error, as expected, with 500');

              case 20:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      return function (_x15) {
        return _ref19.apply(this, arguments);
      };
    }()); // 15.

    (0, _qunit.test)('Should be able to add CC email', /*#__PURE__*/function () {
      var _ref20 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19(assert) {
        var addCCWrapperCount;
        return regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                loadDefaultFields();
                _context19.next = 3;
                return renderComponent();

              case 3:
                assert.ok(document.querySelector('#add-cc-btn'), 'Should show Add CC button');
                _context19.next = 6;
                return _newTicket.default.addCCBtn();

              case 6:
                assert.ok(document.querySelector('#hide-cc-btn'), 'Should show Hide CC button after clicking add CC button');
                _context19.next = 9;
                return _newTicket.default.requesterInput();

              case 9:
                _context19.next = 11;
                return _newTicket.default.addCCInput();

              case 11:
                _context19.next = 13;
                return _newTicket.default.fillAddCCInput(MOCK_DATA.newTicket.email);

              case 13:
                _context19.next = 15;
                return _newTicket.default.addCCEmail();

              case 15:
                assert.equal(_newTicket.default.addCCText, MOCK_DATA.newTicket.email);
                _context19.next = 18;
                return _newTicket.default.hideCCBtn();

              case 18:
                assert.ok(document.querySelector('#add-cc-btn'), 'Should show Add CC button after clicking Hide CC button');
                addCCWrapperCount = document.querySelector('.add-cc-wrapper').childElementCount;
                assert.equal(addCCWrapperCount, 0);

              case 21:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19);
      }));

      return function (_x16) {
        return _ref20.apply(this, arguments);
      };
    }()); // 16.

    (0, _qunit.test)('it should be able to handle marketplace interface api trigger', /*#__PURE__*/function () {
      var _ref21 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20(assert) {
        var apiOptions;
        return regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                loadDefaultFields();
                _context20.next = 3;
                return renderComponent('newTicket');

              case 3:
                assert.ok(_newTicket.default.hasSubject);
                apiOptions = {
                  field: 'subject',
                  fieldValue: null
                };
                this.marketplaceAdapter.triggerAction('newTicket', 'hide', apiOptions);
                _context20.next = 8;
                return (0, _testHelpers.settled)();

              case 8:
                assert.ok(_newTicket.default.subjectHidden);
                this.marketplaceAdapter.triggerAction('newTicket', 'show', apiOptions);
                _context20.next = 12;
                return (0, _testHelpers.settled)();

              case 12:
                assert.ok(_newTicket.default.hasSubject);

              case 13:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20, this);
      }));

      return function (_x17) {
        return _ref21.apply(this, arguments);
      };
    }()); // 17.

    (0, _qunit.test)('it should be able to handle marketplace setValue api trigger', /*#__PURE__*/function () {
      var _ref22 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21(assert) {
        return regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                loadDefaultFields();
                _context21.next = 3;
                return renderComponent('newTicket');

              case 3:
                this.marketplaceAdapter.triggerAction('newTicket', 'setValue', {
                  field: 'subject',
                  fieldValue: 'test subject'
                });
                this.marketplaceAdapter.triggerAction('newTicket', 'setValue', {
                  field: 'customFields.source',
                  fieldValue: '1'
                });
                _context21.next = 7;
                return (0, _testHelpers.settled)();

              case 7:
                assert.dom('[data-test-field-name="subject"] input').hasValue('test subject');
                assert.dom('[data-test-field-name="source"] .ember-power-select-selected-item').hasText('Phone');

              case 9:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21, this);
      }));

      return function (_x18) {
        return _ref22.apply(this, arguments);
      };
    }()); // 18.

    (0, _qunit.test)('should be able select department field when rendered as auto complete field', /*#__PURE__*/function () {
      var _ref23 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22(assert) {
        var accountWithDepartmentSearchEnabled, department, departmentField;
        return regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                loadDefaultFields();
                accountWithDepartmentSearchEnabled = {
                  features: ['department_search']
                };
                (0, _stubCurrentAccount.stubCurrentAccount)(accountWithDepartmentSearchEnabled);
                _context22.next = 5;
                return renderComponent();

              case 5:
                department = _autocompleteDepartments.default.departments[0];
                _context22.next = 8;
                return _formFields.default.autocompleteSelectMultiple('departmentId', department.value, '0');

              case 8:
                _context22.next = 10;
                return _formFields.default.getDataForField('departmentId', true);

              case 10:
                departmentField = _context22.sent;
                assert.equal(departmentField.selected, department.value, '[Department] field is selected');
                this.owner.destroy('service:current-account');

              case 13:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22, this);
      }));

      return function (_x19) {
        return _ref23.apply(this, arguments);
      };
    }()); // 19.

    (0, _qunit.test)('Should be able to open add new requester modal through add new requester link', /*#__PURE__*/function () {
      var _ref24 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23(assert) {
        return regeneratorRuntime.wrap(function _callee23$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                loadDefaultFields();
                _context23.next = 3;
                return renderComponent();

              case 3:
                _context23.next = 5;
                return _newTicket.default.addNewRequesterLink();

              case 5:
                assert.ok(_newTicket.default.hasAddNewRequesterModal);

              case 6:
              case "end":
                return _context23.stop();
            }
          }
        }, _callee23);
      }));

      return function (_x20) {
        return _ref24.apply(this, arguments);
      };
    }()); // 20.

    (0, _qunit.test)('Should not show type field when visible_type_field is set to false by ticket form fields API', /*#__PURE__*/function () {
      var _ref25 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24(assert) {
        return regeneratorRuntime.wrap(function _callee24$(_context24) {
          while (1) {
            switch (_context24.prev = _context24.next) {
              case 0:
                this.server.get('/api/_/ticket_form_fields', function () {
                  return {
                    meta: {
                      visible_type_field: 'false'
                    },
                    ticket_fields: _defaultFormFields.default
                  };
                });
                _context24.next = 3;
                return renderComponent();

              case 3:
                assert.notOk(_newTicket.default.hasTypeField);

              case 4:
              case "end":
                return _context24.stop();
            }
          }
        }, _callee24, this);
      }));

      return function (_x21) {
        return _ref25.apply(this, arguments);
      };
    }()); // 21.

    (0, _qunit.test)('Should show type field when visible_type_field is set to true by ticket form fields API', /*#__PURE__*/function () {
      var _ref26 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee25(assert) {
        var typeField;
        return regeneratorRuntime.wrap(function _callee25$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                this.server.get('/api/_/ticket_form_fields', function () {
                  return {
                    meta: {
                      visible_type_field: 'true'
                    },
                    ticket_fields: _defaultFormFields.default
                  };
                });
                _context25.next = 3;
                return renderComponent();

              case 3:
                assert.ok(_newTicket.default.hasTypeField);
                _context25.next = 6;
                return _formFields.default.getDataForField('type', true);

              case 6:
                typeField = _context25.sent;
                assert.equal(typeField.selected, this.intl.moduleName('incident', {
                  capital: true
                }), '[Type] field is selected with default value Incident');

              case 8:
              case "end":
                return _context25.stop();
            }
          }
        }, _callee25, this);
      }));

      return function (_x22) {
        return _ref26.apply(this, arguments);
      };
    }()); // 22.

    (0, _qunit.test)('Should show request for field when type selected is Service request', /*#__PURE__*/function () {
      var _ref27 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee26(assert) {
        var typeField;
        return regeneratorRuntime.wrap(function _callee26$(_context26) {
          while (1) {
            switch (_context26.prev = _context26.next) {
              case 0:
                this.server.get('/api/_/ticket_form_fields', function () {
                  return {
                    meta: {
                      visible_type_field: 'true'
                    },
                    ticket_fields: _defaultFormFields.default
                  };
                });
                _context26.next = 3;
                return renderComponent();

              case 3:
                assert.notOk(_newTicket.default.hasRequestedFor); // When type is Incident this field should be hidden

                _context26.next = 6;
                return _formFields.default.selectSingle('type', '1');

              case 6:
                _context26.next = 8;
                return _formFields.default.getDataForField('type', true);

              case 8:
                typeField = _context26.sent;
                assert.equal(typeField.selected, this.intl.moduleName('service_request', {
                  capital: true
                }), '[Type] field is selected with Service Request');
                assert.ok(_newTicket.default.hasRequestedFor);

              case 11:
              case "end":
                return _context26.stop();
            }
          }
        }, _callee26, this);
      }));

      return function (_x23) {
        return _ref27.apply(this, arguments);
      };
    }()); // 23.

    (0, _qunit.test)('Should be able to select request for field when type selected is Service request', /*#__PURE__*/function () {
      var _ref28 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee27(assert) {
        var requestForField;
        return regeneratorRuntime.wrap(function _callee27$(_context27) {
          while (1) {
            switch (_context27.prev = _context27.next) {
              case 0:
                this.server.get('/search/autocomplete/requesters', function () {
                  return {
                    results: _requesters.default
                  };
                });
                this.server.get('/api/_/ticket_form_fields', function () {
                  return {
                    meta: {
                      visible_type_field: 'true'
                    },
                    ticket_fields: _defaultFormFields.default
                  };
                });
                _context27.next = 4;
                return renderComponent();

              case 4:
                assert.notOk(_newTicket.default.hasRequestedFor); // When type is Incident this field should be hidden

                _context27.next = 7;
                return _formFields.default.selectSingle('type', '1');

              case 7:
                _context27.next = 9;
                return _formFields.default.autocompleteSelectMultiple('requestedForId', _requesters.default[0].details, '0');

              case 9:
                _context27.next = 11;
                return _formFields.default.getDataForField('requestedForId', true);

              case 11:
                requestForField = _context27.sent;
                assert.equal(requestForField.selected, _requesters.default[0].details, 'Will be able update [Request For] field when type is Service Request');

              case 13:
              case "end":
                return _context27.stop();
            }
          }
        }, _callee27, this);
      }));

      return function (_x24) {
        return _ref28.apply(this, arguments);
      };
    }()); //24.

    (0, _qunit.test)('Should be able to reset the agent upon changing group in which agent is not present', /*#__PURE__*/function () {
      var _ref29 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee28(assert) {
        var responderId1, responderField;
        return regeneratorRuntime.wrap(function _callee28$(_context28) {
          while (1) {
            switch (_context28.prev = _context28.next) {
              case 0:
                loadDefaultFields();
                _context28.next = 3;
                return renderComponent();

              case 3:
                _context28.next = 5;
                return _formFields.default.selectSingle('groupId', '1');

              case 5:
                _context28.next = 7;
                return _formFields.default.selectSingle('responderId', '1');

              case 7:
                _context28.next = 9;
                return _formFields.default.getDataForField('responderId', true);

              case 9:
                responderId1 = _context28.sent;
                assert.equal(responderId1.selected, 'Agent One');
                _context28.next = 13;
                return _formFields.default.selectSingle('groupId', '2');

              case 13:
                _context28.next = 15;
                return _formFields.default.getDataForField('responderId', true);

              case 15:
                responderField = _context28.sent;
                assert.equal(responderField.selected, null);

              case 17:
              case "end":
                return _context28.stop();
            }
          }
        }, _callee28);
      }));

      return function (_x25) {
        return _ref29.apply(this, arguments);
      };
    }()); //25.

    (0, _qunit.test)('Should not reset the agent upon changing group in which agent is present', /*#__PURE__*/function () {
      var _ref30 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee29(assert) {
        var responderId1, responderId2;
        return regeneratorRuntime.wrap(function _callee29$(_context29) {
          while (1) {
            switch (_context29.prev = _context29.next) {
              case 0:
                loadDefaultFields();
                _context29.next = 3;
                return renderComponent();

              case 3:
                _context29.next = 5;
                return _formFields.default.selectSingle('groupId', '1');

              case 5:
                _context29.next = 7;
                return _formFields.default.selectSingle('responderId', '1');

              case 7:
                _context29.next = 9;
                return _formFields.default.getDataForField('responderId', true);

              case 9:
                responderId1 = _context29.sent;
                assert.equal(responderId1.selected, 'Agent One');
                _context29.next = 13;
                return _formFields.default.selectSingle('groupId', '3');

              case 13:
                _context29.next = 15;
                return _formFields.default.getDataForField('responderId', true);

              case 15:
                responderId2 = _context29.sent;
                assert.equal(responderId2.selected, 'Agent One');

              case 17:
              case "end":
                return _context29.stop();
            }
          }
        }, _callee29);
      }));

      return function (_x26) {
        return _ref30.apply(this, arguments);
      };
    }()); //26.

    (0, _qunit.test)('Should reset the child section value upon changing parent section', /*#__PURE__*/function () {
      var _ref31 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee30(assert) {
        var custSecParentDd2, custSecChildDd2, custSecParentDd, custSecParentDd3;
        return regeneratorRuntime.wrap(function _callee30$(_context30) {
          while (1) {
            switch (_context30.prev = _context30.next) {
              case 0:
                _context30.next = 2;
                return renderComponent();

              case 2:
                _context30.next = 4;
                return _formFields.default.selectSingle('customFields.cust_sec_parent_dd_2', '1');

              case 4:
                _context30.next = 6;
                return _formFields.default.getDataForField('customFields.cust_sec_parent_dd_2', true);

              case 6:
                custSecParentDd2 = _context30.sent;
                assert.equal(custSecParentDd2.selected, 'First Choice');
                _context30.next = 10;
                return _newTicket.default.fillSection3TextField('Sec 3 Text 1');

              case 10:
                assert.ok(_newTicket.default.fillSection3TextField, 'Sec 3 Text 1');
                _context30.next = 13;
                return _formFields.default.selectSingle('customFields.sec_3_dd_1', 1);

              case 13:
                _context30.next = 15;
                return _formFields.default.getDataForField('customFields.sec_3_dd_1', true);

              case 15:
                custSecChildDd2 = _context30.sent;
                assert.equal(custSecChildDd2.selected, '1 Choice'); // Updating section parent from first choice to second choice which will reset the previously selected choice `First choice` child fields to null

                _context30.next = 19;
                return _formFields.default.selectSingle('customFields.cust_sec_parent_dd_2', '2');

              case 19:
                _context30.next = 21;
                return _formFields.default.getDataForField('customFields.cust_sec_parent_dd_2', true);

              case 21:
                custSecParentDd = _context30.sent;
                assert.equal(custSecParentDd.selected, 'Second Choice'); // Again selecting `First choice` to assert child fields with null

                _context30.next = 25;
                return _formFields.default.selectSingle('customFields.cust_sec_parent_dd_2', '1');

              case 25:
                _context30.next = 27;
                return _formFields.default.getDataForField('customFields.cust_sec_parent_dd_2', true);

              case 27:
                custSecParentDd3 = _context30.sent;
                assert.equal(custSecParentDd3.selected, 'First Choice');
                assert.ok(_newTicket.default.fillSection3TextField, null);
                assert.ok(custSecChildDd2.selected, null);

              case 31:
              case "end":
                return _context30.stop();
            }
          }
        }, _callee30);
      }));

      return function (_x27) {
        return _ref31.apply(this, arguments);
      };
    }()); // 27.

    (0, _qunit.test)('Should not show add new requester field when agent_cannot_add_requester is set to true', /*#__PURE__*/function () {
      var _ref32 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee31(assert) {
        var accountWithAgentCannotAddRequesterEnabled;
        return regeneratorRuntime.wrap(function _callee31$(_context31) {
          while (1) {
            switch (_context31.prev = _context31.next) {
              case 0:
                loadDefaultFields();
                accountWithAgentCannotAddRequesterEnabled = {
                  temp_features: ['agent_cannot_add_requester']
                };
                (0, _stubCurrentAccount.stubCurrentAccount)(accountWithAgentCannotAddRequesterEnabled);
                _context31.next = 5;
                return renderComponent();

              case 5:
                assert.notOk(_newTicket.default.hasAddNewRequesterLink);

              case 6:
              case "end":
                return _context31.stop();
            }
          }
        }, _callee31);
      }));

      return function (_x28) {
        return _ref32.apply(this, arguments);
      };
    }()); // 28.

    (0, _qunit.test)('Should create new ticket with resolved status when submit and resolve button is clicked with data', /*#__PURE__*/function () {
      var _ref33 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee32(assert) {
        var moment, nextDay, successFlashSpy, fieldDetails;
        return regeneratorRuntime.wrap(function _callee32$(_context32) {
          while (1) {
            switch (_context32.prev = _context32.next) {
              case 0:
                moment = this.owner.lookup('service:moment');
                nextDay = moment.moment(new Date()).add(1, "days").format("YYYY-MM-DD");
                successFlashSpy = (0, _spyFlashMessage.default)('success');
                _context32.next = 5;
                return renderComponent();

              case 5:
                _context32.next = 7;
                return _formFields.default.autocompleteSelectMultiple('requesterId', MOCK_DATA.newTicket.requesterId, '0');

              case 7:
                _context32.next = 9;
                return _newTicket.default.fillSubject(MOCK_DATA.newTicket.subject);

              case 9:
                _context32.next = 11;
                return _newTicket.default.fillDescription(MOCK_DATA.newTicket.description);

              case 11:
                _context32.next = 13;
                return _formFields.default.selectSingle('source', '0');

              case 13:
                _context32.next = 15;
                return _formFields.default.selectSingle('status', '2');

              case 15:
                _context32.next = 17;
                return _formFields.default.getDataForField('status', true);

              case 17:
                fieldDetails = _context32.sent;
                assert.equal(fieldDetails.selected, 'Resolved', 'Updated [Status] field is selected value as Resolved');
                _context32.next = 21;
                return _formFields.default.selectSingle("urgency", '0');

              case 21:
                _context32.next = 23;
                return _formFields.default.selectSingle("impact", '0');

              case 23:
                _context32.next = 25;
                return _formFields.default.selectSingle("priority", '0');

              case 25:
                _context32.next = 27;
                return _formFields.default.selectSingle("groupId", '0');

              case 27:
                _context32.next = 29;
                return _formFields.default.selectSingle("responderId", '0');

              case 29:
                _context32.next = 31;
                return _formFields.default.selectSingle("departmentId", '0');

              case 31:
                _context32.next = 33;
                return _formFields.default.selectSingle("category", '0');

              case 33:
                _context32.next = 35;
                return _newTicket.default.fillCustomTextField(MOCK_DATA.newTicket.customText);

              case 35:
                _context32.next = 37;
                return _newTicket.default.fillCustomNumberField(MOCK_DATA.newTicket.customNumber);

              case 37:
                _context32.next = 39;
                return _formFields.default.selectSingle('customFields.cust_dd_1', '1');

              case 39:
                _context32.next = 41;
                return _formFields.default.selectSingle('customFields.msf_cust_multi_dd', '1');

              case 41:
                _context32.next = 43;
                return _formFields.default.selectSingle('customFields.cust_sec_parent_dd', '2');

              case 43:
                _context32.next = 45;
                return _newTicket.default.fillCustomSection2TextField(MOCK_DATA.newTicket.customText);

              case 45:
                _context32.next = 47;
                return _formFields.default.calendarSelectSingleDate('customFields.sec_2_datetime', nextDay);

              case 47:
                _context32.next = 49;
                return _formFields.default.autocompleteSelectMultiple("tags", MOCK_DATA.newTicket.tags, '0');

              case 49:
                _context32.next = 51;
                return _newTicket.default.submitDropDown();

              case 51:
                _context32.next = 53;
                return _newTicket.default.saveAndResolve();

              case 53:
                assert.ok(successFlashSpy.calledOnce);
                this.owner.destroy('service:moment');

              case 55:
              case "end":
                return _context32.stop();
            }
          }
        }, _callee32, this);
      }));

      return function (_x29) {
        return _ref33.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/ui-components/common-module/new-form/side-modal-flows-test", ["qunit", "ember-qunit", "@ember/test-helpers", "sinon", "ember-cli-mirage/test-support", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/stub-current-account", "freshservice/tests/lib/stub-router", "freshservice/tests/pages/components/utils/form-fields", "freshservice/tests/pages/components/module-tickets/new-ticket", "freshservice/mirage/fixtures/ticket-templates", "freshservice/mirage/fixtures/tickets", "freshservice/mirage/fixtures/requesters", "freshservice/mirage/fixtures/default-form-fields", "freshservice/utils/common", "freshservice/constants/tickets/module-config", "freshservice/constants/tickets/new-ticket", "freshservice/constants/common/form-field-configs/new-entity/ticket"], function (_qunit, _emberQunit, _testHelpers, _sinon, _testSupport, _sinonContext, _stubCurrentAccount, _stubRouter, _formFields, _newTicket, _ticketTemplates, _tickets, _requesters, _defaultFormFields, _common, _moduleConfig, _newTicket2, _ticket) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

  function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  var hasAllTypesOfFields = function hasAllTypesOfFields(assert) {
    var assertions = [].concat(_toConsumableArray(_newTicket.default.allTypesOfFields.default), _toConsumableArray(_newTicket.default.allTypesOfFields.custom), [_newTicket.default.allTypesOfFields.additional]);
    assertions.forEach(function (assertion) {
      return assert.ok(assertion);
    });
    assert.ok(_newTicket.default.customContentFields.length > 0);
  };

  var assertAllFieldValues = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert, assertionMessage) {
      var statusField, urgencyField, sourceField, impactField, priorityField, categoryField, subCategoryField, itemCategoryField, custSecParentDd2, custSecParentDd;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return _formFields.default.getDataForField('status', true);

            case 2:
              statusField = _context.sent;
              _context.next = 5;
              return _formFields.default.getDataForField('urgency', true);

            case 5:
              urgencyField = _context.sent;
              _context.next = 8;
              return _formFields.default.getDataForField('source', true);

            case 8:
              sourceField = _context.sent;
              _context.next = 11;
              return _formFields.default.getDataForField('impact', true);

            case 11:
              impactField = _context.sent;
              _context.next = 14;
              return _formFields.default.getDataForField('priority', true);

            case 14:
              priorityField = _context.sent;
              _context.next = 17;
              return _formFields.default.getDataForField('category', true);

            case 17:
              categoryField = _context.sent;
              _context.next = 20;
              return _formFields.default.getDataForField('subCategory', true);

            case 20:
              subCategoryField = _context.sent;
              _context.next = 23;
              return _formFields.default.getDataForField('itemCategory', true);

            case 23:
              itemCategoryField = _context.sent;
              _context.next = 26;
              return _formFields.default.getDataForField('customFields.cust_sec_parent_dd_2', true);

            case 26:
              custSecParentDd2 = _context.sent;
              _context.next = 29;
              return _formFields.default.getDataForField('customFields.cust_sec_parent_dd', true);

            case 29:
              custSecParentDd = _context.sent;
              assert.equal(statusField.selected, 'Open', '[Status] field is ' + assertionMessage);
              assert.equal(urgencyField.selected, null, '[Urgency] field is ' + assertionMessage);
              assert.equal(sourceField.selected, 'Phone', '[Source] field is ' + assertionMessage);
              assert.equal(impactField.selected, null, '[Impact] field is ' + assertionMessage);
              assert.equal(priorityField.selected, 'Low', '[Priority] field is ' + assertionMessage);
              assert.equal(_newTicket.default.descriptionContent, 'Test description', '[Description] field is ' + assertionMessage);
              assert.equal(categoryField.selected, 'Hardware', '[Category] field is ' + assertionMessage);
              assert.equal(subCategoryField.selected, 'Computer', '[Sub category] field is ' + assertionMessage);
              assert.equal(itemCategoryField.selected, 'Mac', '[Item category] field is ' + assertionMessage);
              assert.equal(_newTicket.default.customTextFieldContent, 'Custom Text', '[Custom Text Field] field is ' + assertionMessage);
              assert.equal(_newTicket.default.customParaFieldContent, 'Custom Para', '[Custom Para Field] field is ' + assertionMessage);
              assert.equal(_newTicket.default.customCheckboxFieldValue, true, '[Custom Checkbox Field] field is ' + assertionMessage);
              assert.equal(custSecParentDd2.selected, 'First Choice', '[Section field parent dropdown 2] field is ' + assertionMessage);
              assert.equal(_newTicket.default.section3TextField1Content, 'Sec 3 Text 1', '[Section field 3 Text Field] field is ' + assertionMessage);
              assert.equal(_newTicket.default.section3ParaField1Content, 'Sec 3 Para 1', '[Section field 3 Para Field] field is ' + assertionMessage);
              assert.equal(_newTicket.default.section3CheckboxFieldValue, true, '[Section field 3 Checkbox] field is ' + assertionMessage);
              assert.equal(_newTicket.default.section3NumberFieldValue, 3, '[Section field 3 Number] field is ' + assertionMessage);
              assert.equal(custSecParentDd.selected, 'Second Choice', '[Section field parent dropdown] field is ' + assertionMessage);
              assert.equal(_newTicket.default.section2TextField1Content, 'Sec 2 Text 1', '[Section field 2 Text Field] field is ' + assertionMessage);

            case 49:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function assertAllFieldValues(_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }();

  var getTicketObject = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      var ticketPayload,
          context,
          ticketModel,
          _args2 = arguments;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              ticketPayload = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};
              context = (0, _testHelpers.getContext)();
              _context2.next = 4;
              return Ember.run(function () {
                if (ticketPayload.id) {
                  context.store.pushPayload({
                    'ticket': ticketPayload
                  });
                  return context.store.peekRecord('ticket', ticketPayload.id);
                } else {
                  return context.store.createRecord('ticket', ticketPayload);
                }
              });

            case 4:
              ticketModel = _context2.sent;
              return _context2.abrupt("return", ticketModel);

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function getTicketObject() {
      return _ref3.apply(this, arguments);
    };
  }();

  var renderComponent = /*#__PURE__*/function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(renderType, parentTicket) {
      var context;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              context = (0, _testHelpers.getContext)();
              context.set('renderType', renderType);
              context.set('parentTicket', parentTicket);
              _context3.next = 5;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                
              		<UiComponents::UiModal
              			@toggleModal        = {{true}}
              			@closeOnEscape      = {{false}}
              			@showSubmit         = {{false}}
              			@showCancel			= {{false}}
              			@defaultModal       = {{false}}
              			@cancelConfirmation = {{false}}
              			@sideModalDirection = 'right'
              			@closeOnOutsideClick= {{false}}>
              			<UiComponents::CommonModule::NewForm
              				@config={{this.config}}
              				@buttonsTargetId="form-footer"
              				@renderType = {{this.renderType}}
              				@parentTicket = {{this.parentTicket}}
              				@saveCallback = {{this.saveCallback}}
              				@cancelCallback = {{this.cancelCallback}}/>
              			<div id='form-footer' class='form-footer'></div>
              		</UiComponents::UiModal>
              		
              */
              {
                id: "XwQTJjRf",
                block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\"],[5,\"ui-components/ui-modal\",[],[[\"@toggleModal\",\"@closeOnEscape\",\"@showSubmit\",\"@showCancel\",\"@defaultModal\",\"@cancelConfirmation\",\"@sideModalDirection\",\"@closeOnOutsideClick\"],[true,false,false,false,false,false,\"right\",false]],{\"statements\":[[0,\"\\n\\t\\t\\t\"],[5,\"ui-components/common-module/new-form\",[],[[\"@config\",\"@buttonsTargetId\",\"@renderType\",\"@parentTicket\",\"@saveCallback\",\"@cancelCallback\"],[[23,0,[\"config\"]],\"form-footer\",[23,0,[\"renderType\"]],[23,0,[\"parentTicket\"]],[23,0,[\"saveCallback\"]],[23,0,[\"cancelCallback\"]]]]],[0,\"\\n\\t\\t\\t\"],[7,\"div\",true],[10,\"id\",\"form-footer\"],[10,\"class\",\"form-footer\"],[8],[9],[0,\"\\n\\t\\t\"]],\"parameters\":[]}],[0,\"\\n\\t\\t\"]],\"hasEval\":false}",
                meta: {}
              }));

            case 5:
              _context3.next = 7;
              return (0, _testHelpers.settled)();

            case 7:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function renderComponent(_x3, _x4) {
      return _ref4.apply(this, arguments);
    };
  }();

  var SUBJECT_OF_TICKET_WITH_ALL_CUSTOM_FIELDS = 'Test ticket (With all custom fields set)';
  var MOCK_DATA = {
    newTicket: {
      requesterId: 'support@freshservice.com'
    }
  };

  var loadDefaultFields = function loadDefaultFields() {
    var context = (0, _testHelpers.getContext)();
    context.server.get('/api/_/ticket_form_fields', function () {
      return {
        ticket_fields: _defaultFormFields.default
      };
    });
  };

  (0, _qunit.module)('Integration | Component | ui-components/common-module/new-form - Side Modal Flows', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
      var enabledFeatures;
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              enabledFeatures = {
                temp_features: ['ember_ticket_show'],
                features: ['form_templates']
              };
              (0, _stubCurrentAccount.stubCurrentAccount)(enabledFeatures);
              (0, _stubRouter.stubRouter)();
              this.set('config', {
                module: _moduleConfig.MODULE_CONFIG.module,
                excludedFields: _newTicket2.TICKET_EXCLUDED_FIELDS,
                defaultSelectedOptions: _newTicket2.TICKET_DEFAULT_SELECTED_OPTIONS,
                listView: 'tickets.view',
                detailsView: _common.MODULE_URLS.tickets,
                fieldsMap: _newTicket2.NEW_TICKET_FIELDS_MAP,
                fieldConfig: _ticket.NEW_TICKET_FILED_CONFIG
              });
              this.set('saveCallback', _sinon.default.spy());
              this.set('cancelCallback', _sinon.default.spy());

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    })));
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              this.store = this.owner.lookup('service:store');
              this.server.loadFixtures('ticketFormFields');

            case 2:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    })));
    hooks.afterEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
      return regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              this.store.unloadAll('ticket');
              this.store.unloadAll('ticket-form-field');
              this.owner.destroy('service:store');

            case 3:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    })));
    (0, _qunit.test)('Should show all fields when new form is rendered as side modal', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return renderComponent(_newTicket2.RENDER_TYPES.sideModal);

              case 2:
                hasAllTypesOfFields(assert);

              case 3:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      return function (_x5) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should not show copy parent option when rendered as side modal', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                loadDefaultFields();
                _context8.next = 3;
                return renderComponent(_newTicket2.RENDER_TYPES.sideModal);

              case 3:
                assert.notOk(_newTicket.default.hasCopyParentTicketDetails);

              case 4:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }));

      return function (_x6) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should show copy parent option when rendered as side modal for child ticket association flow', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        var parentTicket;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                loadDefaultFields();
                _context9.next = 3;
                return getTicketObject();

              case 3:
                parentTicket = _context9.sent;
                _context9.next = 6;
                return renderComponent(_newTicket2.RENDER_TYPES.childTicketAssociationFlow, parentTicket);

              case 6:
                assert.ok(_newTicket.default.hasCopyParentTicketDetails);

              case 7:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9);
      }));

      return function (_x7) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should copy from parent ticket when capture from parent is selected in child-ticket-association-flow and reset the form data when capture from parent is unchecked', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var _this = this;

        var ticketWithAllTypesOfField, id, parentTicket, requesterField, statusField, urgencyField, sourceField, impactField, priorityField;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                ticketWithAllTypesOfField = Ember.A(_tickets.default).findBy('subject', SUBJECT_OF_TICKET_WITH_ALL_CUSTOM_FIELDS);
                _context10.next = 3;
                return Ember.run(function () {
                  return _this.store.pushPayload({
                    'ticket': ticketWithAllTypesOfField
                  });
                });

              case 3:
                id = ticketWithAllTypesOfField.id;
                parentTicket = this.store.peekRecord('ticket', id);
                parentTicket.customFields = ticketWithAllTypesOfField.custom_fields;
                _context10.next = 8;
                return renderComponent(_newTicket2.RENDER_TYPES.childTicketAssociationFlow, parentTicket);

              case 8:
                _context10.next = 10;
                return _newTicket.default.toggleCopyParentTktDetailsCheckbox();

              case 10:
                _context10.next = 12;
                return (0, _testHelpers.settled)();

              case 12:
                _context10.next = 14;
                return assertAllFieldValues(assert, 'copied from parent ticket');

              case 14:
                _context10.next = 16;
                return _formFields.default.getDataForField('requesterId', true);

              case 16:
                requesterField = _context10.sent;
                assert.equal(requesterField.selected, _requesters.default[0].details, '[Requester] field is copied from parent ticket');
                _context10.next = 20;
                return _newTicket.default.toggleCopyParentTktDetailsCheckbox();

              case 20:
                _context10.next = 22;
                return (0, _testHelpers.settled)();

              case 22:
                _context10.next = 24;
                return _formFields.default.getDataForField('status', true);

              case 24:
                statusField = _context10.sent;
                _context10.next = 27;
                return _formFields.default.getDataForField('urgency', true);

              case 27:
                urgencyField = _context10.sent;
                _context10.next = 30;
                return _formFields.default.getDataForField('source', true);

              case 30:
                sourceField = _context10.sent;
                _context10.next = 33;
                return _formFields.default.getDataForField('impact', true);

              case 33:
                impactField = _context10.sent;
                _context10.next = 36;
                return _formFields.default.getDataForField('priority', true);

              case 36:
                priorityField = _context10.sent;
                _context10.next = 39;
                return _formFields.default.getDataForField('requesterId', true);

              case 39:
                requesterField = _context10.sent;
                assert.equal(statusField.selected, 'Open', "[Status] field is selected with default value");
                assert.equal(requesterField.selected, null, '[Requester] field is reset');
                assert.equal(urgencyField.selected, 'Low', "[Urgency] field is selected with default value");
                assert.equal(sourceField.selected, 'Phone', "[Source] field is selected with default value");
                assert.equal(impactField.selected, 'Low', "[Impact] field is selected with default value");
                assert.equal(priorityField.selected, 'Low', "[Priority] field is selected with default value");

              case 46:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x8) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should call save callback once ticket is created in side modal flow', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        var newEntityId, newEntityCreated;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                loadDefaultFields();
                _context11.next = 3;
                return renderComponent(_newTicket2.RENDER_TYPES.sideModal);

              case 3:
                _context11.next = 5;
                return _formFields.default.autocompleteSelectMultiple('requesterId', MOCK_DATA.newTicket.requesterId, '0');

              case 5:
                _context11.next = 7;
                return _formFields.default.selectSingle('template', '0');

              case 7:
                _context11.next = 9;
                return (0, _testHelpers.settled)();

              case 9:
                _context11.next = 11;
                return _newTicket.default.save();

              case 11:
                newEntityId = Ember.A(this.server.db.tickets).lastObject.id;
                newEntityCreated = this.store.peekRecord(this.config.module, newEntityId);
                assert.ok(this.saveCallback.calledWith(newEntityCreated), 'Ticket is created and save callback is called');

              case 14:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x9) {
        return _ref12.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should call save callback once ticket is created in side modal flow(childTicketAssociationFlow)', /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        var ticketWithAllTypesOfField, parentTicket;
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                loadDefaultFields();
                ticketWithAllTypesOfField = Ember.A(_tickets.default).findBy('subject', SUBJECT_OF_TICKET_WITH_ALL_CUSTOM_FIELDS);
                _context12.next = 4;
                return getTicketObject(ticketWithAllTypesOfField);

              case 4:
                parentTicket = _context12.sent;
                _context12.next = 7;
                return renderComponent(_newTicket2.RENDER_TYPES.childTicketAssociationFlow, parentTicket);

              case 7:
                _context12.next = 9;
                return _newTicket.default.toggleCopyParentTktDetailsCheckbox();

              case 9:
                _context12.next = 11;
                return (0, _testHelpers.settled)();

              case 11:
                _context12.next = 13;
                return _newTicket.default.save();

              case 13:
                assert.ok(this.saveCallback.calledOnce, 'Ticket is created and save callback is called');

              case 14:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x10) {
        return _ref13.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should call cancel callback once ticket is cancelled in side modal flow', /*#__PURE__*/function () {
      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                loadDefaultFields();
                _context13.next = 3;
                return renderComponent(_newTicket2.RENDER_TYPES.sideModal);

              case 3:
                _context13.next = 5;
                return _newTicket.default.cancel();

              case 5:
                // await NewTicket.cancelConfirmationSubmit();
                assert.ok(this.cancelCallback.calledOnce, 'Ticket is created and save callback is called');

              case 6:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      return function (_x11) {
        return _ref14.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should reset template when capture from parent is selected in child ticket association flow', /*#__PURE__*/function () {
      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {
        var ticketWithAllTypesOfField, parentTicket, templateField;
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                loadDefaultFields();
                ticketWithAllTypesOfField = Ember.A(_tickets.default).findBy('subject', SUBJECT_OF_TICKET_WITH_ALL_CUSTOM_FIELDS);
                _context14.next = 4;
                return getTicketObject(ticketWithAllTypesOfField);

              case 4:
                parentTicket = _context14.sent;
                _context14.next = 7;
                return renderComponent(_newTicket2.RENDER_TYPES.childTicketAssociationFlow, parentTicket);

              case 7:
                _context14.next = 9;
                return _formFields.default.selectSingle('template', '0');

              case 9:
                _context14.next = 11;
                return (0, _testHelpers.settled)();

              case 11:
                _context14.next = 13;
                return _formFields.default.getDataForField('template', true);

              case 13:
                templateField = _context14.sent;
                assert.equal(templateField.selected, _ticketTemplates.default[0].name, '[Template] field is selected with first option value');
                _context14.next = 17;
                return _newTicket.default.toggleCopyParentTktDetailsCheckbox();

              case 17:
                _context14.next = 19;
                return (0, _testHelpers.settled)();

              case 19:
                _context14.next = 21;
                return _formFields.default.getDataForField('template', true);

              case 21:
                templateField = _context14.sent;
                assert.equal(templateField.selected, null, '[Template] field is cleared when capture from parent is checked');

              case 23:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14);
      }));

      return function (_x12) {
        return _ref15.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/ui-components/common-module/new-form/template-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "ember-local-storage/test-support/reset-storage", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/stub-current-account", "freshservice/tests/lib/stub-router", "freshservice/tests/pages/components/module-tickets/new-ticket", "freshservice/tests/pages/components/utils/form-fields", "freshservice/mirage/fixtures/default-form-fields", "freshservice/mirage/fixtures/ticket-form-fields", "freshservice/mirage/fixtures/requesters", "freshservice/mirage/fixtures/ticket-templates", "freshservice/utils/common", "freshservice/constants/tickets/module-config", "freshservice/constants/tickets/new-ticket", "freshservice/constants/common/form-field-configs/new-entity/ticket"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _resetStorage, _sinonContext, _stubCurrentAccount, _stubRouter, _newTicket, _formFields, _defaultFormFields, _ticketFormFields, _requesters, _ticketTemplates, _common, _moduleConfig, _newTicket2, _ticket) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var MOCK_DATA = {
    newTicket: {
      requesterId: 'support@freshservice.com'
    }
  };
  var TEMPLATE_MODEL_NAME = "".concat(_moduleConfig.MODULE_CONFIG.module, "-template");

  var assertAllFieldValues = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert, assertionMessage) {
      var statusField, urgencyField, sourceField, impactField, priorityField, categoryField, subCategoryField, itemCategoryField, custSecParentDd2, custSecParentDd;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return _formFields.default.getDataForField('status', true);

            case 2:
              statusField = _context.sent;
              _context.next = 5;
              return _formFields.default.getDataForField('urgency', true);

            case 5:
              urgencyField = _context.sent;
              _context.next = 8;
              return _formFields.default.getDataForField('source', true);

            case 8:
              sourceField = _context.sent;
              _context.next = 11;
              return _formFields.default.getDataForField('impact', true);

            case 11:
              impactField = _context.sent;
              _context.next = 14;
              return _formFields.default.getDataForField('priority', true);

            case 14:
              priorityField = _context.sent;
              _context.next = 17;
              return _formFields.default.getDataForField('category', true);

            case 17:
              categoryField = _context.sent;
              _context.next = 20;
              return _formFields.default.getDataForField('subCategory', true);

            case 20:
              subCategoryField = _context.sent;
              _context.next = 23;
              return _formFields.default.getDataForField('itemCategory', true);

            case 23:
              itemCategoryField = _context.sent;
              _context.next = 26;
              return _formFields.default.getDataForField('customFields.cust_sec_parent_dd_2', true);

            case 26:
              custSecParentDd2 = _context.sent;
              _context.next = 29;
              return _formFields.default.getDataForField('customFields.cust_sec_parent_dd', true);

            case 29:
              custSecParentDd = _context.sent;
              assert.equal(statusField.selected, 'Open', '[Status] field is ' + assertionMessage);
              assert.equal(urgencyField.selected, null, '[Urgency] field is ' + assertionMessage);
              assert.equal(sourceField.selected, 'Phone', '[Source] field is ' + assertionMessage);
              assert.equal(impactField.selected, null, '[Impact] field is ' + assertionMessage);
              assert.equal(priorityField.selected, 'Low', '[Priority] field is ' + assertionMessage);
              assert.equal(_newTicket.default.descriptionContent, 'Test description', '[Description] field is ' + assertionMessage);
              assert.equal(categoryField.selected, 'Hardware', '[Category] field is ' + assertionMessage);
              assert.equal(subCategoryField.selected, 'Computer', '[Sub category] field is ' + assertionMessage);
              assert.equal(itemCategoryField.selected, 'Mac', '[Item category] field is ' + assertionMessage);
              assert.equal(_newTicket.default.customTextFieldContent, 'Custom Text', '[Custom Text Field] field is ' + assertionMessage);
              assert.equal(_newTicket.default.customParaFieldContent, 'Custom Para', '[Custom Para Field] field is ' + assertionMessage);
              assert.equal(_newTicket.default.customCheckboxFieldValue, true, '[Custom Checkbox Field] field is ' + assertionMessage);
              assert.equal(custSecParentDd2.selected, 'First Choice', '[Section field parent dropdown 2] field is ' + assertionMessage);
              assert.equal(_newTicket.default.section3TextField1Content, 'Sec 3 Text 1', '[Section field 3 Text Field] field is ' + assertionMessage);
              assert.equal(_newTicket.default.section3ParaField1Content, 'Sec 3 Para 1', '[Section field 3 Para Field] field is ' + assertionMessage);
              assert.equal(_newTicket.default.section3CheckboxFieldValue, true, '[Section field 3 Checkbox] field is ' + assertionMessage);
              assert.equal(_newTicket.default.section3NumberFieldValue, 3, '[Section field 3 Number] field is ' + assertionMessage);
              assert.equal(custSecParentDd.selected, 'Second Choice', '[Section field parent dropdown] field is ' + assertionMessage);
              assert.equal(_newTicket.default.section2TextField1Content, 'Sec 2 Text 1', '[Section field 2 Text Field] field is ' + assertionMessage);

            case 49:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function assertAllFieldValues(_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }();

  var renderComponent = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <UiComponents::CommonModule::NewForm @config={{this.config}} @buttonsTargetId="form-footer"/> <div id='form-footer' class='form-footer'></div>
              */
              {
                id: "LxlvWJ5K",
                block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/common-module/new-form\",[],[[\"@config\",\"@buttonsTargetId\"],[[23,0,[\"config\"]],\"form-footer\"]]],[0,\" \"],[7,\"div\",true],[10,\"id\",\"form-footer\"],[10,\"class\",\"form-footer\"],[8],[9]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
              _context2.next = 4;
              return (0, _testHelpers.settled)();

            case 4:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function renderComponent() {
      return _ref3.apply(this, arguments);
    };
  }();

  (0, _qunit.module)('Integration | Component | ui-components/common-module/new-form - Templates', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
      var enabledFeatures;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              enabledFeatures = {
                temp_features: ['ember_ticket_show'],
                features: ['form_templates', 'cmdb']
              };
              (0, _stubCurrentAccount.stubCurrentAccount)(enabledFeatures);
              (0, _stubRouter.stubRouter)();
              this.set('config', {
                module: _moduleConfig.MODULE_CONFIG.module,
                excludedFields: _newTicket2.TICKET_EXCLUDED_FIELDS,
                defaultSelectedOptions: _newTicket2.TICKET_DEFAULT_SELECTED_OPTIONS,
                listView: 'tickets.view',
                detailsView: _common.MODULE_URLS.tickets,
                fieldsMap: _newTicket2.NEW_TICKET_FIELDS_MAP,
                fieldConfig: _ticket.NEW_TICKET_FILED_CONFIG
              });

            case 4:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    })));
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              this.server.get('/api/_/ticket_form_fields', function () {
                return {
                  ticket_fields: _defaultFormFields.default
                };
              });
              this.store = this.owner.lookup('service:store');

            case 2:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    })));
    hooks.afterEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              window.localStorage.removeItem('storage:entity-templates');
              (0, _resetStorage.default)();
              this.store.unloadAll('ticket');
              this.store.unloadAll('ticket-form-field');
              this.owner.destroy('service:store');

            case 5:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    })));
    (0, _qunit.test)('Should be able to apply template', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var requesterField;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                this.server.get('/api/_/ticket_form_fields', function () {
                  return {
                    ticket_fields: _ticketFormFields.default
                  };
                });
                _context6.next = 3;
                return renderComponent();

              case 3:
                _context6.next = 5;
                return _formFields.default.selectSingle('template', '0');

              case 5:
                _context6.next = 7;
                return (0, _testHelpers.settled)();

              case 7:
                _context6.next = 9;
                return assertAllFieldValues(assert, 'selected with template value');

              case 9:
                _context6.next = 11;
                return _formFields.default.getDataForField('requesterId', true);

              case 11:
                requesterField = _context6.sent;
                assert.equal(requesterField.selected, null, '[Requester] field is not updated as part of template');

              case 13:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x3) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Requester field should not be altered by applying template', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var requesterField;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                this.server.get('/search/autocomplete/requesters', function () {
                  return {
                    results: _requesters.default
                  };
                });
                _context7.next = 3;
                return renderComponent();

              case 3:
                _context7.next = 5;
                return _formFields.default.autocompleteSelectMultiple('requesterId', _requesters.default[0].details, '0');

              case 5:
                _context7.next = 7;
                return _formFields.default.selectSingle('template', '0');

              case 7:
                _context7.next = 9;
                return (0, _testHelpers.settled)();

              case 9:
                _context7.next = 11;
                return _formFields.default.getDataForField('requesterId', true);

              case 11:
                requesterField = _context7.sent;
                assert.equal(requesterField.selected, _requesters.default[0].details, '[Requester] field is not updated as part of template');

              case 13:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x4) {
        return _ref8.apply(this, arguments);
      };
    }()); // 28.

    (0, _qunit.test)('Should be able to clear applied template', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return renderComponent();

              case 2:
                _context8.next = 4;
                return _formFields.default.selectSingle('template', '0');

              case 4:
                _context8.next = 6;
                return (0, _testHelpers.settled)();

              case 6:
                assert.equal(_newTicket.default.descriptionContent, 'Test description');
                _context8.next = 9;
                return _newTicket.default.clearAppliedTemplate();

              case 9:
                _context8.next = 11;
                return (0, _testHelpers.settled)();

              case 11:
                assert.equal(_newTicket.default.descriptionContent, '');

              case 12:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }));

      return function (_x5) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should be able to apply recent template', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        var entityTemplates, templateField;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                entityTemplates = this.owner.lookup('service:entity-templates');
                entityTemplates.addToRecentTemplates(TEMPLATE_MODEL_NAME, _ticketTemplates.default[0]);
                _context9.next = 4;
                return renderComponent();

              case 4:
                _context9.next = 6;
                return _newTicket.default.applyRecentTemplate();

              case 6:
                _context9.next = 8;
                return (0, _testHelpers.settled)();

              case 8:
                _context9.next = 10;
                return _formFields.default.getDataForField('template', true);

              case 10:
                templateField = _context9.sent;
                assert.equal(templateField.selected, _ticketTemplates.default[0].name, '[Template] field is selected with first option value');
                assert.equal(_newTicket.default.descriptionContent, 'Test description');
                this.owner.destroy('service:entity-templates');

              case 14:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x6) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should update recent templates list when form submit is success', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var entityTemplatesService;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                entityTemplatesService = this.owner.lookup('service:entity-templates');
                _context10.next = 3;
                return renderComponent();

              case 3:
                _context10.next = 5;
                return _formFields.default.selectSingle('template', '0');

              case 5:
                _context10.next = 7;
                return (0, _testHelpers.settled)();

              case 7:
                _context10.next = 9;
                return _formFields.default.autocompleteSelectMultiple('requesterId', MOCK_DATA.newTicket.requesterId, '0');

              case 9:
                // Before submit make sure recent list is empty
                assert.notOk(_newTicket.default.haRecentTemplates);
                _context10.next = 12;
                return _newTicket.default.submitDropDown();

              case 12:
                _context10.next = 14;
                return _newTicket.default.saveAndNew();

              case 14:
                entityTemplatesService.getRecentTemplates(TEMPLATE_MODEL_NAME);
                assert.equal(entityTemplatesService.getRecentTemplates(TEMPLATE_MODEL_NAME).length, 1);
                assert.ok(_newTicket.default.haRecentTemplates);
                this.owner.destroy('service:entity-templates');

              case 18:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x7) {
        return _ref11.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/ui-components/common-module/new-form/validation-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-cli-mirage/test-support", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/stub-current-account", "freshservice/tests/lib/stub-router", "freshservice/tests/lib/spy-flash-message", "faker", "freshservice/constants/tickets/common", "freshservice/tests/pages/components/module-tickets/new-ticket", "freshservice/tests/pages/components/utils/form-fields", "freshservice/mirage/fixtures/nested-form-fields", "freshservice/mirage/fixtures/default-form-fields", "freshservice/utils/common", "freshservice/constants/tickets/module-config", "freshservice/constants/tickets/new-ticket", "freshservice/constants/common/form-field-configs/new-entity/ticket"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _sinonContext, _stubCurrentAccount, _stubRouter, _spyFlashMessage, _faker, _common, _newTicket, _formFields, _nestedFormFields, _defaultFormFields, _common2, _moduleConfig, _newTicket2, _ticket) {
  "use strict";

  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

  function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var MOCK_DATA = {
    newTicket: {
      requesterId: 'support@freshservice.com',
      subject: 'Test Subject',
      description: 'Test Description',
      tags: 'Tag',
      attachment: 'new attachment.png',
      customText: 'Custom text',
      customParaValid: 'Custom Para valid text',
      customParaInvalid: _faker.default.lorem.sentence(_common.MINI_PARA_MAX_CHAR + 1)
    }
  };
  var MINI_PARA = {
    id: 100,
    label: "custom_para",
    field_type: "custom_paragraph",
    position: 100,
    name: "custom_para",
    default_field: false,
    choices: [],
    nested_fields: [],
    sections: [],
    field_options: {
      mini_para_field: true
    }
  };

  var renderComponent = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <UiComponents::CommonModule::NewForm @config={{this.config}} @buttonsTargetId="form-footer"/> <div id='form-footer' class='form-footer'></div>
              */
              {
                id: "LxlvWJ5K",
                block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/common-module/new-form\",[],[[\"@config\",\"@buttonsTargetId\"],[[23,0,[\"config\"]],\"form-footer\"]]],[0,\" \"],[7,\"div\",true],[10,\"id\",\"form-footer\"],[10,\"class\",\"form-footer\"],[8],[9]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
              _context.next = 4;
              return (0, _testHelpers.settled)();

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function renderComponent() {
      return _ref2.apply(this, arguments);
    };
  }();

  (0, _qunit.module)('Integration | Component | ui-components/common-module/new-form - Validations', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      var enabledFeatures;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              enabledFeatures = {
                temp_features: ['ember_ticket_show'],
                features: ['form_templates']
              };
              (0, _stubCurrentAccount.stubCurrentAccount)(enabledFeatures);
              (0, _stubRouter.stubRouter)();
              this.set('config', {
                module: _moduleConfig.MODULE_CONFIG.module,
                excludedFields: _newTicket2.TICKET_EXCLUDED_FIELDS,
                defaultSelectedOptions: _newTicket2.TICKET_DEFAULT_SELECTED_OPTIONS,
                listView: 'tickets.view',
                detailsView: _common2.MODULE_URLS.tickets,
                fieldsMap: _newTicket2.NEW_TICKET_FIELDS_MAP,
                fieldConfig: _ticket.NEW_TICKET_FILED_CONFIG
              });

            case 4:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    })));
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              this.server.loadFixtures('ticketFormFields');
              this.store = this.owner.lookup('service:store');

            case 2:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    })));
    hooks.afterEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              this.store.unloadAll('ticket');
              this.store.unloadAll('ticket-form-field');
              this.owner.destroy('service:store');

            case 3:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    })));
    (0, _qunit.test)('Should throw default validation errors while saving, if mandatory fields are not set', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var requiredFields;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                requiredFields = this.server.db.ticketFormFields.filter(function (f) {
                  return f.required_for_agents;
                }).map(function (f) {
                  return f.default_field ? Ember.String.camelize(f.name) : 'customFields.' + f.name;
                });
                _context5.next = 3;
                return renderComponent();

              case 3:
                assert.expect(7);
                _context5.next = 6;
                return _formFields.default.autocompleteSelectMultiple('requesterId', MOCK_DATA.newTicket.requesterId, '0');

              case 6:
                _context5.next = 8;
                return _newTicket.default.fillSubject(MOCK_DATA.newTicket.subject);

              case 8:
                _context5.next = 10;
                return _formFields.default.selectSingle('source', '0');

              case 10:
                _context5.next = 12;
                return _formFields.default.selectSingle('status', '0');

              case 12:
                _context5.next = 14;
                return _formFields.default.selectSingle('urgency', '0');

              case 14:
                _context5.next = 16;
                return _formFields.default.selectSingle('impact', '0');

              case 16:
                _context5.next = 18;
                return _formFields.default.selectSingle('priority', '0');

              case 18:
                _context5.next = 20;
                return _formFields.default.selectSingle('groupId', '0');

              case 20:
                _context5.next = 22;
                return _formFields.default.selectSingle('responderId', '0');

              case 22:
                _context5.next = 24;
                return _formFields.default.selectSingle('departmentId', '0');

              case 24:
                _context5.next = 26;
                return _formFields.default.selectSingle('category', '0');

              case 26:
                _context5.next = 28;
                return _formFields.default.autocompleteSelectMultiple('tags', MOCK_DATA.newTicket.tags, '0');

              case 28:
                _context5.next = 30;
                return _newTicket.default.addAttachment(MOCK_DATA.newTicket.attachment);

              case 30:
                assert.ok(_newTicket.default.hasAttachFiles, 'Has attachments in the form as expected');
                _context5.next = 33;
                return _newTicket.default.save();

              case 33:
                assert.notOk(_newTicket.default.isFormValid, 'Form is not valid without filling required fields');
                assert.equal(_newTicket.default.validationFailedFields.length, 5, '5 fields are required and not filled');
                assert.ok(_newTicket.default.validationFailedFields.every(function (f) {
                  return requiredFields.includes(f);
                }), "Required validation errors are thrown, as expected on [".concat(_newTicket.default.validationFailedFields, "]"));
                /* Fill all fields except section fields parent dropdown (mandate field) (4/5) */

                _context5.next = 38;
                return _newTicket.default.fillDescription(MOCK_DATA.newTicket.description);

              case 38:
                _context5.next = 40;
                return _newTicket.default.fillCustomTextField(MOCK_DATA.newTicket.customText);

              case 40:
                _context5.next = 42;
                return _formFields.default.selectSingle('customFields.cust_dd_1', '1');

              case 42:
                _context5.next = 44;
                return _formFields.default.selectSingle('customFields.msf_cust_multi_dd', '1');

              case 44:
                _context5.next = 46;
                return _newTicket.default.save();

              case 46:
                assert.equal(_newTicket.default.validationFailedFields.length, 1, '4/5 required fields are filled');
                /* Fill section field parent dropdown -- `Second choice` -> has 1 required field in this section */

                _context5.next = 49;
                return _formFields.default.selectSingle('customFields.cust_sec_parent_dd', '2');

              case 49:
                _context5.next = 51;
                return _newTicket.default.save();

              case 51:
                assert.equal(_newTicket.default.validationFailedFields.length, 1, 'Section 2 has 1 empty required field');
                _context5.next = 54;
                return _newTicket.default.fillCustomSection2TextField(MOCK_DATA.newTicket.customText);

              case 54:
                assert.ok(_newTicket.default.isFormValid, 'Form is now valid after filling all required fields');

              case 55:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Check validation errors for section fields, while submitting the form (along with closure validations)', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var requiredFieldLabels, requiredForClosureFieldLabels, combinedRequiredFieldLabels, doesVisibleMatchWithExpected;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                requiredFieldLabels = this.server.db.ticketFormFields.filter(function (f) {
                  return f.required_for_agents;
                }).map(function (f) {
                  return f.label;
                });
                requiredForClosureFieldLabels = this.server.db.ticketFormFields.filter(function (f) {
                  return !f.required_for_agents && f.required_for_closure;
                }).map(function (f) {
                  return f.label;
                });
                combinedRequiredFieldLabels = [].concat(_toConsumableArray(requiredFieldLabels), _toConsumableArray(requiredForClosureFieldLabels));
                _context6.next = 5;
                return renderComponent();

              case 5:
                _context6.next = 7;
                return _newTicket.default.save();

              case 7:
                // Just a blank save !
                assert.notOk(_newTicket.default.isFormValid, 'Form is not valid without filling all the required fields');
                assert.equal(_newTicket.default.visibleRequiredFieldLabels.length, 9, '9 required fields are marked as required on empty form');
                assert.equal(_newTicket.default.visibleRequiredFieldErrors.length, 9 - 2, '9 required fields, 7 have errors which excludes status and priority field which has default value set');
                /* Fill section field parent dropdown -- `Second choice` -> has 1 required field in this section */

                _context6.next = 12;
                return _formFields.default.selectSingle('customFields.cust_sec_parent_dd', '2');

              case 12:
                _context6.next = 14;
                return _newTicket.default.save();

              case 14:
                assert.equal(_newTicket.default.visibleRequiredFieldLabels.length, 9 + 1, 'Section 2 has 1 empty required field. Now 10 required fields are empty in total'); // out of 10 reqired fields 3 fields(status, priority and parent section) has values

                assert.equal(_newTicket.default.visibleRequiredFieldErrors.length, 9 + 1 - 2 - 1, 'Section 2 has 1 empty required field. Now 7 required fields are empty in total which excludes status, priority and parent section field');
                /* Fill section field parent dropdown -- `First choice` --> has 4 required fields in this section */

                _context6.next = 18;
                return _formFields.default.selectSingle('customFields.cust_sec_parent_dd', '1');

              case 18:
                _context6.next = 20;
                return _newTicket.default.save();

              case 20:
                assert.equal(_newTicket.default.visibleRequiredFieldLabels.length, 9 + 4, 'Section 1 has 4 required empty fields. Now 13 required fields'); // out of 13 reqired fields 3 fields(status, priority and parent section) has values

                assert.equal(_newTicket.default.visibleRequiredFieldErrors.length, 9 + 4 - 2 - 1, 'Section 1 has 4 required empty fields. Now 10 required fields are empty in total');
                /* Set status as CLOSED (2-Resolved, 3-Closed) */

                _context6.next = 24;
                return _formFields.default.selectSingle('status', '3');

              case 24:
                // 3 fields with `requiredForClosure=true` that are visible will join the list
                assert.equal(_newTicket.default.visibleRequiredFieldLabels.length, 13 + 3, '16 required fields in total'); // out of 16 reqired fields 3 fields(status, priority and parent section) has values,

                assert.equal(_newTicket.default.visibleRequiredFieldErrors.length, 13 + 3 - 3, '11 required fields are empty and has errors when status is closed');
                doesVisibleMatchWithExpected = _newTicket.default.visibleRequiredFieldLabels.every(function (value) {
                  return combinedRequiredFieldLabels.includes(value.replace(' *', ''));
                });
                assert.ok(doesVisibleMatchWithExpected, 'Visibly required fields match with required fields from data');
                /* Set status as OPEN (0-Open, 1-Pending) */

                _context6.next = 30;
                return _formFields.default.selectSingle('status', '0');

              case 30:
                // 3 fields with `requiredForClosure=true` that were visible, will be marked as not required
                assert.equal(_newTicket.default.visibleRequiredFieldLabels.length, 16 - 3, '13 required fields in total');

              case 31:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x2) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Check validation errors on form submit', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return renderComponent();

              case 2:
                _context7.next = 4;
                return _newTicket.default.save();

              case 4:
                // Just a blank save !
                assert.equal(_newTicket.default.visibleRequiredFieldLabels.length, 9, '9 required fields are marked as required on empty form');
                assert.equal(_newTicket.default.visibleRequiredFieldErrors.length, 9 - 2, '9 required fields, 7 have errors which excludes status and priority field which has default value set');

              case 6:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      return function (_x3) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Closure fields validations', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return renderComponent();

              case 2:
                _context8.next = 4;
                return _newTicket.default.save();

              case 4:
                // Just a blank save !
                assert.equal(_newTicket.default.visibleRequiredFieldLabels.length, 9, '9 required fields are marked as required on empty form with status open');
                assert.equal(_newTicket.default.visibleRequiredFieldErrors.length, 9 - 2, '9 required fields, 7 have errors which excludes status and priority field which has default value set');
                /* Set status as CLOSED (2-Resolved, 3-Closed) */

                _context8.next = 8;
                return _formFields.default.selectSingle('status', '3');

              case 8:
                assert.equal(_newTicket.default.visibleRequiredFieldLabels.length, 10, '10 required fields are marked as required on empty form with status closed');
                assert.equal(_newTicket.default.visibleRequiredFieldErrors.length, 10 - 2, '10 required fields, 7 have errors which excludes status and priority field which has default value set');

              case 10:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }));

      return function (_x4) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should be able apply validations after submit and new', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        var successFlashSpy;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                successFlashSpy = (0, _spyFlashMessage.default)('success');
                _context9.next = 3;
                return renderComponent();

              case 3:
                _context9.next = 5;
                return _newTicket.default.save();

              case 5:
                // Just a blank save !
                assert.equal(_newTicket.default.visibleRequiredFieldLabels.length, 9, '9 required fields are marked as required on empty form');
                assert.equal(_newTicket.default.visibleRequiredFieldErrors.length, 9 - 2, '9 required fields, 7 have errors which excludes status and priority field which has default value set');
                _context9.next = 9;
                return _formFields.default.autocompleteSelectMultiple('requesterId', MOCK_DATA.newTicket.requesterId, '0');

              case 9:
                _context9.next = 11;
                return _newTicket.default.fillSubject(MOCK_DATA.newTicket.subject);

              case 11:
                _context9.next = 13;
                return _newTicket.default.fillDescription(MOCK_DATA.newTicket.description);

              case 13:
                _context9.next = 15;
                return _formFields.default.selectSingle("source", '0');

              case 15:
                _context9.next = 17;
                return _formFields.default.selectSingle("status", '0');

              case 17:
                _context9.next = 19;
                return _formFields.default.selectSingle("urgency", '0');

              case 19:
                _context9.next = 21;
                return _formFields.default.selectSingle("impact", '0');

              case 21:
                _context9.next = 23;
                return _formFields.default.selectSingle("priority", '0');

              case 23:
                _context9.next = 25;
                return _formFields.default.selectSingle("groupId", '0');

              case 25:
                _context9.next = 27;
                return _formFields.default.selectSingle("responderId", '0');

              case 27:
                _context9.next = 29;
                return _formFields.default.selectSingle("departmentId", '0');

              case 29:
                _context9.next = 31;
                return _newTicket.default.fillCustomTextField(MOCK_DATA.newTicket.customText);

              case 31:
                _context9.next = 33;
                return _formFields.default.selectSingle('customFields.cust_dd_1', '1');

              case 33:
                _context9.next = 35;
                return _formFields.default.selectSingle('customFields.msf_cust_multi_dd', '1');

              case 35:
                _context9.next = 37;
                return _formFields.default.selectSingle('customFields.cust_sec_parent_dd', '2');

              case 37:
                _context9.next = 39;
                return _newTicket.default.fillCustomSection2TextField(MOCK_DATA.newTicket.customText);

              case 39:
                _context9.next = 41;
                return _newTicket.default.submitDropDown();

              case 41:
                _context9.next = 43;
                return _newTicket.default.saveAndNew();

              case 43:
                assert.ok(successFlashSpy.calledOnce);
                _context9.next = 46;
                return _newTicket.default.save();

              case 46:
                // Just a blank save !
                assert.equal(_newTicket.default.visibleRequiredFieldLabels.length, 9, '9 required fields are marked as required on empty form');
                assert.equal(_newTicket.default.visibleRequiredFieldErrors.length, 9 - 2, '9 required fields, 7 have errors which excludes status and priority field which has default value set');

              case 48:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9);
      }));

      return function (_x5) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should throw validation errors if nested fields required for agents are not filled', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                // nestedFormFields contains only default fields + nested fields and only nested fields are marked as required for agents
                this.server.get('/api/_/ticket_form_fields', function () {
                  return {
                    ticket_fields: _nestedFormFields.default
                  };
                });
                _context10.next = 3;
                return renderComponent();

              case 3:
                _context10.next = 5;
                return _newTicket.default.save();

              case 5:
                // Just a blank save !
                // 1 default nested field and 1 custom nested field are marked as required for agents
                assert.equal(_newTicket.default.visibleRequiredFieldErrors.length, 2, '2 required fields are marked as required on empty form');

              case 6:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x6) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should be able to validate and save form when user selects the data for nested fields such that only first level has choices', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        var successFlashSpy;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                successFlashSpy = (0, _spyFlashMessage.default)('success'); // nestedFormFields contains only default fields + nested fields and only nested fields are marked as required for agents

                this.server.get('/api/_/ticket_form_fields', function () {
                  return {
                    ticket_fields: _nestedFormFields.default
                  };
                });
                _context11.next = 4;
                return renderComponent();

              case 4:
                _context11.next = 6;
                return _newTicket.default.save();

              case 6:
                // 1 default nested field and 1 custom nested field are marked as required for agents
                assert.equal(_newTicket.default.visibleRequiredFieldErrors.length, 2, 'custom nested field and default nested field are not valid');
                _context11.next = 9;
                return _formFields.default.selectSingle('customFields.nested_level1', '3');

              case 9:
                _context11.next = 11;
                return _formFields.default.selectSingle('category', '3');

              case 11:
                _context11.next = 13;
                return _newTicket.default.fillDescription(MOCK_DATA.newTicket.description);

              case 13:
                _context11.next = 15;
                return _newTicket.default.save();

              case 15:
                assert.equal(_newTicket.default.visibleRequiredFieldErrors.length, 0, 'custom nested field and default nested field are valid');
                assert.ok(successFlashSpy.calledOnce);

              case 17:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x7) {
        return _ref12.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should throw an error while validate CC email count exceeds', /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        var maxEmailCount;
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                this.intl = this.owner.lookup('service:intl');
                maxEmailCount = 1;
                this.server.get('/api/_/ticket_form_fields', function () {
                  return {
                    meta: {
                      visible_type_field: 'true',
                      max_email_count: maxEmailCount
                    },
                    ticket_fields: _defaultFormFields.default
                  };
                });
                _context12.next = 5;
                return renderComponent();

              case 5:
                _context12.next = 7;
                return _newTicket.default.addCCBtn();

              case 7:
                _context12.next = 9;
                return _newTicket.default.fillAddCCInput('cc_email1@gmail.com');

              case 9:
                _context12.next = 11;
                return _newTicket.default.addCCEmail();

              case 11:
                _context12.next = 13;
                return _newTicket.default.fillAddCCInput('cc_email2@gmail.com');

              case 13:
                _context12.next = 15;
                return _newTicket.default.addCCEmail();

              case 15:
                _context12.next = 17;
                return _newTicket.default.save();

              case 17:
                assert.equal(_newTicket.default.fillAddCCInput.length, 2);
                assert.ok(_newTicket.default.fillAddCCInput.length > maxEmailCount, 'Only maximum of 1 ccEmails are allowed');
                assert.equal(_newTicket.default.addCCValidationErrorText, this.intl.t('fs.validation.custom_array_length_validation.max_total_length', {
                  max_total_length: 1,
                  attr_name: 'ccEmails'
                }));
                this.owner.destroy('service:intl');

              case 21:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x8) {
        return _ref13.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should be able to validate and save form when user selects the data for nested fields such that only first and second level has choices', /*#__PURE__*/function () {
      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
        var successFlashSpy;
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                successFlashSpy = (0, _spyFlashMessage.default)('success'); // nestedFormFields contains only default fields + nested fields and only nested fields are marked as required for agents

                this.server.get('/api/_/ticket_form_fields', function () {
                  return {
                    ticket_fields: _nestedFormFields.default
                  };
                });
                _context13.next = 4;
                return renderComponent();

              case 4:
                _context13.next = 6;
                return _newTicket.default.save();

              case 6:
                // 1 default nested field and 1 custom nested field are marked as required for agents
                assert.equal(_newTicket.default.visibleRequiredFieldErrors.length, 2, 'custom nested field and default nested field are not valid');
                _context13.next = 9;
                return _formFields.default.selectSingle('customFields.nested_level1', '2');

              case 9:
                _context13.next = 11;
                return _formFields.default.selectSingle('category', '2');

              case 11:
                _context13.next = 13;
                return _newTicket.default.save();

              case 13:
                assert.equal(_newTicket.default.visibleRequiredFieldErrors.length, 2, 'custom nested field and default nested field are still not valid');
                _context13.next = 16;
                return _formFields.default.selectSingle('customFields.nested_level2', '1');

              case 16:
                _context13.next = 18;
                return _formFields.default.selectSingle('subCategory', '1');

              case 18:
                _context13.next = 20;
                return _newTicket.default.fillDescription(MOCK_DATA.newTicket.description);

              case 20:
                _context13.next = 22;
                return _newTicket.default.save();

              case 22:
                assert.equal(_newTicket.default.visibleRequiredFieldErrors.length, 0, 'custom nested field and default nested field are valid');
                assert.ok(successFlashSpy.calledOnce);

              case 24:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      return function (_x9) {
        return _ref14.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should be able to validate and save form when user selects the data for nested fields such that all levels has choices', /*#__PURE__*/function () {
      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {
        var successFlashSpy;
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                successFlashSpy = (0, _spyFlashMessage.default)('success'); // nestedFormFields contains only default fields + nested fields and only nested fields are marked as required for agents

                this.server.get('/api/_/ticket_form_fields', function () {
                  return {
                    ticket_fields: _nestedFormFields.default
                  };
                });
                _context14.next = 4;
                return renderComponent();

              case 4:
                _context14.next = 6;
                return _newTicket.default.save();

              case 6:
                // 1 default nested field and 1 custom nested field are marked as required for agents
                assert.equal(_newTicket.default.visibleRequiredFieldErrors.length, 2, 'custom nested field and default nested field are not valid');
                _context14.next = 9;
                return _formFields.default.selectSingle('customFields.nested_level1', '1');

              case 9:
                _context14.next = 11;
                return _formFields.default.selectSingle('category', '1');

              case 11:
                _context14.next = 13;
                return _newTicket.default.save();

              case 13:
                assert.equal(_newTicket.default.visibleRequiredFieldErrors.length, 2, 'custom nested field and default nested field are still not valid');
                _context14.next = 16;
                return _formFields.default.selectSingle('customFields.nested_level2', '1');

              case 16:
                _context14.next = 18;
                return _formFields.default.selectSingle('subCategory', '1');

              case 18:
                _context14.next = 20;
                return _newTicket.default.save();

              case 20:
                assert.equal(_newTicket.default.visibleRequiredFieldErrors.length, 2, 'custom nested field and default nested field are still not valid');
                _context14.next = 23;
                return _formFields.default.selectSingle('customFields.nested_level3', '1');

              case 23:
                _context14.next = 25;
                return _formFields.default.selectSingle('itemCategory', '1');

              case 25:
                _context14.next = 27;
                return _newTicket.default.fillDescription(MOCK_DATA.newTicket.description);

              case 27:
                _context14.next = 29;
                return _newTicket.default.save();

              case 29:
                assert.equal(_newTicket.default.visibleRequiredFieldErrors.length, 0, 'custom nested field and default nested field are valid');
                assert.ok(successFlashSpy.calledOnce);

              case 31:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      return function (_x10) {
        return _ref15.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should validate the content length for mini paragraphs', /*#__PURE__*/function () {
      var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {
        var successFlashSpy;
        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                successFlashSpy = (0, _spyFlashMessage.default)('success'); // nestedFormFields contains only default fields + nested fields and only nested fields are marked as required for agents

                this.server.get('/api/_/ticket_form_fields', function () {
                  return {
                    ticket_fields: [].concat(_toConsumableArray(_defaultFormFields.default), [MINI_PARA])
                  };
                });
                _context15.next = 4;
                return renderComponent();

              case 4:
                _context15.next = 6;
                return _newTicket.default.fillDescription(MOCK_DATA.newTicket.description);

              case 6:
                _context15.next = 8;
                return _newTicket.default.fillCustomParaField(MOCK_DATA.newTicket.customParaInvalid);

              case 8:
                _context15.next = 10;
                return _newTicket.default.save();

              case 10:
                assert.ok(_newTicket.default.hasCustomParaError, 'Error thrown if the char count is greater than 3000');
                _context15.next = 13;
                return _newTicket.default.fillCustomParaField(MOCK_DATA.newTicket.customParaValid);

              case 13:
                _context15.next = 15;
                return _newTicket.default.save();

              case 15:
                assert.ok(successFlashSpy.calledOnce, 'Ticket submitted successfully');

              case 16:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      return function (_x11) {
        return _ref16.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/ui-components/common-module/search-entities/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | ui-components/common-module/search-entities', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks); // Skipping until this gets fixed

    (0, _qunit.skip)('Should render search with endpoint and perform search', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var tabElements;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.set('entityConfig', {
                  id: 'display_id',
                  name: 'Id',
                  url: 'search/tickets/filter/display_id',
                  placeholder: 'fs.tickets.merge.placeholders.display_id'
                });
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<UiComponents::CommonModule::SearchEntities @entityConfig={{this.entityConfig}} as |data|>
                				{{#each data.results as |result|}}
                					<div class="entity-row" tabindex="0" {{on "keydown" data.handleSearchResultsFocus}}>
                						{{result.display_id}}
                						{{result.subject}}
                						{{result.requester_name}}
                						{{result.created_at}}
                					</div>
                				{{/each}}
                			</UiComponents::CommonModule::SearchEntities>
                		
                */
                {
                  id: "/lR0PON6",
                  block: "{\"symbols\":[\"data\",\"result\"],\"statements\":[[0,\"\\n\\t\\t\\t\"],[5,\"ui-components/common-module/search-entities\",[],[[\"@entityConfig\"],[[23,0,[\"entityConfig\"]]]],{\"statements\":[[0,\"\\n\"],[4,\"each\",[[23,1,[\"results\"]]],null,{\"statements\":[[0,\"\\t\\t\\t\\t\\t\"],[7,\"div\",false],[12,\"class\",\"entity-row\"],[12,\"tabindex\",\"0\"],[3,\"on\",[\"keydown\",[23,1,[\"handleSearchResultsFocus\"]]]],[8],[0,\"\\n\\t\\t\\t\\t\\t\\t\"],[1,[23,2,[\"display_id\"]],false],[0,\"\\n\\t\\t\\t\\t\\t\\t\"],[1,[23,2,[\"subject\"]],false],[0,\"\\n\\t\\t\\t\\t\\t\\t\"],[1,[23,2,[\"requester_name\"]],false],[0,\"\\n\\t\\t\\t\\t\\t\\t\"],[1,[23,2,[\"created_at\"]],false],[0,\"\\n\\t\\t\\t\\t\\t\"],[9],[0,\"\\n\"]],\"parameters\":[2]},null],[0,\"\\t\\t\\t\"]],\"parameters\":[1]}],[0,\"\\n\\t\\t\"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                // search for entities
                (0, _testHelpers.click)('input');
                _context2.next = 6;
                return (0, _testHelpers.fillIn)('input', '1');

              case 6:
                _context2.next = 8;
                return (0, _testHelpers.waitFor)('.ember-basic-dropdown-content .entity-row', {
                  timeout: 1000
                });

              case 8:
                assert.equal((0, _testHelpers.findAll)('.entity-row').length, 2); // tab through entities

                tabElements = [['input', 'keydown', 'Tab'], ['.entity-search-input-clear', 'keydown', 'Tab'], ['.entity-row:nth-child(1)', 'keydown', 'Tab'], ['.entity-row:nth-child(2)', 'keydown', 'Tab'], ['input', 'keydown', 'Enter']];
                tabElements.forEach( /*#__PURE__*/function () {
                  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(el) {
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            _context.next = 2;
                            return (0, _testHelpers.triggerKeyEvent)(el[0], el[1], el[2]);

                          case 2:
                            return _context.abrupt("return", _context.sent);

                          case 3:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee);
                  }));

                  return function (_x2) {
                    return _ref3.apply(this, arguments);
                  };
                }()); // clear search

                (0, _testHelpers.click)('.entity-search-input-clear'); // perform no results

                _context2.next = 14;
                return (0, _testHelpers.fillIn)('input', '2');

              case 14:
                assert.equal((0, _testHelpers.findAll)('.no-results').length, 1); // perform error scenario

                _context2.next = 17;
                return (0, _testHelpers.fillIn)('input', 'error');

              case 17:
                assert.equal((0, _testHelpers.findAll)('.no-results').length, 1);
                _context2.next = 20;
                return (0, _testHelpers.triggerEvent)('input', 'blur');

              case 20:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/ui-components/common-module/view-list/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/stub-current-account", "freshservice/constants/tickets/module-config"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _stubCurrentUser, _stubCurrentAccount, _moduleConfig) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var MOCK_DATA = {
    selectedView: 'All Fields'
  };
  (0, _qunit.module)('Integration | Component | ui-components/common-module/view-list', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.server.loadFixtures('ticket-filters');
              (0, _stubCurrentUser.stubCurrentUser)();
              (0, _stubCurrentAccount.stubCurrentAccount)();
              Ember.set(this, 'store', this.owner.lookup('service:store'));

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('Render list sidebar with ticket views', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var selectedView;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.store.findRecord('ticket-filter', 'all_fields');

              case 2:
                selectedView = _context2.sent;
                Ember.setProperties(this, {
                  moduleConfig: _moduleConfig.MODULE_CONFIG,
                  sidebarCallback: function sidebarCallback() {},
                  modelParams: {},
                  selectedView: selectedView
                });
                _context2.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::CommonModule::ViewList @config={{this.moduleConfig}} @callback={{this.sidebarCallback}} @modelParams={{this.modelParams}} @selectedView={{this.selectedView}} />
                */
                {
                  id: "fjH9da7P",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/common-module/view-list\",[],[[\"@config\",\"@callback\",\"@modelParams\",\"@selectedView\"],[[23,0,[\"moduleConfig\"]],[23,0,[\"sidebarCallback\"]],[23,0,[\"modelParams\"]],[23,0,[\"selectedView\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                assert.equal(document.querySelector('.view-selected').innerText, MOCK_DATA.selectedView);
                _context2.next = 9;
                return (0, _testHelpers.click)(document.querySelector('.menu-trigger'));

              case 9:
                _context2.next = 11;
                return (0, _testHelpers.waitFor)(document.querySelector('.menu-trigger'), {
                  timeout: 1000
                });

              case 11:
                assert.ok(true);

              case 12:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/ui-components/common-module/view-query-form/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/constants/tickets/module-config"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _moduleConfig) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | ui-components/common-module/view-query-form', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.server.loadFixtures('ticket-form-fields');
              this.server.loadFixtures('ticket-filters');
              Ember.set(this, 'store', this.owner.lookup('service:store'));

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('Render sidebar with ticket form fields', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var selectedView;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.store.findRecord('ticket-filter', 'all_fields');

              case 2:
                selectedView = _context2.sent;
                Ember.setProperties(this, {
                  moduleConfig: _moduleConfig.MODULE_CONFIG,
                  sidebarCallback: function sidebarCallback() {},
                  modelParams: {},
                  selectedView: selectedView
                });
                _context2.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::CommonModule::ViewQueryForm @config={{this.moduleConfig}} @callback={{this.sidebarCallback}} @modelParams={{this.modelParams}} @selectedView={{this.selectedView}} />
                */
                {
                  id: "jtW1HXke",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/common-module/view-query-form\",[],[[\"@config\",\"@callback\",\"@modelParams\",\"@selectedView\"],[[23,0,[\"moduleConfig\"]],[23,0,[\"sidebarCallback\"]],[23,0,[\"modelParams\"]],[23,0,[\"selectedView\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                assert.ok(true);

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/ui-components/form-fields/textfield-multiselect/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/pages/components/ui-components/form-fields/textfield-multiselect"], function (_qunit, _emberQunit, _testHelpers, _textfieldMultiselect) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var DATA_LIST_VALUES = ['OK', 'warning', 'error', 'critical'];
  var DATA_LIST_OBJECT_VALUES = [{
    value: 'OK',
    disable: true
  }, {
    value: 'warning'
  }, {
    value: 'error'
  }, {
    value: 'critical'
  }];
  var DATA_LIST_OBJECT_VALUES_FORMAT_1 = [{
    text: 'OK',
    disable: true
  }, {
    text: 'warning'
  }, {
    text: 'error'
  }, {
    text: 'critical'
  }];
  var DATA_FIELD_MAP_FORMAT_1 = {
    value: "text"
  };
  (0, _qunit.module)('Integration | Component | ui-components/form-fields/textfield-multiselect', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it renders when passes empty value', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Arrange
                this.set('dataList', null); // Act

                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                      <UiComponents::FormFields::TextfieldMultiselect
                        @dataList  	= {{this.dataList}}/>
                    
                */
                {
                  id: "E1AjXXMm",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n      \"],[5,\"ui-components/form-fields/textfield-multiselect\",[],[[\"@dataList\"],[[23,0,[\"dataList\"]]]]],[0,\"\\n    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                // Assert
                assert.equal(_textfieldMultiselect.default.pill.length, 0, '0 pills rendered when empty value is passed');

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it renders when passes 4 arrays of value', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                // Arrange
                this.set('dataList', DATA_LIST_VALUES); // Act

                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                      <UiComponents::FormFields::TextfieldMultiselect
                        @dataList  	= {{this.dataList}}
                        @letterCase	= {{"UPPER"}} />
                    
                */
                {
                  id: "5Lg4u8iV",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n      \"],[5,\"ui-components/form-fields/textfield-multiselect\",[],[[\"@dataList\",\"@letterCase\"],[[23,0,[\"dataList\"]],\"UPPER\"]]],[0,\"\\n    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                // Assert
                assert.equal(_textfieldMultiselect.default.pill.length, 4, '4 pills rendered when empty value is passed');

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it renders when passes 4 arrays of Object value passed with 1 disabled value', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                // Arrange
                this.set('dataList', DATA_LIST_OBJECT_VALUES); // Act

                _context3.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                      <UiComponents::FormFields::TextfieldMultiselect
                        @dataList  	= {{this.dataList}}
                        @letterCase	= {{"LOWER"}} />
                    
                */
                {
                  id: "Mx/2d1ii",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n      \"],[5,\"ui-components/form-fields/textfield-multiselect\",[],[[\"@dataList\",\"@letterCase\"],[[23,0,[\"dataList\"]],\"LOWER\"]]],[0,\"\\n    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                // Assert
                assert.equal(_textfieldMultiselect.default.pill.length, 4, '4 pills rendered when object value is passed');
                assert.equal(_textfieldMultiselect.default.pillClose.length, 3, '3 pills close option rendered when 4 object value is passed with 1 disabled value');

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it renders when passes different data format of 4 Object value passed with 1 disabled value', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                // Arrange
                this.set('dataList', DATA_LIST_OBJECT_VALUES_FORMAT_1);
                this.set('fieldMap', DATA_FIELD_MAP_FORMAT_1); // Act

                _context4.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                      <UiComponents::FormFields::TextfieldMultiselect
                        @dataList  	= {{this.dataList}} 
                        @fieldMap   = {{this.fieldMap}}
                        @editable		= {{true}}/>
                    
                */
                {
                  id: "GQQNn19t",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n      \"],[5,\"ui-components/form-fields/textfield-multiselect\",[],[[\"@dataList\",\"@fieldMap\",\"@editable\"],[[23,0,[\"dataList\"]],[23,0,[\"fieldMap\"]],true]]],[0,\"\\n    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                // Assert
                assert.equal(_textfieldMultiselect.default.pill.length, 4, '4 pills rendered when object value is passed');
                assert.equal(_textfieldMultiselect.default.pillClose.length, 3, '3 pills close option rendered when 4 object value is passed with 1 disabled value');

              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it renders a pill and remove when click on remove icon.', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                // Arrange
                this.set('dateList', ['OK']);
                this.set('onSeverityUpdate', function (arr) {
                  _this.set('dateList', arr);
                }); // Act

                _context5.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                      <UiComponents::FormFields::TextfieldMultiselect
                        @dataList  	= {{this.dateList}} 
                        @editable		= {{true}}
                        @onUpdate   = {{fn this.onSeverityUpdate}}/>
                    
                */
                {
                  id: "/RXooZmY",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n      \"],[5,\"ui-components/form-fields/textfield-multiselect\",[],[[\"@dataList\",\"@editable\",\"@onUpdate\"],[[23,0,[\"dateList\"]],true,[28,\"fn\",[[23,0,[\"onSeverityUpdate\"]]],null]]]],[0,\"\\n    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context5.next = 6;
                return _textfieldMultiselect.default.removePill();

              case 6:
                // Assert
                assert.equal(_textfieldMultiselect.default.pill.length, 0, 'pills is removed when click on remove icon');

              case 7:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it render a pill and cick on it. pill is removed. the text moved to input text box for edit', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                // Arrange
                this.set('dataList', ['OK']);
                this.set('onSeverityUpdate', function (arr) {
                  _this2.set('dataList', arr);
                }); // Act

                _context6.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                      <UiComponents::FormFields::TextfieldMultiselect
                        @dataList  	= {{this.dataList}} 
                        @editable		= {{true}}
                        @onUpdate   = {{fn this.onSeverityUpdate}}/>
                    
                */
                {
                  id: "E/PGbvGM",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n      \"],[5,\"ui-components/form-fields/textfield-multiselect\",[],[[\"@dataList\",\"@editable\",\"@onUpdate\"],[[23,0,[\"dataList\"]],true,[28,\"fn\",[[23,0,[\"onSeverityUpdate\"]]],null]]]],[0,\"\\n    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context6.next = 6;
                return _textfieldMultiselect.default.editPill();

              case 6:
                // Assert
                assert.equal(_textfieldMultiselect.default.pill.length, 0, 'pills is removed and filled to input box when pill is clicked');
                assert.equal(_textfieldMultiselect.default.value, 'OK', 'OK input value confirmed when click on OK pill');

              case 8:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x6) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('remove a pill when Backspace key pressed', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var _this3 = this;

        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                // Arrange
                this.set('dataList', DATA_LIST_VALUES);
                this.set('onSeverityUpdate', function (arr) {
                  _this3.set('dataList', arr);
                }); // Act

                _context7.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                      <UiComponents::FormFields::TextfieldMultiselect
                        @dataList  	= {{this.dataList}}
                        @editable		= {{true}}
                        @onUpdate   = {{fn this.onSeverityUpdate}}/>
                    
                */
                {
                  id: "E/PGbvGM",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n      \"],[5,\"ui-components/form-fields/textfield-multiselect\",[],[[\"@dataList\",\"@editable\",\"@onUpdate\"],[[23,0,[\"dataList\"]],true,[28,\"fn\",[[23,0,[\"onSeverityUpdate\"]]],null]]]],[0,\"\\n    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context7.next = 6;
                return (0, _testHelpers.triggerKeyEvent)(_textfieldMultiselect.default.inputEle, 'keydown', _textfieldMultiselect.default.backspaceKey);

              case 6:
                // Assert
                assert.equal(_textfieldMultiselect.default.pill.length, 3, '1 pill removed when backspace key pressed');

              case 7:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x7) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('add value through input  with separater Enter keypressed ', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var _this4 = this;

        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                // Arrange
                this.set('dataList', null);
                this.set('onSeverityUpdate', function (arr) {
                  _this4.set('dataList', arr);
                }); // Act

                _context8.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                      <UiComponents::FormFields::TextfieldMultiselect
                        @dataList  	= {{this.dataList}}
                        @editable		= {{true}} 
                        @onUpdate   = {{fn this.onSeverityUpdate}}/>
                    
                */
                {
                  id: "E/PGbvGM",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n      \"],[5,\"ui-components/form-fields/textfield-multiselect\",[],[[\"@dataList\",\"@editable\",\"@onUpdate\"],[[23,0,[\"dataList\"]],true,[28,\"fn\",[[23,0,[\"onSeverityUpdate\"]]],null]]]],[0,\"\\n    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context8.next = 6;
                return _textfieldMultiselect.default.fillInInput('warn');

              case 6:
                _context8.next = 8;
                return (0, _testHelpers.triggerKeyEvent)(_textfieldMultiselect.default.inputEle, 'keydown', _textfieldMultiselect.default.enterKey);

              case 8:
                // Assert
                assert.equal(_textfieldMultiselect.default.pill.length, 1, '1 pill rendered when text set to input and Enter key pressed');

              case 9:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x8) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('add value through input with separater collan keypressed', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        var _this5 = this;

        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                // Arrange
                this.set('dataList', null);
                this.set('onSeverityUpdate', function (arr) {
                  _this5.set('dataList', arr);
                }); // Act

                _context9.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                        <UiComponents::FormFields::TextfieldMultiselect
                          @dataList  	= {{this.dataList}}
                          @editable		= {{true}} 
                          @onUpdate   = {{fn this.onSeverityUpdate}}/>
                      
                */
                {
                  id: "9xcA51Hg",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n        \"],[5,\"ui-components/form-fields/textfield-multiselect\",[],[[\"@dataList\",\"@editable\",\"@onUpdate\"],[[23,0,[\"dataList\"]],true,[28,\"fn\",[[23,0,[\"onSeverityUpdate\"]]],null]]]],[0,\"\\n      \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context9.next = 6;
                return _textfieldMultiselect.default.fillInInput('OK');

              case 6:
                _context9.next = 8;
                return (0, _testHelpers.triggerKeyEvent)(_textfieldMultiselect.default.inputEle, 'keydown', _textfieldMultiselect.default.colonKey);

              case 8:
                // Assert
                assert.equal(_textfieldMultiselect.default.pill.length, 1, '1 pill rendered when text set to input and colon key pressed');

              case 9:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x9) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('add value through input with separater comma keypressed', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var _this6 = this;

        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                // Arrange
                this.set('dataList', null);
                this.set('onSeverityUpdate', function (arr) {
                  _this6.set('dataList', arr);
                }); // Act

                _context10.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                        <UiComponents::FormFields::TextfieldMultiselect
                          @dataList  	= {{this.dataList}}
                          @editable		= {{true}} 
                          @onUpdate   = {{fn this.onSeverityUpdate}}/>
                      
                */
                {
                  id: "9xcA51Hg",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n        \"],[5,\"ui-components/form-fields/textfield-multiselect\",[],[[\"@dataList\",\"@editable\",\"@onUpdate\"],[[23,0,[\"dataList\"]],true,[28,\"fn\",[[23,0,[\"onSeverityUpdate\"]]],null]]]],[0,\"\\n      \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context10.next = 6;
                return _textfieldMultiselect.default.fillInInput('error');

              case 6:
                _context10.next = 8;
                return (0, _testHelpers.triggerKeyEvent)(_textfieldMultiselect.default.inputEle, 'keydown', _textfieldMultiselect.default.commaKey);

              case 8:
                // Assert
                assert.equal(_textfieldMultiselect.default.pill.length, 1, '1 pill rendered when text set to input and Comma key pressed');

              case 9:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x10) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('add value through input on blur action', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        var _this7 = this;

        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                // Arrange
                this.set('dataList', null);
                this.set('onSeverityUpdate', function (arr) {
                  _this7.set('dataList', arr);
                }); // Act

                _context11.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                      <UiComponents::FormFields::TextfieldMultiselect
                        @dataList  	= {{this.dataList}}
                        @editable		= {{true}} 
                        @onUpdate   = {{fn this.onSeverityUpdate}}/>
                    
                */
                {
                  id: "E/PGbvGM",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n      \"],[5,\"ui-components/form-fields/textfield-multiselect\",[],[[\"@dataList\",\"@editable\",\"@onUpdate\"],[[23,0,[\"dataList\"]],true,[28,\"fn\",[[23,0,[\"onSeverityUpdate\"]]],null]]]],[0,\"\\n    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context11.next = 6;
                return _textfieldMultiselect.default.fillInInput('critical');

              case 6:
                _context11.next = 8;
                return _textfieldMultiselect.default.blurInput();

              case 8:
                // Assert
                assert.equal(_textfieldMultiselect.default.pill.length, 1, '1 pill rendered when text set to input on blur action');

              case 9:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x11) {
        return _ref12.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/ui-components/import/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/intl", "ember-power-select/test-support", "ember-power-select/test-support/helpers", "freshservice/tests/lib/set-locale-timezone-moment", "freshservice/tests/lib/stub-fetch"], function (_qunit, _emberQunit, _testHelpers, _sinonContext, _intl, _testSupport, _helpers, _setLocaleTimezoneMoment, _stubFetch) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var MAPPING_MOCK_DATA = {
    "success": true,
    "csv_fields": [{
      "name": "Text_field_one",
      "id": 0,
      "value": "record 2"
    }, {
      "name": "field two",
      "id": 1,
      "value": "value 1"
    }],
    "bo_fields": [{
      "name": "text_field_one",
      "label": "text_field_one",
      "required": true
    }, {
      "name": "number_field_one",
      "label": "number field one",
      "required": false
    }]
  };
  (0, _qunit.module)('Integration | Component | ui-components/import', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _setLocaleTimezoneMoment.setLocaleAndTimeZoneForMoment)(hooks);
    (0, _qunit.test)('check import flow', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var sinon, fetchStub;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                sinon = (0, _sinonContext.getSinonContext)();
                this.set('importParamsObj', {
                  IMPORT_STATUS_URL: 'business_objects/1/show_import',
                  FIELD_MAPPING_URL: 'business_objects/1/map_fields',
                  IMPORT_URL: 'business_objects/1/import_data'
                }), this.set('closeAction', function () {});
                sinon.stub(FileReader.prototype, 'readAsDataURL').callsFake(function () {
                  this.onload({
                    target: {
                      result: 'text/csv'
                    }
                  });
                });
                fetchStub = (0, _stubFetch.stubFetch)();
                fetchStub.withArgs('business_objects/1/show_import').onCall(0).returns(Promise.resolve({}));
                fetchStub.withArgs('business_objects/1/show_import').onCall(1).returns(Promise.resolve({
                  import_running: true,
                  import_status: {
                    created: 50,
                    failed: 5,
                    started_at: "2020-10-08 21:50:22 +0530",
                    total: 100,
                    updated: 2,
                    user: "Robin Thomas"
                  },
                  success: true
                }));
                fetchStub.withArgs('business_objects/1/show_import').onCall(2).returns(Promise.resolve({
                  import_running: false,
                  import_status: {
                    created: 85,
                    failed: 10,
                    started_at: "2020-10-08 21:50:22 +0530",
                    total: 100,
                    updated: 5,
                    user: "Robin Thomas"
                  },
                  success: true
                }));
                fetchStub.withArgs('business_objects/1/map_fields').returns(Promise.resolve(MAPPING_MOCK_DATA));
                fetchStub.withArgs('business_objects/1/import_data').returns(Promise.resolve({}));
                _context.next = 11;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                      <UiComponents::Import 
                          @closeAction={{this.closeAction}}
                          @showFieldMapping={{true}}
                          @statusPollingInterval={{1000}}
                          @pathURLs={{this.importParamsObj}}/>
                    
                */
                {
                  id: "GY5fBQ0V",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n      \"],[5,\"ui-components/import\",[],[[\"@closeAction\",\"@showFieldMapping\",\"@statusPollingInterval\",\"@pathURLs\"],[[23,0,[\"closeAction\"]],true,1000,[23,0,[\"importParamsObj\"]]]]],[0,\"\\n    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 11:
                _context.next = 13;
                return (0, _testHelpers.triggerEvent)('[name="files[]"', 'change', {
                  files: [{
                    name: 'sample-csv-file.csv',
                    type: 'csv'
                  }]
                });

              case 13:
                assert.ok((0, _testHelpers.find)('#file-name').textContent, 'sample-csv-file.csv', 'file selected');
                _context.next = 16;
                return (0, _testHelpers.click)('[data-test-id="modal-submit"]');

              case 16:
                _context.next = 18;
                return (0, _helpers.clickTrigger)('[data-test-field-name="number field one"]');

              case 18:
                _context.next = 20;
                return (0, _helpers.typeInSearch)("field two");

              case 20:
                _context.next = 22;
                return (0, _testSupport.selectChoose)('[data-test-field-name="number field one"]', "field two");

              case 22:
                (0, _testHelpers.click)('[data-test-id="modal-submit"]');
                _context.next = 25;
                return (0, _testHelpers.waitUntil)(function () {
                  return (0, _testHelpers.find)("[data-test-status-pill]").textContent.trim() === 'In progress';
                }, {
                  timeout: 1000
                });

              case 25:
                _context.next = 27;
                return (0, _testHelpers.waitUntil)(function () {
                  return (0, _testHelpers.find)("[data-test-status-pill]").textContent.trim() === 'Partially Completed';
                }, {
                  timeout: 2000
                });

              case 27:
                assert.equal((0, _testHelpers.find)('[data-test-result="total"]').textContent.trim(), 100);
                assert.equal((0, _testHelpers.find)('[data-test-result="created"]').textContent.trim(), 85);
                assert.equal((0, _testHelpers.find)('[data-test-result="updated"]').textContent.trim(), 5);
                assert.equal((0, _testHelpers.find)('[data-test-result="failed"]').textContent.trim(), 10);

              case 31:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('check drag and drop file', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var sinon, fetchStub;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                sinon = (0, _sinonContext.getSinonContext)();
                this.set('importParamsObj', {
                  IMPORT_STATUS_URL: 'business_objects/1/show_import',
                  FIELD_MAPPING_URL: 'business_objects/1/map_fields',
                  IMPORT_URL: 'business_objects/1/import_data'
                }), this.set('closeAction', function () {});
                sinon.stub(FileReader.prototype, 'readAsDataURL').callsFake(function () {
                  this.onload({
                    target: {
                      result: 'text/csv'
                    }
                  });
                });
                fetchStub = (0, _stubFetch.stubFetch)();
                fetchStub.withArgs('business_objects/1/show_import').onCall(0).returns(Promise.resolve({}));
                _context2.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                      <UiComponents::Import 
                          @closeAction={{this.closeAction}}
                          @showFieldMapping={{true}}
                          @statusPollingInterval={{1000}}
                          @pathURLs={{this.importParamsObj}}/>
                    
                */
                {
                  id: "GY5fBQ0V",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n      \"],[5,\"ui-components/import\",[],[[\"@closeAction\",\"@showFieldMapping\",\"@statusPollingInterval\",\"@pathURLs\"],[[23,0,[\"closeAction\"]],true,1000,[23,0,[\"importParamsObj\"]]]]],[0,\"\\n    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                _context2.next = 9;
                return (0, _testHelpers.triggerEvent)('[name="files[]"', 'drop', {
                  dataTransfer: {
                    files: [{
                      name: 'sample-csv-file.csv',
                      type: 'csv'
                    }]
                  }
                });

              case 9:
                assert.ok((0, _testHelpers.find)('#file-name').textContent, 'sample-csv-file.csv', 'file selected');
                _context2.next = 12;
                return (0, _testHelpers.click)('.file-container .close-icon');

              case 12:
                assert.notOk((0, _testHelpers.find)('#file-name'), 'file removed');

              case 13:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/ui-components/link-to-pjax/component-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | ui-components/link-to-pjax', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('Should render LinkToPjax without models', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::LinkToPjax @transitionTo={{hash name="purchase_orders"}}>PO</UiComponents::LinkToPjax>
                */
                {
                  id: "/4Q2LxaR",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/link-to-pjax\",[],[[\"@transitionTo\"],[[28,\"hash\",null,[[\"name\"],[\"purchase_orders\"]]]]],{\"statements\":[[0,\"PO\"]],\"parameters\":[]}]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.equal(document.querySelectorAll('a[data-pjax]').length, 1);

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render LinkToPjax with single model', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::LinkToPjax @transitionTo={{hash name="solutions.index.all_articles" models="all_articles"}}>KB Index</UiComponents::LinkToPjax>
                */
                {
                  id: "NJWdy1Pg",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/link-to-pjax\",[],[[\"@transitionTo\"],[[28,\"hash\",null,[[\"name\",\"models\"],[\"solutions.index.all_articles\",\"all_articles\"]]]]],{\"statements\":[[0,\"KB Index\"]],\"parameters\":[]}]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.equal(document.querySelectorAll('a[data-pjax]').length, 1);

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render LinkToPjax with two models', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::LinkToPjax @transitionTo={{hash name="solutions.index.categories.folders" models=(array 1 2)}}>Folder</UiComponents::LinkToPjax>
                */
                {
                  id: "bBAvfzut",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/link-to-pjax\",[],[[\"@transitionTo\"],[[28,\"hash\",null,[[\"name\",\"models\"],[\"solutions.index.categories.folders\",[28,\"array\",[1,2],null]]]]]],{\"statements\":[[0,\"Folder\"]],\"parameters\":[]}]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.equal(document.querySelectorAll('a[data-pjax]').length, 1);

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/ui-components/multitab-nav/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl", "ember-cli-mirage/test-support", "freshservice/constants/keyboard-code-enums"], function (_qunit, _emberQunit, _testHelpers, _intl, _testSupport, _keyboardCodeEnums) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | ui-components/multitab-nav', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.set('tabsUsed', this.server.db.tabs);
              this.set('intl', this.owner.lookup("service:intl"));

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('renders nav component', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.set('tabs', this.tabsUsed.find(1).tabs);
                this.set('staticRender', true);
                _context2.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<UiComponents::MultitabNav @module="ticket_details" @isStaticPaneRender={{this.staticRender}} @tabs={{this.tabs}} @renderInPlace={{true}} as |parentNav|>
                				<UiComponents::MultitabPane @setPaneReference={{parentNav.setPaneReference}} @contextFor={{"tasks"}} @paneId={{parentNav.id}}>
                					<p>tasks component here</p>
                				</UiComponents::MultitabPane>
                			</UiComponents::MultitabNav>
                		
                */
                {
                  id: "yBI/CBNL",
                  block: "{\"symbols\":[\"parentNav\"],\"statements\":[[0,\"\\n\\t\\t\\t\"],[5,\"ui-components/multitab-nav\",[],[[\"@module\",\"@isStaticPaneRender\",\"@tabs\",\"@renderInPlace\"],[\"ticket_details\",[23,0,[\"staticRender\"]],[23,0,[\"tabs\"]],true]],{\"statements\":[[0,\"\\n\\t\\t\\t\\t\"],[5,\"ui-components/multitab-pane\",[],[[\"@setPaneReference\",\"@contextFor\",\"@paneId\"],[[23,1,[\"setPaneReference\"]],\"tasks\",[23,1,[\"id\"]]]],{\"statements\":[[0,\"\\n\\t\\t\\t\\t\\t\"],[7,\"p\",true],[8],[0,\"tasks component here\"],[9],[0,\"\\n\\t\\t\\t\\t\"]],\"parameters\":[]}],[0,\"\\n\\t\\t\\t\"]],\"parameters\":[1]}],[0,\"\\n\\t\\t\"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                assert.dom('[data-test-multitab-navbar]').exists({
                  count: 1
                }, "Rendered tab-nav component");
                assert.dom('[data-test-multitab-navitem]').exists({
                  count: this.tabs.length
                }, "all tabs given are rendered");
                assert.dom('[data-test-multitab-pane-content]').exists({
                  count: 1
                }, "pane region is created");

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('checking component properties and tab interactions', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var lastMoreItemName, navItems, lastNavItemName, newFirstMoreItemName, newNavItems, newLastNavItem, newLastNavItemName, updateTitleBtn, newTabTitle, incTabCountButton, decTabCountButton, navCount, incNavCount, decNavCount;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                this.set('tabs', this.tabsUsed.find(2).tabs);
                this.set('maxNavCount', 3);
                this.set('renderInPlace', false);
                this.set('destination', "ticket-tabs-container");
                this.set('staticRender', true);
                _context4.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<div id="ticket-tabs-container" data-test-wormhole-dest></div>
                			<div data-test-in-place>
                				<UiComponents::MultitabNav @module="ticket_details" @isStaticPaneRender={{this.staticRender}} @tabs={{this.tabs}} @destination={{this.destination}} @renderInPlace={{this.renderInPlace}} @maxNavCount={{this.maxNavCount}} as |parentNav|>
                					<UiComponents::MultitabPane @setPaneReference={{parentNav.setPaneReference}} @contextFor={{"details"}} @paneId={{parentNav.id}}>
                						<p>Details component here</p>
                					</UiComponents::MultitabPane>
                					<UiComponents::MultitabPane @setPaneReference={{parentNav.setPaneReference}} @contextFor={{"child_ticket"}} @paneId={{parentNav.id}}>
                						Child ticket component here once ready
                					</UiComponents::MultitabPane>
                					<UiComponents::MultitabPane @setPaneReference={{parentNav.setPaneReference}} @contextFor={{"tasks"}} @paneId={{parentNav.id}}>
                						task component here
                					</UiComponents::MultitabPane>
                					<UiComponents::MultitabPane @setPaneReference={{parentNav.setPaneReference}} @contextFor={{"assets"}} @paneId={{parentNav.id}}>
                						asset component here once ready
                					</UiComponents::MultitabPane>
                					<UiComponents::MultitabPane @setPaneReference={{parentNav.setPaneReference}} @contextFor={{"associations"}} @paneId={{parentNav.id}}>
                						associations component Here once ready
                					</UiComponents::MultitabPane>
                					<UiComponents::MultitabPane @setPaneReference={{parentNav.setPaneReference}} @contextFor={{"activities"}} @paneId={{parentNav.id}}>
                						activities component here once ready
                					</UiComponents::MultitabPane>
                				</UiComponents::MultitabNav>
                			</div>
                		
                */
                {
                  id: "6hUbEsfk",
                  block: "{\"symbols\":[\"parentNav\"],\"statements\":[[0,\"\\n\\t\\t\\t\"],[7,\"div\",true],[10,\"id\",\"ticket-tabs-container\"],[10,\"data-test-wormhole-dest\",\"\"],[8],[9],[0,\"\\n\\t\\t\\t\"],[7,\"div\",true],[10,\"data-test-in-place\",\"\"],[8],[0,\"\\n\\t\\t\\t\\t\"],[5,\"ui-components/multitab-nav\",[],[[\"@module\",\"@isStaticPaneRender\",\"@tabs\",\"@destination\",\"@renderInPlace\",\"@maxNavCount\"],[\"ticket_details\",[23,0,[\"staticRender\"]],[23,0,[\"tabs\"]],[23,0,[\"destination\"]],[23,0,[\"renderInPlace\"]],[23,0,[\"maxNavCount\"]]]],{\"statements\":[[0,\"\\n\\t\\t\\t\\t\\t\"],[5,\"ui-components/multitab-pane\",[],[[\"@setPaneReference\",\"@contextFor\",\"@paneId\"],[[23,1,[\"setPaneReference\"]],\"details\",[23,1,[\"id\"]]]],{\"statements\":[[0,\"\\n\\t\\t\\t\\t\\t\\t\"],[7,\"p\",true],[8],[0,\"Details component here\"],[9],[0,\"\\n\\t\\t\\t\\t\\t\"]],\"parameters\":[]}],[0,\"\\n\\t\\t\\t\\t\\t\"],[5,\"ui-components/multitab-pane\",[],[[\"@setPaneReference\",\"@contextFor\",\"@paneId\"],[[23,1,[\"setPaneReference\"]],\"child_ticket\",[23,1,[\"id\"]]]],{\"statements\":[[0,\"\\n\\t\\t\\t\\t\\t\\tChild ticket component here once ready\\n\\t\\t\\t\\t\\t\"]],\"parameters\":[]}],[0,\"\\n\\t\\t\\t\\t\\t\"],[5,\"ui-components/multitab-pane\",[],[[\"@setPaneReference\",\"@contextFor\",\"@paneId\"],[[23,1,[\"setPaneReference\"]],\"tasks\",[23,1,[\"id\"]]]],{\"statements\":[[0,\"\\n\\t\\t\\t\\t\\t\\ttask component here\\n\\t\\t\\t\\t\\t\"]],\"parameters\":[]}],[0,\"\\n\\t\\t\\t\\t\\t\"],[5,\"ui-components/multitab-pane\",[],[[\"@setPaneReference\",\"@contextFor\",\"@paneId\"],[[23,1,[\"setPaneReference\"]],\"assets\",[23,1,[\"id\"]]]],{\"statements\":[[0,\"\\n\\t\\t\\t\\t\\t\\tasset component here once ready\\n\\t\\t\\t\\t\\t\"]],\"parameters\":[]}],[0,\"\\n\\t\\t\\t\\t\\t\"],[5,\"ui-components/multitab-pane\",[],[[\"@setPaneReference\",\"@contextFor\",\"@paneId\"],[[23,1,[\"setPaneReference\"]],\"associations\",[23,1,[\"id\"]]]],{\"statements\":[[0,\"\\n\\t\\t\\t\\t\\t\\tassociations component Here once ready\\n\\t\\t\\t\\t\\t\"]],\"parameters\":[]}],[0,\"\\n\\t\\t\\t\\t\\t\"],[5,\"ui-components/multitab-pane\",[],[[\"@setPaneReference\",\"@contextFor\",\"@paneId\"],[[23,1,[\"setPaneReference\"]],\"activities\",[23,1,[\"id\"]]]],{\"statements\":[[0,\"\\n\\t\\t\\t\\t\\t\\tactivities component here once ready\\n\\t\\t\\t\\t\\t\"]],\"parameters\":[]}],[0,\"\\n\\t\\t\\t\\t\"]],\"parameters\":[1]}],[0,\"\\n\\t\\t\\t\"],[9],[0,\"\\n\\t\\t\"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                assert.equal(this.staticRender, true, "uses static pane definition");
                assert.equal(this.renderInPlace, false, "renderInPlace set to false");
                assert.ok(this.destination.length, "destination is set");
                assert.dom('[data-test-in-place] [data-test-multitab-navbar]').doesNotExist("Navbar is not rendered in place");
                assert.dom('[data-test-wormhole-dest] [data-test-multitab-navbar]').exists({
                  count: 1
                }, "Navbar has been Wormholed to destination");
                assert.dom('[data-test-multitab-navitem]:not([data-test-multitab-moreitem]), [data-test-multitab-morebtn]').exists({
                  count: this.maxNavCount
                }, "more btn rendered for tabs with size greater than maxNavCount");
                assert.dom('[data-test-multitab-navitem]').exists({
                  count: this.tabs.length
                }, "All tabs are present after more enabled");
                assert.dom('[data-test-multitab-moremenu]').hasClass('hide', "more menu is hidden");
                lastMoreItemName = this.element.querySelector('[data-test-multitab-moreitem]:last-child').textContent.trim();
                navItems = this.element.querySelectorAll('[data-test-multitab-navitem]:not([data-test-multitab-moreitem])');
                lastNavItemName = navItems[navItems.length - 1].textContent.trim();
                _context4.next = 20;
                return (0, _testHelpers.click)('[data-test-multitab-morebtn]');

              case 20:
                assert.dom('[data-test-multitab-moremenu]').doesNotHaveClass('hide', "on more btn click more menu is open");
                _context4.next = 23;
                return (0, _testHelpers.click)('[data-test-multitab-moreitem]:last-child');

              case 23:
                newFirstMoreItemName = this.element.querySelector('[data-test-multitab-moreitem]:first-child').textContent.trim();
                newNavItems = this.element.querySelectorAll('[data-test-multitab-navitem]:not([data-test-multitab-moreitem])');
                newLastNavItem = newNavItems[newNavItems.length - 1];
                newLastNavItemName = newLastNavItem.textContent.trim();
                assert.equal(newLastNavItemName, lastMoreItemName, "tabs in more on selection is moved out of more dropdown to last entry of nav items");
                assert.equal(lastNavItemName, newFirstMoreItemName, "last nav item previously present is moved into more dropdown");
                assert.dom(newLastNavItem).hasClass('active', "after another tab selection, it is set as current tab");
                assert.dom('[data-test-multitab-moremenu]').hasClass('hide', "on tab selection from more dropdown, more menu is hidden");
                this.set('renderInPlace', true);
                _context4.next = 34;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<div id="ticket-tabs-container" data-test-wormhole-dest></div>
                			<div data-test-in-place>
                				<UiComponents::MultitabNav @module={{"ticket_details"}} @tabs={{this.tabs}} @destination={{this.destination}} @renderInPlace={{this.renderInPlace}} as |parentNav|>
                					<UiComponents::MultitabPane @setPaneReference={{parentNav.setPaneReference}} @contextFor={{"details"}} @paneId={{parentNav.id}}>
                						<p>Details component here</p>
                					</UiComponents::MultitabPane>
                					<UiComponents::MultitabPane @setPaneReference={{parentNav.setPaneReference}} @contextFor={{"child_ticket"}} @paneId={{parentNav.id}} @updateTabTitle={{parentNav.updateTabTitle}}>
                						Child ticket component here once ready
                						<button type="button" data-test-change-tab-title {{on "click" (fn parentNav.updateTabTitle 'fs.tickets.tabs.tasks')}}>Update tab title</button>
                					</UiComponents::MultitabPane>
                					<UiComponents::MultitabPane @setPaneReference={{parentNav.setPaneReference}} @contextFor={{"tasks"}} @paneId={{parentNav.id}} @updateCount={{parentNav.updateCount}}>
                						task component here
                						<button type="button" data-test-increase-tab-count {{on "click" (fn parentNav.updateTabCount 1)}}>Increase count</button>
                						<button type="button" data-test-decrease-tab-count {{on "click" (fn parentNav.updateTabCount -1)}}>decrease count</button>
                					</UiComponents::MultitabPane>
                					<UiComponents::MultitabPane @setPaneReference={{parentNav.setPaneReference}} @contextFor={{"assets"}} @paneId={{parentNav.id}}>
                						asset component here once ready
                					</UiComponents::MultitabPane>
                					<UiComponents::MultitabPane @setPaneReference={{parentNav.setPaneReference}} @contextFor={{"associations"}} @paneId={{parentNav.id}}>
                						associations component Here once ready
                					</UiComponents::MultitabPane>
                					<UiComponents::MultitabPane @setPaneReference={{parentNav.setPaneReference}} @contextFor={{"activities"}} @paneId={{parentNav.id}}>
                						activities component here once ready
                					</UiComponents::MultitabPane>
                				</UiComponents::MultitabNav>
                			</div>
                		
                */
                {
                  id: "3qfKiQrr",
                  block: "{\"symbols\":[\"parentNav\"],\"statements\":[[0,\"\\n\\t\\t\\t\"],[7,\"div\",true],[10,\"id\",\"ticket-tabs-container\"],[10,\"data-test-wormhole-dest\",\"\"],[8],[9],[0,\"\\n\\t\\t\\t\"],[7,\"div\",true],[10,\"data-test-in-place\",\"\"],[8],[0,\"\\n\\t\\t\\t\\t\"],[5,\"ui-components/multitab-nav\",[],[[\"@module\",\"@tabs\",\"@destination\",\"@renderInPlace\"],[\"ticket_details\",[23,0,[\"tabs\"]],[23,0,[\"destination\"]],[23,0,[\"renderInPlace\"]]]],{\"statements\":[[0,\"\\n\\t\\t\\t\\t\\t\"],[5,\"ui-components/multitab-pane\",[],[[\"@setPaneReference\",\"@contextFor\",\"@paneId\"],[[23,1,[\"setPaneReference\"]],\"details\",[23,1,[\"id\"]]]],{\"statements\":[[0,\"\\n\\t\\t\\t\\t\\t\\t\"],[7,\"p\",true],[8],[0,\"Details component here\"],[9],[0,\"\\n\\t\\t\\t\\t\\t\"]],\"parameters\":[]}],[0,\"\\n\\t\\t\\t\\t\\t\"],[5,\"ui-components/multitab-pane\",[],[[\"@setPaneReference\",\"@contextFor\",\"@paneId\",\"@updateTabTitle\"],[[23,1,[\"setPaneReference\"]],\"child_ticket\",[23,1,[\"id\"]],[23,1,[\"updateTabTitle\"]]]],{\"statements\":[[0,\"\\n\\t\\t\\t\\t\\t\\tChild ticket component here once ready\\n\\t\\t\\t\\t\\t\\t\"],[7,\"button\",false],[12,\"data-test-change-tab-title\",\"\"],[12,\"type\",\"button\"],[3,\"on\",[\"click\",[28,\"fn\",[[23,1,[\"updateTabTitle\"]],\"fs.tickets.tabs.tasks\"],null]]],[8],[0,\"Update tab title\"],[9],[0,\"\\n\\t\\t\\t\\t\\t\"]],\"parameters\":[]}],[0,\"\\n\\t\\t\\t\\t\\t\"],[5,\"ui-components/multitab-pane\",[],[[\"@setPaneReference\",\"@contextFor\",\"@paneId\",\"@updateCount\"],[[23,1,[\"setPaneReference\"]],\"tasks\",[23,1,[\"id\"]],[23,1,[\"updateCount\"]]]],{\"statements\":[[0,\"\\n\\t\\t\\t\\t\\t\\ttask component here\\n\\t\\t\\t\\t\\t\\t\"],[7,\"button\",false],[12,\"data-test-increase-tab-count\",\"\"],[12,\"type\",\"button\"],[3,\"on\",[\"click\",[28,\"fn\",[[23,1,[\"updateTabCount\"]],1],null]]],[8],[0,\"Increase count\"],[9],[0,\"\\n\\t\\t\\t\\t\\t\\t\"],[7,\"button\",false],[12,\"data-test-decrease-tab-count\",\"\"],[12,\"type\",\"button\"],[3,\"on\",[\"click\",[28,\"fn\",[[23,1,[\"updateTabCount\"]],-1],null]]],[8],[0,\"decrease count\"],[9],[0,\"\\n\\t\\t\\t\\t\\t\"]],\"parameters\":[]}],[0,\"\\n\\t\\t\\t\\t\\t\"],[5,\"ui-components/multitab-pane\",[],[[\"@setPaneReference\",\"@contextFor\",\"@paneId\"],[[23,1,[\"setPaneReference\"]],\"assets\",[23,1,[\"id\"]]]],{\"statements\":[[0,\"\\n\\t\\t\\t\\t\\t\\tasset component here once ready\\n\\t\\t\\t\\t\\t\"]],\"parameters\":[]}],[0,\"\\n\\t\\t\\t\\t\\t\"],[5,\"ui-components/multitab-pane\",[],[[\"@setPaneReference\",\"@contextFor\",\"@paneId\"],[[23,1,[\"setPaneReference\"]],\"associations\",[23,1,[\"id\"]]]],{\"statements\":[[0,\"\\n\\t\\t\\t\\t\\t\\tassociations component Here once ready\\n\\t\\t\\t\\t\\t\"]],\"parameters\":[]}],[0,\"\\n\\t\\t\\t\\t\\t\"],[5,\"ui-components/multitab-pane\",[],[[\"@setPaneReference\",\"@contextFor\",\"@paneId\"],[[23,1,[\"setPaneReference\"]],\"activities\",[23,1,[\"id\"]]]],{\"statements\":[[0,\"\\n\\t\\t\\t\\t\\t\\tactivities component here once ready\\n\\t\\t\\t\\t\\t\"]],\"parameters\":[]}],[0,\"\\n\\t\\t\\t\\t\"]],\"parameters\":[1]}],[0,\"\\n\\t\\t\\t\"],[9],[0,\"\\n\\t\\t\"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 34:
                assert.equal(this.renderInPlace, true, "setting renderInPlace to true");
                assert.dom('[data-test-wormhole-dest] [data-test-multitab-navbar]').doesNotExist("Navbar has not been Wormholed to destination");
                assert.dom('[data-test-in-place] [data-test-multitab-navbar]').exists({
                  count: 1
                }, "Navbar has been rendered in place instead of Wormholed to destination");
                _context4.next = 39;
                return (0, _testHelpers.click)('[data-test-id="child_ticket"]');

              case 39:
                updateTitleBtn = this.element.querySelector('[data-test-change-tab-title]');
                _context4.next = 42;
                return (0, _testHelpers.click)(updateTitleBtn);

              case 42:
                assert.ok(true, "Update tab title triggered");
                newTabTitle = this.element.querySelector('[data-test-id="child_ticket"] [data-test-multitab-nav-title]').textContent.trim();
                assert.equal(newTabTitle, "Tasks", "Tab Title updated");
                _context4.next = 47;
                return (0, _testHelpers.click)('[data-test-id="tasks"]');

              case 47:
                incTabCountButton = this.element.querySelector('[data-test-increase-tab-count]');
                decTabCountButton = this.element.querySelector('[data-test-decrease-tab-count]');
                navCount = this.element.querySelector('[data-test-id="tasks"] [data-test-multitab-nav-count]').textContent.trim();
                _context4.next = 52;
                return (0, _testHelpers.click)(incTabCountButton);

              case 52:
                assert.ok(true, "Increment tab count triggered");
                incNavCount = this.element.querySelector('[data-test-id="tasks"] [data-test-multitab-nav-count]').textContent.trim();
                assert.equal(incNavCount, parseInt(navCount) + 1, "Tab count incremented by 1");
                navCount = incNavCount;
                _context4.next = 58;
                return (0, _testHelpers.click)(decTabCountButton);

              case 58:
                assert.ok(true, "Decrement tab count triggered");
                decNavCount = this.element.querySelector('[data-test-id="tasks"] [data-test-multitab-nav-count]').textContent.trim();
                assert.equal(decNavCount, parseInt(navCount) - 1, "Tab count decremented by 1");
                this.set('staticRender', false);
                this.set('tabs', this.tabsUsed.find(3).tabs);
                this.set("module", "ticket_details");
                (0, _qunit.skip)('Dev should revisit the case', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          _context3.next = 2;
                          return (0, _testHelpers.render)(Ember.HTMLBars.template(
                          /*
                            
                          				<UiComponents::MultitabNav @isStaticPaneRender={{this.staticRender}} @tabs={{this.tabs}} 
                          					@module={{this.module}} @renderInPlace={{true}} as |parentNav|
                          				>
                          					{{#each parentNav.tabs as |tab|}}
                          						<UiComponents::MultitabPane @setPaneReference={{parentNav.setPaneReference}} @contextFor={{tab.name}} @paneId={{parentNav.id}}>
                          							{{#if tab.componentName}}
                          								{{component tab.componentName
                          									model = this.model
                          									updateTabCount = parentNav.updateTabCount
                          								}}
                          							{{/if}}
                          						</UiComponents::MultitabPane>
                          					{{/each}}
                          				</UiComponents::MultitabNav>
                          			
                          */
                          {
                            id: "US4DpS05",
                            block: "{\"symbols\":[\"parentNav\",\"tab\"],\"statements\":[[0,\"\\n\\t\\t\\t\\t\"],[5,\"ui-components/multitab-nav\",[],[[\"@isStaticPaneRender\",\"@tabs\",\"@module\",\"@renderInPlace\"],[[23,0,[\"staticRender\"]],[23,0,[\"tabs\"]],[23,0,[\"module\"]],true]],{\"statements\":[[0,\"\\n\"],[4,\"each\",[[23,1,[\"tabs\"]]],null,{\"statements\":[[0,\"\\t\\t\\t\\t\\t\\t\"],[5,\"ui-components/multitab-pane\",[],[[\"@setPaneReference\",\"@contextFor\",\"@paneId\"],[[23,1,[\"setPaneReference\"]],[23,2,[\"name\"]],[23,1,[\"id\"]]]],{\"statements\":[[0,\"\\n\"],[4,\"if\",[[23,2,[\"componentName\"]]],null,{\"statements\":[[0,\"\\t\\t\\t\\t\\t\\t\\t\\t\"],[1,[28,\"component\",[[23,2,[\"componentName\"]]],[[\"model\",\"updateTabCount\"],[[23,0,[\"model\"]],[23,1,[\"updateTabCount\"]]]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\t\\t\\t\\t\\t\\t\"]],\"parameters\":[]}],[0,\"\\n\"]],\"parameters\":[2]},null],[0,\"\\t\\t\\t\\t\"]],\"parameters\":[1]}],[0,\"\\n\\t\\t\\t\"]],\"hasEval\":false}",
                            meta: {}
                          }));

                        case 2:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3);
                })));
                assert.equal(this.staticRender, false, "Panes are set for Dynamic Rendering based on tabs");
                assert.notEqual(this.module, null, "Module is not empty, should contain the module name");

              case 67:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should check keyboard accessibility', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var tabBtns;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                this.set('staticRender', true);
                this.set('renderInPlace', true);
                this.set('tabs', this.tabsUsed.find(2).tabs);
                _context5.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<UiComponents::MultitabNav @module="ticket_details" @isStaticPaneRender={{this.staticRender}} @tabs={{this.tabs}} @renderInPlace={{this.renderInPlace}} as |parentNav|>
                				<UiComponents::MultitabPane @setPaneReference={{parentNav.setPaneReference}} @contextFor={{"details"}} @paneId={{parentNav.id}}>
                					<p>Details component here</p>
                				</UiComponents::MultitabPane>
                				<UiComponents::MultitabPane @setPaneReference={{parentNav.setPaneReference}} @contextFor={{"child_ticket"}} @paneId={{parentNav.id}}>
                					Child ticket component here once ready
                				</UiComponents::MultitabPane>
                				<UiComponents::MultitabPane @setPaneReference={{parentNav.setPaneReference}} @contextFor={{"tasks"}} @paneId={{parentNav.id}}>
                					task component here
                				</UiComponents::MultitabPane>
                				<UiComponents::MultitabPane @setPaneReference={{parentNav.setPaneReference}} @contextFor={{"assets"}} @paneId={{parentNav.id}}>
                					asset component here once ready
                				</UiComponents::MultitabPane>
                				<UiComponents::MultitabPane @setPaneReference={{parentNav.setPaneReference}} @contextFor={{"associations"}} @paneId={{parentNav.id}}>
                					associations component Here once ready
                				</UiComponents::MultitabPane>
                				<UiComponents::MultitabPane @setPaneReference={{parentNav.setPaneReference}} @contextFor={{"activities"}} @paneId={{parentNav.id}}>
                					activities component here once ready
                				</UiComponents::MultitabPane>
                			</UiComponents::MultitabNav>
                		
                */
                {
                  id: "RGYR8Y4F",
                  block: "{\"symbols\":[\"parentNav\"],\"statements\":[[0,\"\\n\\t\\t\\t\"],[5,\"ui-components/multitab-nav\",[],[[\"@module\",\"@isStaticPaneRender\",\"@tabs\",\"@renderInPlace\"],[\"ticket_details\",[23,0,[\"staticRender\"]],[23,0,[\"tabs\"]],[23,0,[\"renderInPlace\"]]]],{\"statements\":[[0,\"\\n\\t\\t\\t\\t\"],[5,\"ui-components/multitab-pane\",[],[[\"@setPaneReference\",\"@contextFor\",\"@paneId\"],[[23,1,[\"setPaneReference\"]],\"details\",[23,1,[\"id\"]]]],{\"statements\":[[0,\"\\n\\t\\t\\t\\t\\t\"],[7,\"p\",true],[8],[0,\"Details component here\"],[9],[0,\"\\n\\t\\t\\t\\t\"]],\"parameters\":[]}],[0,\"\\n\\t\\t\\t\\t\"],[5,\"ui-components/multitab-pane\",[],[[\"@setPaneReference\",\"@contextFor\",\"@paneId\"],[[23,1,[\"setPaneReference\"]],\"child_ticket\",[23,1,[\"id\"]]]],{\"statements\":[[0,\"\\n\\t\\t\\t\\t\\tChild ticket component here once ready\\n\\t\\t\\t\\t\"]],\"parameters\":[]}],[0,\"\\n\\t\\t\\t\\t\"],[5,\"ui-components/multitab-pane\",[],[[\"@setPaneReference\",\"@contextFor\",\"@paneId\"],[[23,1,[\"setPaneReference\"]],\"tasks\",[23,1,[\"id\"]]]],{\"statements\":[[0,\"\\n\\t\\t\\t\\t\\ttask component here\\n\\t\\t\\t\\t\"]],\"parameters\":[]}],[0,\"\\n\\t\\t\\t\\t\"],[5,\"ui-components/multitab-pane\",[],[[\"@setPaneReference\",\"@contextFor\",\"@paneId\"],[[23,1,[\"setPaneReference\"]],\"assets\",[23,1,[\"id\"]]]],{\"statements\":[[0,\"\\n\\t\\t\\t\\t\\tasset component here once ready\\n\\t\\t\\t\\t\"]],\"parameters\":[]}],[0,\"\\n\\t\\t\\t\\t\"],[5,\"ui-components/multitab-pane\",[],[[\"@setPaneReference\",\"@contextFor\",\"@paneId\"],[[23,1,[\"setPaneReference\"]],\"associations\",[23,1,[\"id\"]]]],{\"statements\":[[0,\"\\n\\t\\t\\t\\t\\tassociations component Here once ready\\n\\t\\t\\t\\t\"]],\"parameters\":[]}],[0,\"\\n\\t\\t\\t\\t\"],[5,\"ui-components/multitab-pane\",[],[[\"@setPaneReference\",\"@contextFor\",\"@paneId\"],[[23,1,[\"setPaneReference\"]],\"activities\",[23,1,[\"id\"]]]],{\"statements\":[[0,\"\\n\\t\\t\\t\\t\\tactivities component here once ready\\n\\t\\t\\t\\t\"]],\"parameters\":[]}],[0,\"\\n\\t\\t\\t\"]],\"parameters\":[1]}],[0,\"\\n\\t\\t\"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                tabBtns = this.element.querySelectorAll('[data-test-multitab-navitem]');
                _context5.next = 8;
                return (0, _testHelpers.triggerKeyEvent)(tabBtns[0], 'keyup', _keyboardCodeEnums.default.RIGHT_ARROW);

              case 8:
                assert.dom(tabBtns[1]).isFocused('Focus moved to next tab on arrow right key press');
                _context5.next = 11;
                return (0, _testHelpers.triggerKeyEvent)(tabBtns[1], 'keyup', _keyboardCodeEnums.default.ENTER);

              case 11:
                assert.dom(tabBtns[1]).hasClass("active", 'tab activated on enter key press');
                _context5.next = 14;
                return (0, _testHelpers.triggerKeyEvent)(tabBtns[1], 'keyup', _keyboardCodeEnums.default.END);

              case 14:
                assert.dom(tabBtns[tabBtns.length - 1]).isFocused('Focus moved to last tab on end key press');
                _context5.next = 17;
                return (0, _testHelpers.triggerKeyEvent)(tabBtns[tabBtns.length - 1], 'keyup', _keyboardCodeEnums.default.LEFT_ARROW);

              case 17:
                assert.dom(tabBtns[tabBtns.length - 2]).isFocused('Focus moved to previous tab on arrow left key press');
                _context5.next = 20;
                return (0, _testHelpers.triggerKeyEvent)(tabBtns[tabBtns.length - 2], 'keyup', _keyboardCodeEnums.default.SPACE);

              case 20:
                assert.dom(tabBtns[tabBtns.length - 2]).hasClass("active", 'tab activated on space key press');
                _context5.next = 23;
                return (0, _testHelpers.triggerKeyEvent)(tabBtns[tabBtns.length - 2], 'keyup', _keyboardCodeEnums.default.HOME);

              case 23:
                assert.dom(tabBtns[0]).isFocused('Focus moved to first tab on home press');
                _context5.next = 26;
                return (0, _testHelpers.triggerKeyEvent)(tabBtns[0], 'keyup', _keyboardCodeEnums.default.DOWN_ARROW);

              case 26:
                assert.dom(tabBtns[1]).isFocused('Focus moved to next tab on arrow down key press');
                _context5.next = 29;
                return (0, _testHelpers.triggerKeyEvent)(tabBtns[1], 'keyup', _keyboardCodeEnums.default.UP_ARROW);

              case 29:
                assert.dom(tabBtns[0]).isFocused('Focus moved to previous tab on arrow up key press');

              case 30:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x3) {
        return _ref6.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/ui-components/multitab-pane/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl", "ember-cli-mirage/test-support"], function (_qunit, _emberQunit, _testHelpers, _intl, _testSupport) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | ui-components/multitab-pane', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.set('tabsUsed', this.server.db.tabs);
              this.set('intl', this.owner.lookup("service:intl"));

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('renders pane component', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.set('tabs', this.tabsUsed.find(1).tabs);
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<UiComponents::MultitabNav @isStaticPaneRender={{true}} @module={{"ticket_details"}} @tabs={{this.tabs}} @renderInPlace={{true}} as |parentNav|>
                				<UiComponents::MultitabPane @setPaneReference={{parentNav.setPaneReference}} @contextFor={{"tasks"}} @paneId={{parentNav.id}}>
                					tasks component here
                				</UiComponents::MultitabPane>
                			</UiComponents::MultitabNav>
                		
                */
                {
                  id: "/iC0qOJn",
                  block: "{\"symbols\":[\"parentNav\"],\"statements\":[[0,\"\\n\\t\\t\\t\"],[5,\"ui-components/multitab-nav\",[],[[\"@isStaticPaneRender\",\"@module\",\"@tabs\",\"@renderInPlace\"],[true,\"ticket_details\",[23,0,[\"tabs\"]],true]],{\"statements\":[[0,\"\\n\\t\\t\\t\\t\"],[5,\"ui-components/multitab-pane\",[],[[\"@setPaneReference\",\"@contextFor\",\"@paneId\"],[[23,1,[\"setPaneReference\"]],\"tasks\",[23,1,[\"id\"]]]],{\"statements\":[[0,\"\\n\\t\\t\\t\\t\\ttasks component here\\n\\t\\t\\t\\t\"]],\"parameters\":[]}],[0,\"\\n\\t\\t\\t\"]],\"parameters\":[1]}],[0,\"\\n\\t\\t\"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.dom('[data-test-multitab-pane]').exists({
                  count: this.tabs.length
                }, "Rendered tab-pane component");
                assert.dom('[data-test-multitab-pane]').hasText('tasks component here', "Yielded the right content inside pane");

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should test switching panes', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var currentActiveTab, currentActivePaneId, otherTab, otherTabPaneId, oldActivePaneId;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this.set('tabs', this.tabsUsed.find(3).tabs);
                _context3.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<UiComponents::MultitabNav @isStaticPaneRender={{true}} @tabs={{this.tabs}} @renderInPlace={{true}} as |parentNav|>
                				<UiComponents::MultitabPane @setPaneReference={{parentNav.setPaneReference}} @contextFor={{"details"}} @paneId={{parentNav.id}}>
                					Details component here
                				</UiComponents::MultitabPane>
                				<UiComponents::MultitabPane @setPaneReference={{parentNav.setPaneReference}} @contextFor={{"associations"}} @paneId={{parentNav.id}}>
                					association component here
                				</UiComponents::MultitabPane>
                				<UiComponents::MultitabPane @setPaneReference={{parentNav.setPaneReference}} @contextFor={{"activities"}} @paneId={{parentNav.id}}>
                					activities component here
                				</UiComponents::MultitabPane>
                			</UiComponents::MultitabNav>
                		
                */
                {
                  id: "HjTYiK9V",
                  block: "{\"symbols\":[\"parentNav\"],\"statements\":[[0,\"\\n\\t\\t\\t\"],[5,\"ui-components/multitab-nav\",[],[[\"@isStaticPaneRender\",\"@tabs\",\"@renderInPlace\"],[true,[23,0,[\"tabs\"]],true]],{\"statements\":[[0,\"\\n\\t\\t\\t\\t\"],[5,\"ui-components/multitab-pane\",[],[[\"@setPaneReference\",\"@contextFor\",\"@paneId\"],[[23,1,[\"setPaneReference\"]],\"details\",[23,1,[\"id\"]]]],{\"statements\":[[0,\"\\n\\t\\t\\t\\t\\tDetails component here\\n\\t\\t\\t\\t\"]],\"parameters\":[]}],[0,\"\\n\\t\\t\\t\\t\"],[5,\"ui-components/multitab-pane\",[],[[\"@setPaneReference\",\"@contextFor\",\"@paneId\"],[[23,1,[\"setPaneReference\"]],\"associations\",[23,1,[\"id\"]]]],{\"statements\":[[0,\"\\n\\t\\t\\t\\t\\tassociation component here\\n\\t\\t\\t\\t\"]],\"parameters\":[]}],[0,\"\\n\\t\\t\\t\\t\"],[5,\"ui-components/multitab-pane\",[],[[\"@setPaneReference\",\"@contextFor\",\"@paneId\"],[[23,1,[\"setPaneReference\"]],\"activities\",[23,1,[\"id\"]]]],{\"statements\":[[0,\"\\n\\t\\t\\t\\t\\tactivities component here\\n\\t\\t\\t\\t\"]],\"parameters\":[]}],[0,\"\\n\\t\\t\\t\"]],\"parameters\":[1]}],[0,\"\\n\\t\\t\"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                currentActiveTab = this.element.querySelector(".active");
                currentActivePaneId = "panel_".concat(currentActiveTab.getAttribute('data-test-id'));
                assert.dom("[data-test-id=\"".concat(currentActivePaneId, "\"]")).hasAnyText("active tab's pane content is loaded by default");
                otherTab = this.element.querySelector("[data-test-multitab-navitem]:not(.active)");
                otherTabPaneId = "panel_".concat(otherTab.getAttribute('data-test-id'));
                assert.dom("[data-test-id=\"".concat(otherTabPaneId, "\"]")).hasNoText('other pane content is not loaded');
                _context3.next = 11;
                return (0, _testHelpers.click)(otherTab);

              case 11:
                oldActivePaneId = currentActivePaneId;
                currentActiveTab = this.element.querySelector(".active");
                currentActivePaneId = "panel_".concat(currentActiveTab.getAttribute('data-test-id'));
                assert.dom("[data-test-id=\"".concat(currentActivePaneId, "\"]")).hasClass('selected', "on tab activation respective pane component is selected");
                assert.dom("[data-test-id=\"".concat(currentActivePaneId, "\"]")).hasAnyText('on other tab activation its pane content is loaded');
                assert.dom("[data-test-id=\"".concat(oldActivePaneId, "\"]")).hasAnyText("activating new tab doesnt unload the old active pane content");
                assert.dom("[data-test-id=\"".concat(oldActivePaneId, "\"]")).doesNotHaveClass('selected', "activating new tab unselects the old active pane content");

              case 18:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.skip)("should test pane's iterable rendering", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                this.set('tabs', this.tabsUsed.find(3).tabs);
                this.set('staticRender', false);
                this.set('module', "ticket_details");
                this.set('renderInPlace', true);
                _context4.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<UiComponents::MultitabNav @isStaticPaneRender={{this.staticRender}} @tabs={{this.tabs}} 
                				@module={{this.module}} @renderInPlace={{this.renderInPlace}} as |parentNav|
                			>
                				{{#each parentNav.tabs as |tab|}}
                					<UiComponents::MultitabPane @setPaneReference={{parentNav.setPaneReference}} @contextFor={{tab.name}} @paneId={{parentNav.id}}>
                						{{#if tab.componentName}}
                							{{component tab.componentName
                								model = this.model
                								updateTabCount = parentNav.updateTabCount
                							}}
                						{{/if}}
                					</UiComponents::MultitabPane>
                				{{/each}}
                			</UiComponents::MultitabNav>
                		
                */
                {
                  id: "g8767Ute",
                  block: "{\"symbols\":[\"parentNav\",\"tab\"],\"statements\":[[0,\"\\n\\t\\t\\t\"],[5,\"ui-components/multitab-nav\",[],[[\"@isStaticPaneRender\",\"@tabs\",\"@module\",\"@renderInPlace\"],[[23,0,[\"staticRender\"]],[23,0,[\"tabs\"]],[23,0,[\"module\"]],[23,0,[\"renderInPlace\"]]]],{\"statements\":[[0,\"\\n\"],[4,\"each\",[[23,1,[\"tabs\"]]],null,{\"statements\":[[0,\"\\t\\t\\t\\t\\t\"],[5,\"ui-components/multitab-pane\",[],[[\"@setPaneReference\",\"@contextFor\",\"@paneId\"],[[23,1,[\"setPaneReference\"]],[23,2,[\"name\"]],[23,1,[\"id\"]]]],{\"statements\":[[0,\"\\n\"],[4,\"if\",[[23,2,[\"componentName\"]]],null,{\"statements\":[[0,\"\\t\\t\\t\\t\\t\\t\\t\"],[1,[28,\"component\",[[23,2,[\"componentName\"]]],[[\"model\",\"updateTabCount\"],[[23,0,[\"model\"]],[23,1,[\"updateTabCount\"]]]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\t\\t\\t\\t\\t\"]],\"parameters\":[]}],[0,\"\\n\"]],\"parameters\":[2]},null],[0,\"\\t\\t\\t\"]],\"parameters\":[1]}],[0,\"\\n\\t\\t\"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                assert.equal(this.staticRender, false, 'isStaticPaneRender is set to false');
                assert.dom('[data-test-multitab-pane]').exists({
                  count: this.tabs.length
                }, "Rendered tab-pane's components iteratively");

              case 8:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/ui-components/pagination/component-test", ["qunit", "ember-qunit", "sinon", "@ember/test-helpers", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/intl"], function (_qunit, _emberQunit, _sinon, _testHelpers, _stubCurrentUser, _intl) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | ui-components/pagination', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks); // 1.

    (0, _qunit.test)('Should render pagination bar only when the total count is more than the perPage count', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var PAGINATION_BAR;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                PAGINATION_BAR = '.pagination-wrapper .pagination-nav';
                this.set('count', 29);
                _context.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                   <UiComponents::Pagination
                			@pageBasedType           = {{true}}
                			@count                   = {{this.count}}
                			@perPage                 = {{30}}
                			@page                    = {{1}}/>
                		
                */
                {
                  id: "RAv6OoYh",
                  block: "{\"symbols\":[],\"statements\":[[0,\" \"],[5,\"ui-components/pagination\",[],[[\"@pageBasedType\",\"@count\",\"@perPage\",\"@page\"],[true,[23,0,[\"count\"]],30,1]]],[0,\"\\n\\t\\t\"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                assert.dom(PAGINATION_BAR).doesNotExist('Pagination bar is not visible when count (29) < perPage (30)');
                this.set('count', 31);
                assert.dom(PAGINATION_BAR).exists({
                  count: 1
                }, 'Pagination bar is visible when count (31) > perPage (30)');

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }()); // 2.

    (0, _qunit.test)('Should render pagination component with 4 link', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::Pagination
                			@pageBasedType           = {{true}}
                			@count                   = {{100}}
                			@perPage                 = {{30}}
                			@page                    = {{1}}
                			@paginationDetailPreText = {{"fs.common.showing"}}
                			@showPaginationDetails   = {{false}}
                			@hideMany                = {{true}} />
                		
                */
                {
                  id: "P0V5UFj6",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/pagination\",[],[[\"@pageBasedType\",\"@count\",\"@perPage\",\"@page\",\"@paginationDetailPreText\",\"@showPaginationDetails\",\"@hideMany\"],[true,100,30,1,\"fs.common.showing\",false,true]]],[0,\"\\n\\t\\t\"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.dom('[data-test-id="results-pagination"]').exists({
                  count: 1
                });
                assert.dom('.pagination__page').exists({
                  count: 4
                });
                assert.dom('[data-test-id="previous-btn"]').hasClass('pagination__link--disabled');
                assert.dom('[data-test-id="pagination-active"]').hasText('1');

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }()); // 3.

    (0, _qunit.test)('Should render Gap(three dots) when the pagination counts gets too large', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::Pagination
                			@pageBasedType           = {{true}}
                			@count                   = {{1000}}
                			@perPage                 = {{30}}
                			@page                    = {{1}}
                			@paginationDetailPreText = {{"fs.common.showing"}}
                			@showPaginationDetails   = {{false}}
                			@hideMany                = {{true}} />
                		
                */
                {
                  id: "6b1dMl2g",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/pagination\",[],[[\"@pageBasedType\",\"@count\",\"@perPage\",\"@page\",\"@paginationDetailPreText\",\"@showPaginationDetails\",\"@hideMany\"],[true,1000,30,1,\"fs.common.showing\",false,true]]],[0,\"\\n\\t\\t\"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.dom('[data-test-id="pagination-gap"]').exists({
                  count: 1
                }); // click link button

                _context3.next = 5;
                return (0, _testHelpers.click)((0, _testHelpers.findAll)('.pagination__page')[4]);

              case 5:
                // should fix this case
                // assert.dom('[data-test-id="pagination-gap"]').exists({ count: 2 });
                assert.dom((0, _testHelpers.findAll)('.pagination__page').pop()).hasText('34');

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }()); // 4.

    (0, _qunit.test)('Should check the actions for next & previous', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var _this = this;

        var fake;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                // simulate update happened in the parent component & rebind page param
                fake = _sinon.default.fake(function (page) {
                  return _this.set('page', page);
                });
                this.set('page', 1); // init page

                this.set('onPageChange', fake);
                _context4.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<UiComponents::Pagination
                			@pageBasedType           = {{true}}
                			@count                   = {{1000}}
                			@perPage                 = {{10}}
                			@page                    = {{this.page}}
                			@paginationDetailPreText = {{"fs.common.showing"}}
                			@showPaginationDetails   = {{false}}
                			@hideMany                = {{true}}
                			@onPageChange            = {{this.onPageChange}} />
                		
                */
                {
                  id: "vHJtn1ux",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\"],[5,\"ui-components/pagination\",[],[[\"@pageBasedType\",\"@count\",\"@perPage\",\"@page\",\"@paginationDetailPreText\",\"@showPaginationDetails\",\"@hideMany\",\"@onPageChange\"],[true,1000,10,[23,0,[\"page\"]],\"fs.common.showing\",false,true,[23,0,[\"onPageChange\"]]]]],[0,\"\\n\\t\\t\"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                assert.dom('[data-test-id="pagination-active"]').hasText('1'); // click next button to goto page 2

                _context4.next = 8;
                return (0, _testHelpers.click)('[data-test-id="next-btn"]');

              case 8:
                assert.ok(fake.calledWith(2));
                assert.dom('[data-test-id="pagination-active"]').hasText('2'); // click next button twice

                _context4.next = 12;
                return (0, _testHelpers.click)('[data-test-id="next-btn"]');

              case 12:
                assert.ok(fake.calledWith(3));
                assert.dom('[data-test-id="pagination-active"]').hasText('3');
                _context4.next = 16;
                return (0, _testHelpers.click)('[data-test-id="next-btn"]');

              case 16:
                assert.ok(fake.calledWith(4));
                assert.dom('[data-test-id="pagination-active"]').hasText('4'); // click previous button twice

                _context4.next = 20;
                return (0, _testHelpers.click)('[data-test-id="previous-btn"]');

              case 20:
                assert.ok(fake.calledWith(3));
                assert.dom('[data-test-id="pagination-active"]').hasText('3');

              case 22:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }()); // 5.

    (0, _qunit.test)('Should check perPage count dropdown and its update action', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var PER_PAGE_DROPDOWN, DROPDOWN_TRIGGER, DROPDOWN_LIST_ITEM, spy;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                PER_PAGE_DROPDOWN = [10, 20, 30, 40, 50];
                DROPDOWN_TRIGGER = '.pagination-count .ember-basic-dropdown-trigger';
                DROPDOWN_LIST_ITEM = '.pagination-count .ember-basic-dropdown-content ul li';
                spy = _sinon.default.spy();
                this.set('onPerPageChange', spy);
                _context5.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                   <UiComponents::Pagination
                			@pageBasedType = {{true}}
                			@count         = {{50}}
                			@perPage       = {{20}}
                			@updateCount   = {{true}}
                			@onPerPageChange = {{this.onPerPageChange}}
                			/>
                    
                */
                {
                  id: "mtABZ/Es",
                  block: "{\"symbols\":[],\"statements\":[[0,\" \"],[5,\"ui-components/pagination\",[],[[\"@pageBasedType\",\"@count\",\"@perPage\",\"@updateCount\",\"@onPerPageChange\"],[true,50,20,true,[23,0,[\"onPerPageChange\"]]]]],[0,\"\\n    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 7:
                assert.dom('[data-test-id="update-per-page"]').hasText('Showing 20 / page '); // Open dropdown

                _context5.next = 10;
                return (0, _testHelpers.click)(DROPDOWN_TRIGGER);

              case 10:
                assert.dom("".concat(DROPDOWN_LIST_ITEM, " > .basic-dropdown-item")).exists({
                  count: PER_PAGE_DROPDOWN.length
                });
                assert.dom("".concat(DROPDOWN_LIST_ITEM, " > .basic-dropdown-item")).findElements().forEach(function (el, i) {
                  var EXPECTED_TEXT = "".concat(PER_PAGE_DROPDOWN[i], " / page");
                  assert.equal(el.innerText, EXPECTED_TEXT, "Dropdown content is '".concat(EXPECTED_TEXT, "' as expected"));
                }); // Select per_page = 30

                _context5.next = 14;
                return (0, _testHelpers.click)("[data-test-perpage=\"30\"]");

              case 14:
                assert.ok(spy.calledOnceWithExactly(30), 'Dropdown callback was called with count "30" as expected, when clicked on it');

              case 15:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }()); // 6.

    (0, _qunit.test)('Should test chevron icons in LTR/RTL mode in full/bottom pagination mode', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var renderComponent;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)();

                renderComponent = /*#__PURE__*/function () {
                  var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
                    return regeneratorRuntime.wrap(function _callee6$(_context6) {
                      while (1) {
                        switch (_context6.prev = _context6.next) {
                          case 0:
                            _context6.next = 2;
                            return (0, _testHelpers.render)(Ember.HTMLBars.template(
                            /*
                              <UiComponents::Pagination
                            			@pageBasedType           = {{this.isPageBasedType}}
                            			@count                   = {{100}}
                            			@perPage                 = {{30}}
                            			@page                    = {{1}}
                            			@paginationDetailPreText = {{"fs.common.showing"}}
                            			@showPaginationDetails   = {{false}}
                            			@hideMany                = {{true}}/>
                            		
                            */
                            {
                              id: "jn7NPmsH",
                              block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/pagination\",[],[[\"@pageBasedType\",\"@count\",\"@perPage\",\"@page\",\"@paginationDetailPreText\",\"@showPaginationDetails\",\"@hideMany\"],[[23,0,[\"isPageBasedType\"]],100,30,1,\"fs.common.showing\",false,true]]],[0,\"\\n\\t\\t\"]],\"hasEval\":false}",
                              meta: {}
                            }));

                          case 2:
                          case "end":
                            return _context6.stop();
                        }
                      }
                    }, _callee6);
                  }));

                  return function renderComponent() {
                    return _ref8.apply(this, arguments);
                  };
                }();

                this.set('isPageBasedType', true);
                _context7.next = 5;
                return renderComponent();

              case 5:
                // non RTL
                assert.dom('.pagination__arrow:first-child').hasClass('chevron-left'); // <

                assert.dom('.pagination__arrow:last-child').hasClass('chevron-right'); // >

                (0, _stubCurrentUser.stubCurrentUser)({
                  isRtl: true
                }); // RTL

                _context7.next = 10;
                return renderComponent();

              case 10:
                assert.dom('.pagination__arrow:first-child').hasClass('chevron-left'); // <

                assert.dom('.pagination__arrow:last-child').hasClass('chevron-right'); // >

              case 12:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x6) {
        return _ref7.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/ui-components/phone-number/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl", "ember-cli-mirage/test-support", "freshservice/tests/lib/sinon-context", "freshservice/tests/lib/stub-current-user", "freshservice/tests/pages/components/admin/itom/on-call-schedules/update-agent-phone", "freshservice/mirage/fixtures/invalid_agents"], function (_qunit, _emberQunit, _testHelpers, _intl, _testSupport, _sinonContext, _stubCurrentUser, _updateAgentPhone, _invalid_agents) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var TEST_USER = {
    privileges: ['view_schedules', 'manage_schedules', 'manage_users', 'manage_contacts']
  };

  function renderComponent() {
    return _renderComponent.apply(this, arguments);
  }

  function _renderComponent() {
    _renderComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
      return regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template(
              /*
                <UiComponents::PhoneNumber @phone = {{phoneClone}} 
              	@onNumberChange={{fn this.disableSubmit false}}  
              	@onUpdateContactExt = {{fn this.onUpdateContactExt user 'work'}} 
              	@label="{{t "fs.on_call_schedule.shift.update_invalid_ph.work_phone"}}" />
              */
              {
                id: "SV/A6nLf",
                block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/phone-number\",[],[[\"@phone\",\"@onNumberChange\",\"@onUpdateContactExt\",\"@label\"],[[22,\"phoneClone\"],[28,\"fn\",[[23,0,[\"disableSubmit\"]],false],null],[28,\"fn\",[[23,0,[\"onUpdateContactExt\"]],[24,[\"user\"]],\"work\"],null],[29,[[28,\"t\",[\"fs.on_call_schedule.shift.update_invalid_ph.work_phone\"],null]]]]]]],\"hasEval\":false}",
                meta: {}
              }));

            case 2:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    }));
    return _renderComponent.apply(this, arguments);
  }

  (0, _qunit.module)('Integration | Component | ui-components | phone-number', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              (0, _stubCurrentUser.stubCurrentUser)(TEST_USER);
              Ember.set(this, 'store', this.owner.lookup('service:store'));

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    hooks.after(function () {
      this.owner.destroy("service:current-user");
    });
    (0, _qunit.test)('Should render phone number component', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                Ember.setProperties(this, {
                  disableSubmit: function disableSubmit() {
                    return true;
                  },
                  onUpdateContactExt: function onUpdateContactExt() {
                    return true;
                  },
                  phoneClone: _invalid_agents.default.phoneClone
                });
                _context2.next = 3;
                return renderComponent();

              case 3:
                assert.ok(_updateAgentPhone.default.phoneNumberCompExists);

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render country extension dropdown', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                Ember.setProperties(this, {
                  disableSubmit: function disableSubmit() {
                    return true;
                  },
                  onUpdateContactExt: function onUpdateContactExt() {
                    return true;
                  },
                  phoneClone: _invalid_agents.default.phoneClone
                });
                _context3.next = 3;
                return renderComponent();

              case 3:
                assert.ok(_updateAgentPhone.default.countryExtExists);

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render phone number textbox', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                Ember.setProperties(this, {
                  disableSubmit: function disableSubmit() {
                    return true;
                  },
                  onUpdateContactExt: function onUpdateContactExt() {
                    return true;
                  },
                  phoneClone: _invalid_agents.default.phoneClone
                });
                _context4.next = 3;
                return renderComponent();

              case 3:
                assert.ok(_updateAgentPhone.default.numberFieldExists);

              case 4:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should show phone number error message', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                Ember.setProperties(this, {
                  disableSubmit: function disableSubmit() {
                    return true;
                  },
                  onUpdateContactExt: function onUpdateContactExt() {
                    return true;
                  },
                  phoneClone: _invalid_agents.default.phoneClone
                });
                _context5.next = 3;
                return renderComponent();

              case 3:
                assert.ok(_updateAgentPhone.default.isErrorMsgVisible);

              case 4:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/ui-components/progress-chart/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "sinon", "freshservice/tests/pages/components/ui-components/progress-chart"], function (_qunit, _emberQunit, _testHelpers, _sinon, _progressChart) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var DEFAULT_OPTIONS = {
    strokeWidth: 6,
    backgroundColor: '#EBEFF3',
    progressColour: '#039BE5',
    overflowColour: '#EF263C'
  };
  var CUSTOM_OPTIONS = {
    strokeWidth: 10,
    backgroundColor: 'grey',
    progressColour: 'blue',
    overflowColour: 'red'
  };
  var DATA = [{
    'title': 'Base Plan',
    'badgeContent': '1000_participants',
    'progress': 0,
    //zero data
    'total': 18,
    'totalText': 'out of 18'
  }, {
    'title': 'Zoom Room Plans',
    'badgeContent': '500_participants',
    'progress': 8,
    //progress data
    'total': 10,
    'totalText': 'out of 10'
  }, {
    'title': 'Webinar Plans',
    'badgeContent': '1000_participants',
    'progress': 20,
    //overflow data
    'total': 18,
    'totalText': 'out of 18'
  }];
  (0, _qunit.module)('Integration | Component | ui-components | progress-chart', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should render the charts with default options when no option is passed', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Arrange
                this.set('data', DATA); // Act

                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::ProgressChart
                      @chartData = {{this.data}}
                    />
                */
                {
                  id: "WEs3i6R2",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/progress-chart\",[],[[\"@chartData\"],[[23,0,[\"data\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                // Assert
                assert.equal(_progressChart.default.progressBars(1).barWidth, DEFAULT_OPTIONS.strokeWidth);
                assert.equal(_progressChart.default.progressBars(1).progressLineColour, DEFAULT_OPTIONS.progressColour);
                assert.equal(_progressChart.default.progressBars(2).overflowLineColour, DEFAULT_OPTIONS.overflowColour);
                assert.equal(_progressChart.default.progressBars(1).baseLineColour, DEFAULT_OPTIONS.backgroundColor);

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should render the charts with passed options when options are passed', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                // Arrange
                this.set('data', DATA);
                this.set('options', CUSTOM_OPTIONS); // Act

                _context2.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::ProgressChart
                      @chartData = {{this.data}}
                      @options = {{this.options}}
                    />
                */
                {
                  id: "T6pGWxnU",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/progress-chart\",[],[[\"@chartData\",\"@options\"],[[23,0,[\"data\"]],[23,0,[\"options\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                // Assert
                assert.equal(_progressChart.default.progressBars(1).barWidth, CUSTOM_OPTIONS.strokeWidth);
                assert.equal(_progressChart.default.progressBars(1).progressLineColour, CUSTOM_OPTIONS.progressColour);
                assert.equal(_progressChart.default.progressBars(2).overflowLineColour, CUSTOM_OPTIONS.overflowColour);
                assert.equal(_progressChart.default.progressBars(1).baseLineColour, CUSTOM_OPTIONS.backgroundColor);

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('the data passed to the chart should be properly displayed with the bars', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                // Arrange
                this.set('data', DATA); // Act

                _context3.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::ProgressChart
                      @chartData =	{{this.data}}
                    />
                */
                {
                  id: "WEs3i6R2",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/progress-chart\",[],[[\"@chartData\"],[[23,0,[\"data\"]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                // Assert - values
                assert.equal(_progressChart.default.progressBars(1).totalText, DATA[1].totalText);
                assert.equal(_progressChart.default.progressBars(1).progressCount, DATA[1].progress);
                assert.equal(_progressChart.default.progressBars(1).barDescription, DATA[1].badgeContent); //Asset - line visibility

                assert.notOk(_progressChart.default.progressBars(0).isProgressLineVisible);
                assert.notOk(_progressChart.default.progressBars(1).isOverFlowLineVisible);
                assert.ok(_progressChart.default.progressBars(1).isProgressLineVisible);
                assert.ok(_progressChart.default.progressBars(2).isOverFlowLineVisible);

              case 10:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('chart event should be emitted on click', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var chartEventSpy;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                chartEventSpy = _sinon.default.spy();
                this.setProperties({
                  data: DATA,
                  chartEventSpy: chartEventSpy
                }); // Act

                _context4.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::ProgressChart
                			@chartData =	{{this.data}}
                			@onChartClick = {{chartEventSpy}}
                		/>
                */
                {
                  id: "iWFTDuQ1",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/progress-chart\",[],[[\"@chartData\",\"@onChartClick\"],[[23,0,[\"data\"]],[22,\"chartEventSpy\"]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                _context4.next = 6;
                return _progressChart.default.clickFirstItem();

              case 6:
                assert.deepEqual(chartEventSpy.firstCall.args[0], DATA[0], 'Click event triggered and data payload should match');

              case 7:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
  });
});
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

define("freshservice/tests/integration/components/ui-components/quick-assign/priority-dropdown/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl", "ember-cli-mirage/test-support"], function (_qunit, _emberQunit, _testHelpers, _intl, _testSupport) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var MockService1 = /*#__PURE__*/function (_Ember$Service) {
    _inherits(MockService1, _Ember$Service);

    var _super = _createSuper(MockService1);

    function MockService1() {
      var _this;

      _classCallCheck(this, MockService1);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _defineProperty(_assertThisInitialized(_this), "fetchModuleFields", Object.freeze({
        isRunning: 'true'
      }));

      return _this;
    }

    return MockService1;
  }(Ember.Service);

  window.__CLASSIC_OWN_CLASSES__.set(MockService1, true);

  var MockService2 = /*#__PURE__*/function (_Ember$Service2) {
    _inherits(MockService2, _Ember$Service2);

    var _super2 = _createSuper(MockService2);

    function MockService2() {
      var _this2;

      _classCallCheck(this, MockService2);

      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      _this2 = _super2.call.apply(_super2, [this].concat(args));

      _defineProperty(_assertThisInitialized(_this2), "fetchModuleFields", Object.freeze({
        isRunning: false
      }));

      _defineProperty(_assertThisInitialized(_this2), "ticketFormFieldHash", Object.freeze({
        priority: {
          choices: [{
            id: 1,
            value: 'Low'
          }, {
            id: 2,
            value: 'Medium'
          }, {
            id: 3,
            value: 'High'
          }]
        }
      }));

      return _this2;
    }

    return MockService2;
  }(Ember.Service);

  window.__CLASSIC_OWN_CLASSES__.set(MockService2, true);

  (0, _qunit.module)('Integration | Component | ui-components | Quick assign | Priority dropdown', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.owner.register('service:module-fields', MockService1);
              this.store = this.owner.lookup('service:store');
              this.server.loadFixtures('tickets');

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('Should render shimmer when data is loading', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                   <UiComponents::QuickAssign::PriorityDropdown
                					@options = {{hash isComponentDataLoading=true}}
                				/>
                */
                {
                  id: "IqrhsEsB",
                  block: "{\"symbols\":[],\"statements\":[[0,\" \"],[5,\"ui-components/quick-assign/priority-dropdown\",[],[[\"@options\"],[[28,\"hash\",null,[[\"isComponentDataLoading\"],[true]]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.dom('.shimmer-loader').exists({
                  count: 1
                });

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render Priority Dropdown Component', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var tickets;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.store.findAll('ticket');

              case 2:
                tickets = _context3.sent;
                this.set('currentTicket', Object.assign(tickets.firstObject, {
                  isEditable: true
                }));
                this.owner.unregister('service:moduleFields');
                this.owner.register('service:module-fields', MockService2);
                _context3.next = 8;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                   <UiComponents::QuickAssign::PriorityDropdown
                					@row = {{this.currentTicket}}
                					@options = {{hash isComponentDataLoading=false canEdit=true}}
                				/>
                */
                {
                  id: "wCoWQnk8",
                  block: "{\"symbols\":[],\"statements\":[[0,\" \"],[5,\"ui-components/quick-assign/priority-dropdown\",[],[[\"@row\",\"@options\"],[[23,0,[\"currentTicket\"]],[28,\"hash\",null,[[\"isComponentDataLoading\",\"canEdit\"],[false,true]]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 8:
                assert.dom('.priority-list-wrapper').exists({
                  count: 1
                });
                _context3.next = 11;
                return (0, _testHelpers.click)('.priority-list-trigger');

              case 11:
                assert.dom('.priority-option').exists({
                  count: 3
                });

              case 12:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

define("freshservice/tests/integration/components/ui-components/quick-assign/status-dropdown/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl", "ember-cli-mirage/test-support"], function (_qunit, _emberQunit, _testHelpers, _intl, _testSupport) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var MockService1 = /*#__PURE__*/function (_Ember$Service) {
    _inherits(MockService1, _Ember$Service);

    var _super = _createSuper(MockService1);

    function MockService1() {
      var _this;

      _classCallCheck(this, MockService1);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _defineProperty(_assertThisInitialized(_this), "fetchModuleFields", Object.freeze({
        isRunning: 'true'
      }));

      return _this;
    }

    return MockService1;
  }(Ember.Service);

  window.__CLASSIC_OWN_CLASSES__.set(MockService1, true);

  var MockService2 = /*#__PURE__*/function (_Ember$Service2) {
    _inherits(MockService2, _Ember$Service2);

    var _super2 = _createSuper(MockService2);

    function MockService2() {
      var _this2;

      _classCallCheck(this, MockService2);

      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      _this2 = _super2.call.apply(_super2, [this].concat(args));

      _defineProperty(_assertThisInitialized(_this2), "fetchModuleFields", Object.freeze({
        isRunning: false
      }));

      _defineProperty(_assertThisInitialized(_this2), "ticketFormFieldHash", Object.freeze({
        status: {
          choices: [{
            id: 1,
            value: 'Open'
          }, {
            id: 2,
            value: 'Pending'
          }, {
            id: 3,
            value: 'Resolved'
          }]
        }
      }));

      return _this2;
    }

    return MockService2;
  }(Ember.Service);

  window.__CLASSIC_OWN_CLASSES__.set(MockService2, true);

  (0, _qunit.module)('Integration | Component | ui-components | Quick assign | Status Dropdown', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.owner.register('service:moduleFields', MockService1);
              this.store = this.owner.lookup('service:store');
              this.server.loadFixtures('tickets');

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('Should render shimmer when data is loading', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                   <UiComponents::QuickAssign::StatusDropdown
                					@options = {{hash isComponentDataLoading=true}}
                				/>
                */
                {
                  id: "QLHq6d/c",
                  block: "{\"symbols\":[],\"statements\":[[0,\" \"],[5,\"ui-components/quick-assign/status-dropdown\",[],[[\"@options\"],[[28,\"hash\",null,[[\"isComponentDataLoading\"],[true]]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.dom('.shimmer-loader').exists({
                  count: 1
                });

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should render Status Dropdown Component', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var tickets;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.store.findAll('ticket');

              case 2:
                tickets = _context3.sent;
                this.set('currentTicket', Object.assign(tickets.firstObject, {
                  isEditable: true
                }));
                this.owner.unregister('service:moduleFields');
                this.owner.register('service:moduleFields', MockService2);
                _context3.next = 8;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                   <UiComponents::QuickAssign::StatusDropdown
                					@row = {{this.currentTicket}}
                					@options = {{hash isComponentDataLoading=false canEdit=true}}
                				/>
                */
                {
                  id: "12beTDiO",
                  block: "{\"symbols\":[],\"statements\":[[0,\" \"],[5,\"ui-components/quick-assign/status-dropdown\",[],[[\"@row\",\"@options\"],[[23,0,[\"currentTicket\"]],[28,\"hash\",null,[[\"isComponentDataLoading\",\"canEdit\"],[false,true]]]]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 8:
                assert.dom('.status-list-wrapper').exists({
                  count: 1
                });
                _context3.next = 11;
                return (0, _testHelpers.click)('.status-list-trigger');

              case 11:
                assert.dom('.status-option').exists({
                  count: 3
                });

              case 12:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/ui-components/table-wrapper/table-filter/component-test", ["qunit", "ember-qunit"], function (_qunit, _emberQunit) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  // import { render } from '@ember/test-helpers';
  // import { hbs } from 'ember-cli-htmlbars';
  (0, _qunit.module)('Integration | Component | ui-components/table-wrapper/table-filter', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it renders', /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.ok(true);

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/ui-components/table-wrapper/table-header/component-test", ["qunit", "ember-qunit"], function (_qunit, _emberQunit) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  // import { render } from '@ember/test-helpers';
  // import { hbs } from 'ember-cli-htmlbars';
  (0, _qunit.module)('Integration | Component | ui-components/table-wrapper/table-header', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it renders', /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.ok(true);

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/ui-components/ui-pills/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/pages/components/ui-components/ui-pills"], function (_qunit, _emberQunit, _testHelpers, _uiPills) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var PILL_VALUES = ['Azure', 'OKTA', 'Gsuite', 'AWS', 'Authy'];
  var MAX_DISPLAY_COUNT = 2;
  (0, _qunit.module)('Integration | Component | ui-components/ui-pills', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it renders "-" when passed value is empty', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Arrange
                this.set('value', null); // Act

                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                      <UiComponents::UiPills 
                        @value={{this.value}}>
                      </UiComponents::UiPills>
                    
                */
                {
                  id: "LBsSOOJD",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n      \"],[5,\"ui-components/ui-pills\",[],[[\"@value\"],[[23,0,[\"value\"]]]],{\"statements\":[[0,\"\\n      \"]],\"parameters\":[]}],[0,\"\\n    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                // Assert
                assert.equal(_uiPills.default.pillsEmptyText, '-', '- rendered when empty value is passed');

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('when no max count is passed with value, default to be taken as 1', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                // Arrange
                this.set('value', ['Azure', 'OKTA']); // Act

                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                      <UiComponents::UiPills 
                        @value={{this.value}}>
                      </UiComponents::UiPills>
                    
                */
                {
                  id: "LBsSOOJD",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n      \"],[5,\"ui-components/ui-pills\",[],[[\"@value\"],[[23,0,[\"value\"]]]],{\"statements\":[[0,\"\\n      \"]],\"parameters\":[]}],[0,\"\\n    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                // Assert
                assert.equal(_uiPills.default.visiblePills[0].text, 'Azure', 'static pills verification');
                assert.equal(_uiPills.default.remainingPillsCount, '+1', 'remaining pill count verification');
                assert.equal(_uiPills.default.visiblePills.length, '1', 'max count taken as 1 by default');

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('when number of pills is equal to the maxcount passed, remaining pills button should be hidden', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                // Arrange
                this.set('value', ['Azure', 'OKTA']);
                this.set('column', {
                  maxDisplayCount: MAX_DISPLAY_COUNT
                }); // Act

                _context3.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                      <UiComponents::UiPills 
                        @value={{this.value}}
                        @column={{this.column}}>
                      </UiComponents::UiPills>
                    
                */
                {
                  id: "IJXLHfKL",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n      \"],[5,\"ui-components/ui-pills\",[],[[\"@value\",\"@column\"],[[23,0,[\"value\"]],[23,0,[\"column\"]]]],{\"statements\":[[0,\"\\n      \"]],\"parameters\":[]}],[0,\"\\n    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                // Assert
                assert.notOk(_uiPills.default.isRemainingPillsButtonVisible, 'remaining pills button hidden');

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it renders given number of pills statically and rest on hover when corresponding configuration is passed', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                // Arrange
                this.set('value', PILL_VALUES);
                this.set('maxDisplayCount', MAX_DISPLAY_COUNT); // Act

                _context4.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                      <UiComponents::UiPills 
                        @value={{this.value}}
                        @maxDisplayCount={{this.maxDisplayCount}}>
                      </UiComponents::UiPills>
                    
                */
                {
                  id: "oiup9U4/",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n      \"],[5,\"ui-components/ui-pills\",[],[[\"@value\",\"@maxDisplayCount\"],[[23,0,[\"value\"]],[23,0,[\"maxDisplayCount\"]]]],{\"statements\":[[0,\"\\n      \"]],\"parameters\":[]}],[0,\"\\n    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                // Assert
                assert.equal(_uiPills.default.visiblePills[0].text, 'Azure', 'static pills verification');
                assert.equal(_uiPills.default.visiblePills[1].text, 'OKTA', 'static pills verification');
                assert.equal(_uiPills.default.remainingPillsCount, "+".concat(PILL_VALUES.length - MAX_DISPLAY_COUNT), 'remaining pill count verification'); // Act

                _context4.next = 9;
                return _uiPills.default.checkRemainingPills();

              case 9:
                // Assert
                assert.equal(_uiPills.default.pillsOnHover[0].text, 'Gsuite', 'hover pills verification');
                assert.equal(_uiPills.default.pillsOnHover[1].text, 'AWS', 'hover pills verification');
                assert.equal(_uiPills.default.pillsOnHover[2].text, 'Authy', 'hover pills verification');

              case 12:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/ui-components/workspace/breadcrumb/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-current-account", "freshservice/tests/pages/components/ui-components/workspace/breadcrumb"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _stubCurrentAccount, _breadcrumb) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var CURRENT_WORKSPACE = {
    "id": 91,
    "name": "HR Team",
    "preferences": {},
    "workspace_logo": "http://localhost.freshservice-dev.com:3000/assets/logos/misc/workspace_logo.ico"
  };
  var GLOBAL_CURRENT_WORKSPACE = {
    "id": 1,
    "name": "Global Settings",
    "preferences": {},
    "workspace_logo": "http://localhost.freshservice-dev.com:3000/assets/logos/misc/workspace_logo.ico"
  };
  (0, _qunit.module)('Integration | Component | ui-components/workspace/breadcrumb', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.intl = this.owner.lookup("service:intl");

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('should render breadcrumb component with Admin', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::Workspace::Breadcrumb/>
                */
                {
                  id: "Kh8uhpP5",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/workspace/breadcrumb\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.ok(_breadcrumb.default.adminLink);

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should render breadcrumb component with custom Workspace', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                (0, _stubCurrentAccount.stubCurrentAccount)({
                  temp_features: ['esm_enhancements']
                });
                window.currentWorkspace = CURRENT_WORKSPACE;
                _context3.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::Workspace::Breadcrumb/>
                */
                {
                  id: "Kh8uhpP5",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/workspace/breadcrumb\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                assert.ok(_breadcrumb.default.customWorkspace);

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should render breadcrumb component with global Workspace', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                (0, _stubCurrentAccount.stubCurrentAccount)({
                  temp_features: ['esm_enhancements']
                });
                window.currentWorkspace = GLOBAL_CURRENT_WORKSPACE;
                _context4.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::Workspace::Breadcrumb/>
                */
                {
                  id: "Kh8uhpP5",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/workspace/breadcrumb\",[],[[],[]]]],\"hasEval\":false}",
                  meta: {}
                }));

              case 4:
                assert.ok(_breadcrumb.default.globalWorkspace);

              case 5:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/components/ui-components/workspace/logo/component-test", ["qunit", "@ember/test-helpers", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/pages/components/ui-components/workspace/logo"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _intl, _logo) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var WORKSPACE = {
    "id": 92,
    "name": "IT Team",
    "preferences": {
      "logo_id": 3
    },
    "workspace_logo": null
  };
  (0, _qunit.module)('Integration | Component | ui-components/workspace/logo', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.intl = this.owner.lookup("service:intl");

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('should render workspace logo component with logo and name', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.workspace = WORKSPACE;
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  <UiComponents::Workspace::Logo @workspace={{this.workspace}}>
                			<div data-test-id="ws-name">{{this.workspace.name}}</div>
                		</UiComponents::Workspace::Logo>
                */
                {
                  id: "6xHLShpH",
                  block: "{\"symbols\":[],\"statements\":[[5,\"ui-components/workspace/logo\",[],[[\"@workspace\"],[[23,0,[\"workspace\"]]]],{\"statements\":[[0,\"\\n\\t\\t\\t\"],[7,\"div\",true],[10,\"data-test-id\",\"ws-name\"],[8],[1,[23,0,[\"workspace\",\"name\"]],false],[9],[0,\"\\n\\t\\t\"]],\"parameters\":[]}]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.ok(_logo.default.workspaceLogo);
                assert.ok(_logo.default.workspaceName);

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/helpers/add-default-dash-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)("Integration | Helper | add-default-dash", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)("it should render the value", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.set("inputValue", "1234");
                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{add-default-dash inputValue}}
                */
                {
                  id: "U+S6XUIE",
                  block: "{\"symbols\":[],\"statements\":[[1,[28,\"add-default-dash\",[[24,[\"inputValue\"]]],null],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.equal(this.element.textContent.trim(), "1234");

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("it should render dashed(-) value", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{add-default-dash}}
                */
                {
                  id: "h1HlFBSv",
                  block: "{\"symbols\":[],\"statements\":[[1,[22,\"add-default-dash\"],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.equal(this.element.textContent.trim(), "-");

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("it should render custom dashed(--) value", /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{add-default-dash null  "--" }}
                */
                {
                  id: "+4Jxnpvz",
                  block: "{\"symbols\":[],\"statements\":[[1,[28,\"add-default-dash\",[null,\"--\"],null],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.equal(this.element.textContent.trim(), "--");

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/helpers/add-default-double-dash-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Helper | add-default-double-dash', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks); // Replace this with your real tests.

    (0, _qunit.test)('it renders', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.set('inputValue', '1234');
                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{add-default-double-dash inputValue}}
                */
                {
                  id: "JFqX902f",
                  block: "{\"symbols\":[],\"statements\":[[1,[28,\"add-default-double-dash\",[[24,[\"inputValue\"]]],null],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.equal(this.element.textContent.trim(), '1234');

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/helpers/debug-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Helper | debug', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks); // Replace this with your real tests.

    (0, _qunit.test)('it renders', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.set('inputValue', '1234');
                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{debug inputValue}}
                */
                {
                  id: "y11+kn7x",
                  block: "{\"symbols\":[],\"statements\":[[1,[28,\"debug\",[[24,[\"inputValue\"]]],null],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.equal(this.element.textContent.trim(), '1234');

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/helpers/enumerable-to-string-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)("Integration | Helper | enumerable-to-string", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)("should pass with array of strings", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.set("inputValue", ["foo", "bar"]); // simple join, if plain array

                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{enumerable-to-string inputValue 'foo'}}
                */
                {
                  id: "2pjW/duf",
                  block: "{\"symbols\":[],\"statements\":[[1,[28,\"enumerable-to-string\",[[24,[\"inputValue\"]],\"foo\"],null],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.equal(this.element.textContent.trim(), "foo, bar");

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("should pass with array of multiple objects", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.set("inputValue", [{
                  id: 1,
                  name: "foo"
                }, {
                  id: 2,
                  name: "bar"
                }]); // collects value based on given attribute, if array of objects

                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{enumerable-to-string inputValue 'name'}}
                */
                {
                  id: "whR1riNk",
                  block: "{\"symbols\":[],\"statements\":[[1,[28,\"enumerable-to-string\",[[24,[\"inputValue\"]],\"name\"],null],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.equal(this.element.textContent.trim(), "foo, bar");

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("should pass with array of single object", /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this.set("inputValue", [{
                  id: 1,
                  name: "foo"
                }]); // collects value based on given attribute, if array of object

                _context3.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{enumerable-to-string inputValue 'name'}}
                */
                {
                  id: "whR1riNk",
                  block: "{\"symbols\":[],\"statements\":[[1,[28,\"enumerable-to-string\",[[24,[\"inputValue\"]],\"name\"],null],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.equal(this.element.textContent.trim(), "foo");

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("should return empty string for any unsupported input (object)", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                this.set("inputValue", {
                  id: 1,
                  name: "foo"
                });
                _context4.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{enumerable-to-string inputValue 'name'}}
                */
                {
                  id: "whR1riNk",
                  block: "{\"symbols\":[],\"statements\":[[1,[28,\"enumerable-to-string\",[[24,[\"inputValue\"]],\"name\"],null],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.equal(this.element.textContent.trim(), "");

              case 4:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("should return empty string for any unsupported input (null)", /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                this.set("inputValue", null);
                _context5.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{enumerable-to-string inputValue 'name'}}
                */
                {
                  id: "whR1riNk",
                  block: "{\"symbols\":[],\"statements\":[[1,[28,\"enumerable-to-string\",[[24,[\"inputValue\"]],\"name\"],null],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.equal(this.element.textContent.trim(), "");

              case 4:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/helpers/file-size-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)("Integration | Helper | file-size-test", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it should convert negative bytes into "0 B"', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.set("inputValue", -1); // bytes

                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{file-size inputValue}}
                */
                {
                  id: "II9pg125",
                  block: "{\"symbols\":[],\"statements\":[[1,[28,\"file-size\",[[24,[\"inputValue\"]]],null],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.equal(this.element.textContent.trim(), "0 B");

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should convert 0 bytes into "0 B"', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.set("inputValue", 0); // bytes

                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{file-size inputValue}}
                */
                {
                  id: "II9pg125",
                  block: "{\"symbols\":[],\"statements\":[[1,[28,\"file-size\",[[24,[\"inputValue\"]]],null],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.equal(this.element.textContent.trim(), "0 B");

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should convert 99 bytes into "99 B"', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this.set("inputValue", 99); // bytes

                _context3.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{file-size inputValue}}
                */
                {
                  id: "II9pg125",
                  block: "{\"symbols\":[],\"statements\":[[1,[28,\"file-size\",[[24,[\"inputValue\"]]],null],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.equal(this.element.textContent.trim(), "99 B");

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should convert 101 bytes into "0.1 KB"', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                this.set("inputValue", 101); // bytes

                _context4.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{file-size inputValue}}
                */
                {
                  id: "II9pg125",
                  block: "{\"symbols\":[],\"statements\":[[1,[28,\"file-size\",[[24,[\"inputValue\"]]],null],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.equal(this.element.textContent.trim(), "0.1 KB");

              case 4:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should convert 1024 bytes into "1 KB"', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                this.set("inputValue", 1024); // bytes

                _context5.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{file-size inputValue}}
                */
                {
                  id: "II9pg125",
                  block: "{\"symbols\":[],\"statements\":[[1,[28,\"file-size\",[[24,[\"inputValue\"]]],null],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.equal(this.element.textContent.trim(), "1 KB");

              case 4:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('it should convert 1048576 bytes into "1 MB" ', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                this.set("inputValue", 1048576); // bytes

                _context6.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{file-size inputValue}}
                */
                {
                  id: "II9pg125",
                  block: "{\"symbols\":[],\"statements\":[[1,[28,\"file-size\",[[24,[\"inputValue\"]]],null],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.equal(this.element.textContent.trim(), "1 MB");

              case 4:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x6) {
        return _ref7.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/helpers/find-translation-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var CUSTOM_TRANSLATIONS_STUB = {
    "en": {
      "portal": {
        "home_title": "How can we help you ?"
      }
    }
  };
  (0, _qunit.module)('Integration | Helper | find-translation', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks); // Replace this with your real tests.

    (0, _qunit.test)('it finds respective custom translation', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.set('path', 'portal.home_title');
                this.set('locale', 'en');
                this.set('customTranslations', CUSTOM_TRANSLATIONS_STUB);
                _context.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{find-translation this.path this.locale translations=this.customTranslations}}
                */
                {
                  id: "0LPinkVb",
                  block: "{\"symbols\":[],\"statements\":[[1,[28,\"find-translation\",[[23,0,[\"path\"]],[23,0,[\"locale\"]]],[[\"translations\"],[[23,0,[\"customTranslations\"]]]]],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                assert.equal(this.element.textContent.trim(), 'How can we help you ?');
                this.set('locale', 'fr');
                _context.next = 9;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{find-translation this.path this.locale translations=this.customTranslations}}
                */
                {
                  id: "0LPinkVb",
                  block: "{\"symbols\":[],\"statements\":[[1,[28,\"find-translation\",[[23,0,[\"path\"]],[23,0,[\"locale\"]]],[[\"translations\"],[[23,0,[\"customTranslations\"]]]]],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 9:
                assert.equal(this.element.textContent.trim(), '');

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/helpers/get-date-time-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var TEST_FORMAT = "ddd, D MMM YYYY h:mm:ss A";
  (0, _qunit.module)("Integration | Helper | get-date-time", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.skip)("it renders given date in current year without year value", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var CURRENT_YEAR_DATE;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                CURRENT_YEAR_DATE = new Date("01-01-2020 00:00:00");
                this.set("testDate", CURRENT_YEAR_DATE);
                this.set("testFormat", TEST_FORMAT);
                _context.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{get-date-time testDate testFormat}}
                */
                {
                  id: "A18Z8IOu",
                  block: "{\"symbols\":[],\"statements\":[[1,[28,\"get-date-time\",[[24,[\"testDate\"]],[24,[\"testFormat\"]]],null],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                assert.equal(this.element.textContent.trim(), "Wed, 1 Jan 12:00:00 AM");

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.skip)("it renders given date in non-current year with year value", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var NON_CURRENT_YEAR_DATE;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                NON_CURRENT_YEAR_DATE = new Date("01-01-2019 00:00:00");
                this.set("testDate", NON_CURRENT_YEAR_DATE);
                this.set("testFormat", TEST_FORMAT);
                _context2.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{get-date-time testDate testFormat}}
                */
                {
                  id: "A18Z8IOu",
                  block: "{\"symbols\":[],\"statements\":[[1,[28,\"get-date-time\",[[24,[\"testDate\"]],[24,[\"testFormat\"]]],null],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 5:
                assert.equal(this.element.textContent.trim(), "Tue, 1 Jan 2019 12:00:00 AM");

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/helpers/hasabilities-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/stub-current-user"], function (_qunit, _emberQunit, _testHelpers, _stubCurrentUser) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var TEST_USER_DATA = {
    privileges: ["manage_tickets", "manage_alerts", "publish_solution"]
  };
  (0, _qunit.module)("Integration | Helper | hasabilities", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      (0, _stubCurrentUser.stubCurrentUser)(TEST_USER_DATA);
    });
    hooks.after(function () {
      this.owner.destroy("service:current-user");
    });
    (0, _qunit.test)("passes presence check with singular param", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{ hasabilities 'manage_tickets' }}
                */
                {
                  id: "5ToXT6fL",
                  block: "{\"symbols\":[],\"statements\":[[1,[28,\"hasabilities\",[\"manage_tickets\"],null],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.equal(this.element.textContent.trim(), "true");

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("passes presence check with multiple params", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{hasabilities 'manage_tickets' 'manage_alerts'}}
                */
                {
                  id: "SEa1Hpqp",
                  block: "{\"symbols\":[],\"statements\":[[1,[28,\"hasabilities\",[\"manage_tickets\",\"manage_alerts\"],null],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.equal(this.element.textContent.trim(), "true");

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("passes absence check", /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{hasabilities 'admin_tasks'}}
                */
                {
                  id: "TRMYnsnm",
                  block: "{\"symbols\":[],\"statements\":[[1,[28,\"hasabilities\",[\"admin_tasks\"],null],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.equal(this.element.textContent.trim(), "false");

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/helpers/hasfeature-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/stub-current-account"], function (_qunit, _emberQunit, _testHelpers, _stubCurrentAccount) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var TEST_ACCOUNT_BOOTSTRAP_DATA = {
    features: ["itil_modules", "cmdb", "audit_log", "round_robin"]
  };
  (0, _qunit.module)("Integration | Helper | hasfeature", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT_BOOTSTRAP_DATA);
    });
    hooks.after(function () {
      this.owner.destroy("service:current-account");
    });
    (0, _qunit.test)("passes presence check", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{hasfeature 'itil_modules'}}
                */
                {
                  id: "+oJA79O1",
                  block: "{\"symbols\":[],\"statements\":[[1,[28,\"hasfeature\",[\"itil_modules\"],null],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.equal(this.element.textContent.trim(), "true");

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("passes absence check", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{hasfeature 'alert_management'}}
                */
                {
                  id: "//BdTmww",
                  block: "{\"symbols\":[],\"statements\":[[1,[28,\"hasfeature\",[\"alert_management\"],null],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.equal(this.element.textContent.trim(), "false");

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/helpers/html-escape-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Helper | html-escape', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('Should escape html content', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.set('inputValue', '<img src=x onerror=alert(document.cookie)>');
                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{html-escape inputValue}}
                */
                {
                  id: "9ewgtU8T",
                  block: "{\"symbols\":[],\"statements\":[[1,[28,\"html-escape\",[[24,[\"inputValue\"]]],null],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.equal(this.element.textContent.trim(), '&lt;img src&#x3D;x onerror&#x3D;alert(document.cookie)&gt;');

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/helpers/html-safe-test", ["qunit", "ember-qunit", "@ember/test-helpers", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-current-account", "freshservice/tests/data/custom-translations", "freshservice/constants/locales"], function (_qunit, _emberQunit, _testHelpers, _intl2, _stubCurrentAccount, _customTranslations, _locales) {
  "use strict";

  function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var TEST_ACCOUNT = {
    customTranslations: _customTranslations.defaultCustomTranslations
  }; // All values from en.json containing html tags
  // Any new values with html tags in en.json to be added to this list !!

  var LOCALE_VALUES_WITH_HTML_CONTENT = [{
    key: "fs.applications.classify_software_desc_second"
  }, {
    key: "fs.applications.detail.tabs.installations_with_count",
    params: [{
      key: "installation_count",
      value: 0
    }]
  }, {
    key: "fs.applications.detail.tabs.contracts_with_count",
    params: [{
      key: "license_count",
      value: 0
    }]
  }, {
    key: "fs.applications.detail.visuals.users_with_count",
    params: [{
      key: "user_count",
      value: 0
    }]
  }, {
    key: "fs.applications.detail.visuals.enable_contract_text"
  }, {
    key: "fs.footer.byfreshworks",
    params: [{
      key: "websiteURL",
      value: 0
    }]
  }];

  var getHTMLContent = function getHTMLContent(element) {
    var textArea = document.createElement("textarea");
    var elementHTML = element.innerHTML.replace("<div id=\"modal-overlays\"></div>", "");
    elementHTML = elementHTML.replace("<div id=\"header-page-title-container\"></div>", "");
    textArea.innerHTML = elementHTML.trim();
    return textArea.value;
  };

  function testAllHTMLContentValues(_x) {
    return _testAllHTMLContentValues.apply(this, arguments);
  }

  function _testAllHTMLContentValues() {
    _testAllHTMLContentValues = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
      var contentCount, done, _test, _test2;

      return regeneratorRuntime.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _test2 = function _test4() {
                _test2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(values) {
                  var _iterator, _step, obj, key, params, options, expectedText, actualText;

                  return regeneratorRuntime.wrap(function _callee7$(_context7) {
                    while (1) {
                      switch (_context7.prev = _context7.next) {
                        case 0:
                          /* eslint-disable no-unused-vars */
                          _iterator = _createForOfIteratorHelper(values);
                          _context7.prev = 1;

                          _iterator.s();

                        case 3:
                          if ((_step = _iterator.n()).done) {
                            _context7.next = 17;
                            break;
                          }

                          obj = _step.value;
                          key = obj.key, params = obj.params;
                          options = {}; // Build options for the translate method

                          if (Ember.isPresent(params)) {
                            options = params.reduce(function (obj, _ref8) {
                              var key = _ref8.key,
                                  value = _ref8.value;
                              obj[key] = value;
                              return obj;
                            }, {});
                          }

                          expectedText = this.intl.t(key, options);
                          this.set("inputValue", expectedText);
                          _context7.next = 12;
                          return (0, _testHelpers.render)(Ember.HTMLBars.template(
                          /*
                            {{html-safe inputValue}}
                          */
                          {
                            id: "G13oGKzc",
                            block: "{\"symbols\":[],\"statements\":[[1,[28,\"html-safe\",[[24,[\"inputValue\"]]],null],false]],\"hasEval\":false}",
                            meta: {}
                          }));

                        case 12:
                          actualText = getHTMLContent(this.element);
                          assert.deepEqual(actualText, expectedText);
                          done();

                        case 15:
                          _context7.next = 3;
                          break;

                        case 17:
                          _context7.next = 22;
                          break;

                        case 19:
                          _context7.prev = 19;
                          _context7.t0 = _context7["catch"](1);

                          _iterator.e(_context7.t0);

                        case 22:
                          _context7.prev = 22;

                          _iterator.f();

                          return _context7.finish(22);

                        case 25:
                        case "end":
                          return _context7.stop();
                      }
                    }
                  }, _callee7, this, [[1, 19, 22, 25]]);
                }));
                return _test2.apply(this, arguments);
              };

              _test = function _test3(_x8) {
                return _test2.apply(this, arguments);
              };

              contentCount = LOCALE_VALUES_WITH_HTML_CONTENT.length; // set assertions

              assert.expect(contentCount);
              done = assert.async(contentCount);
              _context8.next = 7;
              return _test.call(this, LOCALE_VALUES_WITH_HTML_CONTENT);

            case 7:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this);
    }));
    return _testAllHTMLContentValues.apply(this, arguments);
  }

  (0, _qunit.module)("Integration | Helper | html-safe-test", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _intl2.setupTranslations)(hooks); // locale = "en"

    hooks.beforeEach(function () {
      (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
    });
    (0, _qunit.test)("it should pass with plain text content", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.set("inputValue", "safe content");
                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{html-safe inputValue}}
                */
                {
                  id: "G13oGKzc",
                  block: "{\"symbols\":[],\"statements\":[[1,[28,\"html-safe\",[[24,[\"inputValue\"]]],null],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.equal(this.element.textContent.trim(), "safe content");

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("it should pass with unescaped html string", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.set("inputValue", "<script>alert(\"XSS\")</script>");
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{html-safe inputValue}}
                */
                {
                  id: "G13oGKzc",
                  block: "{\"symbols\":[],\"statements\":[[1,[28,\"html-safe\",[[24,[\"inputValue\"]]],null],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.equal(this.element.textContent.trim(), "alert(\"XSS\")");

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x3) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("it should pass with escaped html string", /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this.set("inputValue", "&lt;div&gt;test string&lt;/div&gt;");
                _context3.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{html-safe inputValue}}
                */
                {
                  id: "G13oGKzc",
                  block: "{\"symbols\":[],\"statements\":[[1,[28,\"html-safe\",[[24,[\"inputValue\"]]],null],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.equal(this.element.textContent.trim(), "<div>test string</div>");

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x4) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("it should pass with unescaped incomplete html string", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                this.set("inputValue", "<script>alert('XSS')</script");
                _context4.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{html-safe inputValue}}
                */
                {
                  id: "G13oGKzc",
                  block: "{\"symbols\":[],\"statements\":[[1,[28,\"html-safe\",[[24,[\"inputValue\"]]],null],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.equal(this.element.textContent.trim(), "alert('XSS')</script");

              case 4:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x5) {
        return _ref5.apply(this, arguments);
      };
    }());
    /*
    	==================
    	The following testcases are added
    		- as a gatecheck in case of `ember-intl` add-on version upgrades.
    		- to check the values in en.json that contain html tags and attributes are properly escaped
    	==================
    */

    (0, _qunit.test)("it should check strings with wrongly escaped html tags from en.json", /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var _intl, expectedText, actualText;

        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                // Adding wrongly escaped dummy value as part of current locale intl translations
                _intl = this.owner.lookup("service:intl");

                _intl.addTranslations("en", {
                  __test_dummy: "Click the button <a class='link' href='www.freshservice.com'>here</a> to enable the feature."
                });

                expectedText = _intl.t("__test_dummy");
                this.set("inputValue", expectedText);
                _context5.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{html-safe inputValue}}
                */
                {
                  id: "G13oGKzc",
                  block: "{\"symbols\":[],\"statements\":[[1,[28,\"html-safe\",[[24,[\"inputValue\"]]],null],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 6:
                actualText = getHTMLContent(this.element);
                assert.notEqual(expectedText, actualText);
                assert.equal(actualText, "Click the button");

              case 9:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x6) {
        return _ref6.apply(this, arguments);
      };
    }());
  }); // Test values with html strings from all locale json files
  // Checks for all values present in the LOCALE_VALUES_WITH_HTML_CONTENT constant

  _locales.ALL_SUPPORTED_LOCALES.forEach(function (locale) {
    (0, _qunit.module)("Integration | Helper | html-safe-test (".concat(locale, ".json)"), function (hooks) {
      (0, _emberQunit.setupRenderingTest)(hooks);
      (0, _intl2.setupTranslations)(hooks, locale);
      hooks.beforeEach(function () {
        (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
        this.intl = this.owner.lookup("service:intl");
      });
      (0, _qunit.test)("it should check strings with html tags from ".concat(locale, ".json"), /*#__PURE__*/function () {
        var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
          return regeneratorRuntime.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  _context6.next = 2;
                  return testAllHTMLContentValues.call(this, assert);

                case 2:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6, this);
        }));

        return function (_x7) {
          return _ref7.apply(this, arguments);
        };
      }());
    });
  });
});
define("freshservice/tests/integration/helpers/html-sanitize-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Helper | html-sanitize', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('Should sanitize all html content', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.set('inputValue', '<b>hello</b>');
                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{html-sanitize inputValue noTags=true}}
                */
                {
                  id: "wN+jf3Bp",
                  block: "{\"symbols\":[],\"statements\":[[1,[28,\"html-sanitize\",[[24,[\"inputValue\"]]],[[\"noTags\"],[true]]],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.equal(this.element.textContent.trim(), 'hello');

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should sanitize html content', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.set('inputValue', '<img src=x onerror=alert(1)/>');
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{html-sanitize inputValue}}
                */
                {
                  id: "4dy4ALud",
                  block: "{\"symbols\":[],\"statements\":[[1,[28,\"html-sanitize\",[[24,[\"inputValue\"]]],null],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.equal(this.element.textContent.trim(), '<img src="x">');

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/helpers/to-fixed-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)("Integration | Helper | to-fixed", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)("it should convert 0 as 0.00", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.set("inputValue", 0);
                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{to-fixed inputValue}}
                */
                {
                  id: "KREkmDYn",
                  block: "{\"symbols\":[],\"statements\":[[1,[28,\"to-fixed\",[[24,[\"inputValue\"]]],null],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.equal(this.element.textContent.trim(), "0.00");

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("it should convert 99 as 99.00", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.set("inputValue", 99);
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{to-fixed inputValue}}
                */
                {
                  id: "KREkmDYn",
                  block: "{\"symbols\":[],\"statements\":[[1,[28,\"to-fixed\",[[24,[\"inputValue\"]]],null],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.equal(this.element.textContent.trim(), "99.00");

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("it should convert -99 as -99.00", /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this.set("inputValue", -99);
                _context3.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{to-fixed inputValue}}
                */
                {
                  id: "KREkmDYn",
                  block: "{\"symbols\":[],\"statements\":[[1,[28,\"to-fixed\",[[24,[\"inputValue\"]]],null],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.equal(this.element.textContent.trim(), "-99.00");

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("it should truncate Math.PI as 3.14", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                this.set("inputValue", Math.PI);
                _context4.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  {{to-fixed inputValue}}
                */
                {
                  id: "KREkmDYn",
                  block: "{\"symbols\":[],\"statements\":[[1,[28,\"to-fixed\",[[24,[\"inputValue\"]]],null],false]],\"hasEval\":false}",
                  meta: {}
                }));

              case 3:
                assert.equal(this.element.textContent.trim(), "3.14");

              case 4:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/integration/modifiers/autofocus-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Modifier | autofocus', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('check if focuses properly with no selector', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<div>
                				<input id="one"/>
                				<input {{autofocus}} id="two"/>
                			</div>
                    
                */
                {
                  id: "XLAHRVYB",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\"],[7,\"div\",true],[8],[0,\"\\n\\t\\t\\t\\t\"],[7,\"input\",true],[10,\"id\",\"one\"],[8],[9],[0,\"\\n\\t\\t\\t\\t\"],[7,\"input\",false],[12,\"id\",\"two\"],[3,\"autofocus\"],[8],[9],[0,\"\\n\\t\\t\\t\"],[9],[0,\"\\n    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.equal(document.activeElement.getAttribute('id'), 'two');

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('check if focuses properly with default selector', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<div {{autofocus}}>
                				<input id="one" disabled={{true}}/>
                				<input id="two"/>
                			</div>
                    
                */
                {
                  id: "3NARTBOB",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\"],[7,\"div\",false],[3,\"autofocus\"],[8],[0,\"\\n\\t\\t\\t\\t\"],[7,\"input\",true],[10,\"id\",\"one\"],[11,\"disabled\",true],[8],[9],[0,\"\\n\\t\\t\\t\\t\"],[7,\"input\",true],[10,\"id\",\"two\"],[8],[9],[0,\"\\n\\t\\t\\t\"],[9],[0,\"\\n    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.equal(document.activeElement.getAttribute('id'), 'two');

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('check if focuses properly with custom selector', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template(
                /*
                  
                			<div {{autofocus '#two'}}>
                				<input id="one"/>
                				<input id="two"/>
                			</div>
                    
                */
                {
                  id: "mq/r+3Qb",
                  block: "{\"symbols\":[],\"statements\":[[0,\"\\n\\t\\t\\t\"],[7,\"div\",false],[3,\"autofocus\",[\"#two\"]],[8],[0,\"\\n\\t\\t\\t\\t\"],[7,\"input\",true],[10,\"id\",\"one\"],[8],[9],[0,\"\\n\\t\\t\\t\\t\"],[7,\"input\",true],[10,\"id\",\"two\"],[8],[9],[0,\"\\n\\t\\t\\t\"],[9],[0,\"\\n    \"]],\"hasEval\":false}",
                  meta: {}
                }));

              case 2:
                assert.equal(document.activeElement.getAttribute('id'), 'two');

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/lib/error-responses", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var header = {
    "Content-Type": "application/json"
  };
  /**
   * New errors to be updated here 
   */

  var errors = {
    401: {
      status: "401",
      title: "You are not authorised"
    },
    404: {
      status: "404",
      title: "The resource was not found"
    },
    500: {
      status: "500",
      title: "The backend responded with an error"
    }
  };
  var errorResponses = {
    /**
    		* 404: { 
    		* 	code: 404, 
    		* 	header: { "Content-Type": "application/json" }, 
    		* 	errors: [{ status: "404", title: "Resource not found" }]
    	* }, ...
     */
  };
  Object.keys(errors).forEach(function (code) {
    errorResponses[code] = {
      code: code,
      header: header,
      errors: [errors[code]]
    };
  });
  var _default = errorResponses;
  _exports.default = _default;
});
define("freshservice/tests/lib/intl", ["exports", "ember-intl/test-support"], function (_exports, _testSupport) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.setupTranslations = void 0;

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var setupTranslations = function setupTranslations(hooks) {
    var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en';
    var intl;
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var _intl$translationsFor;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              intl = this.owner.lookup("service:intl"); // TODO: import files instead of network call

              _context.next = 3;
              return intl.loadTranslations(locale);

            case 3:
              (0, _testSupport.setupIntl)(hooks, ((_intl$translationsFor = intl.translationsFor(locale)) === null || _intl$translationsFor === void 0 ? void 0 : _intl$translationsFor.translations) || {});

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    hooks.afterEach(function () {
      intl = null;
    });
  };

  _exports.setupTranslations = setupTranslations;
});
define("freshservice/tests/lib/safe-visit", ["exports", "@ember/test-helpers"], function (_exports, _testHelpers) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  /**
   * Safe helper to visit urls that possibly can have 'transition.abort()'
   *
   * @param {*} visit: Method that calls `visitable` of 'ember-cli-page-object'
   * @example: 
   * 	Usage: await safeVisit(() => alertList.visit()); 
   */
  function safeVisit(_x) {
    return _safeVisit.apply(this, arguments);
  }

  function _safeVisit() {
    _safeVisit = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(visit) {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return visit();

            case 3:
              _context.next = 9;
              break;

            case 5:
              _context.prev = 5;
              _context.t0 = _context["catch"](0);

              if (!(_context.t0.message !== 'TransitionAborted')) {
                _context.next = 9;
                break;
              }

              throw _context.t0;

            case 9:
              _context.next = 11;
              return (0, _testHelpers.settled)();

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[0, 5]]);
    }));
    return _safeVisit.apply(this, arguments);
  }

  var _default = safeVisit;
  _exports.default = _default;
});
define("freshservice/tests/lib/set-locale-timezone-moment", ["exports", "freshservice/utils/time-util"], function (_exports, _timeUtil) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.setLocaleAndTimeZoneForMoment = void 0;

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var setLocaleAndTimeZoneForMoment = function setLocaleAndTimeZoneForMoment(hooks) {
    var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "en";
    var timeZone = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Chennai";
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var currentUser, userTimezone, userLanguage;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              currentUser = this.owner.lookup("service:current-user") || {};
              userTimezone = _timeUtil.default.getMappedTimeZone(currentUser.timeZone || timeZone);
              userLanguage = _timeUtil.default.getMappedTimeLocales(currentUser.language || locale);
              this.moment = this.owner.lookup("service:moment");
              this.moment.setTimeZone(userTimezone);
              this.moment.setLocale(userLanguage);

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    hooks.afterEach(function () {});
  };

  _exports.setLocaleAndTimeZoneForMoment = setLocaleAndTimeZoneForMoment;
});
define("freshservice/tests/lib/sinon-context", ["exports", "sinon"], function (_exports, _sinon) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.setupSinonSandbox = _exports.setSinonContext = _exports.getSinonContext = void 0;
  var sinonSanbox = null;

  var getSinonContext = function getSinonContext() {
    return sinonSanbox;
  };

  _exports.getSinonContext = getSinonContext;

  var setSinonContext = function setSinonContext(newSinonSanbox) {
    sinonSanbox = newSinonSanbox;
  };

  _exports.setSinonContext = setSinonContext;

  var setupSinonSandbox = function setupSinonSandbox(hooks) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    hooks.beforeEach(function () {
      var newSinonSanbox = _sinon.default.createSandbox(config);

      setSinonContext(newSinonSanbox);
    });
    hooks.afterEach(function () {
      sinonSanbox.restore();
    });
  };

  _exports.setupSinonSandbox = setupSinonSandbox;
});
define("freshservice/tests/lib/spy-flash-message", ["exports", "freshservice/tests/lib/sinon-context", "@ember/test-helpers"], function (_exports, _sinonContext, _testHelpers) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var spyFlashMessage = function spyFlashMessage() {
    var flashType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'success';
    var flashMessages = (0, _testHelpers.getContext)().owner.lookup('service:flash-messages');
    return (0, _sinonContext.getSinonContext)().spy(flashMessages, flashType);
  };

  var _default = spyFlashMessage;
  _exports.default = _default;
});
define("freshservice/tests/lib/stub-current-account", ["exports", "@ember/test-helpers", "freshservice/constants/marketplace-util"], function (_exports, _testHelpers, _marketplaceUtil) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.stubCurrentAccount = void 0;

  var getAccountStub = function getAccountStub() {
    return Ember.Service.extend({
      id: 1,
      name: 'Test Account',
      features: Ember.A([]),
      temp_features: Ember.A([]),
      dateFormat: 1,
      timeFormat: '12h',
      language: 'en',
      installedApps: Ember.A([]),
      secondaryLanguages: Ember.A([]),
      pod: 'poduseast1',
      getPodRegion: function getPodRegion() {
        return _marketplaceUtil.POD_LIST_NAMES[this.pod.toLowerCase()];
      },
      hasFeature: function hasFeature(feature) {
        return this.features.indexOf(feature) > -1;
      },
      hasAnyFeature: function hasAnyFeature() {
        var _this = this;

        for (var _len = arguments.length, features = new Array(_len), _key = 0; _key < _len; _key++) {
          features[_key] = arguments[_key];
        }

        return features.some(function (feature) {
          return _this.features.includes(feature);
        });
      },
      hasAllFeatures: function hasAllFeatures() {
        var _this2 = this;

        for (var _len2 = arguments.length, features = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          features[_key2] = arguments[_key2];
        }

        return features.every(function (feature) {
          return _this2.features.includes(feature);
        });
      },
      hasTempFeature: function hasTempFeature(feature) {
        return this.temp_features.indexOf(feature) > -1;
      },
      getCsrfToken: function getCsrfToken() {
        var token = 'emberTesting';
        return token;
      }
    });
  };

  var stubCurrentAccount = function stubCurrentAccount() {
    var extendService = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var context = (0, _testHelpers.getContext)();
    var owner = context.owner;
    var currentAccountService = getAccountStub().extend(extendService);
    owner.unregister('service:current-account');
    owner.register('service:current-account', currentAccountService);
  };

  _exports.stubCurrentAccount = stubCurrentAccount;
});
define("freshservice/tests/lib/stub-current-user", ["exports", "@ember/test-helpers", "moment"], function (_exports, _testHelpers, _moment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.stubCurrentUser = void 0;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

  function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  var userData = {
    language: 'en'
  };

  var getUserStub = function getUserStub() {
    return Ember.Service.extend({
      // eslint-disable-next-line
      moment: {
        moment: _moment.default
      },
      userId: 1,
      userName: 'Support Test',
      userEmail: 'sample@freshservice.com',
      privileges: Ember.A([]),
      scopes: Ember.A([]),
      scoped_privileges: null,
      timeZone: 'Chennai',
      language: 'en',
      isRtl: false,
      groups: Ember.A([]),
      starred_ticket_filters: Ember.A([]),
      userData: userData,
      currentAccount: Ember.inject.service(),
      hasAbility: function hasAbility(privilege) {
        return this.privileges.indexOf(privilege) > -1;
      },
      hasAbilities: function hasAbilities(abilities) {
        var _this$privileges;

        return (_this$privileges = this.privileges).includes.apply(_this$privileges, _toConsumableArray(abilities));
      },
      hasScope: function hasScope(scope) {
        return this.scopes.indexOf(scope) > -1;
      },
      setStarredViews: function setStarredViews(views, module) {
        Ember.set(this, "starred_".concat(module, "_filters"), views["starred_".concat(module, "_filters")]);
      },
      getStarredViews: function getStarredViews(module) {
        var starredFilters = Ember.get(this, "starred_".concat(module, "_filters"));
        return starredFilters.map(function (id) {
          return id.toString();
        });
      },
      getPreferredTableView: function getPreferredTableView(module) {
        return Ember.get(this, "userData.preferences.".concat(module, "_ui_preference"));
      },
      setPreferredTableView: function setPreferredTableView(module, preference) {
        return Ember.set(this, 'userData.preferences', _objectSpread(_objectSpread({}, this.userData.preferences), {}, _defineProperty({}, "".concat(module, "_ui_preference"), preference)));
      },
      hasScopedAbilities: function hasScopedAbilities(abilities, model) {
        var _this = this;

        // eslint-disable-next-line
        for (var scope in this.scoped_privileges) {
          var _this$scoped_privileg;

          if ((_this$scoped_privileg = this.scoped_privileges[scope]).includes.apply(_this$scoped_privileg, _toConsumableArray(abilities))) {
            switch (scope) {
              case '0':
                // scope: 0 - Global access;
                return true;

              case '1':
                // scope: 1 - Access to all group he is a part of
                {
                  // scope: 1 - Access to all group he is a part of
                  if (model.constructor.modelName === 'article') {
                    return model.groupId.length === 0 || model.groupId.filter(function (groupId) {
                      return _this.groups.includes(groupId);
                    }).length;
                  } else {
                    return model.groupId.length !== 0 && model.groupId.filter(function (groupId) {
                      return _this.groups.includes(groupId);
                    }).length;
                  }
                }

              case '2':
                // scope: 2 - Access to specific groups he is part of(As user role is defined)
                if (this.currentAccount && this.currentAccount.features.includes('advanced_access_control')) {
                  var _ret = function () {
                    var privilegedGroups = _this.privileged_groups[abilities[0]] || [];

                    if (model.constructor.modelName === 'article') {
                      return {
                        v: model.groupId.length === 0 || model.groupId.filter(function (groupId) {
                          return privilegedGroups.includes(groupId);
                        }).length
                      };
                    } else {
                      return {
                        v: model.groupId.length !== 0 && model.groupId.filter(function (groupId) {
                          return privilegedGroups.includes(groupId);
                        }).length
                      };
                    }
                  }();

                  if (_typeof(_ret) === "object") return _ret.v;
                } else {
                  continue;
                }

              // scope: 3 - Restricted access

              case '3':
                return model.userId === this.user_id;
            }

            return false;
          }
        }
      },
      yirVideoUrl: "https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-576p.mp4",
      hasGlobalAbilities: function hasGlobalAbilities(privilege) {
        return this.scoped_privileges["0"].includes(privilege);
      },
      hasCurrentUserScopeAbility: function hasCurrentUserScopeAbility(privilege, modelUserId) {
        return this.hasAbilities(privilege) || this.userId === modelUserId;
      },
      hasBetaFeatureEnabled: function hasBetaFeatureEnabled(featureName, userPreferenceKey) {
        return this.currentAccount.hasTempFeature(featureName) && Ember.get(this, "userData.preferences.".concat(userPreferenceKey));
      },
      hasEmberTicketFeatureEnabled: function hasEmberTicketFeatureEnabled(featureName) {
        return this.currentAccount.hasTempFeature(featureName);
      }
    });
  };

  var stubCurrentUser = function stubCurrentUser() {
    var extendService = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var context = (0, _testHelpers.getContext)();
    var owner = context.owner;
    var currentUserService = getUserStub().extend(extendService);
    owner.unregister('service:current-user');
    owner.register("service:current-user", currentUserService);
  };

  _exports.stubCurrentUser = stubCurrentUser;
});
define("freshservice/tests/lib/stub-fetch", ["exports", "freshservice/tests/lib/sinon-context", "@ember/test-helpers"], function (_exports, _sinonContext, _testHelpers) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.stubFetch = void 0;

  var stubFetch = function stubFetch() {
    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'request';
    var fetch = (0, _testHelpers.getContext)().owner.lookup('service:fetch');
    return (0, _sinonContext.getSinonContext)().stub(fetch, type);
  };

  _exports.stubFetch = stubFetch;
});
define("freshservice/tests/lib/stub-locations", ["exports", "@ember/test-helpers", "freshservice/mirage/fixtures/locations"], function (_exports, _testHelpers, _locations) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.stubLocations = void 0;

  var stubLocations = function stubLocations() {
    var _getContext = (0, _testHelpers.getContext)(),
        owner = _getContext.owner;

    owner.unregister('service:locations');
    owner.register("service:locations", Ember.Service.extend({
      get choices() {
        return Ember.A(_locations.default);
      },

      fetch: function fetch() {
        // fetch & return locations
        return [];
      },

      get isFinished() {
        return true;
      }

    }));
  };

  _exports.stubLocations = stubLocations;
});
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

define("freshservice/tests/lib/stub-native-service", ["exports", "@ember/test-helpers", "freshservice/services/native-integration"], function (_exports, _testHelpers, _nativeIntegration) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.stubNativeService = void 0;

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var stubNativeService = function stubNativeService(apps) {
    var context = (0, _testHelpers.getContext)();
    var owner = context.owner;

    var MockNative = /*#__PURE__*/function (_NativeIntegrationSer) {
      _inherits(MockNative, _NativeIntegrationSer);

      var _super = _createSuper(MockNative);

      function MockNative() {
        var _this;

        _classCallCheck(this, MockNative);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));

        _defineProperty(_assertThisInitialized(_this), "installedApps", apps);

        return _this;
      }

      return MockNative;
    }(_nativeIntegration.default);

    window.__CLASSIC_OWN_CLASSES__.set(MockNative, true);

    owner.unregister('service:native-integration');
    owner.register("service:native-integration", MockNative);
  };

  _exports.stubNativeService = stubNativeService;
});
define("freshservice/tests/lib/stub-router", ["exports", "@ember/test-helpers", "freshservice/tests/lib/sinon-context"], function (_exports, _testHelpers, _sinonContext) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.stubRouter = void 0;

  var stubRouter = function stubRouter() {
    var context = (0, _testHelpers.getContext)();
    var sinon = (0, _sinonContext.getSinonContext)();
    var router = context.owner.lookup('service:router');
    sinon.stub(router, 'transitionTo');
    context.set('router', router);
    return router;
  };

  _exports.stubRouter = stubRouter;
});
define("freshservice/tests/lib/utils", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var tick = function tick() {
    var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    return new Promise(function (resolve) {
      return setTimeout(resolve, timeout);
    });
  };

  var _default = tick;
  _exports.default = _default;
});
define("freshservice/tests/page-object", ["exports", "ember-cli-page-object/test-support/-private/deprecate", "ember-cli-page-object"], function (_exports, _deprecate, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "alias", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.alias;
    }
  });
  Object.defineProperty(_exports, "attribute", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.attribute;
    }
  });
  Object.defineProperty(_exports, "clickOnText", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.clickOnText;
    }
  });
  Object.defineProperty(_exports, "clickable", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.clickable;
    }
  });
  Object.defineProperty(_exports, "collection", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.collection;
    }
  });
  Object.defineProperty(_exports, "contains", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.contains;
    }
  });
  Object.defineProperty(_exports, "count", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.count;
    }
  });
  Object.defineProperty(_exports, "create", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.create;
    }
  });
  Object.defineProperty(_exports, "fillable", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.fillable;
    }
  });
  Object.defineProperty(_exports, "selectable", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.fillable;
    }
  });
  Object.defineProperty(_exports, "focusable", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.focusable;
    }
  });
  Object.defineProperty(_exports, "hasClass", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.hasClass;
    }
  });
  Object.defineProperty(_exports, "is", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.is;
    }
  });
  Object.defineProperty(_exports, "isHidden", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.isHidden;
    }
  });
  Object.defineProperty(_exports, "isPresent", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.isPresent;
    }
  });
  Object.defineProperty(_exports, "isVisible", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.isVisible;
    }
  });
  Object.defineProperty(_exports, "notHasClass", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.notHasClass;
    }
  });
  Object.defineProperty(_exports, "property", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.property;
    }
  });
  Object.defineProperty(_exports, "text", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.text;
    }
  });
  Object.defineProperty(_exports, "triggerable", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.triggerable;
    }
  });
  Object.defineProperty(_exports, "value", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.value;
    }
  });
  Object.defineProperty(_exports, "visitable", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.visitable;
    }
  });
  Object.defineProperty(_exports, "buildSelector", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.buildSelector;
    }
  });
  Object.defineProperty(_exports, "findElementWithAssert", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.findElementWithAssert;
    }
  });
  Object.defineProperty(_exports, "findElement", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.findElement;
    }
  });
  Object.defineProperty(_exports, "getContext", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.getContext;
    }
  });
  Object.defineProperty(_exports, "fullScope", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.fullScope;
    }
  });
  _exports.default = void 0;
  var _default = {
    alias: _emberCliPageObject.alias,
    attribute: _emberCliPageObject.attribute,
    blurrable: _emberCliPageObject.blurrable,
    clickOnText: _emberCliPageObject.clickOnText,
    clickable: _emberCliPageObject.clickable,
    collection: _emberCliPageObject.collection,
    contains: _emberCliPageObject.contains,
    count: _emberCliPageObject.count,
    create: _emberCliPageObject.create,
    fillable: _emberCliPageObject.fillable,
    focusable: _emberCliPageObject.focusable,
    hasClass: _emberCliPageObject.hasClass,
    is: _emberCliPageObject.is,
    isHidden: _emberCliPageObject.isHidden,
    isPresent: _emberCliPageObject.isPresent,
    isVisible: _emberCliPageObject.isVisible,
    notHasClass: _emberCliPageObject.notHasClass,
    property: _emberCliPageObject.property,
    selectable: _emberCliPageObject.fillable,
    text: _emberCliPageObject.text,
    triggerable: _emberCliPageObject.triggerable,
    value: _emberCliPageObject.value,
    visitable: _emberCliPageObject.visitable
  };
  _exports.default = _default;
  (0, _deprecate.default)('import-from-test-support', "Importing from \"test-support\" is now deprecated. Please import directly from the \"ember-cli-page-object\" module instead.", '1.16.0', '2.0.0');
});
define("freshservice/tests/pages/components/_component", ["exports", "freshservice/tests/page-object"], function (_exports, _pageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.jquery = jquery;
  _exports.default = component;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  // A helper to leverage jQuery for page component queries
  function jquery(callback) {
    var errorIfMissing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    return {
      isDescriptor: true,
      get: function get() {
        var $el = (0, _pageObject.findElement)(this);

        if (errorIfMissing && !$el.length) {
          throw new Error("Element ".concat(this.scope, " not found."));
        }

        return callback($el);
      }
    };
  }

  function component() {
    var scope = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var descriptor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    // If a descriptor is passed as the first arg
    if (scope === Object(scope)) {
      descriptor = scope;
      scope = null;
    }

    return _objectSpread(_objectSpread({}, scope ? {
      scope: scope,
      itemScope: scope
    } : {}), {}, {
      // inject the scope only if it was provided
      $: jquery(function ($el) {
        return $el;
      }),
      attr: jquery(function ($el) {
        return function (attrName) {
          return $el.attr(attrName);
        };
      }),
      click: (0, _pageObject.clickable)(),
      contains: jquery(function ($el) {
        return function (selector) {
          return $el.find(selector).length > 0;
        };
      }, false),
      empty: jquery(function ($el) {
        return $el.is(':empty') || !$el.children().length && !$el.text().trim().length;
      }),
      exists: jquery(function ($el) {
        return $el.length > 0;
      }, false),
      // false: don't spit an error if element isn't found
      index: jquery(function ($el) {
        return $el.index();
      }),
      hasClass: jquery(function ($el) {
        return function (className) {
          return $el.hasClass(className);
        };
      }),
      visible: (0, _pageObject.isVisible)(),
      text: (0, _pageObject.text)()
    }, descriptor);
  }
});
define("freshservice/tests/pages/components/admin/cloud-management", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var selectors = {
    bannerTitle: '[data-test-id="cm-banner-title"]',
    bannerPrevBtn: '[data-test-id="pageNavPrev"]',
    bannerNxtBtn: '[data-test-id="pageNavNext"]',
    firstGalleryItem: '[data-test-id="cm-gallery-app-list"] .cm-gallery-item:first-child',
    galleryItem: '[data-test-id="cm-gallery-item"]',
    galleryAppListCont: '[data-test-id="cm-gallery-app-list"]',
    sidePane: '.ember-modal-dialog'
  };

  var _default = (0, _emberCliPageObject.create)({
    // clickables
    bannerPrevBtn: (0, _emberCliPageObject.clickable)(selectors.bannerPrevBtn),
    bannerNxtBtn: (0, _emberCliPageObject.clickable)(selectors.bannerNxtBtn),
    firstGalleryItem: (0, _emberCliPageObject.clickable)(selectors.firstGalleryItem),
    // collections
    galleryAppListCont: (0, _emberCliPageObject.collection)(selectors.galleryAppListCont, {
      galleryItem: (0, _emberCliPageObject.collection)(selectors.galleryItem)
    }),
    // visibility
    isSidePaneVisible: (0, _emberCliPageObject.isVisible)(selectors.sidePane),
    // disabled
    bannerPrevBtnDisabled: (0, _emberCliPageObject.property)('disabled', selectors.bannerPrevBtn),
    bannerNxtBtnDisabled: (0, _emberCliPageObject.property)('disabled', selectors.bannerNxtBtn),
    // texts
    bannerTitle: (0, _emberCliPageObject.text)(selectors.bannerTitle)
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/admin/itom/alert-integrations/advanced-settings", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // Selectors
  var SELECTORS = {
    ADVANCED_SETTINGS_TITLE: "[data-test-id='adv-settings-title']",
    ADVANCED_SETTINGS_HELPTEXT: "[data-test-id='adv-settings-helptext']",
    ADVANCED_SETTINGS_REOPEN_TITLE: "[data-test-id='alert-reopen-title']",
    ADVANCED_SETTINGS_REOPEN_HELPTEXT1: "[data-test-id='alert-reopen-helptext1']",
    ADVANCED_SETTINGS_REOPEN_HELPTEXT2: "[data-test-id='alert-reopen-helptext2']",
    ADVANCED_SETTINGS_REOPEN_HELPTEXT3: "[data-test-id='alert-reopen-helptext3']",
    ADVANCED_SETTINGS_REOPEN_SAVE: "[data-test-id='alert-reopen-save']",
    ADVANCED_SETTINGS_REOPEN_CANCEL: "[data-test-id='alert-reopen-cancel']",
    ADVANCED_SETTINGS_REOPEN_ACK_CHECKBOX: "[data-test-id='reset-ack-on-reopen']",
    ADVANCED_SETTINGS_REOPEN_DROPDOWN: ".ember-basic-dropdown-trigger",
    ADVANCED_SETTINGS_REOPEN_DROPDOWN_FIRST_CHOICE: ".ember-power-select-options [data-option-index='0']",
    ADVANCED_SETTINGS_REOPEN_INTERVAL: ".ember-power-select-selected-item"
  };

  var _default = (0, _emberCliPageObject.create)({
    titleText: (0, _emberCliPageObject.text)(SELECTORS.ADVANCED_SETTINGS_TITLE),
    subtitleText: (0, _emberCliPageObject.text)(SELECTORS.ADVANCED_SETTINGS_HELPTEXT),
    reopenTitleText: (0, _emberCliPageObject.text)(SELECTORS.ADVANCED_SETTINGS_REOPEN_TITLE),
    reopenHelptext1Text: (0, _emberCliPageObject.text)(SELECTORS.ADVANCED_SETTINGS_REOPEN_HELPTEXT1),
    reopenHelptext2Text: (0, _emberCliPageObject.text)(SELECTORS.ADVANCED_SETTINGS_REOPEN_HELPTEXT2),
    reopenHelptext3Text: (0, _emberCliPageObject.text)(SELECTORS.ADVANCED_SETTINGS_REOPEN_HELPTEXT3),
    reopenSaveButtonText: (0, _emberCliPageObject.text)(SELECTORS.ADVANCED_SETTINGS_REOPEN_SAVE),
    reopenCancelButtonText: (0, _emberCliPageObject.text)(SELECTORS.ADVANCED_SETTINGS_REOPEN_CANCEL),
    reopenIntervalText: (0, _emberCliPageObject.text)(SELECTORS.ADVANCED_SETTINGS_REOPEN_INTERVAL),
    isReopenAckChecked: (0, _emberCliPageObject.property)("checked", SELECTORS.ADVANCED_SETTINGS_REOPEN_ACK_CHECKBOX),
    clickReopenCheckbox: (0, _emberCliPageObject.clickable)(SELECTORS.ADVANCED_SETTINGS_REOPEN_ACK_CHECKBOX),
    clickReopenDropdown: (0, _emberCliPageObject.clickable)(SELECTORS.ADVANCED_SETTINGS_REOPEN_DROPDOWN),
    clickReopenDDFirstChoice: (0, _emberCliPageObject.clickable)(SELECTORS.ADVANCED_SETTINGS_REOPEN_DROPDOWN_FIRST_CHOICE)
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/admin/itom/alert-integrations/alert-payload", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // Selectors
  var SELECTORS = {
    ALERT_PAYLOAD_INT_NAME: "[data-test-id='alert-int-name']",
    ALERT_PAYLOAD_TITLE: "[data-test-id='alert-payload-title']",
    ALERT_PAYLOAD_CONTENT: "[data-test-id='alert-payload-content']"
  };

  var _default = (0, _emberCliPageObject.create)({
    integrationNameText: (0, _emberCliPageObject.text)(SELECTORS.ALERT_PAYLOAD_INT_NAME),
    titleText: (0, _emberCliPageObject.text)(SELECTORS.ALERT_PAYLOAD_TITLE),
    contentText: (0, _emberCliPageObject.isPresent)(SELECTORS.ALERT_PAYLOAD_CONTENT)
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/admin/itom/alert-integrations/custom-alert-payload", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // Selectors
  var SELECTORS = {
    CONFIG_PAYLOAD_INTEGRATION_NAME: "[data-test-id='alert-int-name']",
    CONFIG_PAYLOAD_TITLE: "[data-test-id='config-payload-title']",
    CONFIG_PAYLOAD_HELPTEXT1: "[data-test-id='config-payload-helptext1']",
    CONFIG_PAYLOAD_HELPTEXT2: "[data-test-id='config-payload-helptext2']",
    CONFIG_PAYLOAD_EX_LINK: "[data-test-id='config-payload-ex-link']",
    CONFIG_PAYLOAD_CONTENT: "[data-test-id='config-payload-content']"
  };

  var _default = (0, _emberCliPageObject.create)({
    integrationNameText: (0, _emberCliPageObject.text)(SELECTORS.CONFIG_PAYLOAD_INTEGRATION_NAME),
    titleText: (0, _emberCliPageObject.text)(SELECTORS.CONFIG_PAYLOAD_TITLE),
    helptext1Text: (0, _emberCliPageObject.text)(SELECTORS.CONFIG_PAYLOAD_HELPTEXT1),
    helptext2Text: (0, _emberCliPageObject.text)(SELECTORS.CONFIG_PAYLOAD_HELPTEXT2),
    externalLinkText: (0, _emberCliPageObject.text)(SELECTORS.CONFIG_PAYLOAD_EX_LINK),
    contentText: (0, _emberCliPageObject.isPresent)(SELECTORS.CONFIG_PAYLOAD_CONTENT)
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/admin/itom/alert-integrations/onboarding", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // Selectors
  var SELECTORS = {
    ONBOARDING_TITLE: "[data-test-id='ams-onboarding-title']",
    ONBOARDING_DESC: "[data-test-id='ams-onboarding-description']",
    ONBOARDING_BUTTON: "[data-test-id='ams-onboarding-button']",
    ONBOARDING_IMAGE: "[data-test-id='ams-onboarding-image']"
  };

  var _default = (0, _emberCliPageObject.create)({
    titleText: (0, _emberCliPageObject.text)(SELECTORS.ONBOARDING_TITLE),
    descriptionText: (0, _emberCliPageObject.text)(SELECTORS.ONBOARDING_DESC),
    buttonText: (0, _emberCliPageObject.text)(SELECTORS.ONBOARDING_BUTTON)
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/admin/itom/alert-integrations/show", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // Selectors
  var SELECTORS = {
    INTEGRATION_TITLE: "[data-test-id='integration-title']",
    INTEGRATION_DESC: "[data-test-field-name='description'] textarea"
  };

  var _default = (0, _emberCliPageObject.create)({
    pageTitle: (0, _emberCliPageObject.text)(SELECTORS.INTEGRATION_TITLE),
    integrationDesc: (0, _emberCliPageObject.value)(SELECTORS.INTEGRATION_DESC)
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/admin/itom/alert-rules", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // Selectors
  var SELECTORS = {
    ALERT_RULE_TITLE: "[data-test-id='view-alert-title-text']",
    ALERT_RULE_DESCRIPTION: "[data-test-id='view-alert-desc-text']",
    INCIDENT_ADD_CONDITION_BUTTON: ".incident-rule .parent [data-test-id='add-condition']",
    INCIDENT_REMOVE_CONDITION_BUTTON: ".incident-rule .parent [data-test-id='remove-condition']",
    CONDITION_ROW_RESOURCE: ".rule-row .resource",
    CONDITION_ROW_SEVERITY: ".rule-row .severity",
    CONDITION_ROW_METRIC_NAME: ".rule-row .metric_name",
    CONDITION_ROW_ALERT_TAG: ".rule-row .alert_tag",
    CONDITION_ROW_MESSAGE: ".rule-row .message",
    CONDITION_ROW_INTEGRATION_NAME: ".rule-row .integration_name",
    CONDITION_ROW_ADDITIONAL_INFO: ".rule-row .additional_info",
    ACTION_ON_OPTIONS_CHOICE: ".action-text-option .action-choice .ember-power-select-trigger",
    ACTION_ON_OPTIONS_DD_CHOICE: ".action-text-option .action-choice .ember-power-select-option",
    ACTION_ON_OPTIONS_SELECTED: ".action-text-option .action-choice .ember-power-select-selected-item",
    ACTIONS_INCIDENT_GROUP_KEY: ".incident-field-group [data-test-id='textfeild-multiselect-pill']",
    ACTIONS_INCIDENT_DEPARTMENT_KEY: ".incident-field-department [data-test-id='textfeild-multiselect-pill']",
    ACTIONS_INCIDENT_CATEGORY_KEY: ".incident-field-category .fields-container .fs-multiple-option-text[data-test-id='textfeild-multiselect-pill']",
    ACTIONS_INCIDENT_SUB_CATEGORY_KEY: "[data-test-field-name='sub_category'] .form-field--label",
    ACTIONS_INCIDENT_ITEM_CATEGORY_KEY: "[data-test-field-name='item_category'] .form-field--label",
    ACTIONS_INCIDENT_STATUS_KEY: ".incident-field-status [data-test-id='textfeild-multiselect-pill']",
    ACTIONS_INCIDENT_URGENCY_KEY: ".incident-field-urgency [data-test-id='textfeild-multiselect-pill']",
    ACTIONS_INCIDENT_IMPACT_KEY: ".incident-field-impact [data-test-id='textfeild-multiselect-pill']",
    ACTIONS_INCIDENT_PRIORITY_KEY: ".incident-field-priority [data-test-id='textfeild-multiselect-pill']",
    ACTIONS_INCIDENT_TAGS_KEY: ".incident-field-tags [data-test-id='textfeild-multiselect-pill']",
    ACTIONS_INCIDENT_NOTE_KEY: ".incident-field-note [data-test-id='textfeild-multiselect-pill']",
    ACTIONS_INCIDENT_SUBJECT_KEY: ".incident-field-subject .fields-container-key [data-test-id='textfeild-multiselect-pill']",
    ACTIONS_INCIDENT_GROUP_VALUE: ".field-value-group .ember-power-select-selected-item",
    ACTIONS_INCIDENT_DEPARTMENT_VALUE: ".field-value-department .ember-power-select-selected-item",
    ACTIONS_INCIDENT_CATEGORY_VALUE: ".field-value-category .ember-power-select-selected-item",
    ACTIONS_INCIDENT_SUB_CATEGORY_VALUE: "[data-test-field-name='sub_category'] .ember-power-select-selected-item",
    ACTIONS_INCIDENT_ITEM_CATEGORY_VALUE: "[data-test-field-name='item_category'] .ember-power-select-selected-item",
    ACTIONS_INCIDENT_PRIORITY_VALUE: ".field-value-priority .ember-power-select-selected-item",
    ACTIONS_INCIDENT_IMPACT_VALUE: ".field-value-impact .ember-power-select-selected-item",
    ACTIONS_INCIDENT_URGENCY_VALUE: ".field-value-urgency .ember-power-select-selected-item",
    ACTIONS_INCIDENT_STATUS_VALUE: ".field-value-status .ember-power-select-selected-item",
    ACTIONS_INCIDENT_TAGS_VALUE: ".field-value-tags .ember-power-select-multiple-option",
    ACTIONS_INCIDENT_SUBJECT_VALUE: ".field-value-subject .fs-multiple-option-text",
    ACTIONS_INCIDENT_NOTE_VALUE: ".field-value-note [contenteditable='true']",
    ACTIONS_INCIDENT_GROUP_REMOVE_VALUE: ".field-value-group .ember-power-select-clear-btn",
    ACTIONS_INCIDENT_DEPARTMENT_REMOVE_VALUE: ".field-value-department .ember-power-select-clear-btn",
    ACTIONS_INCIDENT_CATEGORY_REMOVE_VALUE: ".field-value-category .ember-power-select-clear-btn",
    ACTIONS_INCIDENT_SUB_CATEGORY_REMOVE_VALUE: "[data-test-field-name='sub_category'] .ember-power-select-clear-btn",
    ACTIONS_INCIDENT_ITEM_CATEGORY_REMOVE_VALUE: "[data-test-field-name='item_category'] .ember-power-select-clear-btn",
    ACTIONS_INCIDENT_PRIORITY_REMOVE_VALUE: ".field-value-priority .ember-power-select-clear-btn",
    ACTIONS_INCIDENT_IMPACT_REMOVE_VALUE: ".field-value-impact .ember-power-select-clear-btn",
    ACTIONS_INCIDENT_URGENCY_REMOVE_VALUE: ".field-value-urgency .ember-power-select-clear-btn",
    ACTIONS_INCIDENT_STATUS_REMOVE_VALUE: ".field-value-status .ember-power-select-clear-btn",
    ACTIONS_INCIDENT_TAGS_REMOVE_VALUE: ".field-value-tags .ember-power-select-multiple-remove-btn",
    ACTIONS_INCIDENT_SUBJECT_REMOVE_VALUE: ".field-value-subject .fs-multiple-option-remove-btn",
    ACTIONS_INCIDENT_GROUP_REMOVE_ROW: ".incident-field-row-group [data-test-id='remove-condition']",
    ACTIONS_INCIDENT_DEPARTMENT_REMOVE_ROW: ".incident-field-row-department [data-test-id='remove-condition']",
    ACTIONS_INCIDENT_CATEGORY_REMOVE_ROW: ".incident-field-row-category .btn-delete-condition[data-test-id='remove-condition']",
    ACTIONS_INCIDENT_STATUS_REMOVE_ROW: ".incident-field-row-status [data-test-id='remove-condition']",
    ACTIONS_INCIDENT_URGENCY_REMOVE_ROW: ".incident-field-row-urgency [data-test-id='remove-condition']",
    ACTIONS_INCIDENT_IMPACT_REMOVE_ROW: ".incident-field-row-impact [data-test-id='remove-condition']",
    ACTIONS_INCIDENT_PRIORITY_REMOVE_ROW: ".incident-field-row-priority [data-test-id='remove-condition']",
    ACTIONS_INCIDENT_TAGS_REMOVE_ROW: ".incident-field-row-tags [data-test-id='remove-condition']",
    ACTIONS_INCIDENT_NOTE_REMOVE_ROW: ".incident-field-row-note [data-test-id='remove-condition']",
    ACTIONS_INCIDENT_SUBJECT_REMOVE_ROW: ".incident-field-row-subject [data-test-id='remove-condition']",
    ACTIONS_INCIDENT_ADD_ROW: ".action-incident-container [data-test-id='add-condition']",
    ACTIONS_INCIDENT_DD_ITEM: ".fields-container-key-dropdown .ember-power-select-options .ember-power-select-option",
    ACTIONS_INCIDENT_SEARCH_INPUT: ".fields-container-key-dropdown .fieldsInputEle",
    ACTIONS_INCIDENT_DD_KEY_CHOICES: ".action-incident-container .fields-container .ember-power-select-options",
    ACTIONS_INCIDENT_DD_KEY_FIRST_CHOICE: ".action-incident-container .fields-container .ember-power-select-options [data-option-index='0']"
  };

  var _default = (0, _emberCliPageObject.create)({
    titleText: (0, _emberCliPageObject.text)(SELECTORS.ALERT_RULE_TITLE),
    descriptionText: (0, _emberCliPageObject.text)(SELECTORS.ALERT_RULE_DESCRIPTION),
    incidentRemoveBtnCount: (0, _emberCliPageObject.count)(SELECTORS.INCIDENT_REMOVE_CONDITION_BUTTON),
    isIncidentAddBtnDisabled: (0, _emberCliPageObject.hasClass)('disabled', SELECTORS.INCIDENT_ADD_CONDITION_BUTTON),
    isIncidentRemoveBtnDisabled: (0, _emberCliPageObject.hasClass)('disabled', SELECTORS.INCIDENT_REMOVE_CONDITION_BUTTON),
    actionDropDownOpen: (0, _emberCliPageObject.clickable)(SELECTORS.ACTION_ON_OPTIONS_CHOICE),
    actionDropDownChoiceSelect: (0, _emberCliPageObject.clickable)(SELECTORS.ACTION_ON_OPTIONS_DD_CHOICE),
    actionDropDownChoiceSelectedText: (0, _emberCliPageObject.text)(SELECTORS.ACTION_ON_OPTIONS_SELECTED),
    actionIncidentSearchInputFocus: (0, _emberCliPageObject.focusable)(SELECTORS.ACTIONS_INCIDENT_SEARCH_INPUT),
    actionIncidentGroupKeyText: (0, _emberCliPageObject.text)(SELECTORS.ACTIONS_INCIDENT_GROUP_KEY),
    actionIncidentDepartmentKeyText: (0, _emberCliPageObject.text)(SELECTORS.ACTIONS_INCIDENT_DEPARTMENT_KEY),
    actionIncidentCategoryKeyText: (0, _emberCliPageObject.text)(SELECTORS.ACTIONS_INCIDENT_CATEGORY_KEY),
    actionIncidentSubCategoryKeyText: (0, _emberCliPageObject.text)(SELECTORS.ACTIONS_INCIDENT_SUB_CATEGORY_KEY),
    actionIncidentItemCategoryKeyText: (0, _emberCliPageObject.text)(SELECTORS.ACTIONS_INCIDENT_ITEM_CATEGORY_KEY),
    actionIncidentImpactKeyText: (0, _emberCliPageObject.text)(SELECTORS.ACTIONS_INCIDENT_IMPACT_KEY),
    actionIncidentPriorityKeyText: (0, _emberCliPageObject.text)(SELECTORS.ACTIONS_INCIDENT_PRIORITY_KEY),
    actionIncidentUrgencyKeyText: (0, _emberCliPageObject.text)(SELECTORS.ACTIONS_INCIDENT_URGENCY_KEY),
    actionIncidentStatusKeyText: (0, _emberCliPageObject.text)(SELECTORS.ACTIONS_INCIDENT_STATUS_KEY),
    actionIncidentTagsKeyText: (0, _emberCliPageObject.text)(SELECTORS.ACTIONS_INCIDENT_TAGS_KEY),
    actionIncidentSubjectKeyText: (0, _emberCliPageObject.text)(SELECTORS.ACTIONS_INCIDENT_SUBJECT_KEY),
    actionIncidentNoteKeyText: (0, _emberCliPageObject.text)(SELECTORS.ACTIONS_INCIDENT_NOTE_KEY),
    actionIncidentGroupValueText: (0, _emberCliPageObject.text)(SELECTORS.ACTIONS_INCIDENT_GROUP_VALUE),
    actionIncidentDepartmentValueText: (0, _emberCliPageObject.text)(SELECTORS.ACTIONS_INCIDENT_DEPARTMENT_VALUE),
    actionIncidentCategoryValueText: (0, _emberCliPageObject.text)(SELECTORS.ACTIONS_INCIDENT_CATEGORY_VALUE),
    actionIncidentSubCategoryValueText: (0, _emberCliPageObject.text)(SELECTORS.ACTIONS_INCIDENT_SUB_CATEGORY_VALUE),
    actionIncidentItemCategoryValueText: (0, _emberCliPageObject.text)(SELECTORS.ACTIONS_INCIDENT_ITEM_CATEGORY_VALUE),
    actionIncidentImpactValueText: (0, _emberCliPageObject.text)(SELECTORS.ACTIONS_INCIDENT_IMPACT_VALUE),
    actionIncidentPriorityValueText: (0, _emberCliPageObject.text)(SELECTORS.ACTIONS_INCIDENT_PRIORITY_VALUE),
    actionIncidentUrgencyValueText: (0, _emberCliPageObject.text)(SELECTORS.ACTIONS_INCIDENT_URGENCY_VALUE),
    actionIncidentStatusValueText: (0, _emberCliPageObject.text)(SELECTORS.ACTIONS_INCIDENT_STATUS_VALUE),
    actionIncidentTagsValueText: (0, _emberCliPageObject.text)(SELECTORS.ACTIONS_INCIDENT_TAGS_VALUE),
    actionIncidentSubjectValueText: (0, _emberCliPageObject.text)(SELECTORS.ACTIONS_INCIDENT_SUBJECT_VALUE),
    actionIncidentNoteValueText: (0, _emberCliPageObject.text)(SELECTORS.ACTIONS_INCIDENT_NOTE_VALUE),
    actionIncidentGroupRemoveValue: (0, _emberCliPageObject.clickOnText)(SELECTORS.ACTIONS_INCIDENT_GROUP_REMOVE_VALUE),
    actionIncidentDepartmentRemoveValue: (0, _emberCliPageObject.clickOnText)(SELECTORS.ACTIONS_INCIDENT_DEPARTMENT_REMOVE_VALUE),
    actionIncidentCategoryRemoveValue: (0, _emberCliPageObject.clickOnText)(SELECTORS.ACTIONS_INCIDENT_CATEGORY_REMOVE_VALUE),
    actionIncidentSubCategoryRemoveValue: (0, _emberCliPageObject.clickOnText)(SELECTORS.ACTIONS_INCIDENT_SUB_CATEGORY_REMOVE_VALUE),
    actionIncidentItemCategoryRemoveValue: (0, _emberCliPageObject.clickOnText)(SELECTORS.ACTIONS_INCIDENT_ITEM_CATEGORY_REMOVE_VALUE),
    actionIncidentImpactRemoveValue: (0, _emberCliPageObject.clickOnText)(SELECTORS.ACTIONS_INCIDENT_IMPACT_REMOVE_VALUE),
    actionIncidentPriorityRemoveValue: (0, _emberCliPageObject.clickOnText)(SELECTORS.ACTIONS_INCIDENT_PRIORITY_REMOVE_VALUE),
    actionIncidentUrgencyRemoveValue: (0, _emberCliPageObject.clickOnText)(SELECTORS.ACTIONS_INCIDENT_URGENCY_REMOVE_VALUE),
    actionIncidentStatusRemoveValue: (0, _emberCliPageObject.clickOnText)(SELECTORS.ACTIONS_INCIDENT_STATUS_REMOVE_VALUE),
    actionIncidentTagsRemoveValue: (0, _emberCliPageObject.clickOnText)(SELECTORS.ACTIONS_INCIDENT_TAGS_REMOVE_VALUE),
    actionIncidentSubjectRemoveValue: (0, _emberCliPageObject.clickOnText)(SELECTORS.ACTIONS_INCIDENT_SUBJECT_REMOVE_VALUE),
    //TODO: Empty note
    actionIncidentGroupRemoveRow: (0, _emberCliPageObject.clickOnText)(SELECTORS.ACTIONS_INCIDENT_GROUP_REMOVE_ROW),
    actionIncidentDepartmentRemoveRow: (0, _emberCliPageObject.clickOnText)(SELECTORS.ACTIONS_INCIDENT_DEPARTMENT_REMOVE_ROW),
    actionIncidentCategoryRemoveRow: (0, _emberCliPageObject.clickOnText)(SELECTORS.ACTIONS_INCIDENT_CATEGORY_REMOVE_ROW),
    actionIncidentSubCategoryRemoveRow: (0, _emberCliPageObject.clickOnText)(SELECTORS.ACTIONS_INCIDENT_SUB_CATEGORY_REMOVE_ROW),
    actionIncidentItemCategoryRemoveRow: (0, _emberCliPageObject.clickOnText)(SELECTORS.ACTIONS_INCIDENT_ITEM_CATEGORY_REMOVE_ROW),
    actionIncidentImpactRemoveRow: (0, _emberCliPageObject.clickOnText)(SELECTORS.ACTIONS_INCIDENT_IMPACT_REMOVE_ROW),
    actionIncidentPriorityRemoveRow: (0, _emberCliPageObject.clickOnText)(SELECTORS.ACTIONS_INCIDENT_PRIORITY_REMOVE_ROW),
    actionIncidentUrgencyRemoveRow: (0, _emberCliPageObject.clickOnText)(SELECTORS.ACTIONS_INCIDENT_URGENCY_REMOVE_ROW),
    actionIncidentStatusRemoveRow: (0, _emberCliPageObject.clickOnText)(SELECTORS.ACTIONS_INCIDENT_STATUS_REMOVE_ROW),
    actionIncidentTagsRemoveRow: (0, _emberCliPageObject.clickOnText)(SELECTORS.ACTIONS_INCIDENT_TAGS_REMOVE_ROW),
    actionIncidentSubjectRemoveRow: (0, _emberCliPageObject.clickOnText)(SELECTORS.ACTIONS_INCIDENT_SUBJECT_REMOVE_ROW),
    actionIncidentNoteRemoveRow: (0, _emberCliPageObject.clickOnText)(SELECTORS.ACTIONS_INCIDENT_NOTE_REMOVE_ROW),
    actionIncidentAddAction: (0, _emberCliPageObject.clickable)(SELECTORS.ACTIONS_INCIDENT_ADD_ROW),
    actionIncidentAddActionText: (0, _emberCliPageObject.text)(SELECTORS.ACTIONS_INCIDENT_ADD_ROW),
    actionIncidentAddActionIsDisabled: (0, _emberCliPageObject.is)(':disabled', SELECTORS.ACTIONS_INCIDENT_ADD_ROW),
    actionIncidentKeyDDChoicesIsOpened: (0, _emberCliPageObject.isVisible)(SELECTORS.ACTIONS_INCIDENT_DD_KEY_CHOICES),
    actionIncidentKeyDDSelectFirstChoice: (0, _emberCliPageObject.clickable)(SELECTORS.ACTIONS_INCIDENT_DD_KEY_FIRST_CHOICE)
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/admin/itom/automation-settings", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // Selectors
  var SELECTORS = {
    ALERT_INTELLIGENCE_TITLE: "[data-test-id='alert-intelligence-title']",
    ALERT_INTELLIGENCE_CONTENT: "[data-test-id='alert-intelligence-content']",
    ALERT_INTELLIGENCE_TOGGLE: "[data-test-id='alert-intelligence-toggle']",
    ALERT_INTELLIGENCE_NON_ELIGIBLE_HEADER: "[data-test-id='non-eligible-header']",
    CHANGE_PRIORITY: "[data-test-id='toggle-change-priority']",
    REOPEN_INCIDENT: "[data-test-id='toggle-reopen-incident']",
    AUTOMATION_SETTINGS_HEADER: "[data-test-id='automation-settings-header']"
  };

  var _default = (0, _emberCliPageObject.create)({
    titleText: (0, _emberCliPageObject.text)(SELECTORS.ALERT_INTELLIGENCE_TITLE),
    contentText: (0, _emberCliPageObject.text)(SELECTORS.ALERT_INTELLIGENCE_CONTENT),
    toggleBtn: (0, _emberCliPageObject.text)(SELECTORS.ALERT_INTELLIGENCE_TOGGLE),
    disabledChangePriority: (0, _emberCliPageObject.hasClass)("disabled", SELECTORS.CHANGE_PRIORITY),
    disabledReopenIncidents: (0, _emberCliPageObject.hasClass)("disabled", SELECTORS.REOPEN_INCIDENT),
    isAutomationSettingsEnabled: (0, _emberCliPageObject.isVisible)(SELECTORS.AUTOMATION_SETTINGS_HEADER),
    nonEligibleHeader: (0, _emberCliPageObject.text)(SELECTORS.ALERT_INTELLIGENCE_NON_ELIGIBLE_HEADER),
    toggleVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.ALERT_INTELLIGENCE_TOGGLE),
    isAlertIntelligenceBtnDisabled: (0, _emberCliPageObject.hasClass)('alert-disabled', SELECTORS.ALERT_INTELLIGENCE_TOGGLE)
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/admin/itom/on-call-schedules/notification-rule", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // Selectors
  var SELECTORS = {
    DESC_TEXT: '.ocs-notify-rules  .notify-desc',
    DISCARD_BTN: '.action-btns .btn[data-test-id="discard-changes"]',
    SAVE_BTN: '.action-btns .btn[data-test-id="save"]',
    DISCARD_YES_BTN: '.ember-modal-footer .btn[data-test-id="modal-submit"]',
    ACCORDION_HEADER_BTN_HIGHT_URGENT: '.notify-priority-rule .priority-0 .tab-title',
    ACCORDION_HEADER_BTN_HIGHT_HIGH: '.notify-priority-rule .priority-1 .tab-title',
    ACCORDION_HEADER_BTN_MEDIUM: '.notify-priority-rule .priority-2 .tab-title',
    ACCORDION_HEADER_BTN_LOW: '.notify-priority-rule .priority-3 .tab-title',
    LEVEL_1_DEFAULT_ACTION_INTERVAL: '#notify-priority-0 .default-action[data-test-id="level-1-action-default"] .inline-ui-comp',
    LEVEL_1_DEFAULT_ACTION_CHANNEL_SELECTED: '#notify-priority-0 .default-action[data-test-id="level-1-action-default"] .ember-power-select-trigger .ember-power-select-multiple-options .ember-power-select-multiple-option',
    LEVEL_1_DEFAULT_ACTION_CHANNEL_SELECTED_REMOVE: '#notify-priority-0 .default-action[data-test-id="level-1-action-default"] .ember-power-select-trigger .ember-power-select-multiple-options .ember-power-select-multiple-option .ember-power-select-multiple-remove-btn',
    LEVEL_1_DEFAULT_ACTION_INTERVAL_VALID_ERROR: '#notify-priority-0 .default-action[data-test-id="level-1-action-default"] .interval-error[data-test-id="notify-interval"] .error-text.invalid',
    LEVEL_1_DEFAULT_ACTION_CHANNEL_EMPTY_ERROR: '#notify-priority-0 .default-action[data-test-id="level-1-action-default"] .channel-error[data-test-id="notify-channel"] .error-text',
    LEVEL_1_ACTION_1_INTERVAL_EXCEED_ERROR: '#notify-priority-0 .rule-row[data-test-id="level-1-action-1"] .interval-error[data-test-id="notify-interval"] .error-text.exceedMax',
    LEVEL_1_ACTION_1_REMOVE_BTN: '.rule-container .rule-row[data-test-id="level-1-action-1"] .btn-delete-condition',
    LEVEL_1_ACTION_REMOVE_BTN: '#notify-priority-0 .rule-container[data-test-id="level-1"] .btn-delete-condition',
    LEVEL_1_ACTION_2_REMOVE_BTN: '.rule-container .rule-row[data-test-id="level-1-action-2"] .btn-delete-condition',
    LEVEL_1_ACTION_1_INTERVAL: '.rule-container[data-test-id="level-1"] .rule-row[data-test-id="level-1-action-1"] .inline-ui-comp',
    LEVEL_1_ACTION_1_ADD_BTN: '#notify-priority-0 .rule-container[data-test-id="level-1"] .btn-add-condition',
    MEDIUM_PRIORITY_TAB: '.notify-priority-tabs .priority-1',
    TOGGLE_SWITCH_TEXT: '.toggle-escalation .desc-text',
    ESCALATION_TIME_BANNER: '.escalation-time-alert'
  };

  var _default = (0, _emberCliPageObject.create)({
    textDesc: (0, _emberCliPageObject.text)(SELECTORS.DESC_TEXT),
    clickDiscardBtn: (0, _emberCliPageObject.clickable)(SELECTORS.DISCARD_BTN),
    clickSaveBtn: (0, _emberCliPageObject.clickable)(SELECTORS.SAVE_BTN),
    isDisabledButtonExist: (0, _emberCliPageObject.isPresent)(SELECTORS.DISCARD_BTN),
    clickDiscardYesBtn: (0, _emberCliPageObject.clickable)(SELECTORS.DISCARD_YES_BTN),
    textHeaderUrgent: (0, _emberCliPageObject.text)(SELECTORS.ACCORDION_HEADER_BTN_HIGHT_URGENT),
    textHeaderHigh: (0, _emberCliPageObject.text)(SELECTORS.ACCORDION_HEADER_BTN_HIGHT_HIGH),
    textHeaderMedium: (0, _emberCliPageObject.text)(SELECTORS.ACCORDION_HEADER_BTN_MEDIUM),
    textHeaderLow: (0, _emberCliPageObject.text)(SELECTORS.ACCORDION_HEADER_BTN_LOW),
    valueLevel1DefaultActionInterval: (0, _emberCliPageObject.value)(SELECTORS.LEVEL_1_DEFAULT_ACTION_INTERVAL),
    setValueLevel1DefaultActionInterval: (0, _emberCliPageObject.fillable)(SELECTORS.LEVEL_1_DEFAULT_ACTION_INTERVAL),
    textLevel1DefaultActionChannelSelected: (0, _emberCliPageObject.text)(SELECTORS.LEVEL_1_DEFAULT_ACTION_CHANNEL_SELECTED, {
      multiple: true
    }),
    countLevel1DefaultActionChannelSelected: (0, _emberCliPageObject.count)(SELECTORS.LEVEL_1_DEFAULT_ACTION_CHANNEL_SELECTED, {
      multiple: true
    }),
    removeLevel1DefautlActionChannelSelected1: (0, _emberCliPageObject.clickable)(SELECTORS.LEVEL_1_DEFAULT_ACTION_CHANNEL_SELECTED_REMOVE, {
      at: 0
    }),
    removeLevel1Action1: (0, _emberCliPageObject.clickable)(SELECTORS.LEVEL_1_ACTION_1_REMOVE_BTN),
    removeLevel1Action2: (0, _emberCliPageObject.clickable)(SELECTORS.LEVEL_1_ACTION_2_REMOVE_BTN),
    valueLevel1Action1Interval: (0, _emberCliPageObject.value)(SELECTORS.LEVEL_1_ACTION_1_INTERVAL, {
      at: 1
    }),
    setValueLevel1lAction1Interval: (0, _emberCliPageObject.fillable)(SELECTORS.LEVEL_1_ACTION_1_INTERVAL),
    addLevel1Action1: (0, _emberCliPageObject.clickable)(SELECTORS.LEVEL_1_ACTION_1_ADD_BTN),
    isAddLevel1Action1Disabled: (0, _emberCliPageObject.is)(':disabled', SELECTORS.LEVEL_1_ACTION_1_ADD_BTN),
    countLevel1RemoveBtn: (0, _emberCliPageObject.count)(SELECTORS.LEVEL_1_ACTION_REMOVE_BTN),
    clickMediumPriorityTab: (0, _emberCliPageObject.clickable)(SELECTORS.MEDIUM_PRIORITY_TAB),
    isToggleSwitchTextExist: (0, _emberCliPageObject.isPresent)(SELECTORS.TOGGLE_SWITCH_TEXT),
    isEscalationTimeBannerExist: (0, _emberCliPageObject.isPresent)(SELECTORS.ESCALATION_TIME_BANNER),
    textLevel1DefautlActionIntervelValidError: (0, _emberCliPageObject.text)(SELECTORS.LEVEL_1_DEFAULT_ACTION_INTERVAL_VALID_ERROR),
    textLevel1DefaultActionChannelError: (0, _emberCliPageObject.text)(SELECTORS.LEVEL_1_DEFAULT_ACTION_CHANNEL_EMPTY_ERROR),
    textLevel1Action1IntervalExceedError: (0, _emberCliPageObject.text)(SELECTORS.LEVEL_1_ACTION_1_INTERVAL_EXCEED_ERROR)
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/admin/itom/on-call-schedules/schedule", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = (0, _emberCliPageObject.create)({
    visitIndexPage: (0, _emberCliPageObject.visitable)('/admin/itom/on-call-schedules/:schedule_id'),
    newForm: {
      exists: (0, _emberCliPageObject.isVisible)('[data-test-id="schedule-form"]'),
      //fields
      hasFieldName: (0, _emberCliPageObject.isVisible)('[data-test-field-name="name"] input'),
      hasFieldDescription: (0, _emberCliPageObject.isVisible)('[data-test-field-name="description"] textarea'),
      hasFieldAgentGroupId: (0, _emberCliPageObject.isVisible)('.ember-power-select-trigger'),
      // inputs
      fillName: (0, _emberCliPageObject.fillable)('[data-test-field-name="name"] input'),
      fillDescription: (0, _emberCliPageObject.fillable)('[data-test-field-name="description"] textarea'),
      // get values
      getName: (0, _emberCliPageObject.value)('[data-test-field-name="name"] input'),
      getDescription: (0, _emberCliPageObject.value)('[data-test-field-name="description"] textarea'),
      // buttons
      addDescription: (0, _emberCliPageObject.clickable)('[data-test-id="add-description"]'),
      listAgents: (0, _emberCliPageObject.clickable)('.schedule-popup-common #agentGroup .ember-power-select-trigger'),
      save: (0, _emberCliPageObject.clickable)('[data-test-id="schedule-form-submit"]'),
      cancel: (0, _emberCliPageObject.clickable)('[data-test-id="modal-cancel"]'),
      hasErrorName: (0, _emberCliPageObject.isVisible)('[data-test-field-name="name"] .form-field--errors')
    },
    scheduleName: (0, _emberCliPageObject.text)('[data-test-id="schedule-name"'),
    deleteModal: (0, _emberCliPageObject.text)('[data-test-id=".ember-modal-dialog .ember-modal-header .title"]'),
    actions: {
      deleteModal: {
        confirmName: (0, _emberCliPageObject.fillable)('[data-test-field-name="delete-schedule-confirm-input"] input'),
        invalidName: (0, _emberCliPageObject.count)('.schedule-name-validation .form-field--errors'),
        exists: (0, _emberCliPageObject.isVisible)('.schedule-delete-confirm-modal'),
        submit: (0, _emberCliPageObject.clickable)('.schedule-delete-confirm-modal [data-test-id="modal-submit"]'),
        cancel: (0, _emberCliPageObject.clickable)('.schedule-delete-confirm-modal [data-test-id="modal-cancel"]')
      },
      tabSchedule: (0, _emberCliPageObject.clickable)('[data-test-id="tab-schedule"] .tabs__items  a'),
      tabShift: (0, _emberCliPageObject.clickable)('[data-test-id="tab-schedule"] .tabs__items a.shift-paneitem'),
      tabNotification: (0, _emberCliPageObject.clickable)('[data-test-id="tab-schedule"] .tabs__items a.notification-paneitem'),
      edit: (0, _emberCliPageObject.clickable)('[data-test-id="edit-schedule-button"]'),
      delete: (0, _emberCliPageObject.clickable)('[data-test-id="delete-schedule-button"]')
    },
    //  //class checks
    isShiftTabActive: (0, _emberCliPageObject.hasClass)('active', '[data-test-id="tab-schedule"] .tabs__items a.shift-paneitem'),
    isNotificationTabActive: (0, _emberCliPageObject.hasClass)("active", '[data-test-id="tab-schedule"] .tabs__items a.notification-paneitem')
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/admin/itom/on-call-schedules/shift/escalation-path", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // Selectors
  var SELECTORS = {
    HEADING: ".escalation-path .sub-heading",
    ESCALATION_PATH_RULE_ROW: ".escalation-path-rule-container .rule-row",
    ESCALATION_PATH_RULE: ".escalation-path-rule-container .escalation-path-rule",
    EP_REPEAT_INPUT: ".ep-repeat-block .ember-power-select-selected-item",
    ADD_BUTTON: ".escalation-path-rule-container .btn-add-condition"
  };

  var _default = (0, _emberCliPageObject.create)({
    headingText: (0, _emberCliPageObject.text)(SELECTORS.HEADING),
    rulesCount: (0, _emberCliPageObject.count)(SELECTORS.ESCALATION_PATH_RULE),
    escalationPathRule: (0, _emberCliPageObject.collection)(SELECTORS.ESCALATION_PATH_RULE, {
      level: (0, _emberCliPageObject.text)('[data-test-id="ep-level-text"]', {
        at: 0
      })
    }),
    repeatCount: (0, _emberCliPageObject.text)(SELECTORS.EP_REPEAT_INPUT),
    addEpRule: (0, _emberCliPageObject.clickable)(SELECTORS.ADD_BUTTON, {
      at: 0
    }),
    epRuleRow: (0, _emberCliPageObject.collection)(SELECTORS.ESCALATION_PATH_RULE_ROW, {
      removeBtnClick: (0, _emberCliPageObject.clickable)('.btn-delete-condition', {
        at: 0
      })
    })
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/admin/itom/on-call-schedules/shift/shift", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // Selectors
  var SELECTORS = {
    DESC_TEXT: '.actions .desc-text',
    INVALID_PH_BANNER: '.phone-notification-banner'
  };

  var _default = (0, _emberCliPageObject.create)({
    textDesc: (0, _emberCliPageObject.text)(SELECTORS.DESC_TEXT),
    isInvalidPhBannerExists: (0, _emberCliPageObject.isVisible)(SELECTORS.INVALID_PH_BANNER)
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/admin/itom/on-call-schedules/shift/stakeholder", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // Selectors
  var SELECTORS = {
    HEADING: ".stakeholder-notification .sub-heading",
    AFTER_INTERVEL_INPUT: ".action-container .inline-ui-comp",
    CHANNEL_SELECTED_VALUES: ".sh-channel-dd-container .ember-power-select-multiple-options .ember-power-select-multiple-option",
    CHANNEL_DROPDOWN: ".sh-channel-dd-container .ember-power-select-multiple-trigger",
    CHANNEL_DROPDOWN_OPTIONS: ".sh-channel-dd-container .ember-power-select-options .ember-power-select-option[data-option-index='0']"
  };

  var _default = (0, _emberCliPageObject.create)({
    headingText: (0, _emberCliPageObject.text)(SELECTORS.HEADING),
    afterIntervelMins: (0, _emberCliPageObject.value)(SELECTORS.AFTER_INTERVEL_INPUT),
    channelSelectedCount: (0, _emberCliPageObject.count)(SELECTORS.CHANNEL_SELECTED_VALUES),
    channelDropDownClick: (0, _emberCliPageObject.clickable)(SELECTORS.CHANNEL_DROPDOWN),
    channelDropDownOptionClick: (0, _emberCliPageObject.clickable)(SELECTORS.CHANNEL_DROPDOWN_OPTIONS)
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/admin/itom/on-call-schedules/update-agent-phone", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var SELECTORS = {
    UPDATE_AGENT_PH_CONTAINER: '.update-agent-ph-container',
    AGENT_DOWNLOAD_LINK: "[data-test-id='agent_test_download_link']",
    REQUESTER_DOWNLOAD_LINK: "[data-test-id='req_test_download_link']",
    SUBMIT_BTN: '[data-test-id="modal-submit"]',
    CANCEL_BTN: '[data-test-id="modal-cancel"]',
    PHONE_NUMBER: '.fs-phone-number',
    COUNTRY_DROPDOWN: '.ember-basic-dropdown .ember-view',
    PHONE_NUMBER_FIELD: '.ph-container input',
    ERROR_TEXT: '.error-text'
  };

  var _default = (0, _emberCliPageObject.create)({
    exists: (0, _emberCliPageObject.isVisible)(SELECTORS.UPDATE_AGENT_PH_CONTAINER),
    hasAgentLink: (0, _emberCliPageObject.isVisible)(SELECTORS.AGENT_DOWNLOAD_LINK),
    hasRequesterLink: (0, _emberCliPageObject.isVisible)(SELECTORS.REQUESTER_DOWNLOAD_LINK),
    actions: {
      save: (0, _emberCliPageObject.clickable)(SELECTORS.SUBMIT_BTN),
      cancel: (0, _emberCliPageObject.clickable)(SELECTORS.CANCEL_BTN)
    },
    phoneNumberCompExists: (0, _emberCliPageObject.isVisible)(SELECTORS.PHONE_NUMBER),
    countryExtExists: (0, _emberCliPageObject.isVisible)(SELECTORS.COUNTRY_DROPDOWN),
    numberFieldExists: (0, _emberCliPageObject.isVisible)(SELECTORS.PHONE_NUMBER_FIELD),
    isErrorMsgVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.ERROR_TEXT)
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/admin/module-workspaces/edit", ["exports", "@ember/test-helpers", "ember-cli-page-object"], function (_exports, _testHelpers, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var _default = (0, _emberCliPageObject.create)({
    workspaceDelete: (0, _emberCliPageObject.isVisible)('[data-test-id="workspace-delete"]'),
    workspaceDeleteBtn: (0, _emberCliPageObject.clickable)('[data-test-id="workspace-delete"]'),
    publishWorkspace: (0, _emberCliPageObject.isVisible)('[data-test-id="publish-workspace"]'),
    updateDraftWorkspace: (0, _emberCliPageObject.isVisible)('[data-test-id="update-draft"]'),
    updateWorkspace: (0, _emberCliPageObject.isVisible)('[data-test-id="update-workspace"]'),
    fillName: (0, _emberCliPageObject.fillable)('[data-test-field-name="name"] input'),
    fillDescription: (0, _emberCliPageObject.fillable)('[data-test-field-name="description"] textarea'),
    updateDraftWorkspaceBtn: (0, _emberCliPageObject.clickable)('[data-test-id="update-draft"]'),
    updateWorkspaceBtn: (0, _emberCliPageObject.clickable)('[data-test-id="update-workspace"]'),
    workspaceDeleteConfirm: (0, _emberCliPageObject.clickable)('.workspace-delete-confirm-modal [data-test-id="modal-submit"]'),
    publishWorkspaceBtn: (0, _emberCliPageObject.clickable)('[data-test-id="publish-workspace"]'),
    publishWorkspaceConfirm: (0, _emberCliPageObject.clickable)('.workspace-publish-confirm-modal [data-test-id="modal-submit"]'),
    workspaceAdminsContainer: (0, _emberCliPageObject.isVisible)('[data-test-id="workspace-admins-container"]'),
    workspaceAgentsContainer: (0, _emberCliPageObject.isVisible)('[data-test-id="workspace-agents-container"]'),
    publishWorkspaceConfirmBtn: (0, _emberCliPageObject.isVisible)('.workspace-publish-confirm-modal [data-test-id="modal-submit"]'),
    addAttachment: function addAttachment(fileObject) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.triggerEvent)('input#logo-uploader', 'change', {
                  files: [new Blob([fileObject])]
                });

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    }
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/admin/module-workspaces/list", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = (0, _emberCliPageObject.create)({
    workspaceListCount: (0, _emberCliPageObject.count)('[data-test-id="workspace-list-container"] li'),
    workspacePrimaryCount: (0, _emberCliPageObject.count)('[data-test-id="primary-workspace"]'),
    workspaceDraftCount: (0, _emberCliPageObject.count)('[data-test-id="draft-workspace"]'),
    exploreWSListCount: (0, _emberCliPageObject.count)('[data-test-id="explore-ws-list"] li'),
    exploreWSSection: (0, _emberCliPageObject.isVisible)('[data-test-id="explore-ws-section"]'),
    removeExploreWSBtn: (0, _emberCliPageObject.clickable)('[data-test-id="remove-explore-ws"]')
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/admin/module-workspaces/requesters", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = (0, _emberCliPageObject.create)({
    workspaceRequestersContainer: (0, _emberCliPageObject.isVisible)('[data-test-id="workspace-requesters-container"]')
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/admin/module-workspaces/template", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = (0, _emberCliPageObject.create)({
    templateLogo: (0, _emberCliPageObject.isVisible)('[data-test-id="template-ws-logo"]'),
    templateName: (0, _emberCliPageObject.isVisible)('[data-test-id="template-ws-name"]'),
    templateDescription: (0, _emberCliPageObject.isVisible)('[data-test-id="template-ws-description"]')
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/app-components/integrations/time-entry-apps/fresh-book", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var getDropdownButton = function getDropdownButton(btnName) {
    return "[data-test-field-name=\"FreshBooks\"] [data-test-field-name=\"".concat(btnName, "\"] [role=\"button\"]");
  };

  var _default = (0, _emberCliPageObject.create)({
    isVisbile: (0, _emberCliPageObject.isHidden)("data-test-id='data-test-freshbooks-container'"),
    staffDropdownClick: (0, _emberCliPageObject.clickable)(getDropdownButton("staff")),
    clientDropdownClick: (0, _emberCliPageObject.clickable)(getDropdownButton("client")),
    projectDropdownClick: (0, _emberCliPageObject.clickable)(getDropdownButton("project")),
    serviceDropdownClick: (0, _emberCliPageObject.clickable)(getDropdownButton("service")),
    clickFirstListItem: (0, _emberCliPageObject.clickable)('.ember-power-select-options > li:nth-child(1)'),
    dropDownText: (0, _emberCliPageObject.text)('.ember-power-select-options > li:nth-child(1)')
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/app-components/module-native-integrations/logmein", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var logMeInWidget = '.logMeIn-widget';
  var logMeInAccordion = '[data-test-id=logMeIn-collapsible]';
  var remoteBtn = '.logMeIn-panel-container .remote-btn';
  var session = '[data-test-id=generated-session]';
  var resendInstruction = '.logMeIn-panel-container .gen-instruction';
  var launchConsole = '.logMeIn-panel-container .tech-link';
  var errorText = '.logMeIn-error';

  var _default = (0, _emberCliPageObject.create)({
    logMeInIsVisible: (0, _emberCliPageObject.isVisible)(logMeInWidget),
    remoteBtnIsVisible: (0, _emberCliPageObject.isVisible)(remoteBtn),
    sessionIsVisible: (0, _emberCliPageObject.isVisible)(session),
    resendInstructionIsVisible: (0, _emberCliPageObject.isVisible)(resendInstruction),
    launchConsoleIsVisible: (0, _emberCliPageObject.isVisible)(launchConsole),
    errorTextVisible: (0, _emberCliPageObject.isVisible)(errorText),
    clickLogMeInAccordion: (0, _emberCliPageObject.clickable)(logMeInAccordion),
    clickRemoteBtn: (0, _emberCliPageObject.clickable)(remoteBtn),
    clickConsole: (0, _emberCliPageObject.clickable)(launchConsole)
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/app-components/requester-info/requester", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var requesterDetails = '[data-test-id=test-requester-details]';
  var chevron = '[data-test-id=chevron-clickable]';
  var recentTickets = '[data-test-id=test-recent-tickets]';
  var recentTicketsModal = '[data-test-id=test-recent-modal]';
  var recentTicketItem = '[data-test-id=test-recent-container:first]';
  var recentTicketItemLink = '[data-test-id=test-recent-ticket-link:first]';
  var viewMore = '[data-test-id="test-view-more"]';
  var skypeBtn = '[data-test-id=test-requester-details] .skype-icon';
  var crmSwitchDropdown = '[data-test-id="crm-app-switch-dropdown"]';
  var office365Block = '[data-test-field-name=office-365]';
  var scheduleMeetingLink = '[data-test-field-name=office-365] .schedule-meeting-link';
  var officeCalendarModal = '.office-calendar-modal';
  var scheduledDateField = '[data-test-field-name=scheduleDate]';
  var scheduledDateFieldValue = '[data-test-field-name=scheduleDate] input';
  var startTimeFieldValue = '[data-test-id=start-time-field] .ember-power-select-selected-item ';
  var endTimeFieldValue = '[data-test-id=end-time-field] .ember-power-select-selected-item ';
  var startTimeField = '[data-test-id=start-time-field]';
  var endTimeField = '[data-test-id=end-time-field]';
  var meetingSlot = '.best-times-box-item';
  var scheduleBtn = '[data-test-id=modal-submit]';
  var meetingScheduledLink = '.meeting-scheduled a';
  var meetingScheduledDate = '.meeting-scheduled [data-test-field-name=meeting-date]';
  var meetingScheduledTime = '.meeting-scheduled [data-test-field-name=meeting-time]';
  var sfbBtn = '.skype-btn';
  var sfbContainer = '#sfb-conversation-container .swx';
  var chatReqName = '#sfb-conversation-container .chat-header .req-name';
  var sfbMinBtn = '#sfb-conversation-container .chat-header [data-test-field-name=sfb-minimize-btn]';
  var sfbCloseBtn = '#sfb-conversation-container .chat-header [data-test-field-name=sfb-close-btn]';
  var skypeModal = '.skype-modal';

  var _default = (0, _emberCliPageObject.create)({
    // visible
    isDetailsHidden: (0, _emberCliPageObject.isHidden)(requesterDetails),
    isSkypeBtnVisible: (0, _emberCliPageObject.isVisible)(skypeBtn),
    isCrmSwitchDropdownVisible: (0, _emberCliPageObject.isVisible)(crmSwitchDropdown),
    isCrmSectionVisible: (0, _emberCliPageObject.isVisible)('[data-test-id="crm-details"]'),
    isSalesforceVisible: (0, _emberCliPageObject.isVisible)('[data-requester-type="salesforce"]'),
    isSalesforceViewMoreHidden: (0, _emberCliPageObject.isVisible)('.salesforce-view-more-0.is-closed'),
    isOffice365BlockVisible: (0, _emberCliPageObject.isVisible)(office365Block),
    isOfficeCalendarModal: (0, _emberCliPageObject.isVisible)(officeCalendarModal),
    isDateFieldVisible: (0, _emberCliPageObject.isVisible)(scheduledDateField),
    isStartTimeFieldVisible: (0, _emberCliPageObject.isVisible)(startTimeField),
    isEndTimeFieldVisible: (0, _emberCliPageObject.isVisible)(endTimeField),
    isMeetingSlotVisible: (0, _emberCliPageObject.isVisible)(meetingSlot),
    isMeetingScheduledLinkVisible: (0, _emberCliPageObject.isVisible)(meetingScheduledLink),
    isSfbBtnVisible: (0, _emberCliPageObject.isVisible)(sfbBtn),
    isSfbContainerVisible: (0, _emberCliPageObject.isVisible)(sfbContainer),
    isSfbMinBtnVisible: (0, _emberCliPageObject.isVisible)(sfbMinBtn),
    isSfbCloseBtnVisible: (0, _emberCliPageObject.isVisible)(sfbCloseBtn),
    isSkypeModalVisible: (0, _emberCliPageObject.isVisible)(skypeModal),
    isDetailsVisible: (0, _emberCliPageObject.isVisible)(requesterDetails),
    isRecentModalVisible: (0, _emberCliPageObject.isVisible)(recentTicketsModal),
    isRecentTicketsVisible: (0, _emberCliPageObject.isVisible)(recentTickets),
    isRecentTicketsHidden: (0, _emberCliPageObject.isHidden)(recentTickets),
    isRecentTicketItemVisible: (0, _emberCliPageObject.isVisible)(recentTicketItem),
    //text 
    dateFieldValue: (0, _emberCliPageObject.value)(scheduledDateFieldValue),
    startTimeValue: (0, _emberCliPageObject.text)(startTimeFieldValue),
    endTimeValue: (0, _emberCliPageObject.text)(endTimeFieldValue),
    meetingScheduledDateValue: (0, _emberCliPageObject.text)(meetingScheduledDate),
    meetingScheduledTimeValue: (0, _emberCliPageObject.text)(meetingScheduledTime),
    chatReqNameValue: (0, _emberCliPageObject.text)(chatReqName),
    salesforceInfo: (0, _emberCliPageObject.text)('.ember-alert-info'),
    salesforceError: (0, _emberCliPageObject.text)('.ember-alert-error'),
    salesforceSectionCount: (0, _emberCliPageObject.count)('[data-test-id="salesforce-title"]'),
    salesforceFields: (0, _emberCliPageObject.count)('[data-test-id="salesforce-row-content-0"]'),
    // clickable
    clickChevron: (0, _emberCliPageObject.clickable)(chevron),
    clickRecentTickets: (0, _emberCliPageObject.clickable)(recentTickets),
    clickRecentItemsLink: (0, _emberCliPageObject.clickable)(recentTicketItemLink),
    //count
    countRecentTickets: (0, _emberCliPageObject.count)('.recent-ticket-container'),
    //hasClass
    hasRecentTicketItem: (0, _emberCliPageObject.hasClass)('.subject-text', 'a', {
      multiple: true
    }),
    clickSkypeBtn: (0, _emberCliPageObject.clickable)(skypeBtn),
    clickViewMoreBtn: (0, _emberCliPageObject.clickable)(viewMore),
    clickCrmSwitchDropdown: (0, _emberCliPageObject.clickable)(crmSwitchDropdown),
    clickCrmSalesforceItem: (0, _emberCliPageObject.clickable)('[data-test-id="crm-app-switch-dropdown-list"] > li:nth-child(2)'),
    salesforceViewMore: (0, _emberCliPageObject.clickable)('.salesforce-view-more-0 button'),
    clickScheduleMeetingLink: (0, _emberCliPageObject.clickable)(scheduleMeetingLink),
    clickMeetingSlot: (0, _emberCliPageObject.clickable)(meetingSlot),
    clickScheduleBtn: (0, _emberCliPageObject.clickable)(scheduleBtn),
    clickSfbBtn: (0, _emberCliPageObject.clickable)(sfbBtn),
    clickSfbMinBtn: (0, _emberCliPageObject.clickable)(sfbMinBtn),
    clickSfbCloseBtn: (0, _emberCliPageObject.clickable)(sfbCloseBtn),
    salesforceFieldsContent: (0, _emberCliPageObject.collection)('[data-test-id="salesforce-row-content-0"]', {
      key: (0, _emberCliPageObject.text)('.salesforce-requester-details__row-key'),
      value: (0, _emberCliPageObject.text)('.salesforce-requester-details__row-value')
    })
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/app-layout/style-lazy-load", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // style sheets
  var samLtr = '[data-test-id=sam-ltr]';
  var solutionsLtr = '[data-test-id="solutions-ltr"]';
  var samRtl = '[data-test-id=sam-rtl]';
  var solutionsRtl = '[data-test-id=solutions-rtl]';
  var rtlStyles = 'link.rtl';

  var _default = (0, _emberCliPageObject.create)({
    //setting container as default container is #ember-testing
    testContainer: 'head',
    // element present?
    samLtrLoaded: (0, _emberCliPageObject.isPresent)(samLtr),
    solutionsLtrLoaded: (0, _emberCliPageObject.isPresent)(solutionsLtr),
    samRtlLoaded: (0, _emberCliPageObject.isPresent)(samRtl),
    solutionsRtlLoaded: (0, _emberCliPageObject.isPresent)(solutionsRtl),
    solutionsLtrStyles: (0, _emberCliPageObject.collection)(solutionsLtr),
    // clearing out rtl css from header
    clearRtlStyles: function clearRtlStyles() {
      document.querySelectorAll(rtlStyles).forEach(function (elem) {
        return elem.remove();
      });
    }
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/drag-sort-item", ["exports", "freshservice/tests/page-object", "freshservice/tests/pages/components/_component", "ember-drag-sort/utils/trigger"], function (_exports, _pageObject, _component, _trigger) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = (0, _component.default)({
    draggable: (0, _pageObject.attribute)('draggable'),
    isDragged: (0, _pageObject.hasClass)('-isDragged'),
    isDraggingOver: (0, _pageObject.hasClass)('-isDraggingOver'),
    placeholderAbove: (0, _pageObject.hasClass)('-placeholderBefore'),
    placeholderBelow: (0, _pageObject.hasClass)('-placeholderAfter'),
    dragStart: function dragStart(index) {
      (0, _trigger.default)(this.$.get(0), 'dragstart');
    },
    dragOver: function dragOver(above) {
      (0, _trigger.default)(this.$.get(0), 'dragover', above);
    },
    dragEnd: function dragEnd() {
      (0, _trigger.default)(this.$.get(0), 'dragend');
    }
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/drag-sort-list", ["exports", "freshservice/tests/pages/components/_component", "freshservice/tests/pages/components/drag-sort-item", "ember-drag-sort/utils/trigger", "ember-cli-page-object"], function (_exports, _component, _dragSortItem, _trigger, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.dragSortList = dragSortList;
  _exports.default = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function dragSortList() {
    var content = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var handleSelector = arguments.length > 1 ? arguments[1] : undefined;
    return (0, _component.default)({
      items: (0, _emberCliPageObject.collection)({
        itemScope: '> .dragSortItem',
        item: _objectSpread(_objectSpread({}, _dragSortItem.default), {}, {
          content: content
        })
      }),
      draggingEnabled: (0, _emberCliPageObject.hasClass)('-draggingEnabled'),
      isDragging: (0, _emberCliPageObject.hasClass)('-isDragging'),
      isDraggingOver: (0, _emberCliPageObject.hasClass)('-isDraggingOver'),
      isEmpty: (0, _emberCliPageObject.hasClass)('-isEmpty'),
      isExpanded: (0, _emberCliPageObject.hasClass)('-isExpanded'),
      dragEnter: function dragEnter() {
        (0, _trigger.default)(this.$.get(0), 'dragenter');
      },
      sort: function sort(sourceIndex, targetIndex, above) {
        return (0, _trigger.sort)(this.$.get(0), sourceIndex, targetIndex, above, handleSelector);
      },
      move: function move(sourceIndex, targetList, targetIndex, above) {
        return (0, _trigger.move)(this.$.get(0), sourceIndex, targetList.$.get(0), targetIndex, above, handleSelector);
      }
    });
  }

  var _default = dragSortList();

  _exports.default = _default;
});
define("freshservice/tests/pages/components/froala-editor/froala-editor-extended", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = (0, _emberCliPageObject.create)({
    hasFroalaEditor: (0, _emberCliPageObject.isVisible)('.fr-box'),
    hasCannedResponseButton: (0, _emberCliPageObject.isVisible)('[data-cmd="insertCannedResponse"]'),
    openCannedResponseModal: (0, _emberCliPageObject.clickable)('[data-cmd="insertCannedResponse"]'),
    hasCannedResponseModal: (0, _emberCliPageObject.isVisible)('.froala-canned-response-modal'),
    insertCannedResponseContent: (0, _emberCliPageObject.clickable)('.insert-canned-response'),
    closeCannedResponseModal: (0, _emberCliPageObject.clickable)('.froala-canned-response-modal [data-test-id="ember-modal-close"]'),
    hasRecentCannedResponses: (0, _emberCliPageObject.isVisible)('.recent-response'),
    toggleSelectedCannedResponse: (0, _emberCliPageObject.clickable)('.froala-canned-response-modal .ui-accordion-header'),
    selectedCannedResponseContent: (0, _emberCliPageObject.collection)('.froala-canned-response-modal .accordion-panel', {
      content: (0, _emberCliPageObject.text)('.ui-accordion-panel-content')
    }),
    hasCodeInsertToolbarItem: (0, _emberCliPageObject.isVisible)('[data-cmd="codeInsert"]'),
    openCodeInsertModal: (0, _emberCliPageObject.clickable)('[data-cmd="codeInsert"]'),
    hasCodeInsertModal: (0, _emberCliPageObject.isVisible)('.froala-insert-code-modal'),
    closeCodeInsertModal: (0, _emberCliPageObject.clickable)('.froala-insert-code-modal .froala-cancel-code-insert'),
    enterCode: (0, _emberCliPageObject.fillable)('.froala-insert-code-modal .ember-text-area'),
    saveCodetoEditor: (0, _emberCliPageObject.clickable)('.froala-insert-code-modal .froala-submit-code-insert'),
    editorContent: (0, _emberCliPageObject.text)('[rel="highlighter"]'),
    clickHightedCodeFromEditor: (0, _emberCliPageObject.clickable)('[rel="highlighter"]'),
    deleteSelectedCodeFromEditor: (0, _emberCliPageObject.clickable)('.froala-insert-code-modal .froala-delete-code-insert'),
    hasHightedCodeFromEditor: (0, _emberCliPageObject.isVisible)('[rel="highlighter"]'),
    fillCannedResponseSearch: (0, _emberCliPageObject.fillable)('.canned-response-search .search-item-input'),
    hasRecentCannedResponseItemsCount: (0, _emberCliPageObject.count)('.froala-canned-response-modal .ui-accordion-item'),
    hasCannedResponseItems: (0, _emberCliPageObject.isVisible)('.froala-canned-response-modal .ui-accordion-item'),
    searchCannedResponse: (0, _emberCliPageObject.triggerable)('keyup', '.canned-response-search .search-item-input', {
      eventProperties: {
        keyCode: 13
      }
    }),
    folderDropdownTrigger: (0, _emberCliPageObject.clickable)('.canned-response-folder .ember-power-select-trigger'),
    actionChoiceSelectFromFolderDropdown: (0, _emberCliPageObject.collection)('.canned-response-folder .ember-power-select-option'),
    selectFolderText: (0, _emberCliPageObject.text)('.canned-response-folder .ember-power-select-selected-item'),
    hasEmptyCannedResponses: (0, _emberCliPageObject.isVisible)('.empty-state'),
    newCannedResponse: (0, _emberCliPageObject.clickable)('.empty-state #new-response'),
    newCannedResponseFromHeader: (0, _emberCliPageObject.clickable)('.canned-responses-header .btn-link')
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-agent-approval/approvals", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var APPROVALS = {
    APPROVE: '[data-test-id="approve-button"]',
    REJECT: '[data-test-id="reject-button"]',
    SAVE: '[data-test-id="save"]',
    CANCEL: '[data-test-id="cancel"]',
    ALLAPPROVALS: '#approvals-view-list-menu-trigger',
    SRAPPROVALS: '[data-test-id="approvals-item-ticket"]',
    CHANGEAPPROVALS: '[data-test-id="approvals-item-change"]',
    TABSELECTION: '[data-test-id="approval-tabs-view"]',
    REMARKSSECTION: '[data-test-id="remarks-section"]',
    APPROVALTAB: '[data-test-id="approval-tabs-view"] .tabs__items  a',
    PENDINGAPPROVALS: '[data-test-id="pending-approvals"]',
    HISTORICAPPROVALS: '[aria-controls="historical_approvals"]',
    BURGERMENU: '.approvals-menu-list-container button'
  };

  var _default = (0, _emberCliPageObject.create)({
    approve: (0, _emberCliPageObject.clickable)(APPROVALS.APPROVE),
    reject: (0, _emberCliPageObject.clickable)(APPROVALS.REJECT),
    save: (0, _emberCliPageObject.clickable)(APPROVALS.SAVE),
    cancel: (0, _emberCliPageObject.clickable)(APPROVALS.CANCEL),
    allApprovals: (0, _emberCliPageObject.text)(APPROVALS.ALLAPPROVALS),
    sRApprovals: (0, _emberCliPageObject.clickable)(APPROVALS.SRAPPROVALS),
    changeApprovals: (0, _emberCliPageObject.clickable)(APPROVALS.CHANGEAPPROVALS),
    tabSelection: (0, _emberCliPageObject.clickable)(APPROVALS.TABSELECTION),
    remarksSection: (0, _emberCliPageObject.isVisible)(APPROVALS.REMARKSSECTION),
    pendingApproval: (0, _emberCliPageObject.clickable)(APPROVALS.PENDINGAPPROVALS),
    approvableTab: (0, _emberCliPageObject.clickable)(APPROVALS.APPROVALTAB),
    historicApproval: (0, _emberCliPageObject.clickable)(APPROVALS.HISTORICAPPROVALS),
    checkActiveClass: (0, _emberCliPageObject.hasClass)('active', APPROVALS.HISTORICAPPROVALS),
    burgerMenu: (0, _emberCliPageObject.clickable)(APPROVALS.BURGERMENU)
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-ams/add-integrations", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var SELECTORS = {
    ADD_INTEGRATIONS_TITLE: "[data-test-id='add-integrations-title']",
    ADD_INTEGRATIONS_SUBTITLE: "[data-test-id='add-integrations-subtitle']",
    ADD_INTEGRATIONS_LINK: "[data-test-id='add-integrations-link']",
    ADD_INTEGRATIONS_EXTERNAL_LINK: "[data-test-id='add-integrations-ex-link']"
  };

  var _default = (0, _emberCliPageObject.create)({
    titleText: (0, _emberCliPageObject.text)(SELECTORS.ADD_INTEGRATIONS_TITLE),
    subtitleText: (0, _emberCliPageObject.text)(SELECTORS.ADD_INTEGRATIONS_SUBTITLE),
    linkText: (0, _emberCliPageObject.text)(SELECTORS.ADD_INTEGRATIONS_LINK),
    externalLinkText: (0, _emberCliPageObject.text)(SELECTORS.ADD_INTEGRATIONS_EXTERNAL_LINK)
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-ams/alert-activities", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // Selectors
  var SELECTORS = {
    ALERT_CREATE: "[data-test-id='uiComponentTimelineItem-9'] .fs-tl-item-desc",
    ALERT_STATUS_CHANGE: {
      ONLY: "[data-test-id='uiComponentTimelineItem-6'] .fs-tl-item-desc",
      ALERT_ACKNOWLEDGE_CHANGE: "[data-test-id='uiComponentTimelineItem-4'] .fs-tl-item-desc"
    },
    ALERT_ACKNOWLEDGE_CHANGE: "[data-test-id='uiComponentTimelineItem-5'] .fs-tl-item-desc",
    ALERT_INCIDENT_ASSOCIATION: "[data-test-id='uiComponentTimelineItem-8'] .fs-tl-item-desc [data-test-id='item-1']",
    ALERT_NOTE_CREATE: "[data-test-id='uiComponentTimelineItem-2'] .fs-tl-item-desc",
    ALERT_NOTE_UPDATE: "[data-test-id='uiComponentTimelineItem-3'] .fs-tl-item-desc",
    ALERT_NOTE_DESTROY: "[data-test-id='uiComponentTimelineItem-1'] .fs-tl-item-desc",
    ALERT_RULE_EXECUTION: "[data-test-id='uiComponentTimelineItem-8'] .fs-tl-item-desc [data-test-id='item-0']"
  };

  var _default = (0, _emberCliPageObject.create)({
    alertCreateText: (0, _emberCliPageObject.text)(SELECTORS.ALERT_CREATE),
    alertStatusChange: (0, _emberCliPageObject.text)(SELECTORS.ALERT_STATUS_CHANGE.ONLY),
    alertReopenedUnacknowledge: (0, _emberCliPageObject.text)(SELECTORS.ALERT_STATUS_CHANGE.ALERT_ACKNOWLEDGE_CHANGE),
    alertAcknowledgeChange: (0, _emberCliPageObject.text)(SELECTORS.ALERT_ACKNOWLEDGE_CHANGE),
    alertIncidentAssociation: (0, _emberCliPageObject.text)(SELECTORS.ALERT_INCIDENT_ASSOCIATION),
    alertNoteCreate: (0, _emberCliPageObject.text)(SELECTORS.ALERT_NOTE_CREATE),
    alertNoteUpdate: (0, _emberCliPageObject.text)(SELECTORS.ALERT_NOTE_UPDATE),
    alertNoteDestroy: (0, _emberCliPageObject.text)(SELECTORS.ALERT_NOTE_DESTROY),
    alertRuleExecution: (0, _emberCliPageObject.text)(SELECTORS.ALERT_RULE_EXECUTION)
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-ams/alert-configurations", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // Selectors
  var SELECTORS = {
    TAB_TITLE: '.service-mapping-text',
    DEFAULT_STATE_BUTTON: '.default-content .ams-title',
    INTEGRATION_NAME: '.integration-list-item .content .name'
  };

  var _default = (0, _emberCliPageObject.create)({
    tabTitle: (0, _emberCliPageObject.text)(SELECTORS.TAB_TITLE),
    emptyText: (0, _emberCliPageObject.text)(SELECTORS.DEFAULT_STATE_BUTTON),
    integrationLinkName: (0, _emberCliPageObject.text)(SELECTORS.INTEGRATION_NAME)
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-ams/alert-details", ["exports", "ember-cli-page-object", "freshservice/tests/pages/components/utils/form-fields"], function (_exports, _emberCliPageObject, _formFields) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var SELECTORS = {
    BREADCRUMB_TITLE: ".ember-breadcrumbs .title",
    ALERT_SUBJECT: ".alert-details-header .subject",
    ALERT_DATE_TIME_DETAILS: ".alert-details-header [data-test-id='date-time-details']",
    ALERT_DESCRIPTION: ".alert-details-header .description",
    ACTION_ASSOCIATE_BTN: ".bulk-action-options .associate-grp",
    TABS: ".tabs .alert-details-tabs li",
    TAB_ALERT_LOGS: ".tabs .alert-details-tabs .tab-alert-logs",
    TAB_ASSOCIATIONS: ".tabs .alert-details-tabs .tab-associations",
    TAB_CONTENT_ALERT_LOGS: ".tabs .tabs__content #alertLogs",
    TAB_CONTENT_ASSOCIATIONS: ".tabs .tabs__content #associations",
    ALERT_LOGS_TABLE: ".alert-logs-table",
    BTN_TOGGLE_PROPERTIES_SIDEBAR: "[data-test-id='btn-toggle-properties']",
    SEVERITY_BADGE: ".page-title > [data-test-id='severity-badge']",
    ALERT_PROPERTIES: {
      SELECTOR: ".alert-properties",
      TITLE: "[data-test-id='title']",
      SEVERITY_BADGE: "[data-test-id='severity-badge'] > span",
      // STATUS_DROPDOWN: "[data-test-id='status-dropdown'] > span",
      INTEGRATION_NAME: "[data-test-id='integration-name'] > span",
      SOURCE_NAME: "[data-test-id='source-name'] > span",
      NODE_NAME: "[data-test-id='node-name'] > span",
      RESOURCE_NAME: "[data-test-id='resource-name'] > span",
      METRIC_NAME: "[data-test-id='metric-name'] > span",
      TAGS: "[data-test-id='tags'] > span"
    },
    LT_SEVERITY_CELL_DETAILS: "[data-test-id='severity-cell-detail']",
    ALERT_INC_ASSOCIATION: {
      SELECTOR: ".alert-associated-incident",
      INC_ICON: ".alert-associated-incident .incident-card-icon-ticket",
      INC_DISPLAY_ID: ".alert-associated-incident .display-id",
      INC_SUBJECT: ".alert-associated-incident .subject",
      INC_PRIORITY: "[data-test-id='incident-priority']",
      INC_STATUS: "[data-test-id='incident-status']",
      INC_REQUESTER: "[data-test-id='incident-requester']",
      INC_CREATED_AT: "[data-test-id='incident-created-at']",
      INC_DUE_BY: "[data-test-id='incident-due-by']"
    }
  };

  var _default = (0, _emberCliPageObject.create)({
    // visit
    visit: (0, _emberCliPageObject.visitable)("/alerts/:id"),
    // text
    breadcrumbTitle: (0, _emberCliPageObject.text)(SELECTORS.BREADCRUMB_TITLE),
    alertSubjectText: (0, _emberCliPageObject.text)(SELECTORS.ALERT_SUBJECT),
    alertDateTimeDetailsText: (0, _emberCliPageObject.text)(SELECTORS.ALERT_DATE_TIME_DETAILS),
    alertDescriptionText: (0, _emberCliPageObject.text)(SELECTORS.ALERT_DESCRIPTION),
    alertPropertiesTitleText: (0, _emberCliPageObject.text)(SELECTORS.ALERT_PROPERTIES.TITLE),
    alertPropertiesSeverityText: (0, _emberCliPageObject.text)(SELECTORS.ALERT_PROPERTIES.SEVERITY_BADGE),
    alertPropertiesIntegrationNameText: (0, _emberCliPageObject.text)(SELECTORS.ALERT_PROPERTIES.INTEGRATION_NAME),
    alertPropertiesSourceNameText: (0, _emberCliPageObject.text)(SELECTORS.ALERT_PROPERTIES.SOURCE_NAME),
    alertPropertiesNodeNameText: (0, _emberCliPageObject.text)(SELECTORS.ALERT_PROPERTIES.NODE_NAME),
    alertPropertiesResourceNameText: (0, _emberCliPageObject.text)(SELECTORS.ALERT_PROPERTIES.RESOURCE_NAME),
    alertPropertiesMetricNameText: (0, _emberCliPageObject.text)(SELECTORS.ALERT_PROPERTIES.METRIC_NAME),
    alertPropertiesTagsText: (0, _emberCliPageObject.text)(SELECTORS.ALERT_PROPERTIES.TAGS),
    severityBadgeText: (0, _emberCliPageObject.text)(SELECTORS.LT_SEVERITY_CELL_DETAILS),
    associationCardText: (0, _emberCliPageObject.text)(SELECTORS.ALERT_INC_ASSOCIATION.SELECTOR),
    associationIncDisplayIdText: (0, _emberCliPageObject.text)(SELECTORS.ALERT_INC_ASSOCIATION.INC_DISPLAY_ID),
    associationIncSubjectText: (0, _emberCliPageObject.text)(SELECTORS.ALERT_INC_ASSOCIATION.INC_SUBJECT),
    associationIncPriorityext: (0, _emberCliPageObject.text)(SELECTORS.ALERT_INC_ASSOCIATION.INC_PRIORITY),
    associationIncStatusText: (0, _emberCliPageObject.text)(SELECTORS.ALERT_INC_ASSOCIATION.INC_STATUS),
    associationIncRequesterText: (0, _emberCliPageObject.text)(SELECTORS.ALERT_INC_ASSOCIATION.INC_REQUESTER),
    associationIncCreatedAtDateText: (0, _emberCliPageObject.text)(SELECTORS.ALERT_INC_ASSOCIATION.INC_CREATED_AT),
    associationIncDueByDateText: (0, _emberCliPageObject.text)(SELECTORS.ALERT_INC_ASSOCIATION.INC_DUE_BY),
    // hasClass
    isAssociateBtnDisabled: (0, _emberCliPageObject.hasClass)("disabled", SELECTORS.ACTION_ASSOCIATE_BTN),
    // hidden
    isAssociateBtnNotVisible: (0, _emberCliPageObject.isHidden)(SELECTORS.ACTION_ASSOCIATE_BTN),
    // visible
    isSubjectVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.ALERT_SUBJECT),
    isDateTimeDetailsVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.ALERT_DATE_TIME_DETAILS),
    isDescriptionVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.ALERT_DESCRIPTION),
    isAssociationBtnVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.ACTION_ASSOCIATE_BTN),
    isAlertPropertiesVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.ALERT_PROPERTIES.SELECTOR),
    isAlertLogsTableVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.ALERT_LOGS_TABLE),
    isSeverityBadgeVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.SEVERITY_BADGE),
    isIncidentAssociationCardVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.ALERT_INC_ASSOCIATION.SELECTOR),
    // collection
    tabs: (0, _emberCliPageObject.collection)(SELECTORS.TABS),
    // hasClass
    isAlertLogsTabActive: (0, _emberCliPageObject.hasClass)("active", SELECTORS.TAB_ALERT_LOGS),
    isToggleButtonActive: (0, _emberCliPageObject.hasClass)("active", SELECTORS.BTN_TOGGLE_PROPERTIES_SIDEBAR),
    // attributes
    severityBadgeClassNames: (0, _emberCliPageObject.attribute)('class', SELECTORS.LT_SEVERITY_CELL_DETAILS),
    // clickables
    togglePropertiesSidepane: (0, _emberCliPageObject.clickable)(SELECTORS.BTN_TOGGLE_PROPERTIES_SIDEBAR),
    // form fields
    formUtils: _formFields.default
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-ams/alert-list", ["exports", "ember-cli-page-object", "freshservice/tests/pages/components/utils/form-fields"], function (_exports, _emberCliPageObject, _formFields) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // Selectors
  var SELECTORS = {
    PAGE_TITLE: ".page-title .title",
    // top nav
    TOP_NAV_PAGINATION_TEXT: ".page-nav-text",
    TOP_NAV_PAGINATION_BTNS: ".page-nav-btns",
    TOP_NAV_PAGINATION_PREV_BTN: ".btn-prev",
    TOP_NAV_PAGINATION_NEXT_BTN: ".btn-next",
    TOP_NAV_PAGINATION_PREV_BTN_DISABLED: ".btn-prev.disabled",
    TOP_NAV_PAGINATION_NEXT_BTN_DISABLED: ".btn-next.disabled",
    // table
    ALERTS_TABLE: ".alerts-table",
    TABLE_ROW: ".lt-row",
    TABLE_SELECT_ALL: "[data-test-id='alerts-list-select-all'] input[type='checkbox']",
    ALERT_ID_COL_HEADER: "th.cell-alert-id-header",
    TABLE_ROW_CHECKBOXES: "td.cell-alert-check-box-item input[type='checkbox']",
    EMPTY_TABLE_STATE: ".lt-no-data",
    TABLE_BULK_ACTION_OPTIONS: ".bulk-action-options",
    TABLE_BULK_ACTION_RESOLVE: "[data-test-id='btn-mark-as-resolved']",
    SEVERITY_COLUMN: ".lt-row td.cell-alert-severity-item",
    ALERTS_TABLE_HEADER_COLUMNS: ".alerts-table .lt-head .lt-column",
    COLUMN_CUSTOMIZATION: {
      SUBJECT: "[data-test-id='formattedSubject'] input[type='checkbox']",
      SEVERITY: "[data-test-id='severity'] input[type='checkbox']",
      UPDATED_ON: "[data-test-id='updatedAt'] input[type='checkbox']",
      CREATED_ON: "[data-test-id='createdAt'] input[type='checkbox']",
      RELATED_INCIDENT: "[data-test-id='incidentId'] input[type='checkbox']",
      RESOURCE: "[data-test-id='resource'] input[type='checkbox']",
      TAGS: "[data-test-id='tags'] input[type='checkbox']",
      BTN_APPLY: "[data-test-id='column-customizer'] .btn-primary"
    },
    // table cells
    LT_DATE_CELL: "[data-test-id='date-cell']",
    LT_CHECKBOX: "[data-test-id='checkbox-cell'] input[type='checkbox']",
    LT_CHECKBOX_FIRST: "[data-test-id='checkbox-cell'] input[type='checkbox']:first-child",
    // pagination
    BOTTOM_PAGINATION: ".ember-pagination",
    BOTTOM_PAGINATION_PAGES: ".pagination__page",
    BOTTOM_PAGINATION_PREV_BTN: ".ember-pagination .pagination__previous",
    BOTTOM_PAGINATION_NEXT_BTN: ".ember-pagination .pagination__next",
    BOTTOM_PAGINATION_PREV_BTN_DISABLED: ".ember-pagination .pagination__previous.pagination__link--disabled",
    BOTTOM_PAGINATION_NEXT_BTN_DISABLED: ".ember-pagination .pagination__next.pagination__link--disabled",
    // filter
    FILTER_ICON: ".filter-icon",
    FILTER_ROW: ".page-sidebar .filter-row",
    FILTER_APPLY_BTN: ".btn-filter-apply",
    FILTER_CANCEL_BTN: ".btn-filter-cancel",
    FILTER_FIELD_CREATED_ON: "[data-test-field-name='filter-field-created_at'] .ember-power-select-selected-item",
    FILTER_FIELD_UPDATED_ON: "[data-test-field-name='filter-field-updated_at'] .ember-power-select-selected-item",
    FILTER_FIELD_SEVERITY: "[data-test-field-name='filter-field-severity'] li.ember-power-select-multiple-option",
    FILTER_FIELD_RESOURCE: "[data-test-field-name='filter-field-resource'] li.ember-power-select-multiple-option",
    FILTER_NO_RESULTS_FOUND: ".filter-row .ember-power-select-option--no-matches-message",
    // auto refresh
    AUTO_REFRESH_NOTIFICATION: "[data-test-id='refresh-notification']",
    // add integrations
    ADD_INTEGRATIONS: ".add-integration",
    ENABLE_AMS: ".enable-ams"
  };

  var _default = (0, _emberCliPageObject.create)({
    // visit
    visit: (0, _emberCliPageObject.visitable)("/alerts"),
    // texts
    title: (0, _emberCliPageObject.text)(SELECTORS.PAGE_TITLE),
    topNavText: (0, _emberCliPageObject.text)(SELECTORS.TOP_NAV_PAGINATION_TEXT),
    filterFieldCreatedOn: (0, _emberCliPageObject.text)(SELECTORS.FILTER_FIELD_CREATED_ON),
    filterFieldUpdatedOn: (0, _emberCliPageObject.text)(SELECTORS.FILTER_FIELD_UPDATED_ON),
    noResultsFoundText: (0, _emberCliPageObject.text)(SELECTORS.FILTER_NO_RESULTS_FOUND),
    autoRefreshNotificationText: (0, _emberCliPageObject.text)(SELECTORS.AUTO_REFRESH_NOTIFICATION),
    dateCellText: (0, _emberCliPageObject.text)(SELECTORS.LT_DATE_CELL),
    emptyStateText: (0, _emberCliPageObject.text)(SELECTORS.EMPTY_TABLE_STATE),
    // presence
    hasTable: (0, _emberCliPageObject.isPresent)(SELECTORS.ALERTS_TABLE),
    hasFilterIcon: (0, _emberCliPageObject.isPresent)(SELECTORS.FILTER_ICON),
    hasTopNavText: (0, _emberCliPageObject.isPresent)(SELECTORS.TOP_NAV_PAGINATION_TEXT),
    hasTopNavBtns: (0, _emberCliPageObject.isPresent)(SELECTORS.TOP_NAV_PAGINATION_BTNS),
    hasPagination: (0, _emberCliPageObject.isPresent)(SELECTORS.BOTTOM_PAGINATION),
    hasFilterFieldCreatedOn: (0, _emberCliPageObject.isPresent)(SELECTORS.FILTER_FIELD_CREATED_ON),
    hasFilterFieldUpdatedOn: (0, _emberCliPageObject.isPresent)(SELECTORS.FILTER_FIELD_UPDATED_ON),
    hasFilterFieldSeverity: (0, _emberCliPageObject.isPresent)(SELECTORS.FILTER_FIELD_SEVERITY),
    hasFilterFieldResource: (0, _emberCliPageObject.isPresent)(SELECTORS.FILTER_FIELD_RESOURCE),
    hasAddIntegrationsCard: (0, _emberCliPageObject.isPresent)(SELECTORS.ADD_INTEGRATIONS),
    hasEnableAmsCard: (0, _emberCliPageObject.isPresent)(SELECTORS.ENABLE_AMS),
    // visible
    isTableEmpty: (0, _emberCliPageObject.isVisible)(SELECTORS.EMPTY_TABLE_STATE),
    isFilterApplyBtnVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.FILTER_APPLY_BTN),
    isFilterCancelBtnVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.FILTER_CANCEL_BTN),
    isBulkActionOptionsVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.TABLE_BULK_ACTION_OPTIONS),
    // hidden
    hasNoPagination: (0, _emberCliPageObject.isHidden)(SELECTORS.BOTTOM_PAGINATION),
    hasNoDisabledPrevBtn: (0, _emberCliPageObject.isHidden)(SELECTORS.BOTTOM_PAGINATION_PREV_BTN_DISABLED),
    hasNoDisabledNextBtn: (0, _emberCliPageObject.isHidden)(SELECTORS.BOTTOM_PAGINATION_NEXT_BTN_DISABLED),
    hasNoDisabledPrevBtnTopNav: (0, _emberCliPageObject.isHidden)(SELECTORS.TOP_NAV_PAGINATION_PREV_BTN_DISABLED),
    hasNoDisabledNextBtnTopNav: (0, _emberCliPageObject.isHidden)(SELECTORS.TOP_NAV_PAGINATION_NEXT_BTN_DISABLED),
    hasNoSelectAllCheckbox: (0, _emberCliPageObject.isHidden)(SELECTORS.TABLE_SELECT_ALL),
    // count
    numRows: (0, _emberCliPageObject.count)(SELECTORS.TABLE_ROW),
    numPages: (0, _emberCliPageObject.count)(SELECTORS.BOTTOM_PAGINATION_PAGES),
    // hasClass
    isTopNavPrevBtnDisabled: (0, _emberCliPageObject.hasClass)("disabled", SELECTORS.TOP_NAV_PAGINATION_PREV_BTN),
    isTopNavNextBtnDisabled: (0, _emberCliPageObject.hasClass)("disabled", SELECTORS.TOP_NAV_PAGINATION_NEXT_BTN),
    isPaginationPrevBtnDisabled: (0, _emberCliPageObject.hasClass)("pagination__link--disabled", SELECTORS.BOTTOM_PAGINATION_PREV_BTN),
    isPaginationNextBtnDisabled: (0, _emberCliPageObject.hasClass)("pagination__link--disabled", SELECTORS.BOTTOM_PAGINATION_NEXT_BTN),
    isCheckboxDisabled: (0, _emberCliPageObject.hasClass)("disabled", SELECTORS.LT_CHECKBOX),
    isRowSelected: (0, _emberCliPageObject.hasClass)("is-selected", SELECTORS.TABLE_ROW),
    isAlertsTableDisabled: (0, _emberCliPageObject.hasClass)("empty", SELECTORS.ALERTS_TABLE),
    // collection
    allCheckboxes: (0, _emberCliPageObject.collection)(SELECTORS.TABLE_ROW_CHECKBOXES),
    allFilterRows: (0, _emberCliPageObject.collection)(SELECTORS.FILTER_ROW),
    filterFieldSeverity: (0, _emberCliPageObject.collection)(SELECTORS.FILTER_FIELD_SEVERITY),
    filterFieldResource: (0, _emberCliPageObject.collection)(SELECTORS.FILTER_FIELD_RESOURCE),
    tableHeaderCols: (0, _emberCliPageObject.collection)(SELECTORS.ALERTS_TABLE_HEADER_COLUMNS),
    severityColumnRows: (0, _emberCliPageObject.collection)(SELECTORS.SEVERITY_COLUMN),
    // clickables
    clickNextPage: (0, _emberCliPageObject.clickable)(SELECTORS.BOTTOM_PAGINATION_NEXT_BTN),
    navigateToNext: (0, _emberCliPageObject.clickable)(SELECTORS.TOP_NAV_PAGINATION_NEXT_BTN),
    navigateToPrev: (0, _emberCliPageObject.clickable)(SELECTORS.TOP_NAV_PAGINATION_PREV_BTN),
    sortByAlertId: (0, _emberCliPageObject.clickable)(SELECTORS.ALERT_ID_COL_HEADER),
    clickSelectAll: (0, _emberCliPageObject.clickable)(SELECTORS.TABLE_SELECT_ALL),
    clickFilterIcon: (0, _emberCliPageObject.clickable)(SELECTORS.FILTER_ICON),
    clickFilterCancel: (0, _emberCliPageObject.clickable)(SELECTORS.FILTER_CANCEL_BTN),
    clickFilterApply: (0, _emberCliPageObject.clickable)(SELECTORS.FILTER_APPLY_BTN),
    clickAutoRefreshNotification: (0, _emberCliPageObject.clickable)(SELECTORS.AUTO_REFRESH_NOTIFICATION),
    clickCheckbox: (0, _emberCliPageObject.clickable)(SELECTORS.LT_CHECKBOX),
    clickFirstCheckBox: (0, _emberCliPageObject.clickable)(SELECTORS.LT_CHECKBOX, {
      at: 0
    }),
    clickMarkAsResolved: (0, _emberCliPageObject.clickable)(SELECTORS.TABLE_BULK_ACTION_RESOLVE),
    clickRelatedIncColCustCheckbox: (0, _emberCliPageObject.clickable)(SELECTORS.COLUMN_CUSTOMIZATION.RELATED_INCIDENT),
    clickColCustApply: (0, _emberCliPageObject.clickable)(SELECTORS.COLUMN_CUSTOMIZATION.BTN_APPLY),
    // value
    checkBoxValue: (0, _emberCliPageObject.value)(SELECTORS.LT_CHECKBOX),
    // property
    isSelectAllChecked: (0, _emberCliPageObject.property)("checked", SELECTORS.TABLE_SELECT_ALL),
    isSelectAllCheckboxIndeterminate: (0, _emberCliPageObject.property)("indeterminate", SELECTORS.TABLE_SELECT_ALL),
    allCheckboxesChecked: (0, _emberCliPageObject.property)("checked", SELECTORS.TABLE_ROW_CHECKBOXES, {
      multiple: true
    }),
    isSubjectColCustChecked: (0, _emberCliPageObject.property)("checked", SELECTORS.COLUMN_CUSTOMIZATION.SUBJECT),
    isSeverityColCustChecked: (0, _emberCliPageObject.property)("checked", SELECTORS.COLUMN_CUSTOMIZATION.SEVERITY),
    isUpdatedOnColCustChecked: (0, _emberCliPageObject.property)("checked", SELECTORS.COLUMN_CUSTOMIZATION.UPDATED_ON),
    isCreatedOnColCustChecked: (0, _emberCliPageObject.property)("checked", SELECTORS.COLUMN_CUSTOMIZATION.CREATED_ON),
    isRelatedIncColCustChecked: (0, _emberCliPageObject.property)("checked", SELECTORS.COLUMN_CUSTOMIZATION.RELATED_INCIDENT),
    isTagsColCustChecked: (0, _emberCliPageObject.property)("checked", SELECTORS.COLUMN_CUSTOMIZATION.TAGS),
    // form fields
    formUtils: _formFields.default
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-ams/bulk-actions", ["exports", "ember-cli-page-object", "freshservice/tests/pages/components/utils/form-fields"], function (_exports, _emberCliPageObject, _formFields) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // Selectors
  var SELECTORS = {
    BTN_BULK_ACTION_OPTION_ASSOCIATE_INCIDENT: "[data-test-id='btn-associate-incident']",
    BTN_BULK_ACTION_OPTION_RESOLVE: "[data-test-id='btn-mark-as-resolved']",
    MODAL: ".ember-modal-dialog.incident-association-modal",
    MODAL_CLOSE: ".incident-association-modal .ember-modal-close",
    MODAL_TITLE: ".incident-association-modal h3.title",
    BTN_CANCEL: "[data-test-id='modal-cancel']",
    RADIO_EXISTING_INC: ".toggle-radio-fields #existing-incident",
    RADIO_NEW_INC: ".toggle-radio-fields #new-incident",
    SECTION_TITLE: ".section-header",
    INCIDENT_CARD: ".incident-card",
    EXISTING_INCIDENT: {
      BTN_ASSOCIATE: "#association-footer [data-test-id='existing-inc-save-btn']",
      INPUT_SEARCH: ".search-incident-input",
      CLEAR_SEARCH_TEXT: ".search-input-wrapper .search-clear",
      RECENT_INCIDENT_LIST_TITLE: "[data-test-id='recent-incidents-list'] .section-header",
      NO_RESULTS: ".no-results"
    },
    NEW_INCIDENT: {
      FORM: ".ember-form.new-incident-form",
      SUBJECT: "[data-test-field-name='subject'] > input[type='text']",
      SUBJECT_VALIDATION_ERROR: "[data-test-field-name='subject'].form-field--has-errors .form-field--errors",
      DESCRIPTION: "[data-test-field-name='description'] .froala-editor-container [contenteditable='true']",
      DESCRIPTION_VALIDATION_ERROR: "[data-test-field-name='description'].form-field--has-errors .form-field--errors",
      PRIORITY: "[data-test-field-name='priority']",
      TAGS: "[data-test-field-name='tags']",
      GROUP: "[data-test-field-name='groupId']",
      STATUS: "[data-test-field-name='status']",
      STATUS_VALIDATION_ERROR: "[data-test-field-name='status'].form-field--has-errors .form-field--errors",
      BTN_ASSOCIATE: "#association-footer [data-test-id='new-inc-save-btn']"
    }
  };

  var _default = (0, _emberCliPageObject.create)({
    // text
    modalTitleText: (0, _emberCliPageObject.text)(SELECTORS.MODAL_TITLE),
    sectionTitle: (0, _emberCliPageObject.text)(SELECTORS.SECTION_TITLE),
    noResultsText: (0, _emberCliPageObject.text)(SELECTORS.EXISTING_INCIDENT.NO_RESULTS),
    subjectValidationError: (0, _emberCliPageObject.text)(SELECTORS.NEW_INCIDENT.SUBJECT_VALIDATION_ERROR),
    descriptionValidationError: (0, _emberCliPageObject.text)(SELECTORS.NEW_INCIDENT.DESCRIPTION_VALIDATION_ERROR),
    statusValidationError: (0, _emberCliPageObject.text)(SELECTORS.NEW_INCIDENT.STATUS_VALIDATION_ERROR),
    // isVisible
    isAssociationModalVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.MODAL),
    isExistingIncRadioVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.RADIO_EXISTING_INC),
    isNewIncRadioVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.RADIO_NEW_INC),
    isSearchInputVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.EXISTING_INCIDENT.INPUT_SEARCH),
    isCancelButtonVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.BTN_CANCEL),
    isExistingIncAssociateBtnVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.EXISTING_INCIDENT.BTN_ASSOCIATE),
    isNewIncAssociateBtnVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.NEW_INCIDENT.BTN_ASSOCIATE),
    isNewIncFormVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.NEW_INCIDENT.FORM),
    // isPresent
    isSectionTitlePresent: (0, _emberCliPageObject.isPresent)(SELECTORS.SECTION_TITLE),
    // property
    isExistingIncRadioChecked: (0, _emberCliPageObject.property)("checked", SELECTORS.RADIO_EXISTING_INC),
    isNewIncRadioChecked: (0, _emberCliPageObject.property)("checked", SELECTORS.RADIO_NEW_INC),
    // clickables
    clickNewIncRadio: (0, _emberCliPageObject.clickable)(SELECTORS.RADIO_NEW_INC),
    clickOnIncidentCardToSelect: (0, _emberCliPageObject.clickable)(SELECTORS.INCIDENT_CARD),
    clickOnExistingIncAssociateBtn: (0, _emberCliPageObject.clickable)(SELECTORS.EXISTING_INCIDENT.BTN_ASSOCIATE),
    clickMarkAsResolved: (0, _emberCliPageObject.clickable)(SELECTORS.BTN_BULK_ACTION_OPTION_RESOLVE),
    clickAssociateInc: (0, _emberCliPageObject.clickable)(SELECTORS.BTN_BULK_ACTION_OPTION_ASSOCIATE_INCIDENT),
    clickModalClose: (0, _emberCliPageObject.clickable)(SELECTORS.MODAL_CLOSE),
    clickSearchClear: (0, _emberCliPageObject.clickable)(SELECTORS.EXISTING_INCIDENT.CLEAR_SEARCH_TEXT),
    clickNewIncAssociateBtn: (0, _emberCliPageObject.clickable)(SELECTORS.NEW_INCIDENT.BTN_ASSOCIATE),
    // count
    numIncidentCards: (0, _emberCliPageObject.count)(SELECTORS.INCIDENT_CARD),
    // fillables
    fillSearchInput: (0, _emberCliPageObject.fillable)(SELECTORS.EXISTING_INCIDENT.INPUT_SEARCH),
    fillNewIncSubject: (0, _emberCliPageObject.fillable)(SELECTORS.NEW_INCIDENT.SUBJECT),
    fillDescription: (0, _emberCliPageObject.fillable)(SELECTORS.NEW_INCIDENT.DESCRIPTION),
    // triggerables
    triggerKeyUpOnSearchInput: (0, _emberCliPageObject.triggerable)("keyup", SELECTORS.EXISTING_INCIDENT.INPUT_SEARCH),
    // hasClass
    isIncidentCardActive: (0, _emberCliPageObject.hasClass)("active", SELECTORS.INCIDENT_CARD),
    // value
    searchInputValue: (0, _emberCliPageObject.value)(SELECTORS.EXISTING_INCIDENT.INPUT_SEARCH),
    subjectFieldValue: (0, _emberCliPageObject.value)(SELECTORS.NEW_INCIDENT.SUBJECT),
    // form fields
    formUtils: _formFields.default
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-ams/delete-service", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // Selectors
  var SELECTORS = {
    OVERVIEW_TAB: '.title-header',
    DROPDOWN_BTN: '.ember-basic-dropdown-trigger',
    DROPDOWN_CONTENT: '.ember-basic-dropdown-content',
    DELETE_OPT: '.ember-basic-dropdown-content [data-test-id="open-delete-popup"]',
    INTEGRATIONT_AB: '.tabs__items .tabs__item:nth-child(5)',
    DELETE_BTN: '[data-test-id="service-delete-btn"]'
  };

  var _default = (0, _emberCliPageObject.create)({
    isDetailsVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.OVERVIEW_TAB),
    isDropDownVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.DROPDOWN_CONTENT),
    clickDropDownBtn: (0, _emberCliPageObject.clickable)(SELECTORS.DROPDOWN_BTN),
    clickDeleteBtn: (0, _emberCliPageObject.clickable)(SELECTORS.DELETE_OPT),
    clickIntegrationTab: (0, _emberCliPageObject.clickable)(SELECTORS.INTEGRATIONT_AB),
    clickDeleteService: (0, _emberCliPageObject.clickable)(SELECTORS.DELETE_BTN)
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-ams/enable-ams", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var SELECTORS = {
    ENABLE_AMS_TITLE: "[data-test-id='enable-ams-title']",
    ENABLE_AMS_SUBTITLE: "[data-test-id='enable-ams-subtitle']",
    ENABLE_AMS_BUTTON: "[data-test-id='enable-ams-button']",
    ENABLE_AMS_EXTERNAL_LINK: "[data-test-id='enable-ams-ex-link']"
  };

  var _default = (0, _emberCliPageObject.create)({
    titleText: (0, _emberCliPageObject.text)(SELECTORS.ENABLE_AMS_TITLE),
    subtitleText: (0, _emberCliPageObject.text)(SELECTORS.ENABLE_AMS_SUBTITLE),
    buttonText: (0, _emberCliPageObject.text)(SELECTORS.ENABLE_AMS_BUTTON),
    externalLinkText: (0, _emberCliPageObject.text)(SELECTORS.ENABLE_AMS_EXTERNAL_LINK)
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-ams/service-details", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var SELECTORS = {
    SERVICE_CONTRACT: '.itom_service_contracts',
    EMPTY_CONTRACT: '.no-contracts .no-contracts-text'
  };

  var _default = (0, _emberCliPageObject.create)({
    contracts: (0, _emberCliPageObject.count)(SELECTORS.SERVICE_CONTRACT),
    emptyContract: (0, _emberCliPageObject.text)(SELECTORS.EMPTY_CONTRACT)
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-ams/service-list", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // Selectors
  var SELECTORS = {
    PAGE_TITLE: '.page-title .title',
    TABLE_SELECT_ALL: '.entity-table-wrapper .table-options [data-test-id="list-select-all"] .ember-checkbox',
    TOP_NAV_TEXT: '.entity-table-wrapper .table-options .ember-pagination [data-test-id="pagination-details"]',
    PAGE_NAV_PREV: '.entity-table-wrapper .table-options .ember-pagination [data-test-id="pageNavPrev"]',
    PAGE_NAV_NEXT: '.entity-table-wrapper .table-options .ember-pagination [data-test-id="pageNavNext"]',
    TABLE_SETTINGS: '.ember-table-wrap .column-customizer .settings-new-icon',
    ROW_DENSITY_DEFAULT: '.table-view-preference .ember-table-wrap [data-test-id="view-table"]',
    ROW_DENSITY_COMPACT: '.table-view-preference .ember-table-wrap [data-test-id="view-compact"]',
    TABLE_CUSTOMIZER_HEADER_5: '.ember-table-wrap .column-customizer .column-customizer-wrapper .module-table-header [data-test-id="for-header-5"]',
    TABLE_CUSTOMIZER_CANCEL: '.ember-table-wrap .column-customizer .column-customizer-footer-buttons [data-test-id="cancel"]',
    TABLE_CUSTOMIZER_UPDATE: '.ember-table-wrap .column-customizer .column-customizer-footer-buttons [data-test-id="update"]',
    TABLE_ROW_CHECKBOXES: '[data-test-ember-table] table tbody [data-test-id="checkbox-cell"] .ember-checkbox',
    TABLE_ROW: '.ember-table-wrap .ember-table table tbody tr.et-tr',
    TABLE_COLUMN: '.ember-table-wrap .ember-table table thead tr.et-tr th'
  };

  var _default = (0, _emberCliPageObject.create)({
    allCheckboxes: (0, _emberCliPageObject.collection)(SELECTORS.TABLE_ROW_CHECKBOXES),
    hasNoSelectAllCheckbox: (0, _emberCliPageObject.isHidden)(SELECTORS.TABLE_SELECT_ALL),
    numRows: (0, _emberCliPageObject.count)(SELECTORS.TABLE_ROW),
    numColumns: (0, _emberCliPageObject.count)(SELECTORS.TABLE_COLUMN),
    openColumnCustomizer: (0, _emberCliPageObject.clickable)(SELECTORS.TABLE_SETTINGS),
    selectColumnFromCC: (0, _emberCliPageObject.clickable)(SELECTORS.TABLE_CUSTOMIZER_HEADER_5),
    updateColumnCustomization: (0, _emberCliPageObject.clickable)(SELECTORS.TABLE_CUSTOMIZER_UPDATE)
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-ams/services/activities", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // Selectors
  var SELECTORS = {
    ACTIVITIES_EMPTY: ".timeline-container .empty-container",
    ACTIVITIES_ENTRY: ".activity-entry",
    LAZY_LOADER: '.infinity-loader .load-spinner',
    MAIN_CONTAINER: '.itom_service_activities'
  };

  var _default = (0, _emberCliPageObject.create)({
    isEmpty: (0, _emberCliPageObject.isPresent)(SELECTORS.ACTIVITIES_EMPTY),
    numEntries: (0, _emberCliPageObject.count)(SELECTORS.ACTIVITIES_ENTRY),
    lazyLoaderExist: (0, _emberCliPageObject.isVisible)(SELECTORS.LAZY_LOADER),
    lazyLoaderRemoved: (0, _emberCliPageObject.isHidden)(SELECTORS.LAZY_LOADER),
    scrollList: (0, _emberCliPageObject.triggerable)('scroll', SELECTORS.MAIN_CONTAINER)
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-kanban-board/board", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // Board props
  var visibilityType = '[data-test-id=visibility-type]';
  var boardName = '[data-test-id=board-name]';
  var boardSortOrderVal = '[data-test-id=board-sort-order-value]'; //Board list

  var boardItem = '[data-test-id=board-item]';
  var newBoardBtn = '[data-test-id=new-board-btn]';
  var COLUMN_POS_ON_OPTIONS_CHOICE = ".kanban-board--column-props-pos .kanban-board--column-props-pos-input .ember-power-select-trigger";
  var COLUMN_POS_OPTIONS_DD_CHOICE = ".kanban-board--column-props-pos .kanban-board--column-props-pos-input .ember-power-select-option";
  var COLUMN_POS_OPTIONS_SELECTED = ".kanban-board--column-props-pos .kanban-board--column-props-pos-input .ember-power-select-selected-item";

  var _default = (0, _emberCliPageObject.create)({
    // text
    visibilityType: (0, _emberCliPageObject.text)(visibilityType),
    boardName: (0, _emberCliPageObject.text)(boardName),
    boardSortOrderVal: (0, _emberCliPageObject.text)(boardSortOrderVal),
    boardDeleteWarning: (0, _emberCliPageObject.text)('[data-test-id="delete-board-warning"]'),
    openColumnCount: (0, _emberCliPageObject.text)('.kanban-board--column[column-id="2"] .kanban-board--column-count'),
    pendingColumnCount: (0, _emberCliPageObject.text)('.kanban-board--column[column-id="3"] .kanban-board--column-count'),
    ticketCardStatus: (0, _emberCliPageObject.text)('.kanban-board--column[column-id="3"] [entity-id="11"] .ticket-card--footer .status-list-wrapper .status-result'),
    srCardStatus: (0, _emberCliPageObject.text)('.kanban-board--column[column-id="3"] [entity-id="12"] .ticket-card--footer .status-list-wrapper .status-result'),
    boardNameInNewModal: (0, _emberCliPageObject.text)('.board-name input'),
    boardNameInNewModalValue: (0, _emberCliPageObject.value)('.board-name input'),
    pendingColumnLimit: (0, _emberCliPageObject.text)('.kanban-board--column[column-id="3"] .kanban-board--column-count'),
    //count
    boardItem: (0, _emberCliPageObject.count)(boardItem),
    noOfConversations: (0, _emberCliPageObject.count)('.ticket-summary-modal .ticket-conversation-cards--wrapper .ticket-conversation-card'),
    noOfRequestedItems: (0, _emberCliPageObject.count)('.ticket-summary-modal .ticket-summary-modal--requested-item'),
    //click
    newBoardBtn: (0, _emberCliPageObject.clickable)(newBoardBtn),
    clickMyselfVisibilityRadio: (0, _emberCliPageObject.clickable)('[data-test-field-name="visibility"] [value="3"]'),
    modalCancel: (0, _emberCliPageObject.clickable)('[data-test-id="modal-cancel"]'),
    modalSubmit: (0, _emberCliPageObject.clickable)('[data-test-id="modal-submit"]'),
    columnPosSubmit: (0, _emberCliPageObject.clickable)('[data-test-id="column-pos-save"]'),
    columnPosCancel: (0, _emberCliPageObject.clickable)('[data-test-id="column-pos-cancel"]'),
    loadMoreConv: (0, _emberCliPageObject.clickable)('[data-test-id="load-more-conversations"]'),
    viewFeedback: (0, _emberCliPageObject.clickable)('.ticket-conversation-card .feedback-conversation [data-test-id="view-feedback"]'),
    viewQuotedText: (0, _emberCliPageObject.clickable)('.ticket-conversation-card [data-test-id="show-hide-quoted-conv"]'),
    ticketReplyBtn: (0, _emberCliPageObject.clickable)('[data-test-id="conversation-actions-container"] [data-test-id="ticket-reply-btn"]'),
    tickerForwardBtn: (0, _emberCliPageObject.clickable)('[data-test-id="conversation-actions-container"] [data-test-id="ticket-forward-btn"]'),
    tickerAddNoteBtn: (0, _emberCliPageObject.clickable)('[data-test-id="conversation-actions-container"] [data-test-id="ticket-add-note-btn"]'),
    discardBoardChanges: (0, _emberCliPageObject.clickable)('[data-test-id="discard-board-changes"]'),
    saveAsBoard: (0, _emberCliPageObject.clickable)('[data-test-id="save-as-board"]'),
    saveBoard: (0, _emberCliPageObject.clickable)('[data-test-id="save-board-changes"]'),
    boardFilterToggle: (0, _emberCliPageObject.clickable)('[data-test-id="board-filter-toggle"]'),
    queryForm: {
      overdueCheckbox: (0, _emberCliPageObject.clickable)('[data-test-field-name="due_by"] input[value="1"]'),
      applyFilter: (0, _emberCliPageObject.clickable)('[data-test-id="view-query-form-submit"]')
    },
    columnPosDropDownOpen: (0, _emberCliPageObject.clickable)(COLUMN_POS_ON_OPTIONS_CHOICE),
    columnPosDropDownChoiceSelect: (0, _emberCliPageObject.clickable)(COLUMN_POS_OPTIONS_DD_CHOICE),
    columnPosDropDownChoiceSelectedText: (0, _emberCliPageObject.text)(COLUMN_POS_OPTIONS_SELECTED),
    ticketCard: (0, _emberCliPageObject.clickable)('.kanban-board--column[column-id="2"] [entity-id="13"] .ticket-card--body'),
    srCard: (0, _emberCliPageObject.clickable)('.kanban-board--column[column-id="2"] [entity-id="12"] .ticket-card--body'),
    convPhoneTicketCard: (0, _emberCliPageObject.clickable)('.kanban-board--column[column-id="2"] [entity-id="13"] .ticket-card--body'),
    //visible
    newBoardModalExists: (0, _emberCliPageObject.isVisible)('.new-board-modal'),
    saveAsBoardModalExists: (0, _emberCliPageObject.isVisible)('.save-as-board-modal'),
    editBoardModalExists: (0, _emberCliPageObject.isVisible)('.edit-board-modal'),
    deleteBoardModalExists: (0, _emberCliPageObject.isVisible)('.delete-board-modal'),
    boardNameInputExists: (0, _emberCliPageObject.isVisible)('.board-name input'),
    newBoardSubmitExists: (0, _emberCliPageObject.isVisible)('.new-board-submit'),
    saveAsBoardSubmitExists: (0, _emberCliPageObject.isVisible)('.save-as-board-submit'),
    columnLimitModalExists: (0, _emberCliPageObject.isVisible)('.kanban-board-column-limit-modal'),
    columnLimitErrorExists: (0, _emberCliPageObject.isVisible)('[data-test-id="column-limit-error"]'),
    ticketCardStatusDDExists: (0, _emberCliPageObject.isVisible)('.kanban-board--column[column-id="2"] [entity-id="11"] .ticket-card--footer .status-list-wrapper'),
    ticketCardPriorityDDExists: (0, _emberCliPageObject.isVisible)('.kanban-board--column[column-id="2"] [entity-id="11"] .ticket-card--footer .priority-list-wrapper'),
    ticketSummaryModalExists: (0, _emberCliPageObject.isVisible)('.ticket-summary-modal'),
    loadMorConvBtnExists: (0, _emberCliPageObject.isVisible)('[data-test-id="load-more-conversations"]'),
    discardBtnExists: (0, _emberCliPageObject.isVisible)('[data-test-id="discard-board-changes"]'),
    saveBtnExists: (0, _emberCliPageObject.isVisible)('[data-test-id="save-board-changes"]'),
    saveAsBtnExists: (0, _emberCliPageObject.isVisible)('[data-test-id="save-as-board"]'),
    boardFilterCompExists: (0, _emberCliPageObject.isVisible)('[data-test-id="view-query-form-section"]'),
    pendingColumnIsBeingHovered: (0, _emberCliPageObject.isVisible)('.kanban-board--column-droppable-wrapper[board-col-id="3"] .kanban-board--column-droppable--hovered'),
    sortablePlaceholder: (0, _emberCliPageObject.isVisible)('.sortable-placeholder'),
    quotedTextIsHidden: (0, _emberCliPageObject.hasClass)('hide', ".ticket-conversation-card .quoted-text-container", {
      multiple: true
    }),
    ticketCardPriority: (0, _emberCliPageObject.attribute)('title', '.kanban-board--column[column-id="2"] [entity-id="11"] .ticket-card--footer .priority-list-wrapper .priority-result'),
    boardListItems: (0, _emberCliPageObject.collection)('.view-item.menuitem a'),
    visitBoard: (0, _emberCliPageObject.visitable)("/tickets/board/:id"),
    boardShowPage: function boardShowPage(id) {
      return "/tickets/board/".concat(id);
    }
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-native-integrations/jira-integration", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var jiraAccordion = '[data-test-id=jira-collapsible]';
  var linkButton = '[data-test-id=btn-jira-integration]';
  var unlinkButton = '[data-test-id=unlink-jira-btn]';
  var deleteButton = '[data-test-id=link-jira-btn]';
  var createRdButton = '[data-test-id=create-issue-radio-btn]';
  var linkRdButton = '[data-test-id=link-issue-radio-btn]';
  var linkForm = '[data-test-id=jira-link-form]';
  var jiraCreateForm = '[data-test-id=jira-create-form]';

  var _default = (0, _emberCliPageObject.create)({
    // clickables
    accordionIsVisible: (0, _emberCliPageObject.isVisible)(jiraAccordion),
    accordion: (0, _emberCliPageObject.clickable)(jiraAccordion),
    // accordionMenu: clickable("[data-test-id='ui-accordion-trigger']"),
    linkButtonIsVisible: (0, _emberCliPageObject.isVisible)(linkButton),
    createRdButtonIsVisible: (0, _emberCliPageObject.isVisible)(createRdButton),
    linkRdButtonIsVisible: (0, _emberCliPageObject.isVisible)(linkRdButton),
    linkFormIsVisible: (0, _emberCliPageObject.isVisible)(linkForm),
    clickLinkFormButton: (0, _emberCliPageObject.clickable)(linkForm),
    createFormIsVisible: (0, _emberCliPageObject.isVisible)(jiraCreateForm),
    clickLinkIssue: (0, _emberCliPageObject.clickable)(linkButton),
    unLinkIssue: (0, _emberCliPageObject.clickable)(unlinkButton),
    deleteIssue: (0, _emberCliPageObject.clickable)(deleteButton),
    createIssueRadioBtn: (0, _emberCliPageObject.clickable)(createRdButton),
    clickLinkIssueRadioBtn: (0, _emberCliPageObject.clickable)(linkRdButton)
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-native-integrations/pivotal-tracker", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var ptAccordion = '[data-test-id=pt-collapsible]';
  var createStoryButton = '[data-test-id=btn-pt-integration]';
  var ptSubmitButton = '[data-test-id=pt-create-submit-btn]';
  var ptShowItem = '[data-test-id=pt-show-integration]';
  var ptStoryItemStatus = '[data-test-id=pt-story-status]';
  var emptyStory = '[data-test-id=pt-no-stories-linked]';
  var ptSubmitCreateStory = '[data-test-id=pt-create-submit-btn]';

  var selectDropdownButton = function selectDropdownButton(btnName) {
    return "[data-test-field-name=".concat(btnName, "] .ember-basic-dropdown");
  };

  var getDropdownButton = function getDropdownButton(btnName) {
    return "[data-test-field-name=\"".concat(btnName, "\"]");
  };

  var _default = (0, _emberCliPageObject.create)({
    accordionIsVisible: (0, _emberCliPageObject.isVisible)(ptAccordion),
    accordion: (0, _emberCliPageObject.clickable)(ptAccordion),
    createStoryButtonIsVisible: (0, _emberCliPageObject.isVisible)(createStoryButton),
    submitButtonIsVisible: (0, _emberCliPageObject.isVisible)(ptSubmitButton),
    clickCreateStory: (0, _emberCliPageObject.clickable)(createStoryButton),
    clickSubmitCreateStory: (0, _emberCliPageObject.clickable)(ptSubmitCreateStory),
    ptItems: (0, _emberCliPageObject.isVisible)(ptShowItem),
    ptStoryStatus: (0, _emberCliPageObject.isVisible)(ptStoryItemStatus),
    emptyStory: (0, _emberCliPageObject.isVisible)(emptyStory),
    projectDropdownClick: (0, _emberCliPageObject.clickable)(getDropdownButton("project")),
    storyTypeDropdownClick: (0, _emberCliPageObject.clickable)(getDropdownButton("storyType")),
    projectClickDropdown: selectDropdownButton("project"),
    storyTypeClickDropdown: selectDropdownButton("storyType"),
    dropDownText: (0, _emberCliPageObject.text)('.ember-power-select-options > li:nth-child(1)')
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-sam/form", ["exports", "ember-cli-page-object", "@ember/test-helpers", "freshservice/tests/pages/components/utils/form-fields"], function (_exports, _emberCliPageObject, _testHelpers, _formFields) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  // form actions
  var addSamTrigger = '[data-test-id=add-software]';
  var editSamTrigger = '[data-test-id=edit-software]';
  var formSubmit = '[data-test-id=sam-create-edit-submit]';
  var formClose = '[data-test-id=ember-modal-close]';
  var samForm = '.sam-form-container'; // fields

  var addDescription = '[data-test-id=add-description]';
  var name = '[data-test-field-name=name] input';
  var nameWrap = '[data-test-field-name=name]';
  var nameOptn = "".concat(nameWrap, " .ember-power-select-option:first-child");
  var nameSelect = '[data-test-id=software-name-value]';
  var description = '[data-test-field-name=description] textarea';
  var notes = '[data-test-field-name=notes] textarea';

  var _default = (0, _emberCliPageObject.create)({
    // dom exists - fields
    exists: (0, _emberCliPageObject.isVisible)(samForm),
    descriptionExists: (0, _emberCliPageObject.isVisible)(description),
    addSamExists: (0, _emberCliPageObject.isVisible)(addSamTrigger),
    // set value
    fillName: (0, _emberCliPageObject.fillable)(name),
    fillDescription: (0, _emberCliPageObject.fillable)(description),
    fillNotes: (0, _emberCliPageObject.fillable)(notes),
    fillSoftwareSearch: (0, _emberCliPageObject.fillable)("".concat(nameWrap, " .ember-power-select-search-input")),
    // trigger events
    mouseOverOption: (0, _emberCliPageObject.triggerable)('mouseover', nameOptn),
    // attribute checks
    isOptionHighlighted: (0, _emberCliPageObject.attribute)('aria-current', nameOptn),
    // get value
    nameValue: (0, _emberCliPageObject.value)(name),
    descriptionValue: (0, _emberCliPageObject.value)(description),
    notesValue: (0, _emberCliPageObject.value)(notes),
    // text
    addSamTriggerText: (0, _emberCliPageObject.text)(addSamTrigger),
    editSamTriggerText: (0, _emberCliPageObject.text)(editSamTrigger),
    formSubmitText: (0, _emberCliPageObject.text)(formSubmit),
    // clicks
    submitForm: (0, _emberCliPageObject.clickable)(formSubmit),
    triggerAdd: (0, _emberCliPageObject.clickable)(addSamTrigger),
    triggerEdit: (0, _emberCliPageObject.clickable)(editSamTrigger),
    closeModal: (0, _emberCliPageObject.clickable)(formClose),
    addDescription: (0, _emberCliPageObject.clickable)(addDescription),
    openSoftwareSelect: (0, _emberCliPageObject.clickable)("".concat(nameWrap, " .ember-basic-dropdown-trigger")),
    // form fields
    formUtils: _formFields.default,
    // async functions
    getName: function getName() {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var field;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                field = (0, _testHelpers.find)(nameWrap);
                return _context.abrupt("return", field.querySelector(nameSelect).innerText);

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    }
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-sam/sam-details", ["exports", "ember-cli-page-object", "freshservice/tests/pages/components/utils/form-fields", "freshservice/tests/pages/components/ui-components/progress-chart"], function (_exports, _emberCliPageObject, _formFields, _progressChart) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  //banner
  var integrationBanner = '[data-test-id=details-integration-banner]';
  var appNameInBanner = '[data-test-id=app-name-banner]';
  var helptext = '[data-test-id=help-text]'; // tabs

  var detailsTab = '[data-test-id=software-details-tabs]';
  var detailsUrl = '/applications/:id'; // actions

  var descShowMoreBtn = '[data-test-id=desc-show-more]';
  var fullDesc = '[data-test-id=full-desc]';
  var deleteBtn = '[data-test-id=deleteSoftware]';
  var deleteSubmit = '.sam-delete-modal [data-test-id=modal-submit]';
  var enableInsightToggle = '[data-test-id=enable-insight-toggle] .ember-checkbox'; // properties tab

  var softwareName = '[data-test-id=software-name]';
  var status = '[data-test-id=status]';
  var type = '[data-test-id=application_type] .property_value span';
  var notes = '[data-test-id=notes] .property_value span';
  var manufacturer = '[data-test-id=manufacturer] .property_value a'; // Allocation overview / Usage overview

  var highchartsRoot = '.highcharts-root';
  var totalCount = '.highcharts-title';
  var pieSlice = '.highcharts-series path';
  var firstSectionLabel = '.highcharts-data-label:first-child span';
  var secondSectionLabel = '.highcharts-data-label:nth-child(2) span';
  var comingSoonWrapper = '[data-test-id=coming-soon-wrapper]'; // License overview

  var contractValue = '[data-test-id=total-value-wrapper] .value';
  var expDate = '[data-test-id=expiry-date-wrapper] .value';
  var expLabel = '[data-test-id=expiry-date-wrapper] .text'; // App Data visualisation

  var leftCol = '[data-test-id=left-col]';
  var rightCol = '[data-test-id=right-col]';
  var viewMoreButton = '[data-test-id=plan-metric-view-more]';
  var leftProgressBars = '[data-test-id=left-col] [data-test-id=progress-bar]';
  var rightProgressBars = '[data-test-id=right-col] [data-test-id=progress-bar]';
  var graphItemWrapper = '[data-test-id=graph-item-wrapper]';
  var licenseMetricProgressBars = '.license-plan-metric-modal [data-test-id=graph-item-wrapper]';
  var licenseMetricSidePane = '.license-plan-metric-modal';

  var _default = (0, _emberCliPageObject.create)({
    // clicks
    selectTabs: (0, _emberCliPageObject.clickOnText)(detailsTab),
    delete: (0, _emberCliPageObject.clickable)(deleteBtn),
    confirmDelete: (0, _emberCliPageObject.clickable)(deleteSubmit),
    descShowMore: (0, _emberCliPageObject.clickable)(descShowMoreBtn),
    toggleInsight: (0, _emberCliPageObject.clickable)(enableInsightToggle),
    viewMoreButton: (0, _emberCliPageObject.clickable)(viewMoreButton),
    // visitable
    visit: (0, _emberCliPageObject.visitable)(detailsUrl),
    // collections
    leftProgressBars: (0, _emberCliPageObject.collection)(leftProgressBars),
    rightProgressBars: (0, _emberCliPageObject.collection)(rightProgressBars),
    graphItems: (0, _emberCliPageObject.collection)(graphItemWrapper),
    // counts
    licenseMetricProgressBars: (0, _emberCliPageObject.count)(licenseMetricProgressBars),
    // visible
    isViewMoreDescVisible: (0, _emberCliPageObject.isVisible)(descShowMoreBtn),
    isFullDescVisible: (0, _emberCliPageObject.isVisible)(fullDesc),
    isChartVisible: (0, _emberCliPageObject.isVisible)(highchartsRoot),
    isComingSoonSectionVisible: (0, _emberCliPageObject.isVisible)(comingSoonWrapper),
    isRightColVisible: (0, _emberCliPageObject.isVisible)(rightCol),
    isLeftColVisible: (0, _emberCliPageObject.isVisible)(leftCol),
    isIntegrationBannerVisible: (0, _emberCliPageObject.isVisible)(integrationBanner),
    isViewMoreButtonVisible: (0, _emberCliPageObject.isVisible)(viewMoreButton),
    isLicenseSidePaneVisible: (0, _emberCliPageObject.isVisible)(licenseMetricSidePane),
    // texts
    nameText: (0, _emberCliPageObject.text)(softwareName),
    statusText: (0, _emberCliPageObject.text)(status),
    typeText: (0, _emberCliPageObject.text)(type),
    notesText: (0, _emberCliPageObject.text)(notes),
    totalCount: (0, _emberCliPageObject.text)(totalCount),
    firstSectionLabel: (0, _emberCliPageObject.text)(firstSectionLabel),
    secondSectionLabel: (0, _emberCliPageObject.text)(secondSectionLabel),
    contractValueText: (0, _emberCliPageObject.text)(contractValue),
    manufacturerText: (0, _emberCliPageObject.text)(manufacturer),
    expDateText: (0, _emberCliPageObject.text)(expDate),
    expLabelText: (0, _emberCliPageObject.text)(expLabel),
    nameTextInBanner: (0, _emberCliPageObject.text)(appNameInBanner),
    userBasedTextInBanner: (0, _emberCliPageObject.text)(helptext),
    isInsightEnabled: (0, _emberCliPageObject.property)("checked", enableInsightToggle),
    // form fields
    formUtils: _formFields.default,
    // progress chart
    progressChart: _progressChart.default,
    pieSlice: pieSlice
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-sam/sam-installations", ["exports", "ember-cli-page-object", "freshservice/tests/pages/components/utils/form-fields"], function (_exports, _emberCliPageObject, _formFields) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // actions
  var addInstallations = '[data-test-id=add-device-link]';
  var deleteInstallations = '[data-test-id=deleteInstallations]';
  var submitBtn = '[data-test-id=modal-submit]'; // table cells

  var checkBoxes = '.check-box-cell input';
  var name = '.installation-name-cell';
  var nameHeader = '[data-test-id=sam-installations-table] .installation-name-header'; // table props

  var pageNavPrev = '[data-test-id=pageNavPrev]';
  var pageNavNext = '[data-test-id=pageNavNext]';
  var emptyTableState = '.lt-no-data';
  var pageNo = '.page-nav-text';
  var tableRows = '[data-test-id=sam-installations-table] tbody tr';
  var selectAll = '[data-test-id=installation-dt-select-all] input';

  var _default = (0, _emberCliPageObject.create)({
    // clicks
    sortByName: (0, _emberCliPageObject.clickable)(nameHeader),
    navigateToNext: (0, _emberCliPageObject.clickable)(pageNavNext),
    navigateToPrev: (0, _emberCliPageObject.clickable)(pageNavPrev),
    addInstallation: (0, _emberCliPageObject.clickable)(addInstallations),
    confirmSubmit: (0, _emberCliPageObject.clickable)(submitBtn),
    selectRows: (0, _emberCliPageObject.clickable)(checkBoxes),
    selectAll: (0, _emberCliPageObject.clickable)(selectAll),
    deleteInstallations: (0, _emberCliPageObject.clickable)(deleteInstallations),
    // collection
    tableRows: (0, _emberCliPageObject.collection)(tableRows, {
      name: (0, _emberCliPageObject.text)(name),
      isSelected: (0, _emberCliPageObject.property)('checked', checkBoxes)
    }),
    // visible
    isTableEmpty: (0, _emberCliPageObject.isVisible)(emptyTableState),
    // text
    pageInfo: (0, _emberCliPageObject.text)(pageNo),
    // form fields
    formUtils: _formFields.default,
    // dom visible
    isAddInstallationVisible: (0, _emberCliPageObject.isVisible)(addInstallations)
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-sam/sam-licenses", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // actions
  var addLicense = '[data-test-id=create-contract-link]'; // table cells

  var nameHeader = '[data-test-id=sam-licenses-table] th:first-child';
  var name = 'td:first-child'; // table props

  var pageNavPrev = '[data-test-id=pageNavPrev]';
  var pageNavNext = '[data-test-id=pageNavNext]';
  var pageNo = '.page-nav-text';
  var tableRows = '[data-test-id=sam-licenses-table] tbody tr';

  var _default = (0, _emberCliPageObject.create)({
    // clicks
    sortByName: (0, _emberCliPageObject.clickable)(nameHeader),
    navigateToNext: (0, _emberCliPageObject.clickable)(pageNavNext),
    navigateToPrev: (0, _emberCliPageObject.clickable)(pageNavPrev),
    // collection
    tableRows: (0, _emberCliPageObject.collection)(tableRows, {
      name: (0, _emberCliPageObject.text)(name)
    }),
    // text
    pageInfo: (0, _emberCliPageObject.text)(pageNo),
    // dom visible
    isAddLicenseVisible: (0, _emberCliPageObject.isVisible)(addLicense)
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-sam/sam-list", ["exports", "ember-cli-page-object", "freshservice/tests/pages/components/utils/form-fields"], function (_exports, _emberCliPageObject, _formFields) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // table props
  var tableHeaders = '[data-test-id=sam-list-table] th';
  var tableRows = '[data-test-id=sam-list-table] tbody tr';
  var pageNavPrev = '[data-test-id=pageNavPrev]';
  var pageNavNext = '[data-test-id=pageNavNext]';
  var emptyTableState = '.lt-no-data';
  var noSoftwareState = '[data-test-id=no-software-found]'; // table cells - cannot use data-test-id as currently table plugin does not support test ids

  var checkBoxes = '.check-box-cell input';
  var name = '.software-name-cell span';
  var status = '.inline-status-trigger .ember-power-select-selected-item';
  var category = '.software-list-category';
  var manufacturer = '.software-list-manufacturer';
  var managedBy = '.software-managed-by';
  var avatarInitial = '.avatar__initial';
  var nameWithImage = '.software-name-value';
  var dataTableLink = '.data-table-link';
  var nameHeader = '.software-name-header'; // form actions

  var categorySubmit = '[data-test-id=modal-submit]'; // access denied issues

  var accessDeniedError = '[data-test-id=access-denied-error]'; // bulk action buttons

  var selectAll = '[data-test-id=sam-dt-select-all] input';
  var assignCategoryBtn = '[data-test-id=assignSoftwareCategory]';
  var clearCategorySelection = '[data-test-field-name=assign-category-dd] .ember-power-select-clear-btn';
  var categoryPlaceholder = '[data-test-field-name=assign-category-dd] .ember-power-select-placeholder';
  var addCategoryOptionBtn = '[data-test-field-name=assign-category-dd] .add-option-item'; // fields

  var searchField = '[data-test-id=sam-dt-search-field]';
  var input = 'input'; // insights

  var insightsButton = '[data-test-id=software-insights]';
  var insightDismissBtn = '[data-test-id=dismiss-insight]';
  var activeCardsContainer = '[data-test-id=software-insight-tabs] .tabs__content__pane.active [data-test-id=cards-container]'; //Dashboard Cards

  var dashboardCards = '[data-test-id=sam-dashboard-cards]';
  var discoveredView = '[data-test-id=discovered-view-cards]';
  var listView = '[data-test-id=list-view-cards]';
  var discoveredCard = '[data-test-id=discovered-card]';
  var discoveredCardValue = '[data-test-id=discovered-card-value]';
  var managedCard = '[data-test-id=managed-card]';
  var moveToReviewButton = '[data-test-id=move-to-review]'; // insight tabs

  var tabs = '[data-test-id=software-insight-tabs] .tabs__items .tabs__item';
  var operationalTab = '[data-test-id=software-insight-tabs] a.operational-tab';
  var compliancesTab = '[data-test-id=software-insight-tabs] a.compliances-tab';
  var usageTab = '[data-test-id=software-insight-tabs] a.usage-tab';
  var emptyStateForOperational = '[data-test-id=operational-empty-state]';
  var emptyStateForCompliances = '[data-test-id=compliances-empty-state]';
  var emptyStateForUsage = '[data-test-id=usage-empty-state]';
  var cardSoftwareName = '#compliances-insight-container .cards-container .content .software-name';
  var cardSoftwareCategory = '#compliances-insight-container .cards-container .content .software-category';
  var activeTabTitle = '[data-test-id=software-insight-tabs] .tabs__item__nav.active .tab-title';

  var _default = (0, _emberCliPageObject.create)({
    // visit
    visit: (0, _emberCliPageObject.visitable)('/applications'),
    visitAll: (0, _emberCliPageObject.visitable)('/applications?filter=all'),
    // collections
    tableHeaders: (0, _emberCliPageObject.collection)(tableHeaders),
    tableRows: (0, _emberCliPageObject.collection)(tableRows, {
      name: (0, _emberCliPageObject.text)(name),
      status: (0, _emberCliPageObject.text)(status),
      managedBy: (0, _emberCliPageObject.text)(managedBy),
      category: (0, _emberCliPageObject.text)(category),
      isStatusVisible: (0, _emberCliPageObject.isVisible)(status),
      isManagedByVisible: (0, _emberCliPageObject.isVisible)(managedBy),
      clickManufacturer: (0, _emberCliPageObject.clickable)("".concat(manufacturer, " .data-table-link")),
      clickManagedBy: (0, _emberCliPageObject.clickable)("".concat(managedBy, " .data-table-link"))
    }),
    tabs: (0, _emberCliPageObject.collection)(tabs),
    // set value
    searchSoftare: (0, _emberCliPageObject.fillable)(searchField),
    // visible
    isTableEmpty: (0, _emberCliPageObject.isVisible)(emptyTableState),
    isNoSoftwareFound: (0, _emberCliPageObject.isVisible)(noSoftwareState),
    isAccessDeniedVisible: (0, _emberCliPageObject.isVisible)(accessDeniedError),
    isSelectAllVisible: (0, _emberCliPageObject.isVisible)(selectAll),
    isOperationalInsightEmptyStateVisible: (0, _emberCliPageObject.isVisible)(emptyStateForOperational),
    isCompliancesInsightEmptyStateVisible: (0, _emberCliPageObject.isVisible)(emptyStateForCompliances),
    isUsageInsightEmptyStateVisible: (0, _emberCliPageObject.isVisible)(emptyStateForUsage),
    isDashboardCardsVisible: (0, _emberCliPageObject.isVisible)(dashboardCards),
    isDiscoveredViewVisible: (0, _emberCliPageObject.isVisible)(discoveredView),
    isListViewVisible: (0, _emberCliPageObject.isVisible)(listView),
    // form fields
    formUtils: _formFields.default,
    // attributes
    activeTabCount: (0, _emberCliPageObject.attribute)('data-count', activeTabTitle),
    // text
    discoveredCardText: (0, _emberCliPageObject.text)(discoveredCardValue),
    nameWithImageText: (0, _emberCliPageObject.text)(nameWithImage),
    avatarInitialText: (0, _emberCliPageObject.text)(avatarInitial),
    categoryPlaceholderText: (0, _emberCliPageObject.text)(categoryPlaceholder),
    inlineStatusText: (0, _emberCliPageObject.text)(status),
    insightTabCard: {
      softwareName: (0, _emberCliPageObject.text)(cardSoftwareName),
      softwareCategory: (0, _emberCliPageObject.text)(cardSoftwareCategory)
    },
    // class checks
    isDisabledInput: (0, _emberCliPageObject.hasClass)('disabled', input),
    isOperationalTabActive: (0, _emberCliPageObject.hasClass)("active", operationalTab),
    isCompliancesTabActive: (0, _emberCliPageObject.hasClass)("active", compliancesTab),
    isUsageTabActive: (0, _emberCliPageObject.hasClass)("active", usageTab),
    // value
    isRowSelected: (0, _emberCliPageObject.value)(checkBoxes),
    //present
    isDismissPresent: (0, _emberCliPageObject.isPresent)(insightDismissBtn),
    isCardPresent: (0, _emberCliPageObject.isPresent)(activeCardsContainer),
    // clicks
    selectInput: (0, _emberCliPageObject.clickable)(input),
    clickDataTableLink: (0, _emberCliPageObject.clickable)(dataTableLink),
    selectRows: (0, _emberCliPageObject.clickable)(checkBoxes),
    submitCategory: (0, _emberCliPageObject.clickable)(categorySubmit),
    triggerCategoryModel: (0, _emberCliPageObject.clickable)(assignCategoryBtn),
    addCategoryOption: (0, _emberCliPageObject.clickable)(addCategoryOptionBtn),
    navigateToNext: (0, _emberCliPageObject.clickable)(pageNavNext),
    navigateToPrev: (0, _emberCliPageObject.clickable)(pageNavPrev),
    triggerSelectAll: (0, _emberCliPageObject.clickable)(selectAll),
    sortByName: (0, _emberCliPageObject.clickable)(nameHeader),
    clearCategorySelection: (0, _emberCliPageObject.clickable)(clearCategorySelection),
    triggerInsights: (0, _emberCliPageObject.clickable)(insightsButton),
    gotoDiscoveredView: (0, _emberCliPageObject.clickable)(discoveredCard),
    showManagedSoftware: (0, _emberCliPageObject.clickable)(managedCard),
    moveToReview: (0, _emberCliPageObject.clickable)(moveToReviewButton),
    clickOperationalTab: (0, _emberCliPageObject.clickable)(operationalTab),
    clickCompliancesTab: (0, _emberCliPageObject.clickable)(compliancesTab),
    clickUsageTab: (0, _emberCliPageObject.clickable)(usageTab),
    dismissInsight: (0, _emberCliPageObject.clickable)(insightDismissBtn)
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-sam/sam-relationships", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // Buttons
  var addNewRelationship = '[data-test-id=add-new-relationship]';
  var listViewToggleButton = '[data-test-id=list-view]';
  var mapViewToggleButton = '[data-test-id=map-view]';
  var nodeDeleteButton = '[data-test-id=delete-node-btn]';
  var mapFullPageNavigateBtn = '[data-test-id=navigate-full-map-view]';
  var modalDeleteConfirmBtn = '.relationship-delete-modal [data-test-id=modal-submit]'; // Not Found Page

  var relationshipNotFoundPage = '[data-test-id=empty-state-wrapper]'; // Relationship List View

  var relationshipListTable = '[data-test-id=relationship-list-table]';
  var relationshipListRows = '[data-test-id=relationship-row]';
  var relationshipTypeName = '[data-test-id=relationship-type-name]';
  var relationshipEntityLink = '[data-test-id=entity-link]'; // Visibility

  var isAddNewRelationshipVisible = '.relationship-add-modal';
  var isMapView = '[data-test-id=relationship-map-view]';
  var mapNodeConnector = '[data-test-id=pan-container] [data-test-id=map-links]';
  var isRelationshipDeleteModalVisible = '.relationship-delete-modal';

  var _default = (0, _emberCliPageObject.create)({
    // selectors
    mapNodeConnector: mapNodeConnector,
    // clickables
    addNewRelationship: (0, _emberCliPageObject.clickable)(addNewRelationship),
    listViewToggleButton: (0, _emberCliPageObject.clickable)(listViewToggleButton),
    mapViewToggleButton: (0, _emberCliPageObject.clickable)(mapViewToggleButton),
    nodeDeleteButton: (0, _emberCliPageObject.clickable)(nodeDeleteButton),
    modalDeleteConfirmBtn: (0, _emberCliPageObject.clickable)(modalDeleteConfirmBtn),
    // collections
    relationshipListTable: (0, _emberCliPageObject.collection)(relationshipListTable, {
      name: (0, _emberCliPageObject.text)(relationshipTypeName),
      rows: (0, _emberCliPageObject.collection)(relationshipListRows, {
        links: (0, _emberCliPageObject.collection)(relationshipEntityLink)
      })
    }),
    // triggers
    onRelationshipRowHover: (0, _emberCliPageObject.triggerable)('mouseover', relationshipListRows),
    // attributes
    entityLink: (0, _emberCliPageObject.attribute)('href', relationshipEntityLink),
    mapFullPageNavigateBtn: (0, _emberCliPageObject.attribute)('href', mapFullPageNavigateBtn),
    // visibility
    isRelationshipNotFoundPageVisible: (0, _emberCliPageObject.isVisible)(relationshipNotFoundPage),
    isAddNewRelationshipVisible: (0, _emberCliPageObject.isVisible)(isAddNewRelationshipVisible),
    isListView: (0, _emberCliPageObject.isVisible)(relationshipListTable),
    isMapView: (0, _emberCliPageObject.isVisible)(isMapView),
    isRelationshipDeleteModalVisible: (0, _emberCliPageObject.isVisible)(isRelationshipDeleteModalVisible)
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-sam/sam-saas-actions", ["exports", "ember-cli-page-object", "freshservice/tests/pages/components/utils/form-fields"], function (_exports, _emberCliPageObject, _formFields) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // actions
  var submitBtn = '[data-test-id=modal-submit]';
  var modalClose = '[data-test-id=ember-modal-close]';
  var serviceItemCreateWrapper = '[data-test-id=service-item-create-wrapper]';
  var takeAction = '[data-test-id=take-action-btn]';
  var createServiceItem = '[data-test-id=create-service-item]';
  var srFormSubmit = '[data-test-id=sr-form-submit]';
  var inProgressCard = '[data-test-id=in-progress-card]';
  var successCard = '[data-test-id=success-card]';
  var failureCard = '[data-test-id=failure-card]';
  var partialSuccessCard = '[data-test-id=partial-success-card]';
  var srItemLink = '[data-test-id=sr-item-link]';
  var resendSr = '[data-test-id=resend-sr]';
  var serviceRequestForm = '[data-test-id=sr-form-container]';
  var applicationName = '[data-test-field-name="customField.cf_application_name_1"] input'; // table props

  var emptyTableState = '.lt-no-data';

  var _default = (0, _emberCliPageObject.create)({
    // clicks
    takeAction: (0, _emberCliPageObject.clickable)(takeAction),
    confirmSubmit: (0, _emberCliPageObject.clickable)(submitBtn),
    closeModal: (0, _emberCliPageObject.clickable)(modalClose),
    openSr: (0, _emberCliPageObject.clickable)(srItemLink),
    resendSr: (0, _emberCliPageObject.clickable)(resendSr),
    submitSrForm: (0, _emberCliPageObject.clickable)(srFormSubmit),
    createServiceItem: (0, _emberCliPageObject.clickable)(createServiceItem),
    // get value
    applicationNameValue: (0, _emberCliPageObject.value)(applicationName),
    // visible
    isTableEmpty: (0, _emberCliPageObject.isVisible)(emptyTableState),
    isServiceItemCreateVisible: (0, _emberCliPageObject.isVisible)(serviceItemCreateWrapper),
    isServiceRequestFormVisible: (0, _emberCliPageObject.isVisible)(serviceRequestForm),
    isInProgressCardVisible: (0, _emberCliPageObject.isVisible)(inProgressCard),
    isSuccessCardVisible: (0, _emberCliPageObject.isVisible)(successCard),
    isFailureCardVisible: (0, _emberCliPageObject.isVisible)(failureCard),
    isPartialSuccessCardVisible: (0, _emberCliPageObject.isVisible)(partialSuccessCard),
    isSrItemLinkVisible: (0, _emberCliPageObject.isVisible)(srItemLink),
    isResendSrVisible: (0, _emberCliPageObject.isVisible)(resendSr),
    // form fields
    formUtils: _formFields.default
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-sam/sam-users", ["exports", "ember-cli-page-object", "freshservice/tests/pages/components/utils/form-fields"], function (_exports, _emberCliPageObject, _formFields) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // actions
  var addUser = '[data-test-id=add-user]';
  var allocateLicense = '[data-test-id=allocate-license]';
  var deAllocateLicense = '[data-test-id=deallocate-license]';
  var deleteUsers = '[data-test-id=deleteUsers]';
  var submitBtn = '[data-test-id=modal-submit]';
  var modalClose = '[data-test-id=ember-modal-close]'; // table props

  var tableRows = '[data-test-id=sam-users-table] tbody tr';
  var pageNavPrev = '[data-test-id=pageNavPrev]';
  var pageNavNext = '[data-test-id=pageNavNext]';
  var selectAll = '[data-test-id=sam-dt-select-all] input';
  var emptyTableState = '.lt-no-data';
  var pageNo = '.page-nav-text'; // table cells

  var name = '.user-name-cell';
  var assignedDate = '.user-assigned-date-cell';
  var assignedDateHeader = '[data-test-id=sam-users-table] .user-assigned-date-header';
  var checkBoxes = '.check-box-cell input';
  var license = '.user-license-cell';

  var _default = (0, _emberCliPageObject.create)({
    // clicks
    sortByAssignedDate: (0, _emberCliPageObject.clickable)(assignedDateHeader),
    navigateToNext: (0, _emberCliPageObject.clickable)(pageNavNext),
    navigateToPrev: (0, _emberCliPageObject.clickable)(pageNavPrev),
    addUser: (0, _emberCliPageObject.clickable)(addUser),
    allocateLicense: (0, _emberCliPageObject.clickable)(allocateLicense),
    deAllocateLicense: (0, _emberCliPageObject.clickable)(deAllocateLicense),
    confirmSubmit: (0, _emberCliPageObject.clickable)(submitBtn),
    selectRows: (0, _emberCliPageObject.clickable)(checkBoxes),
    selectAll: (0, _emberCliPageObject.clickable)(selectAll),
    deleteUsers: (0, _emberCliPageObject.clickable)(deleteUsers),
    closeModal: (0, _emberCliPageObject.clickable)(modalClose),
    // collection
    tableRows: (0, _emberCliPageObject.collection)(tableRows, {
      name: (0, _emberCliPageObject.text)(name),
      assignedDate: (0, _emberCliPageObject.text)(assignedDate),
      license: (0, _emberCliPageObject.text)(license),
      isSelected: (0, _emberCliPageObject.property)('checked', checkBoxes)
    }),
    // visible
    isTableEmpty: (0, _emberCliPageObject.isVisible)(emptyTableState),
    // text
    pageInfo: (0, _emberCliPageObject.text)(pageNo),
    // form fields
    formUtils: _formFields.default
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-sam/user-list-filter", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // Selectors
  var SELECTORS = {
    // table cells
    USER_FILTER: "[data-test-id='sam-user-filter']",
    FILTER_APPLY_BTN: "[data-test-id='btn-filter-apply']",
    FILTER_RESET_BTN: "[data-test-id='btn-filter-reset']",
    LICENSE_TYPE_DROPDOWN: "[data-test-field-name=license_type]",
    DEPARTMENT_DROPDOWN: "[data-test-field-name=department_id]",
    LICENSE_TYPE_VALUES: "[data-test-field-name=license_type] li",
    SELECT_SOURCE_DROPDOWN: "[data-test-field-name=source] .ember-basic-dropdown"
  };

  var _default = (0, _emberCliPageObject.create)({
    // visible
    isUserFilterVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.USER_FILTER),
    isLicenseTypeDropdownVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.LICENSE_TYPE_DROPDOWN),
    // collections
    licenseTypeValues: (0, _emberCliPageObject.collection)(SELECTORS.LICENSE_TYPE_VALUES),
    // clickables
    clickFilterApply: (0, _emberCliPageObject.clickable)(SELECTORS.FILTER_APPLY_BTN),
    clickResetFilter: (0, _emberCliPageObject.clickable)(SELECTORS.FILTER_RESET_BTN),
    // selectors
    sourceDropdown: SELECTORS.SELECT_SOURCE_DROPDOWN,
    departmentDropdown: SELECTORS.DEPARTMENT_DROPDOWN
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-service-request/add-item-in-slider", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var SELECTORS = {
    ADD_OR_ASS_SR_BTNS: '[data-test-id="add-or-ass-child-sr-toggle"]',
    ITEM_CARD: '.catalog-item-card',
    BUNDLE_ITEM_CARD: '[data-test-id="item-345"]',
    WILL_CREATE_CHILD_ITEM_CARD: '[data-test-id="item-13"]',
    ADOBE_CARD: '[data-test-id="item-30"]',
    DETAIL_SECTION: '[data-test-id="request-item-detail"]'
  };

  var _default = (0, _emberCliPageObject.create)({
    addSRChild: {
      toggleBtnsVisble: (0, _emberCliPageObject.isVisible)(SELECTORS.ADD_OR_ASS_SR_BTNS)
    },
    addReqItem: {
      noOfServiceItemsListed: (0, _emberCliPageObject.count)(SELECTORS.ITEM_CARD),
      adobeCardClick: (0, _emberCliPageObject.clickable)(SELECTORS.ADOBE_CARD)
    },
    bundleItemVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.BUNDLE_ITEM_CARD),
    createChildItemVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.WILL_CREATE_CHILD_ITEM_CARD),
    itemDetailVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.DETAIL_SECTION)
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-service-request/detail", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var SELECTORS = {
    ITEM_INFO: {
      TITLE: '.item-info .title-normal',
      SHORT_DESC: '.item-info .short-desc',
      DESC: 'article.desc-container',
      IMG: '.item-primary-info .img-container img',
      COST: '.item-info .cost',
      DELIVERY: '.item-info .delivery'
    },
    QTY_INFO: {
      QTY_TITLE: '[data-test-id="qty-heading"]',
      TABLE_BODY: '[data-test-id="qty-tbody"] tr',
      MINUS_BTN: '.btn.minus',
      PLUS_BTN: '.btn.plus',
      INP_QTY: '.inp-qty',
      PRICE: '.td-price',
      TOTAL: '.total-cost'
    },
    REQUESTER_INFO: {
      REQUESTER_FIELD: '[data-test-field-name="email"]',
      REQUESTER_FIELD_TRIGGER: '[data-test-field-name="email"] .ember-power-select-trigger',
      REQUESTER_FIELD_INPUT: '[data-test-field-name="email"] input',
      ADD_CC_FIELD: '[data-test-field-name="ccEmails"]',
      ADD_CC_FIELD_INPUT: '[data-test-field-name="ccEmails"] input',
      ADD_CC_FIELD_CLEAR_BTN: '[data-test-field-name="ccEmails"] .ember-power-select-multiple-remove-btn[data-selected-index="0"]',
      REQUEST_FOR_FIELD: '[data-test-field-name="requestedFor"]',
      REQUEST_FOR_FIELD_TRIGGER: '[data-test-field-name="requestedFor"] .ember-power-select-trigger',
      REQUEST_FOR_FIELD_INPUT: '[data-test-field-name="requestedFor"] input',
      BTN_ADD_CC: '#add-cc-btn',
      CHK_REQ_FOR: '[name="service-request[showRequestFor]"]',
      REQUESTER_FIELD_SELECTED: '[data-test-field-name="email"] .ember-basic-dropdown',
      ADD_NEW_REQ_MODAL: '.add-new-requester-modal',
      ERR_REQUESTED_FOR: '[data-test-field-name="requestedFor"] .form-field--errors'
    },
    LOANER_ITEM_FIELDS: {
      LOCATION_FIELD: '[data-test-field-name="locationId"]',
      FROM_DATE_FIELD: '[data-test-field-name="fromDate"]',
      TO_DATE_FIELD: '[data-test-field-name="toDate"]',
      ALTERNATE_SLOT_BTN: '[data-test-id="alternate-slots"]',
      SLOTS_STATUS: '[data-test-id="slots-status"]'
    },
    ATTACHMENT: {
      LIST_ITEM: '.attachment-list .list-file-item',
      INPUT: 'input#attach_file',
      DELETE: '.delete-file',
      ERROR_MESSAGE: '.attach-files .field-required-error'
    },
    ADDITIONAL_ITEMS: {
      LIST_CONTAINER: '[data-test-id="child-items-container"]',
      ITEM_CONTAINER: '[data-test-id="child-item-accordion-item"]',
      TITLE: '[data-test-id="item-title"]',
      BUTTON: 'button.accordion-trigger',
      PRICE: '[data-test-id="item-price"]',
      IMAGE: '.accordion-trigger img',
      INP_CHK: '.chk-child-item',
      PANEL: '.accordion-panel',
      FORM: '.service-request-custom-fields-form',
      BTN_VIEW_MORE: '#btn-child-items-more',
      MANDATORY_ERROR: '[data-test-id="mandatory-child-error"]',
      SEARCH_TEXT_BOX: '#search-child-items',
      BTN_CLEAR: '#clear-items-search',
      BTN_SELECTED: '#btn-show-selected',
      FIELDS: '[data-test-field-name].form-field'
    },
    BTN_PLACE_REQ: 'button[data-test-id="place-req"]'
  };

  var _default = (0, _emberCliPageObject.create)({
    visitAllVisibleItem: (0, _emberCliPageObject.visitable)('/catalog/request-items/10'),
    visitAllHiddenItem: (0, _emberCliPageObject.visitable)('/catalog/request-items/30'),
    visitLoanerItem: (0, _emberCliPageObject.visitable)('/catalog/request-items/87'),
    visitAttachmentMandateItem: (0, _emberCliPageObject.visitable)('/catalog/request-items/19'),
    itemInfo: {
      title: (0, _emberCliPageObject.text)(SELECTORS.ITEM_INFO.TITLE),
      shortDesc: (0, _emberCliPageObject.text)(SELECTORS.ITEM_INFO.SHORT_DESC),
      descText: (0, _emberCliPageObject.text)(SELECTORS.ITEM_INFO.DESC),
      imgHref: (0, _emberCliPageObject.attribute)('src', SELECTORS.ITEM_INFO.IMG),
      costVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.ITEM_INFO.COST),
      deliveryVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.ITEM_INFO.DELIVERY),
      costText: (0, _emberCliPageObject.text)(SELECTORS.ITEM_INFO.COST),
      deliveryText: (0, _emberCliPageObject.contains)(SELECTORS.ITEM_INFO.DELIVERY)
    },
    qtyInfo: {
      qtyTitle: (0, _emberCliPageObject.text)(SELECTORS.QTY_INFO.QTY_TITLE),
      tableBody: (0, _emberCliPageObject.collection)(SELECTORS.QTY_INFO.TABLE_BODY, {
        minusBtnVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.QTY_INFO.MINUS_BTN),
        minusBtnDisabled: (0, _emberCliPageObject.attribute)('disabled', SELECTORS.QTY_INFO.MINUS_BTN),
        plusBtnVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.QTY_INFO.PLUS_BTN),
        inpQtyVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.QTY_INFO.INP_QTY),
        fillQty: (0, _emberCliPageObject.fillable)(SELECTORS.QTY_INFO.INP_QTY),
        blurQty: (0, _emberCliPageObject.blurrable)(SELECTORS.QTY_INFO.INP_QTY),
        priceText: (0, _emberCliPageObject.text)(SELECTORS.QTY_INFO.PRICE),
        minusBtnClickable: (0, _emberCliPageObject.clickable)(SELECTORS.QTY_INFO.MINUS_BTN),
        plusBtnClickable: (0, _emberCliPageObject.clickable)(SELECTORS.QTY_INFO.PLUS_BTN),
        qtyValue: (0, _emberCliPageObject.value)(SELECTORS.QTY_INFO.INP_QTY)
      }),
      totalCostVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.QTY_INFO.TOTAL),
      totalCostText: (0, _emberCliPageObject.text)(SELECTORS.QTY_INFO.TOTAL)
    },
    reqInfo: {
      reqFieldVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.REQUESTER_INFO.REQUESTER_FIELD),
      reqFieldValue: (0, _emberCliPageObject.text)(SELECTORS.REQUESTER_INFO.REQUESTER_FIELD_SELECTED),
      clickReqField: (0, _emberCliPageObject.clickable)(SELECTORS.REQUESTER_INFO.REQUESTER_FIELD_TRIGGER),
      fillReqField: (0, _emberCliPageObject.fillable)(SELECTORS.REQUESTER_INFO.REQUESTER_FIELD_INPUT),
      addCCVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.REQUESTER_INFO.ADD_CC_FIELD),
      clickBtnAddCC: (0, _emberCliPageObject.clickable)(SELECTORS.REQUESTER_INFO.BTN_ADD_CC),
      CcBtnText: (0, _emberCliPageObject.text)(SELECTORS.REQUESTER_INFO.BTN_ADD_CC),
      fillAddCC: (0, _emberCliPageObject.fillable)(SELECTORS.REQUESTER_INFO.ADD_CC_FIELD_INPUT),
      clearAddCC: (0, _emberCliPageObject.clickable)(SELECTORS.REQUESTER_INFO.ADD_CC_FIELD_CLEAR_BTN),
      reqForCheckboxVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.REQUESTER_INFO.CHK_REQ_FOR),
      reqForCheckboxChecked: (0, _emberCliPageObject.property)('checked', SELECTORS.REQUESTER_INFO.CHK_REQ_FOR),
      clickReqForCheckbox: (0, _emberCliPageObject.clickable)(SELECTORS.REQUESTER_INFO.CHK_REQ_FOR),
      reqForFieldVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.REQUESTER_INFO.REQUEST_FOR_FIELD),
      clickReqForField: (0, _emberCliPageObject.clickable)(SELECTORS.REQUESTER_INFO.REQUEST_FOR_FIELD_TRIGGER),
      fillReqForField: (0, _emberCliPageObject.fillable)(SELECTORS.REQUESTER_INFO.REQUEST_FOR_FIELD_INPUT)
    },
    loanerFields: {
      locationFieldIsVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.LOANER_ITEM_FIELDS.LOCATION_FIELD),
      fromDateFieldIsVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.LOANER_ITEM_FIELDS.FROM_DATE_FIELD),
      toDateFieldIsVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.LOANER_ITEM_FIELDS.TO_DATE_FIELD),
      alternateSlotBtnIsVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.LOANER_ITEM_FIELDS.ALTERNATE_SLOT_BTN),
      slotsStatusIsVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.LOANER_ITEM_FIELDS.SLOTS_STATUS),
      fromDateFieldText: (0, _emberCliPageObject.text)(SELECTORS.LOANER_ITEM_FIELDS.FROM_DATE_FIELD),
      toDateFieldIText: (0, _emberCliPageObject.text)(SELECTORS.LOANER_ITEM_FIELDS.TO_DATE_FIELD),
      slotsStatusText: (0, _emberCliPageObject.text)(SELECTORS.LOANER_ITEM_FIELDS.SLOTS_STATUS)
    },
    addAttachment: (0, _emberCliPageObject.triggerable)('change', SELECTORS.ATTACHMENT.INPUT),
    removeAttachment: (0, _emberCliPageObject.collection)(SELECTORS.ATTACHMENT.LIST_ITEM, {
      deleteFile: (0, _emberCliPageObject.clickable)(SELECTORS.ATTACHMENT.DELETE)
    }),
    attachmentVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.ATTACHMENT.LIST_ITEM),
    placeReq: (0, _emberCliPageObject.clickable)(SELECTORS.BTN_PLACE_REQ),
    placeReqDisabled: (0, _emberCliPageObject.attribute)('disabled', SELECTORS.BTN_PLACE_REQ),
    errors: {
      reqForErrorVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.REQUESTER_INFO.ERR_REQUESTED_FOR),
      attachment: (0, _emberCliPageObject.isVisible)(SELECTORS.ATTACHMENT.ERROR_MESSAGE)
    },
    additionalItems: {
      containerVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.ADDITIONAL_ITEMS.LIST_CONTAINER),
      btnViewMoreVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.ADDITIONAL_ITEMS.BTN_VIEW_MORE),
      clickViewMore: (0, _emberCliPageObject.clickable)(SELECTORS.ADDITIONAL_ITEMS.BTN_VIEW_MORE),
      mandatoryErrorVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.ADDITIONAL_ITEMS.MANDATORY_ERROR),
      items: (0, _emberCliPageObject.collection)(SELECTORS.ADDITIONAL_ITEMS.ITEM_CONTAINER, {
        imgVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.ADDITIONAL_ITEMS.IMAGE),
        checkBoxVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.ADDITIONAL_ITEMS.INP_CHK),
        isChecked: (0, _emberCliPageObject.property)('checked', SELECTORS.ADDITIONAL_ITEMS.INP_CHK),
        checkBoxDisabled: (0, _emberCliPageObject.attribute)('disabled', SELECTORS.ADDITIONAL_ITEMS.INP_CHK),
        selectItem: (0, _emberCliPageObject.clickable)(SELECTORS.ADDITIONAL_ITEMS.INP_CHK),
        titleText: (0, _emberCliPageObject.text)(SELECTORS.ADDITIONAL_ITEMS.TITLE),
        toggleAccordion: (0, _emberCliPageObject.clickable)(SELECTORS.ADDITIONAL_ITEMS.BUTTON),
        panelVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.ADDITIONAL_ITEMS.PANEL),
        priceVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.ADDITIONAL_ITEMS.PRICE),
        customFields: (0, _emberCliPageObject.collection)(SELECTORS.ADDITIONAL_ITEMS.FIELDS)
      }),
      search: {
        textBoxVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.ADDITIONAL_ITEMS.SEARCH_TEXT_BOX),
        textBoxValue: (0, _emberCliPageObject.value)(SELECTORS.ADDITIONAL_ITEMS.SEARCH_TEXT_BOX),
        fillSearch: (0, _emberCliPageObject.fillable)(SELECTORS.ADDITIONAL_ITEMS.SEARCH_TEXT_BOX),
        keyUp: (0, _emberCliPageObject.triggerable)('keyup', SELECTORS.ADDITIONAL_ITEMS.SEARCH_TEXT_BOX),
        clearBtnVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.ADDITIONAL_ITEMS.BTN_CLEAR),
        clickBtnClear: (0, _emberCliPageObject.clickable)(SELECTORS.ADDITIONAL_ITEMS.BTN_CLEAR),
        btnSelectedItemsVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.ADDITIONAL_ITEMS.BTN_SELECTED),
        clickBtnSelectedItems: (0, _emberCliPageObject.clickable)(SELECTORS.ADDITIONAL_ITEMS.BTN_SELECTED)
      }
    }
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-service-request/fields", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var FIELD_SELECTOR = function FIELD_SELECTOR(name) {
    var customField = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    return "[formserv-field-name=\"".concat(customField ? 'customField.' : '').concat(name, "\"]");
  };

  var FIELD_INPUT = function FIELD_INPUT(name) {
    var customField = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var inputType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'input';
    return "".concat(FIELD_SELECTOR(name, customField), " ").concat(inputType);
  };

  var SELECTORS = {
    LBL_DYNAMIC_PARENT: '[formserv-field-name="customField.dynamic_parent"] label',
    LBL_CHILD_1: '[formserv-field-name="customField.child_1"] label',
    LBL_CHILD_2_MANDATORY: '[formserv-field-name="customField.necessary_one"] label',
    LBL_CHILD_2_DEPT: '[formserv-field-name="customField.dept"] label',
    LOCATION_FIELD: '[formserv-field-name="customField.location_lookup"].select-field',
    LBL_SUB_CAT: '[formserv-field-name="cd_04_sub"] label',
    ERROR_FIELDS: '.form-field--has-errors',
    ERROR_MSG: '.form-field--errors',
    ERROR_INPUT: 'input',
    PLACE_REQUEST: '[data-test-id="place-req"]',
    PARENT_ITEM_QTY: '[data-test-id="qty-item-row-117"] input.inp-qty',
    CHILD_ITEM_QTY: '[data-test-id="qty-item-row-153"] input.inp-qty'
  };

  var _default = (0, _emberCliPageObject.create)({
    isFieldVisible: function isFieldVisible(fieldName) {
      var customField = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      return (0, _emberCliPageObject.isVisible)(FIELD_SELECTOR(fieldName, customField));
    },
    inputValue: function inputValue(fieldName) {
      var customField = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return (0, _emberCliPageObject.value)(FIELD_INPUT(fieldName, customField)).get();
    },
    textAreaValue: function textAreaValue(fieldName) {
      var customField = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return (0, _emberCliPageObject.value)(FIELD_INPUT(fieldName, customField, 'textarea')).get();
    },
    isDynamicParentVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.LBL_DYNAMIC_PARENT),
    isChild1Visible: (0, _emberCliPageObject.isVisible)(SELECTORS.LBL_CHILD_1),
    isChild2MandatoryVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.LBL_CHILD_2_MANDATORY),
    isChild2DeptVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.LBL_CHILD_2_DEPT),
    isLocationFieldVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.LOCATION_FIELD),
    isSubCategoryVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.LBL_SUB_CAT),
    fillPrefixField: (0, _emberCliPageObject.fillable)(FIELD_INPUT('prefix')),
    fillNameField: (0, _emberCliPageObject.fillable)(FIELD_INPUT('name')),
    fillBioField: (0, _emberCliPageObject.fillable)(FIELD_INPUT('bio', true, 'textarea')),
    fillDecimalField: (0, _emberCliPageObject.fillable)(FIELD_INPUT('decimal')),
    fillAgeField: (0, _emberCliPageObject.fillable)(FIELD_INPUT('age')),
    fillLinkField: (0, _emberCliPageObject.fillable)(FIELD_INPUT('link')),
    fillProfileLinkField: (0, _emberCliPageObject.fillable)(FIELD_INPUT('profile_link')),
    toggleTermsField: (0, _emberCliPageObject.clickable)(FIELD_INPUT('terms')),
    fillChildPrefixField: (0, _emberCliPageObject.fillable)(FIELD_INPUT('prefix', false)),
    fillChildNameField: (0, _emberCliPageObject.fillable)(FIELD_INPUT('name', false)),
    fillChildBioField: (0, _emberCliPageObject.fillable)(FIELD_INPUT('bio', false, 'textarea')),
    fillChildDecimalField: (0, _emberCliPageObject.fillable)(FIELD_INPUT('decimal', false)),
    fillChildAgeField: (0, _emberCliPageObject.fillable)(FIELD_INPUT('age', false)),
    fillChildProfileLinkField: (0, _emberCliPageObject.fillable)(FIELD_INPUT('profile_link', false)),
    toggleChildTermsField: (0, _emberCliPageObject.clickable)(FIELD_INPUT('terms', false)),
    fillParentItemQuantity: (0, _emberCliPageObject.fillable)(SELECTORS.PARENT_ITEM_QTY),
    fillChildItemQuantity: (0, _emberCliPageObject.fillable)(SELECTORS.CHILD_ITEM_QTY),
    errorFields: (0, _emberCliPageObject.collection)(SELECTORS.ERROR_FIELDS, {
      isInputInvalid: (0, _emberCliPageObject.attribute)('aria-invalid', SELECTORS.ERROR_INPUT),
      errorFieldName: (0, _emberCliPageObject.attribute)('formserv-field-name'),
      errorMessage: (0, _emberCliPageObject.text)(SELECTORS.ERROR_MSG)
    }),
    placeReq: (0, _emberCliPageObject.clickable)(SELECTORS.PLACE_REQUEST)
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-service-request/list", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var SELECTORS = {
    EMPTY_STATE: '.catalog-items-empty',
    EMPTY_STATE_TITLE: '.catalog-items-empty > h2',
    TITLE: '#item-title-id',
    LAZY_LOADER: '.infinity-loader .load-spinner',
    MAIN_CONTAINER: '.main-container',
    FUL_EMPTY_STATE: '.search-list-container .empty-states',
    CATEGORY: {
      LINK: '#category-container a.category-item',
      FIRST: '#category-container a.category-item[data-list-index="0"]',
      CURRENT: 'a.category-item[aria-current]',
      ACTIVE: 'a.category-item.active',
      HR_MANAGEMENT: '[data-test-id="lnk-category-1"]',
      IT_SERVICE: '[data-test-id="lnk-category-14"]',
      FACILITIES_MANAGEMENT: '[data-test-id="lnk-category-6"]'
    },
    SEARCH: {
      INPUT: '#search-catalog-items',
      CLEAR: '.search-input-wrapper .search-clear',
      TITLE: '#other-results',
      LIST: '.list-catalog-items[data-test-id="other-results-list"]'
    },
    ITEM: {
      LIST: '.list-catalog-items',
      LOADER: '.list-catalog-items[data-test-id="list-dynamic-loader"]',
      CARD: '.catalog-item-card',
      POPULAR: '[data-test-id="most-popular-list"]',
      NAME: '.item-name',
      FIRST: {
        NAME: '[data-test-id="item-1"] .item-name',
        DELIVERY: '[data-test-id="item-1"] .delivery',
        COST: '[data-test-id="item-1"] .cost',
        HYPHEN: '[data-test-id="item-1"] .empty-hiphen'
      },
      SECOND: {
        DELIVERY: '[data-test-id="item-2"] .delivery',
        COST: '[data-test-id="item-2"] .cost'
      },
      THIRD: {
        DELIVERY: '[data-test-id="item-3"] .delivery',
        COST: '[data-test-id="item-3"] .cost',
        INFO: '[data-test-id="item-3"] .item-attributes-info'
      }
    }
  };

  var _default = (0, _emberCliPageObject.create)({
    visitDefault: (0, _emberCliPageObject.visitable)('/catalog/request-items'),
    visitITServiceCategory: (0, _emberCliPageObject.visitable)('/catalog/request-items?category=14'),
    visitAdobeSearch: (0, _emberCliPageObject.visitable)('/catalog/request-items?search=Adobe'),
    visitITServiceEmployeeSearch: (0, _emberCliPageObject.visitable)('/catalog/request-items?category=14&search=Employee'),
    visitErrorCategory: (0, _emberCliPageObject.visitable)('/catalog/request-items?category=404'),
    isFullEmptyStateVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.FUL_EMPTY_STATE),
    category: {
      count: (0, _emberCliPageObject.count)(SELECTORS.CATEGORY.LINK),
      firstCategoryText: (0, _emberCliPageObject.text)(SELECTORS.CATEGORY.FIRST),
      activeText: (0, _emberCliPageObject.text)(SELECTORS.CATEGORY.ACTIVE),
      title: (0, _emberCliPageObject.text)('#category-title'),
      mostPopularTitleVisible: (0, _emberCliPageObject.isVisible)('#most-popular'),
      ariaCurrentCount: (0, _emberCliPageObject.count)(SELECTORS.CATEGORY.CURRENT),
      ariaCurrentLinkText: (0, _emberCliPageObject.text)(SELECTORS.CATEGORY.CURRENT),
      linkClickable: (0, _emberCliPageObject.clickable)(SELECTORS.CATEGORY.HR_MANAGEMENT),
      isITServiceActive: (0, _emberCliPageObject.hasClass)('active', SELECTORS.CATEGORY.IT_SERVICE),
      facilitiesManagementClick: (0, _emberCliPageObject.clickable)(SELECTORS.CATEGORY.FACILITIES_MANAGEMENT)
    },
    search: {
      textBoxVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.SEARCH.INPUT),
      value: (0, _emberCliPageObject.value)(SELECTORS.SEARCH.INPUT),
      clearBtnVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.SEARCH.CLEAR),
      clearBtnHidden: (0, _emberCliPageObject.isHidden)(SELECTORS.SEARCH.CLEAR),
      clearBtnClickable: (0, _emberCliPageObject.clickable)(SELECTORS.SEARCH.CLEAR),
      fillSearch: (0, _emberCliPageObject.fillable)(SELECTORS.SEARCH.INPUT),
      keyUp: (0, _emberCliPageObject.triggerable)('keyup', SELECTORS.SEARCH.INPUT),
      otherResultsTitleVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.SEARCH.TITLE),
      otherResultsListVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.SEARCH.LIST)
    },
    item: {
      count: (0, _emberCliPageObject.count)(SELECTORS.ITEM.CARD),
      itemName: (0, _emberCliPageObject.text)(SELECTORS.ITEM.FIRST.NAME),
      deliveryText1: (0, _emberCliPageObject.text)(SELECTORS.ITEM.FIRST.DELIVERY),
      deliveryText2: (0, _emberCliPageObject.text)(SELECTORS.ITEM.SECOND.DELIVERY),
      deliveryText3: (0, _emberCliPageObject.text)(SELECTORS.ITEM.THIRD.DELIVERY),
      costText1: (0, _emberCliPageObject.text)(SELECTORS.ITEM.FIRST.COST),
      costText2: (0, _emberCliPageObject.text)(SELECTORS.ITEM.SECOND.COST),
      costText3: (0, _emberCliPageObject.text)(SELECTORS.ITEM.THIRD.COST),
      emptyHyphenText1: (0, _emberCliPageObject.text)(SELECTORS.ITEM.FIRST.HYPHEN),
      attributesText: (0, _emberCliPageObject.text)(SELECTORS.ITEM.THIRD.INFO),
      isTitleIdAvailable: (0, _emberCliPageObject.contains)(SELECTORS.TITLE),
      titleText: (0, _emberCliPageObject.text)(SELECTORS.TITLE),
      listLabel: (0, _emberCliPageObject.attribute)('aria-labelledby', SELECTORS.ITEM.LIST),
      emptyStateVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.EMPTY_STATE),
      emptyStateText: (0, _emberCliPageObject.text)(SELECTORS.EMPTY_STATE),
      emptyStateTitleText: (0, _emberCliPageObject.text)(SELECTORS.EMPTY_STATE_TITLE),
      mostPopularListCount: (0, _emberCliPageObject.count)("".concat(SELECTORS.ITEM.POPULAR, " ").concat(SELECTORS.ITEM.CARD)),
      isLoaderVisible: (0, _emberCliPageObject.isVisible)(SELECTORS.ITEM.LIST.LOADER),
      hasLabelInLoader: (0, _emberCliPageObject.attribute)('aria-label', SELECTORS.ITEM.LIST.LOADER),
      lazyLoaderExist: (0, _emberCliPageObject.isVisible)(SELECTORS.LAZY_LOADER),
      lazyLoaderRemoved: (0, _emberCliPageObject.isHidden)(SELECTORS.LAZY_LOADER),
      scrollList: (0, _emberCliPageObject.triggerable)('scroll', SELECTORS.MAIN_CONTAINER),
      list: (0, _emberCliPageObject.collection)(SELECTORS.ITEM.CARD, {
        name: (0, _emberCliPageObject.text)(SELECTORS.ITEM.NAME)
      })
    }
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-solutions/article", ["exports", "@ember/test-helpers", "freshservice/tests/pages/components/drag-sort-list", "ember-cli-page-object"], function (_exports, _testHelpers, _dragSortList, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var _default = (0, _emberCliPageObject.create)({
    externalNewForm: {
      exists: (0, _emberCliPageObject.isVisible)('.external-article-create-modal'),
      save: (0, _emberCliPageObject.clickable)('[data-test-id="external-article-form-submit"]'),
      cancel: (0, _emberCliPageObject.clickable)('.external-article-create-modal [data-test-id="modal-cancel"]'),
      // fields
      hasFieldTitle: (0, _emberCliPageObject.isVisible)('[data-test-field-name="title"]'),
      hasFieldUrl: (0, _emberCliPageObject.isVisible)('[data-test-field-name="url"]'),
      hasFieldCategoryId: (0, _emberCliPageObject.isVisible)('[data-test-field-name="categoryId"]'),
      hasFieldFolderId: (0, _emberCliPageObject.isVisible)('[data-test-field-name="folderId"]'),
      hasFieldAuthor: (0, _emberCliPageObject.isVisible)('[data-test-field-name="author"]'),
      hasFieldTags: (0, _emberCliPageObject.isVisible)('[data-test-field-name="tags"]'),
      hasFieldKeywords: (0, _emberCliPageObject.isVisible)('[data-test-field-name="keywords"]'),
      // errors
      hasErrorTitle: (0, _emberCliPageObject.isVisible)('[data-test-field-name="title"] .form-field--errors'),
      hasErrorUrl: (0, _emberCliPageObject.isVisible)('[data-test-field-name="url"] .form-field--errors'),
      hasErrorCategoryId: (0, _emberCliPageObject.isVisible)('[data-test-field-name="categoryId"] .form-field--errors'),
      hasErrorFolderId: (0, _emberCliPageObject.isVisible)('[data-test-field-name="folderId"] .form-field--errors'),
      // inputs
      fillTitle: (0, _emberCliPageObject.fillable)('[data-test-field-name="title"] input'),
      fillUrl: (0, _emberCliPageObject.fillable)('[data-test-field-name="url"] input')
    },
    externalShowPage: {
      exists: (0, _emberCliPageObject.isVisible)('.external-article-show-modal'),
      clickEdit: (0, _emberCliPageObject.clickable)('[data-test-id="edit-external-article"]'),
      clickDelete: (0, _emberCliPageObject.clickable)('[data-test-id="delete-external-article"]'),
      hasExternaLink: (0, _emberCliPageObject.isVisible)('[data-test-id="exteral-article-link"]'),
      hasDeleteButton: (0, _emberCliPageObject.isVisible)('[data-test-id="delete-external-article"]'),
      hasEditButton: (0, _emberCliPageObject.isVisible)('[data-test-id="edit-external-article"]'),
      confirmDeleteModal: {
        exists: (0, _emberCliPageObject.isVisible)('.article-delete-confirm-modal'),
        submit: (0, _emberCliPageObject.clickable)('.article-delete-confirm-modal [data-test-id="modal-submit"]')
      },
      // properties
      titleText: (0, _emberCliPageObject.text)('[data-test-id="title"]'),
      urlText: (0, _emberCliPageObject.text)('[data-test-id="url"]'),
      categoryText: (0, _emberCliPageObject.text)('[data-test-id="category"]'),
      folderText: (0, _emberCliPageObject.text)('[data-test-id="folder"]'),
      authorText: (0, _emberCliPageObject.text)('[data-test-id="author"]'),
      tagsText: (0, _emberCliPageObject.text)('[data-test-id="tags"]'),
      keywordsText: (0, _emberCliPageObject.text)('[data-test-id="keywords"]')
    },
    externalEditForm: {
      exists: (0, _emberCliPageObject.isVisible)('.external-article-edit-modal'),
      cancel: (0, _emberCliPageObject.clickable)('.external-article-edit-modal [data-test-id="modal-cancel"]')
    },
    newForm: {
      visit: (0, _emberCliPageObject.visitable)('/solutions/articles/new'),
      exists: (0, _emberCliPageObject.isVisible)('[data-test-id="article-form"]'),
      save: (0, _emberCliPageObject.clickable)('[data-test-id="article-save-button"]'),
      cancel: (0, _emberCliPageObject.clickable)('[data-test-id="cancel-article-create"]'),
      // fields
      hasFieldTitle: (0, _emberCliPageObject.isVisible)('[data-test-field-name="title"]'),
      hasFieldDescription: (0, _emberCliPageObject.isVisible)('[data-test-field-name="description"]'),
      hasFieldCategoryId: (0, _emberCliPageObject.isVisible)('[data-test-field-name="categoryId"]'),
      hasFieldFolderId: (0, _emberCliPageObject.isVisible)('[data-test-field-name="folderId"]'),
      hasFieldType: (0, _emberCliPageObject.isVisible)('[data-test-field-name="articleType"]'),
      hasFieldAuthor: (0, _emberCliPageObject.isVisible)('[data-test-field-name="author"]'),
      hasFieldReviewDate: (0, _emberCliPageObject.isVisible)('[data-test-field-name="reviewDate"]'),
      hasFieldTags: (0, _emberCliPageObject.isVisible)('[data-test-field-name="tags"]'),
      hasFieldKeywords: (0, _emberCliPageObject.isVisible)('[data-test-field-name="keywords"]'),
      hasFieldAttachments: (0, _emberCliPageObject.isVisible)('[data-test-id="article-form-attached-files"]'),
      // errors
      hasErrorTitle: (0, _emberCliPageObject.isVisible)('[data-test-field-name="title"] .form-field--errors'),
      hasErrorDescription: (0, _emberCliPageObject.isVisible)('[data-test-field-name="description"] .form-field--errors'),
      hasErrorCategoryId: (0, _emberCliPageObject.isVisible)('[data-test-field-name="categoryId"] .form-field--errors'),
      hasErrorFolderId: (0, _emberCliPageObject.isVisible)('[data-test-field-name="folderId"] .form-field--errors'),
      // inputs
      fillTitle: (0, _emberCliPageObject.fillable)('[data-test-field-name="title"] input'),
      fillDescription: (0, _emberCliPageObject.fillable)('.froala-editor-container .fr-element'),
      // code insert
      codeInsert: {
        clickInsertCode: (0, _emberCliPageObject.clickable)('[data-cmd="codeInsert"]'),
        viewCode: (0, _emberCliPageObject.clickable)('[data-cmd="html"]'),
        viewCodeActive: (0, _emberCliPageObject.hasClass)('fr-active', '[data-cmd="html"]'),
        insertedCodeCount: (0, _emberCliPageObject.count)('[rel="highlighter"]'),
        modalExists: (0, _emberCliPageObject.isVisible)('.froala-insert-code-modal'),
        submit: (0, _emberCliPageObject.clickable)('.froala-submit-code-insert'),
        fillCode: (0, _emberCliPageObject.fillable)('.froala-insert-code-modal textarea')
      },
      codeView: {
        viewCode: (0, _emberCliPageObject.clickable)('[data-cmd="html"]'),
        fillCode: (0, _emberCliPageObject.fillable)('.fr-code')
      },
      // attachments
      addAttachment: function addAttachment(fileName) {
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return (0, _testHelpers.triggerEvent)('input#attach_file', 'change', {
                    files: [new Blob([fileName])]
                  });

                case 2:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }))();
      },
      removeAttachment: (0, _emberCliPageObject.collection)('.attachment-list .list-file-item', {
        deleteFile: (0, _emberCliPageObject.clickable)('.delete-file')
      })
    },
    editForm: {
      cancel: (0, _emberCliPageObject.clickable)('[data-test-id="goto-article-show-page"]'),
      fillTitle: (0, _emberCliPageObject.fillable)('[data-test-field-name="title"] input')
    },
    editPage: {
      visit: (0, _emberCliPageObject.visitable)('/solutions/articles/:id/edit')
    },
    showPage: {
      visit: (0, _emberCliPageObject.visitable)('/solutions/articles/:id'),
      openAccordion: (0, _emberCliPageObject.clickable)('[data-test-id="ui-accordion-trigger"]'),
      sendForApprovalExists: (0, _emberCliPageObject.isVisible)('.btn-send-for-approval'),
      sendForApproval: (0, _emberCliPageObject.clickable)('.btn-send-for-approval'),
      approvalActionsExists: (0, _emberCliPageObject.isVisible)('.article-approval-actions'),
      clickApprovalActions: (0, _emberCliPageObject.clickable)('[data-test-id="article-approval-actions"]'),
      approveArticle: (0, _emberCliPageObject.clickable)('[data-test-id="approve-article-btn"]'),
      addEditsToArticle: (0, _emberCliPageObject.clickable)('[data-test-id="edits-required-btn"]'),
      approveAndPublishArticle: (0, _emberCliPageObject.clickable)('[data-test-id="approve-and-publish-article-btn"]'),
      addEditsModal: (0, _emberCliPageObject.isVisible)('.article-reject-modal'),
      cancelEdits: (0, _emberCliPageObject.clickable)('.article-reject-modal [data-test-id="modal-cancel"]'),
      submitEdits: (0, _emberCliPageObject.clickable)('.article-reject-modal [data-test-id="modal-submit"]'),
      addEditsError: (0, _emberCliPageObject.count)('.article-reject-modal .form-field--errors'),
      addEdits: (0, _emberCliPageObject.fillable)('.article-reject-modal [name="remark"]'),
      publishArticleVisible: (0, _emberCliPageObject.isVisible)('.btn-article-publish'),
      publishArticle: (0, _emberCliPageObject.clickable)('.btn-article-publish'),
      publishArticleExists: (0, _emberCliPageObject.isVisible)('.btn-article-publish'),
      articleActionsExists: (0, _emberCliPageObject.isVisible)('.article-actions'),
      clickArticleActions: (0, _emberCliPageObject.clickable)('[data-test-id="article-actions"]'),
      deleteArticleModal: (0, _emberCliPageObject.isVisible)('.article-delete-confirm-modal'),
      deleteArticleModalConfirm: (0, _emberCliPageObject.clickable)('.article-delete-confirm-modal [data-test-id="modal-submit"]'),
      // attachments
      hasAttachments: (0, _emberCliPageObject.count)('.attachment-list .list-file-item'),
      articleProperties: (0, _emberCliPageObject.isVisible)('[data-test-id="article-properties-collapsible"]'),
      articleAnalytics: (0, _emberCliPageObject.isVisible)('[data-test-id="article-analytics-collapsible"]'),
      properties: {
        category: (0, _emberCliPageObject.text)('[data-test-id="goto-category-articles-list"]'),
        folder: (0, _emberCliPageObject.text)('[data-test-id="goto-folder-articles-list"]'),
        author: (0, _emberCliPageObject.text)('[data-test-id="article-author"]'),
        type: (0, _emberCliPageObject.text)('[data-test-id="article-type"]'),
        tags: (0, _emberCliPageObject.text)('[data-test-id="article-tags"]'),
        keywords: (0, _emberCliPageObject.text)('[data-test-id="article-keywords"]'),
        reviewDate: (0, _emberCliPageObject.text)('[data-test-id="article-review-date"]'),
        status: (0, _emberCliPageObject.text)('[data-test-id="article-status"]'),
        title: (0, _emberCliPageObject.text)('[data-test-id="article-title"]'),
        description: (0, _emberCliPageObject.text)('[data-test-id="article-content"]')
      }
    },
    approvals: {
      collapsibleExists: (0, _emberCliPageObject.isVisible)('[data-test-id="article-approvers-collapsible"]'),
      openCollapsible: (0, _emberCliPageObject.clickable)('[data-test-id="article-approvers-collapsible"] .ui-accordion-header-trigger'),
      count: (0, _emberCliPageObject.count)('.article-approver'),
      rejectedVisible: (0, _emberCliPageObject.isVisible)('[data-test-id="rejected-hint"]'),
      viewComments: (0, _emberCliPageObject.clickable)('[data-test-id="rejected-hint"]'),
      comments: (0, _emberCliPageObject.text)('.ember-modal-body'),
      commentsModalExists: (0, _emberCliPageObject.isVisible)('.article-show-requested-edits-modal')
    },
    analytics: {
      propertiesCount: (0, _emberCliPageObject.count)('.article-analytics .article-property'),
      resetButtonExists: (0, _emberCliPageObject.isVisible)('[data-test-id="article-analytics-reset-button"]'),
      resetModalExists: (0, _emberCliPageObject.isVisible)('.article-reset-analytics-modal'),
      clickReset: (0, _emberCliPageObject.clickable)('[data-test-id="article-analytics-reset-button"]'),
      confirmReset: (0, _emberCliPageObject.clickable)('.article-reset-analytics-modal [data-test-id="modal-submit"]')
    },
    reordering: {
      list: (0, _emberCliPageObject.collection)('.dragSortList .dragSortItem', {
        text: (0, _emberCliPageObject.text)('.ember-alert')
      }),
      lib: _objectSpread(_objectSpread({}, (0, _dragSortList.dragSortList)({})), {}, {
        scope: '.dragSortList'
      }),
      scrollList: function scrollList() {
        (0, _testHelpers.find)('.infinity-loader').scrollIntoView();
      },
      listCount: (0, _emberCliPageObject.count)('.article-list .dragSortItem'),
      submit: (0, _emberCliPageObject.clickable)('.article-reorder-modal [data-test-id="modal-submit"]')
    }
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-solutions/category", ["exports", "freshservice/tests/pages/components/drag-sort-list", "ember-cli-page-object"], function (_exports, _dragSortList, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var _default = (0, _emberCliPageObject.create)({
    visitIndexPage: (0, _emberCliPageObject.visitable)('/solutions/categories/:id'),
    newForm: {
      exists: (0, _emberCliPageObject.isVisible)('[data-test-id="category-form"]'),
      // errors
      hasErrorName: (0, _emberCliPageObject.isVisible)('[data-test-field-name="name"] .form-field--errors'),
      // fields
      hasFieldName: (0, _emberCliPageObject.isVisible)('[data-test-field-name="name"] input'),
      hasFieldDescription: (0, _emberCliPageObject.isVisible)('[data-test-field-name="description"] textarea'),
      // inputs
      fillName: (0, _emberCliPageObject.fillable)('[data-test-field-name="name"] input'),
      fillDescription: (0, _emberCliPageObject.fillable)('[data-test-field-name="description"] textarea'),
      // get values
      nameValue: (0, _emberCliPageObject.value)('[data-test-field-name="name"] input'),
      descriptionValue: (0, _emberCliPageObject.value)('[data-test-field-name="description"] textarea'),
      // buttons
      save: (0, _emberCliPageObject.clickable)('[data-test-id="category-form-submit"]'),
      cancel: (0, _emberCliPageObject.clickable)('[data-test-id="modal-cancel"]')
    },
    editForm: {
      exists: (0, _emberCliPageObject.isVisible)('[data-test-id="category-form"]'),
      fillDescription: (0, _emberCliPageObject.fillable)('[data-test-field-name="description"] textarea'),
      // buttons
      save: (0, _emberCliPageObject.clickable)('[data-test-id="category-form-submit"]'),
      cancel: (0, _emberCliPageObject.clickable)('[data-test-id="modal-cancel"]')
    },
    actions: {
      clickDelete: (0, _emberCliPageObject.clickable)('[data-test-id="category-delete-button"]'),
      clickEdit: (0, _emberCliPageObject.clickable)('[data-test-id="category-edit-button"]'),
      exists: (0, _emberCliPageObject.isVisible)('.category-actions'),
      itemsCount: (0, _emberCliPageObject.count)('.category-actions .btn'),
      deleteModal: {
        exists: (0, _emberCliPageObject.isVisible)('.category-delete-confirm-modal'),
        cancel: (0, _emberCliPageObject.clickable)('.category-delete-confirm-modal [data-test-id="modal-cancel"]'),
        submit: (0, _emberCliPageObject.clickable)('.category-delete-confirm-modal [data-test-id="modal-submit"]'),
        confirmName: (0, _emberCliPageObject.fillable)('[data-test-field-name="delete-category-confirm-input"] input'),
        invalidName: (0, _emberCliPageObject.count)('.category-name-validation .form-field--errors')
      }
    },
    reordering: {
      lib: _objectSpread(_objectSpread({}, (0, _dragSortList.dragSortList)({}, '.category-header')), {}, {
        scope: '#category-sorting'
      }),
      list: (0, _emberCliPageObject.collection)('.category-list .category-item', {
        text: (0, _emberCliPageObject.text)('.category-title'),
        click: (0, _emberCliPageObject.clickable)('.category-header')
      }),
      compareList: function compareList(orginalList, sortedList) {
        return JSON.stringify(orginalList) === JSON.stringify(sortedList);
      }
    }
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-solutions/common", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var _default = (0, _emberCliPageObject.create)({
    url: {
      newArticle: '/solutions/articles/new',
      allArticles: '/solutions/articles/filters/all_articles',
      approvals: '/solutions/approvals',
      insights: '/solutions/insights',
      showPage: function showPage(id) {
        return "/solutions/articles/".concat(id);
      },
      editPage: function editPage(id) {
        return "/solutions/articles/".concat(id, "/edit");
      },
      categoryIndex: function categoryIndex(categoryId) {
        return "/solutions/categories/".concat(categoryId);
      },
      categoryFolderIndex: function categoryFolderIndex(categoryId, folderId) {
        return "/solutions/categories/".concat(categoryId, "/folders/").concat(folderId);
      }
    },
    getRange: function getRange(entities, propertyName) {
      var range = entities.map(function (entity) {
        return entity[propertyName];
      });
      return {
        min: Math.max.apply(Math, range),
        max: Math.min.apply(Math, range)
      };
    },
    moduleEntities: (0, _emberCliPageObject.count)('.solution-modules-dropdown li'),
    categoryTableExists: (0, _emberCliPageObject.isVisible)('.category-table'),
    folderTableExists: (0, _emberCliPageObject.isVisible)('.folder-table'),
    visitIndexPage: (0, _emberCliPageObject.visitable)('/solutions/articles'),
    allArticles: {
      visitPage: (0, _emberCliPageObject.visitable)('/solutions/articles/filters/all_articles')
    },
    insights: {
      visitPage: (0, _emberCliPageObject.visitable)('/solutions/insights')
    },
    approvals: {
      visitPage: (0, _emberCliPageObject.visitable)('/solutions/approvals'),
      assignedCount: (0, _emberCliPageObject.count)('.awaiting-approvals .ui-list-item'),
      list: (0, _emberCliPageObject.collection)('.awaiting-approvals .ui-list-item', {
        approve: (0, _emberCliPageObject.clickable)('button')
      })
    },
    sidebar: {
      exists: (0, _emberCliPageObject.isVisible)('.page-sidebar'),
      toggle: (0, _emberCliPageObject.clickable)('[data-test-id="toggle-sidebar-button"]'),
      categories: (0, _emberCliPageObject.collection)('.category-list .category-header', {
        getFolders: function getFolders() {
          // should perform this only with once active category, otherwise gives wrong results
          return (0, _emberCliPageObject.create)({
            folders: (0, _emberCliPageObject.collection)('.folder-list .folder-header')
          });
        }
      }),
      // for checking single category and folder
      openCategory: (0, _emberCliPageObject.clickable)('.category-item'),
      categoryCount: (0, _emberCliPageObject.count)('.category-item'),
      folderCount: (0, _emberCliPageObject.count)('.folder-header'),
      activeCategory: (0, _emberCliPageObject.text)('.category-header.active .category-title'),
      activeFolder: (0, _emberCliPageObject.text)('.folder-header.active .folder-title')
    },
    table: {
      header: (0, _emberCliPageObject.collection)('.articles-relationship-title span'),
      filterHeader: (0, _emberCliPageObject.collection)('.articles-filter-dropdown-title span'),
      columns: (0, _emberCliPageObject.collection)('.lt-body tr', {
        views: (0, _emberCliPageObject.text)('td', {
          at: 5
        })
      }),
      articlesCount: (0, _emberCliPageObject.count)('.lt-body tr'),
      clickViewColumn: (0, _emberCliPageObject.clickable)('.cell-article-header-views'),
      clickNextPage: (0, _emberCliPageObject.clickable)('.pagination__next'),
      clickPrevPage: (0, _emberCliPageObject.clickable)('.pagination__previous'),
      paginationExists: (0, _emberCliPageObject.count)('[data-test-id="results-pagination"]'),
      selectAll: (0, _emberCliPageObject.clickable)('.articles-bulk-actions label'),
      selectAllVisible: (0, _emberCliPageObject.isVisible)('[data-test-id="solutions-select-all"]'),
      clickFirstArticle: (0, _emberCliPageObject.clickable)('.lt-body tr:first-child td a'),
      emptyStateVisible: (0, _emberCliPageObject.isVisible)('.empty-state'),
      activePageNo: (0, _emberCliPageObject.text)('.pagination__link--active'),
      activePageVisible: (0, _emberCliPageObject.isVisible)('.pagination__link--active'),
      selectArticleCount: (0, _emberCliPageObject.collection)('.table-checkbox input'),
      articles: (0, _emberCliPageObject.collection)('.lt-body tr', {
        checkBox: (0, _emberCliPageObject.clickable)('.table-checkbox input'),
        select: (0, _emberCliPageObject.clickable)('a[data-test-id="goto-article-show-page"]'),
        selectExternal: (0, _emberCliPageObject.clickable)('a[data-test-id="view-article-external-button"]')
      }),
      selectArticles: function selectArticles(articles, count) {
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var i;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  articles = articles.filter(function (article, index) {
                    return index < count;
                  });
                  i = 0;

                case 2:
                  if (!(i < count)) {
                    _context.next = 8;
                    break;
                  }

                  _context.next = 5;
                  return articles[i].checkBox();

                case 5:
                  i++;
                  _context.next = 2;
                  break;

                case 8:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }))();
      },
      currentPageCount: function currentPageCount(articles, currentPage) {
        return articles.length - 30 * (+currentPage - 1);
      },
      search: {
        articles: (0, _emberCliPageObject.fillable)('.search-text-box'),
        resultsVisible: (0, _emberCliPageObject.isVisible)('.search-results'),
        noResults: (0, _emberCliPageObject.count)('.search-results li span'),
        resultsCount: (0, _emberCliPageObject.count)('.search-results li'),
        close: (0, _emberCliPageObject.clickable)('.close-icon'),
        pressEscape: (0, _emberCliPageObject.triggerable)('keydown', '.search-text-box', {
          eventProperties: {
            keyCode: 27
          }
        })
      },
      bulkActions: {
        exists: (0, _emberCliPageObject.isVisible)('.articles-bulk-actions'),
        count: (0, _emberCliPageObject.count)('.articles-bulk-actions-options button'),
        // buttons
        clickChangeAuthor: (0, _emberCliPageObject.clickable)('[data-test-id="sol-change-author-btn"]'),
        clickChangeStatus: (0, _emberCliPageObject.clickable)('[data-test-id="sol-change-status-btn"]'),
        clickChangeFolder: (0, _emberCliPageObject.clickable)('[data-test-id="sol-change-folder-btn"]'),
        clickBulkDelete: (0, _emberCliPageObject.clickable)('[data-test-id="sol-bulk-delete-btn"]'),
        // confirm action
        confirmChangeAuthor: (0, _emberCliPageObject.clickable)('[data-test-id="change-author-button"]'),
        confirmChangeStatus: (0, _emberCliPageObject.clickable)('[data-test-id="change-status-button"]'),
        confirmChangeFolder: (0, _emberCliPageObject.clickable)('[data-test-id="change-folder-button"]'),
        confirmBulkDelete: (0, _emberCliPageObject.clickable)('.solution-delete-confirm-modal [data-test-id="modal-submit"]'),
        // radio
        selectDraftStatus: (0, _emberCliPageObject.clickable)('[data-test-field-name="status"] [value="1"]'),
        // modals
        modalCancel: (0, _emberCliPageObject.clickable)('[data-test-id="modal-cancel"]'),
        changeAuthorModal: (0, _emberCliPageObject.isVisible)('.solution-change-author-modal'),
        changeStatusModal: (0, _emberCliPageObject.isVisible)('.solution-change-status-modal'),
        changeFolderModal: (0, _emberCliPageObject.isVisible)('.solution-change-folder-modal'),
        deleteArticlesModal: (0, _emberCliPageObject.isVisible)('.solution-delete-confirm-modal')
      }
    }
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-solutions/folder", ["exports", "freshservice/tests/pages/components/drag-sort-list", "ember-cli-page-object"], function (_exports, _dragSortList, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var _default = (0, _emberCliPageObject.create)({
    visitIndexPage: (0, _emberCliPageObject.visitable)('/solutions/categories/:category_id/folders/:folder_id'),
    newForm: {
      exists: (0, _emberCliPageObject.isVisible)('[data-test-id="folder-form"]'),
      // errors
      hasErrorName: (0, _emberCliPageObject.isVisible)('[data-test-field-name="name"] .form-field--errors'),
      hasErrorApproverIds: (0, _emberCliPageObject.isVisible)('[data-test-field-name="approvalSettings.approverIds"] .form-field--errors'),
      hasErrorApprovalType: (0, _emberCliPageObject.isVisible)('[data-test-field-name="approvalSettings.approvalType"] .form-field--errors'),
      // fields
      hasFieldName: (0, _emberCliPageObject.isVisible)('[data-test-field-name="name"] input'),
      hasFieldDescription: (0, _emberCliPageObject.isVisible)('[data-test-field-name="description"] textarea'),
      hasFieldCategoryId: (0, _emberCliPageObject.isVisible)('[data-test-field-name="categoryId"]'),
      hasFieldManageByGroupIds: (0, _emberCliPageObject.isVisible)('[data-test-field-name="manageByGroupIds"]'),
      hasFieldVisibility: (0, _emberCliPageObject.isVisible)('[data-test-field-name="visibility"]'),
      hasFieldDepartmentIds: (0, _emberCliPageObject.isVisible)('[data-test-field-name="departmentIds"]'),
      hasFieldGroupIds: (0, _emberCliPageObject.isVisible)('[data-test-field-name="groupIds"]'),
      hasFieldRequesterGroupIds: (0, _emberCliPageObject.isVisible)('[data-test-field-name="requesterGroupIds"]'),
      hasFieldApproverIds: (0, _emberCliPageObject.isVisible)('[data-test-field-name="approvalSettings.approverIds"]'),
      hasFieldApprovalType: (0, _emberCliPageObject.count)('[data-test-field-name="approvalSettings.approvalType"]'),
      // inputs
      fillName: (0, _emberCliPageObject.fillable)('[data-test-field-name="name"] input'),
      fillDescription: (0, _emberCliPageObject.fillable)('[data-test-field-name="description"] textarea'),
      // get values
      getName: (0, _emberCliPageObject.value)('[data-test-field-name="name"] input'),
      getDescription: (0, _emberCliPageObject.value)('[data-test-field-name="description"] textarea'),
      // buttons
      save: (0, _emberCliPageObject.clickable)('[data-test-id="folder-form-submit"]'),
      cancel: (0, _emberCliPageObject.clickable)('[data-test-id="modal-cancel"]'),
      // form (checkbox, radio)
      addApproval: (0, _emberCliPageObject.clickOnText)('[data-test-field-name="hasApproval"] label'),
      selectApprovalTypeAll: (0, _emberCliPageObject.clickable)('[data-test-field-name="approvalSettings.approvalType"] [value="1"]'),
      selectApprovalTypeAny: (0, _emberCliPageObject.clickable)('[data-test-field-name="approvalSettings.approvalType"] [value="4"]')
    },
    actions: {
      exists: (0, _emberCliPageObject.isVisible)('.folder-actions'),
      itemsCount: (0, _emberCliPageObject.count)('.folder-actions .ember-basic-dropdown-content li'),
      deleteModal: {
        confirmName: (0, _emberCliPageObject.fillable)('[data-test-field-name="delete-folder-confirm-input"] input'),
        invalidName: (0, _emberCliPageObject.count)('.folder-name-validation .form-field--errors'),
        exists: (0, _emberCliPageObject.isVisible)('.folder-delete-confirm-modal'),
        submit: (0, _emberCliPageObject.clickable)('.folder-delete-confirm-modal [data-test-id="modal-submit"]'),
        cancel: (0, _emberCliPageObject.clickable)('.folder-delete-confirm-modal [data-test-id="modal-cancel"]')
      }
    },
    reordering: {
      lib: _objectSpread(_objectSpread({}, (0, _dragSortList.dragSortList)({}, '.drag-handle')), {}, {
        scope: '.dragSortList'
      }),
      list: (0, _emberCliPageObject.collection)('.folder-list .dragSortItem', {
        text: (0, _emberCliPageObject.text)('.folder-title')
      }),
      compareList: function compareList(orginalList, sortedList) {
        return JSON.stringify(orginalList) === JSON.stringify(sortedList);
      }
    }
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-tickets/associated-asset", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = (0, _emberCliPageObject.create)({
    assetTabContentVisible: (0, _emberCliPageObject.isVisible)('[data-test-id="linked-assets-tab-container"]'),
    editAssetModalExists: (0, _emberCliPageObject.isVisible)('[data-test-id="edit-asset-details-form"]'),
    softwareAssetsCount: (0, _emberCliPageObject.count)('[data-test-asset-type="cmdb_application"]'),
    catalogItemsCount: (0, _emberCliPageObject.count)('[data-test-asset-type="catalog_item"]'),
    assetsCount: (0, _emberCliPageObject.count)('[data-test-id="linked-assets-list"] [data-test-id="asset-details"]'),
    clickRemoveAssociatedAsset: (0, _emberCliPageObject.clickable)("[data-test-id='remove-asset']"),
    clickEditAssociatedAsset: (0, _emberCliPageObject.clickable)("[data-test-id='edit-asset']"),
    clickUpdateFulfilledAsset: (0, _emberCliPageObject.clickable)("[data-test-id='update-fulfilled-asset']"),
    isRemoveAssociatedAssetBtnDisabled: (0, _emberCliPageObject.is)(':disabled', '[data-test-id="remove-asset"]'),
    assetStateFieldExist: (0, _emberCliPageObject.isVisible)('[data-test-field-name="assetState"]'),
    departmentFieldExist: (0, _emberCliPageObject.isVisible)('[data-test-field-name="departmentId"]'),
    userFieldExist: (0, _emberCliPageObject.isVisible)('[data-test-field-name="userId"]'),
    assignedOnFieldExist: (0, _emberCliPageObject.isVisible)('[data-test-field-name="assignedOn"]'),
    stageFieldExist: (0, _emberCliPageObject.isVisible)('[data-test-field-name="stage"]'),
    softwareFieldExist: (0, _emberCliPageObject.isVisible)('[data-test-field-name="software"]'),
    licenseFieldExist: (0, _emberCliPageObject.isVisible)('[data-test-field-name="license"]')
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-tickets/conversation", ["exports", "@ember/test-helpers", "ember-cli-page-object"], function (_exports, _testHelpers, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var _default = (0, _emberCliPageObject.create)({
    conversationActionsExists: (0, _emberCliPageObject.isVisible)('[data-test-id="conversation-actions-container"]'),
    conversationActions: {
      openReplyEditor: (0, _emberCliPageObject.clickable)('[data-test-id="ticket-reply-btn"]'),
      openForwardEditor: (0, _emberCliPageObject.clickable)('[data-test-id="ticket-forward-btn"]'),
      openAddNoteEditor: (0, _emberCliPageObject.clickable)('[data-test-id="ticket-add-note-btn"]'),
      replyBtnExists: (0, _emberCliPageObject.isVisible)('[data-test-id="ticket-reply-btn"]'),
      forwardBtnExists: (0, _emberCliPageObject.isVisible)('[data-test-id="ticket-forward-btn"]'),
      addNoteBtnExists: (0, _emberCliPageObject.isVisible)('[data-test-id="ticket-add-note-btn"]'),
      triggerReplyEditor: (0, _emberCliPageObject.clickable)('[data-test-id="ticket-reply-option"]'),
      triggerForwardEditor: (0, _emberCliPageObject.clickable)('[data-test-id="ticket-forward-option"]'),
      triggerAddNoteEditor: (0, _emberCliPageObject.clickable)('[data-test-id="ticket-add-note-option"]'),
      replyOptionExists: (0, _emberCliPageObject.isVisible)('[data-test-id="ticket-reply-option"]'),
      forwardOptionExists: (0, _emberCliPageObject.isVisible)('[data-test-id="ticket-forward-option"]'),
      addNoteOptionExists: (0, _emberCliPageObject.isVisible)('[data-test-id="ticket-add-note-option"]'),
      replyEditorExists: (0, _emberCliPageObject.isVisible)('[data-test-id="reply-editor"]'),
      forwardEditorExists: (0, _emberCliPageObject.isVisible)('[data-test-id="forward-editor"]'),
      addNoteEditorExists: (0, _emberCliPageObject.isVisible)('[data-test-id="note-editor"]')
    },
    editorFields: {
      clickChangeActionsDropdown: (0, _emberCliPageObject.clickable)('[data-test-id="change-action-dropdown"]'),
      openCcField: (0, _emberCliPageObject.clickable)('[data-test-id="show-cc-btn"]'),
      openBccField: (0, _emberCliPageObject.clickable)('[data-test-id="show-bcc-btn"]'),
      clearCcField: (0, _emberCliPageObject.clickable)('[data-test-id="clear-cc-btn"]'),
      clearBccField: (0, _emberCliPageObject.clickable)('[data-test-id="clear-bcc-btn"]'),
      ccField: (0, _emberCliPageObject.isVisible)('[data-test-id="cc-field"]'),
      bccField: (0, _emberCliPageObject.isVisible)('[data-test-id="bcc-field"]'),
      hasCcValue: (0, _emberCliPageObject.count)('[data-test-id="cc-field"] .cc-field ul li.ember-power-select-multiple-option'),
      hasBccValue: (0, _emberCliPageObject.count)('[data-test-id="bcc-field"] .bcc-field ul li.ember-power-select-multiple-option'),
      replySubmit: (0, _emberCliPageObject.clickable)('[data-test-id="reply-submit"]'),
      replyCancel: (0, _emberCliPageObject.clickable)('[data-test-id="reply-cancel"]'),
      forwardSubmit: (0, _emberCliPageObject.clickable)('[data-test-id="forward-submit"]'),
      forwardCancel: (0, _emberCliPageObject.clickable)('[data-test-id="forward-cancel"]'),
      noteSubmit: (0, _emberCliPageObject.clickable)('[data-test-id="note-submit"]'),
      noteCancel: (0, _emberCliPageObject.clickable)('[data-test-id="note-cancel"]'),
      sendAndSetStatusDropdown: (0, _emberCliPageObject.isVisible)('[data-test-id=send-and-set-status-dropdown]'),
      sendAndSetStatusBtn: (0, _emberCliPageObject.clickable)('[data-test-id=send-and-set-status-button]'),
      changeNoteTypeDropdownExists: (0, _emberCliPageObject.isVisible)('[data-test-field-name=change-note-type]'),
      replySubmitDisabled: (0, _emberCliPageObject.hasClass)("disabled", '[data-test-id="reply-submit"]'),
      forwardSubmitDisabled: (0, _emberCliPageObject.hasClass)("disabled", '[data-test-id="forward-submit"]'),
      noteSubmitDisabled: (0, _emberCliPageObject.hasClass)("disabled", '[data-test-id="note-submit"]'),
      sendAndSetStatusBtnDisabled: (0, _emberCliPageObject.hasClass)("disabled", '[data-test-id="send-and-set-status-button"]'),
      satisficationSurveyChkboxVisible: (0, _emberCliPageObject.isVisible)('[data-test-id="satisfication-survey-chkbox"]'),
      surveyMonkeyChkboxVisible: (0, _emberCliPageObject.isVisible)('[data-test-id="survey-monkey-chkbox"]'),
      surveySeparator: (0, _emberCliPageObject.isVisible)('.vertical-separator[data-test-id="both-survey-separator"]')
    },
    attachments: {
      hasAttachments: (0, _emberCliPageObject.count)('.tkt-editor-attachment-list .attachment-list.valid-size-file-list .list-file-item'),
      hasMaxSizeAttachments: (0, _emberCliPageObject.count)('.tkt-editor-attachment-list .attachment-list.max-size-file-list .list-file-item'),
      hasSizeError: (0, _emberCliPageObject.isVisible)('[data-test-id="cumulative-size-error"] .size-error-text'),
      addAttachment: function addAttachment(fileObject) {
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return (0, _testHelpers.triggerEvent)('input#attach_file', 'change', {
                    files: [new Blob([fileObject])]
                  });

                case 2:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }))();
      },
      removeAttachment: (0, _emberCliPageObject.clickable)('.tkt-editor-attachment-list .attachment-list .list-file-item .delete-file') // removeAttachment: collection('.tkt-editor-attachment-list .attachment-list .list-file-item', {
      // 	deleteFile: clickable('.delete-file')
      // })

    },
    codeInsert: {
      clickInsertCode: (0, _emberCliPageObject.clickable)('[data-cmd="codeInsert"]'),
      viewCode: (0, _emberCliPageObject.clickable)('[data-cmd="html"]'),
      viewCodeActive: (0, _emberCliPageObject.hasClass)('fr-active', '[data-cmd="html"]'),
      insertedCodeCount: (0, _emberCliPageObject.count)('[rel="highlighter"]'),
      modalExists: (0, _emberCliPageObject.isVisible)('.froala-insert-code-modal'),
      submit: (0, _emberCliPageObject.clickable)('.froala-submit-code-insert'),
      fillCode: (0, _emberCliPageObject.fillable)('.froala-insert-code-modal textarea')
    },
    propertiesDropdownExpanded: (0, _emberCliPageObject.isVisible)('.ui-accordion-item-expanded', {
      scope: '.tcpr-prop-section'
    }),
    propertiesDropdown: (0, _emberCliPageObject.text)('[data-test-field-name]:first-of-type .ember-power-select-trigger', {
      scope: '.tcpr-prop-section'
    }),
    isScenarioButtonVisible: (0, _emberCliPageObject.isVisible)('.execute-scenario-new'),
    watchingSection: (0, _emberCliPageObject.hasClass)('watching', '[data-test-ticket-watcher-icon]'),
    watcherSectionVisible: (0, _emberCliPageObject.isVisible)('.ember-power-select-trigger-multiple-input'),
    loadMoreConversations: (0, _emberCliPageObject.isVisible)('[data-test-id="load-more-conversations"]'),
    conversationsCount: (0, _emberCliPageObject.count)('.ticket-conversation-card'),
    scenarioVisible: (0, _emberCliPageObject.isVisible)('.execute-scenario-modal-header'),
    addTimeModelVisible: (0, _emberCliPageObject.isVisible)('.ember-modal-header'),
    addTimeModelHeaderText: (0, _emberCliPageObject.text)('.ember-modal-header h2'),
    activeNavItem: (0, _emberCliPageObject.attribute)('id', '.active[data-test-multitab-navitem]')
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-tickets/detail", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = (0, _emberCliPageObject.create)({
    // Subject fields
    subjectContainerExists: (0, _emberCliPageObject.isVisible)('[data-test-id="tickets-subject-container"]'),
    ccEmailListExist: (0, _emberCliPageObject.isVisible)('[data-test-id="tickets-cc-emails-list"]'),
    ticketIcon: (0, _emberCliPageObject.isVisible)('[data-test-id="module-icon"]'),
    ticketSubject: (0, _emberCliPageObject.isVisible)('[data-test-id="subject-text"]'),
    ticketSource: (0, _emberCliPageObject.isVisible)('[data-test-id="tickets-source"]'),
    ticketRequester: (0, _emberCliPageObject.isVisible)('[data-test-id="requester-name"]'),
    ticketRequestedForContainer: (0, _emberCliPageObject.isVisible)('[data-test-id="requested-for-container"]'),
    ticketRequestedForName: (0, _emberCliPageObject.isVisible)('[data-test-id="requested-for-name"]'),
    // showRequesterHoverCard		: triggerable('mouseover', '[data-test-id="requester-name"]'),
    // showRequestedForHoverCard	: triggerable('mouseover', '[data-test-id="requested-for-name"]'),
    // requesterHoverCardVisible	: hasClass('ember-tooltip-show', 'requester-card-content'),
    SRIconVisible: (0, _emberCliPageObject.hasClass)('cart', '[data-test-id="module-icon"]'),
    INCIconVisible: (0, _emberCliPageObject.hasClass)('tickets', '[data-test-id="module-icon"]'),
    requesterVIPBadge: (0, _emberCliPageObject.isVisible)('[data-test-id="requester-vip-badge"]'),
    requesterForVIPBadge: (0, _emberCliPageObject.isVisible)('[data-test-id="requestedFor-vip-badge"]'),
    restoreSpamBadge: (0, _emberCliPageObject.isVisible)('[data-test-id="tickets-unspam"]'),
    restoreDeleteBadge: (0, _emberCliPageObject.isVisible)('[data-test-id="tickets-restore"]'),
    restoreSpamBtnClick: (0, _emberCliPageObject.clickable)('[data-test-id="tickets-unspam-btn"]'),
    restoreDeleteBtnClick: (0, _emberCliPageObject.clickable)('[data-test-id="tickets-restore-btn"]'),
    ticketIconDisabled: (0, _emberCliPageObject.hasClass)('disabled', '[data-test-id="module-icon"]'),
    // Description fields
    descriptionContainerExists: (0, _emberCliPageObject.isVisible)('[data-test-id="tickets-details-description-wrapper"]'),
    phoneCallContainerExists: (0, _emberCliPageObject.isVisible)('[data-test-id="phone-call-wrapper"]'),
    eodContainerExists: (0, _emberCliPageObject.isVisible)('[data-test-id="eod-wrapper"]'),
    attachmentContainerExists: (0, _emberCliPageObject.isVisible)('[data-test-id="tickets-attachment-container"]'),
    noDescriptionContent: (0, _emberCliPageObject.isVisible)('[data-test-id="no-description"]')
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-tickets/details-tab", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = (0, _emberCliPageObject.create)({
    descriptionContainerExists: (0, _emberCliPageObject.isVisible)('[data-test-id="tickets-details-description-wrapper"]'),
    conversationsExists: (0, _emberCliPageObject.isVisible)('[data-test-id="ticket-conversation-cards--wrapper"]'),
    conversationActionsExists: (0, _emberCliPageObject.isVisible)('[data-test-id="conversation-actions-container"]')
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-tickets/edit-form", ["exports", "@ember/test-helpers", "ember-cli-page-object"], function (_exports, _testHelpers, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var _default = (0, _emberCliPageObject.create)({
    url: {
      showPage: function showPage(id) {
        return "/tickets/".concat(id);
      }
    },
    editExists: (0, _emberCliPageObject.isVisible)('[data-test-id="edit-tickets"]'),
    triggerEdit: (0, _emberCliPageObject.clickable)('[data-test-id="edit-tickets"]'),
    exists: (0, _emberCliPageObject.isVisible)('[data-test-id="tickets-edit-form"]'),
    update: (0, _emberCliPageObject.clickable)('[data-test-id="tickets-edit-form-submit"]'),
    cancel: (0, _emberCliPageObject.clickable)('[data-test-id="modal-cancel"]'),
    closeSideModal: (0, _emberCliPageObject.clickable)('[data-test-id="ember-modal-close"]'),
    // fields
    hasFieldSubject: (0, _emberCliPageObject.isVisible)('[data-test-field-name="subject"]'),
    hasFieldDescription: (0, _emberCliPageObject.isVisible)('[data-test-field-name="description"]'),
    hasFieldRequester: (0, _emberCliPageObject.isVisible)('[data-test-field-name="requesterId"]'),
    hasFieldRequestedFor: (0, _emberCliPageObject.isVisible)('[data-test-field-name="requestedFor"]'),
    hasFieldDepartment: (0, _emberCliPageObject.isVisible)('[data-test-field-name="departmentId"]'),
    // errors
    hasErrorSubject: (0, _emberCliPageObject.isVisible)('[data-test-field-name="subject"] .form-field--errors'),
    hasErrorRequester: (0, _emberCliPageObject.isVisible)('[data-test-field-name="requesterId"] .form-field--errors'),
    hasErrorDescription: (0, _emberCliPageObject.isVisible)('[data-test-field-name="description"] .form-field--errors'),
    // inputs
    fillSubject: (0, _emberCliPageObject.fillable)('[data-test-field-name="subject"] input'),
    fillDescription: (0, _emberCliPageObject.fillable)('[data-test-field-name="description"] .froala-editor-container [contenteditable="true"]'),
    // code insert
    codeInsert: {
      clickInsertCode: (0, _emberCliPageObject.clickable)('[data-cmd="codeInsert"]'),
      viewCode: (0, _emberCliPageObject.clickable)('[data-cmd="html"]'),
      viewCodeActive: (0, _emberCliPageObject.hasClass)('fr-active', '[data-cmd="html"]'),
      insertedCodeCount: (0, _emberCliPageObject.count)('[rel="highlighter"]'),
      modalExists: (0, _emberCliPageObject.isVisible)('.froala-insert-code-modal'),
      submit: (0, _emberCliPageObject.clickable)('.froala-submit-code-insert'),
      fillCode: (0, _emberCliPageObject.fillable)('.froala-insert-code-modal textarea')
    },
    // attachments
    addAttachment: function addAttachment(fileName) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.triggerEvent)('input#attach_file', 'change', {
                  files: [new Blob([fileName])]
                });

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    },
    removeAttachment: (0, _emberCliPageObject.collection)('.attachment-list .list-file-item', {
      deleteFile: (0, _emberCliPageObject.clickable)('.delete-file')
    })
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-tickets/eob-tickets", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = (0, _emberCliPageObject.create)({
    predecessorTicketExist: (0, _emberCliPageObject.isVisible)('[data-test-id="predecessor-ticket-container"]'),
    successorTicketsExist: (0, _emberCliPageObject.isVisible)('[data-test-id="successor-tickets-container"]'),
    predecessorTicketTitle: (0, _emberCliPageObject.isVisible)('[data-test-id="predecessor-ticket-container"] [data-test-id="ticket-title"]'),
    successorTicketsTitle: (0, _emberCliPageObject.isVisible)('[data-test-id="successor-tickets-container"] [data-test-id="ticket-title"]'),
    predecessorTicketCount: (0, _emberCliPageObject.count)('[data-test-id="predecessor-ticket-container"] [data-test-id="ticket-card"]'),
    successorTicketsCount: (0, _emberCliPageObject.count)('[data-test-id="successor-tickets-container"] [data-test-id="ticket-card"]'),
    predecessorTicketDelete: (0, _emberCliPageObject.isVisible)('[data-test-id="predecessor-ticket-container"] [data-test-id="delete-child-ticket"]'),
    successorTicketsDelete: (0, _emberCliPageObject.isVisible)('[data-test-id="scuccessor-ticket-container"] [data-test-id="delete-child-ticket"]')
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-tickets/execute-scenario", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var executeScenarioModal = ".execute-scenario-modal";
  var scenarios = ".execute-scenario-modal-body ul li";
  var scenarioInput = ".scenario-search-input";

  var _default = (0, _emberCliPageObject.create)({
    isExecuteScenarioModalVisible: (0, _emberCliPageObject.isVisible)(executeScenarioModal),
    scenarioCount: (0, _emberCliPageObject.count)(scenarios),
    fillSearchScenario: (0, _emberCliPageObject.fillable)(scenarioInput),
    fetchedScenarios: (0, _emberCliPageObject.collection)(scenarios, {
      title: (0, _emberCliPageObject.text)("h2")
    })
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-tickets/new-ticket", ["exports", "ember-cli-page-object", "ember-cli-page-object/macros", "@ember/test-helpers"], function (_exports, _emberCliPageObject, _macros, _testHelpers) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var _default = (0, _emberCliPageObject.create)({
    hasRequestor: (0, _emberCliPageObject.isVisible)('[data-test-field-name="requesterId"]'),
    hasAddNewRequesterLink: (0, _emberCliPageObject.isVisible)('[data-test-field-name="requesterId"] .add-new-requester-btn'),
    hasRequestedFor: (0, _emberCliPageObject.isVisible)('[data-test-field-name="requestedForId"]'),
    hasSubject: (0, _emberCliPageObject.isVisible)('[data-test-field-name="subject"]'),
    subjectText: (0, _emberCliPageObject.text)('[data-test-field-name="subject"] input'),
    subjectHidden: (0, _emberCliPageObject.isHidden)('[data-test-field-name="subject"]'),
    hasTypeField: (0, _emberCliPageObject.isVisible)('[data-test-field-name="type"]'),
    hasSource: (0, _emberCliPageObject.isVisible)('[data-test-field-name="source"]'),
    hasStatus: (0, _emberCliPageObject.isVisible)('[data-test-field-name="status"]'),
    hasUrgency: (0, _emberCliPageObject.isVisible)('[data-test-field-name="urgency"]'),
    hasImpact: (0, _emberCliPageObject.isVisible)('[data-test-field-name="impact"]'),
    hasPriority: (0, _emberCliPageObject.isVisible)('[data-test-field-name="priority"]'),
    hasGroup: (0, _emberCliPageObject.isVisible)('[data-test-field-name="groupId"]'),
    hasAssignedTo: (0, _emberCliPageObject.isVisible)('[data-test-field-name="responderId"]'),
    hasDepartment: (0, _emberCliPageObject.isVisible)('[data-test-field-name="departmentId"]'),
    hasDescription: (0, _emberCliPageObject.isVisible)('[data-test-field-name="description"]'),
    hasCategory: (0, _emberCliPageObject.isVisible)('[data-test-field-name="category"]'),
    hasTags: (0, _emberCliPageObject.isVisible)('[data-test-field-name="tags"]'),
    hasCustomTextField: (0, _emberCliPageObject.isVisible)('[data-test-field-name="customFields.cust_text"]'),
    hasCustomTextAreaField: (0, _emberCliPageObject.isVisible)('[data-test-field-name="customFields.cust_para"]'),
    hasCustomCheckboxField: (0, _emberCliPageObject.isVisible)('[data-test-field-name="customFields.cust_cb"]'),
    hasCustomNumberField: (0, _emberCliPageObject.isVisible)('[data-test-field-name="customFields.cust_number"]'),
    hasCustomDecimalField: (0, _emberCliPageObject.isVisible)('[data-test-field-name="customFields.cust_decimal"]'),
    hasCustomDateOnlyField: (0, _emberCliPageObject.isVisible)('[data-test-field-name="customFields.cust_date_only"]'),
    hasCustomDateTimeField: (0, _emberCliPageObject.isVisible)('[data-test-field-name="customFields.cust_date_time"]'),
    hasCustomNestedField: (0, _emberCliPageObject.isVisible)('[data-test-field-name="customFields.cust_dep_l1"]'),
    hasCustomDropdownField: (0, _emberCliPageObject.isVisible)('[data-test-field-name="customFields.cust_dd_1"]'),
    hasCustomMultiSelectDropdownField: (0, _emberCliPageObject.isVisible)('[data-test-field-name="customFields.msf_cust_multi_dd"]'),
    hasCustomSectionParentField1: (0, _emberCliPageObject.isVisible)('[data-test-field-name="customFields.cust_sec_parent_dd"]'),
    // dynamic section
    hasCustomSectionParentField2: (0, _emberCliPageObject.isVisible)('[data-test-field-name="customFields.cust_sec_parent_dd_2"]'),
    // dynamic section
    hasAddNewRequesterModal: (0, _emberCliPageObject.isVisible)('.add-new-requester-modal'),
    customContentFields: (0, _emberCliPageObject.collection)('.static-rich-text-field'),
    hasAttachFiles: (0, _emberCliPageObject.isVisible)('[data-test-id="ticket-new-form-attached-files"]'),
    hasAssociateAsset: (0, _emberCliPageObject.isVisible)('[data-test-id="ticket-new-form-associate-asset"]'),
    departmentText: (0, _emberCliPageObject.text)('[data-test-field-name="departmentId"] .ember-power-select-selected-item'),
    isDepartmentSelected: (0, _emberCliPageObject.isVisible)('[data-test-field-name="departmentId"] .ember-power-select-selected-item'),
    hasTemplates: (0, _emberCliPageObject.isVisible)('[data-test-field-name="template"]'),
    haRecentTemplates: (0, _emberCliPageObject.isVisible)('.recent-templates'),
    hasCopyParentTicketDetails: (0, _emberCliPageObject.isVisible)('.capture-parent-ticket'),
    hasBreadCrumbs: (0, _emberCliPageObject.isVisible)('#header-page-title-container'),
    hasNewTicketsForm: (0, _emberCliPageObject.isVisible)('.new-ticket-form-container'),
    // Related Articles
    hasRelatedArticlesSection: (0, _emberCliPageObject.isVisible)('.new-page-related-articles'),
    isRelatedArticlesWidgetExpanded: (0, _emberCliPageObject.hasClass)('ui-accordion-item-expanded', '.new-page-related-articles .ui-accordion-item'),
    isRelatedArticlesListEmpty: (0, _emberCliPageObject.isVisible)('.new-page-related-articles [data-test-field-name="empty-state"]'),
    hasRelatedArticlesList: (0, _emberCliPageObject.isVisible)('.new-page-related-articles [data-test-field-name="article-list"]'),
    hasRelatedArticlesShowAllLink: (0, _emberCliPageObject.isVisible)('.new-page-related-articles [data-test-field-name="show-all-result-link"]'),
    toggleRelatedArticlesWidget: (0, _emberCliPageObject.clickable)('.new-page-related-articles.tcpr-widget .ui-accordion-header-trigger'),
    // Widgets
    hasAppsIconPane: (0, _emberCliPageObject.isVisible)('.ticket-new-sidebar .tcpr-widgets-icon'),
    fillSubject: (0, _emberCliPageObject.fillable)('[data-test-field-name="subject"] input'),
    fillDescription: (0, _emberCliPageObject.fillable)('.froala-editor-container .fr-element'),
    //Requester Field & Modal Dom elements
    requesterInput: (0, _emberCliPageObject.clickable)('[data-test-field-name="requesterId"] .ember-basic-dropdown-trigger'),
    requesterModalCreateButton: (0, _emberCliPageObject.clickable)('[data-test-id="add-new-requester-form-submit"]'),
    requesterModalCancelButton: (0, _emberCliPageObject.clickable)('.add-new-requester-modal [data-test-id="modal-cancel"]'),
    addNewRequesterLink: (0, _emberCliPageObject.clickable)('[data-test-field-name="requesterId"] .add-new-requester-btn'),
    fillRequesterInput: (0, _emberCliPageObject.fillable)('[data-test-field-name="requesterId"] .ember-power-select-search-input'),
    fillRequesterModalFirstName: (0, _emberCliPageObject.fillable)('[data-test-field-name="firstName"] input'),
    fillRequesterModalEmail: (0, _emberCliPageObject.fillable)('[data-test-field-name="primaryEmail"] input'),
    fillRequesterMobilePhone: (0, _emberCliPageObject.fillable)('[data-test-field-name="mobile"] input'),
    requesterMobilePhone: (0, _emberCliPageObject.isVisible)('[data-test-field-name="mobile"] input'),
    openAssetModal: (0, _emberCliPageObject.clickable)('[data-test-id="ticket-new-form-associate-asset"]'),
    removeAsset: (0, _emberCliPageObject.clickable)('[data-test-id="asset-delete-btn"]'),
    clearAppliedTemplate: (0, _emberCliPageObject.clickable)('.clear-template'),
    applyRecentTemplate: (0, _emberCliPageObject.clickable)('.recent-templates .recent-template-list-item button'),
    toggleCopyParentTktDetailsCheckbox: (0, _emberCliPageObject.clickable)('.capture-parent-ticket .ember-checkbox'),
    // Custom fields related
    fillCustomTextField: (0, _emberCliPageObject.fillable)('[data-test-field-name="customFields.cust_text"] input'),
    fillCustomParaField: (0, _emberCliPageObject.fillable)('[data-test-field-name="customFields.custom_para"] textarea'),
    fillCustomNumberField: (0, _emberCliPageObject.fillable)('[data-test-field-name="customFields.cust_number"] input'),
    fillCustomSection2TextField: (0, _emberCliPageObject.fillable)('[data-test-field-name="customFields.sec_2_text_1"] input'),
    fillSection3TextField: (0, _emberCliPageObject.fillable)('[data-test-field-name="customFields.sec_3_text_1"] input'),
    hasCustomParaError: (0, _emberCliPageObject.isVisible)('[data-test-field-name="customFields.custom_para"] .form-field--errors'),
    addAttachment: function addAttachment(fileName) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.triggerEvent)('input#attach_file', 'change', {
                  files: [new Blob([fileName])]
                });

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    },
    dropAttachments: function dropAttachments(fileName) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.triggerEvent)('[data-test-id="attachment-list-container-drag-drop"]', 'drop', {
                  dataTransfer: {
                    files: [new File([fileName], fileName)]
                  }
                });

              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }))();
    },
    removeAttachment: (0, _emberCliPageObject.collection)('[data-test-id="attached-file"]', {
      deleteFile: (0, _emberCliPageObject.clickable)('.delete-file')
    }),
    save: (0, _emberCliPageObject.clickable)('.form-submit-btn'),
    submitDropDown: (0, _emberCliPageObject.clickable)('.form-submit-actions .ember-basic-dropdown-trigger'),
    saveAndNew: (0, _emberCliPageObject.clickable)('[data-test-id="submit-and-new"]'),
    saveAndClose: (0, _emberCliPageObject.clickable)('[data-test-id="submit-and-close"]'),
    cancelConfirmationSubmit: (0, _emberCliPageObject.clickable)('[data-test-id="cancel-confirmation-submit"]'),
    saveAndResolve: (0, _emberCliPageObject.clickable)('[data-test-id="submit-and-resolve"]'),
    cancel: (0, _emberCliPageObject.clickable)('[data-test-id="new-ticket-cancel"]'),
    attachmentsCount: (0, _emberCliPageObject.count)('[data-test-id="attached-file"]'),
    assetsCount: (0, _emberCliPageObject.count)('[data-test-id="asset-card"]'),
    requesterFieldDetailsPage: (0, _emberCliPageObject.isVisible)(document.querySelector('.requester-details .user_name')),
    openCannedResponseModal: (0, _emberCliPageObject.clickable)('[data-cmd="insertCannedResponse"]'),
    hasCannedResponseModal: (0, _emberCliPageObject.isVisible)('.froala-canned-response-modal'),
    insertCannedResponseContent: (0, _emberCliPageObject.clickable)('.insert-canned-response'),
    descriptionContent: (0, _emberCliPageObject.text)('.froala-editor-container .fr-view'),
    insertCannedResponseWithAttachment: (0, _emberCliPageObject.collection)('.insert-canned-response'),
    hasFroalaEditor: (0, _emberCliPageObject.isVisible)('.fr-box'),
    // Add CC Field & Dom Elements
    addCCBtn: (0, _emberCliPageObject.clickable)('[id="add-cc-btn"]'),
    hideCCBtn: (0, _emberCliPageObject.clickable)('[id="hide-cc-btn"]'),
    addCCInput: (0, _emberCliPageObject.clickable)('[data-test-field-name="ccEmails"] .ember-basic-dropdown-trigger'),
    fillAddCCInput: (0, _emberCliPageObject.fillable)('[data-test-field-name="ccEmails"] .ember-power-select-trigger-multiple-input'),
    addCCEmail: (0, _emberCliPageObject.triggerable)('keydown', '[data-test-field-name="ccEmails"] .ember-power-select-trigger-multiple-input', {
      eventProperties: {
        keyCode: 13
      }
    }),
    addCCText: (0, _emberCliPageObject.text)('[data-test-field-name="ccEmails"] .ember-power-select-multiple-option'),
    addCCValidationErrorText: (0, _emberCliPageObject.text)('[data-test-field-name="ccEmails"] .form-field--errors'),
    customTextFieldContent: (0, _emberCliPageObject.value)('[data-test-field-name="customFields.cust_text"] input[type="text"]'),
    customParaFieldContent: (0, _emberCliPageObject.value)('[data-test-field-name="customFields.cust_para"] textarea'),
    customCheckboxFieldValue: (0, _emberCliPageObject.property)('checked', '[data-test-field-name="customFields.cust_cb"] input'),
    section3TextField1Content: (0, _emberCliPageObject.value)('[data-test-field-name="customFields.sec_3_text_1"] input[type="text"]'),
    section3ParaField1Content: (0, _emberCliPageObject.value)('[data-test-field-name="customFields.sec_3_para_1"] textarea'),
    section3CheckboxFieldValue: (0, _emberCliPageObject.property)('checked', '[data-test-field-name="customFields.sec_3_cb_1"] input'),
    section3NumberFieldValue: (0, _emberCliPageObject.value)('[data-test-field-name="customFields.sec_3_num_1"] input[type="text"]'),
    section3DecimalFieldValue: (0, _emberCliPageObject.value)('[data-test-field-name="customFields.sec_3_decimal_1"] input[type="text"]'),
    section2TextField1Content: (0, _emberCliPageObject.value)('[data-test-field-name="customFields.sec_2_text_1"] input[type="text"]'),
    validationFailedFields: (0, _emberCliPageObject.attribute)('data-test-field-name', '.form-field--has-errors', {
      multiple: true
    }),
    isFormValid: (0, _macros.getter)(function () {
      return this.validationFailedFields.length === 0;
    }),
    allFormFieldLabels: (0, _emberCliPageObject.collection)('.form-field[data-test-field-name] .form-field--label'),
    visibleRequiredFieldLabels: (0, _macros.getter)(function () {
      return this.allFormFieldLabels.filter(function (el) {
        return el.isVisible;
      }).map(function (el) {
        return el.text;
      }).filter(function (text) {
        return text.includes('*');
      });
    }),
    allFormFieldErrors: (0, _emberCliPageObject.collection)('.form-field[data-test-field-name] .form-field--errors'),
    visibleRequiredFieldErrors: (0, _macros.getter)(function () {
      return this.allFormFieldErrors.filter(function (el) {
        return el.isVisible;
      }).map(function (el) {
        return el.text;
      }).filter(function (text) {
        return text.includes('This field ');
      });
    }),
    allTypesOfFields: (0, _macros.getter)(function () {
      var defaultFields = [this.hasRequestor, this.hasAddNewRequesterLink, this.hasSubject, this.hasSource, this.hasStatus, this.hasUrgency, this.hasImpact, this.hasPriority, this.hasGroup, this.hasAssignedTo, this.hasDepartment, this.hasDescription, this.hasCategory];
      var customFields = [this.hasCustomTextField, this.hasCustomTextAreaField, this.hasCustomCheckboxField, this.hasCustomNumberField, this.hasCustomDecimalField, this.hasCustomDateOnlyField, this.hasCustomDateTimeField, this.hasCustomNestedField, this.hasCustomDropdownField, this.hasCustomMultiSelectDropdownField, this.hasCustomSectionParentField1, this.hasCustomSectionParentField2];
      var additionalFields = [this.hasTags, this.hasAssociateAsset, this.hasAttachFiles, this.hasTemplates];
      return {
        default: defaultFields,
        custom: customFields,
        additional: additionalFields
      };
    })
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-tickets/pagerduty", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = (0, _emberCliPageObject.create)({
    pagerdutyAccordianBtn: (0, _emberCliPageObject.clickable)('[data-test-id="ui-accordion-trigger"]'),
    isPagerdutyVisible: (0, _emberCliPageObject.isVisible)('[data-test-id="pagerduty"]'),
    pagedutyLink: (0, _emberCliPageObject.attribute)('href', '[data-test-id="pagerduty_link"]'),
    isPdEmptyStateVisible: (0, _emberCliPageObject.isVisible)('[data-test-id="pagerduty-empty-state"]')
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-tickets/related-tickets", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = (0, _emberCliPageObject.create)({
    relatedTicketsExist: (0, _emberCliPageObject.isVisible)('[data-test-id="related-tickets-wrapper"]'),
    eobTicketsExist: (0, _emberCliPageObject.isVisible)('[data-test-id="eob-tickets-container"]'),
    ticketExist: (0, _emberCliPageObject.isVisible)('[data-test-id="ticket-card"]'),
    ticketDeleteExist: (0, _emberCliPageObject.isVisible)('[data-test-id="delete-child-ticket"]'),
    ticketDueInfoExist: (0, _emberCliPageObject.isVisible)('[data-test-id="ticket-due-info"]'),
    ticketLink: (0, _emberCliPageObject.clickable)('[data-test-id="ticket-link"]'),
    ticketImgExist: (0, _emberCliPageObject.isVisible)('[data-test-id="ticket-image-wrapper"] svg'),
    ticketDisplayId: (0, _emberCliPageObject.text)('[data-test-id="ticket-display-id"]'),
    ticketStateExist: (0, _emberCliPageObject.isVisible)('[data-test-id="ticket-state"]'),
    ticketStatusName: (0, _emberCliPageObject.isVisible)('[data-test-id="ticket-status-name"]'),
    ticketPriotityName: (0, _emberCliPageObject.isVisible)('[data-test-id="ticket-priority-name"]'),
    hasAddChildTicketsBtn: (0, _emberCliPageObject.isVisible)('[data-test-id="test-add-child-tickets"]'),
    hasAddChildTicketSideModal: (0, _emberCliPageObject.isVisible)('.add-or-associate-child-tickets .new-ticket-form-elements-container'),
    associateExistingSRSectionVisible: (0, _emberCliPageObject.isVisible)('.existing-tickets'),
    childTickets: (0, _emberCliPageObject.collection)('[data-test-id="child-tickets-container"] article'),
    openAddOrAssociateChildTicketsModal: (0, _emberCliPageObject.clickable)('[data-test-id="test-add-child-tickets"]'),
    adobeCardClickable: (0, _emberCliPageObject.clickable)('.catalog-item-card[data-test-id="item-30"]'),
    placeAddItemRequestBtnClick: (0, _emberCliPageObject.clickable)('[data-test-id="place-req"]'),
    associateExistingSR: (0, _emberCliPageObject.clickable)('[data-test-id="associate-existing-sr"]'),
    associateFirstSearchResult: (0, _emberCliPageObject.clickable)('.child-checkbox [data-test-id="associate-checkbox"]', {
      at: 0
    }),
    associateSRSave: (0, _emberCliPageObject.clickable)('[data-test-id = "associate-sr-btn-save"]'),
    tktSearchInput: (0, _emberCliPageObject.fillable)('[data-test-id="test-existing-search-bar"]'),
    tktSearchInputTrigger: (0, _emberCliPageObject.triggerable)('keydown', '[data-test-id="test-existing-search-bar"]')
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-tickets/requested-item", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  //Add requested Item
  var addReqItemBtn = '[data-test-id=add-item-btn]';
  var clearBtnInSearch = '.search-input-wrapper .search-clear';
  var searchCatalogItemInput = '#search-catalog-items';
  var adobeCard = '.catalog-item-card[data-test-id="item-30"]';
  var placeAddItemRequestBtn = '[data-test-id="place-req"]'; //Requested Item list

  var requestedItemCard = '[data-test-id^=requested-item-card]';
  var noRequestedItemsEmptyState = '[data-test-id=noRequestedItemsEmptyState]'; //Requested Item Detail

  var reqItemName = '[data-test-id=requested-item-card-3] [data-test-id=req-item-name]';
  var reqItemQty = '[data-test-id=requested-item-card-3] [data-test-id=req-item-qty]';
  var reqItemCost = '[data-test-id=requested-item-card-3] [data-test-id=req-item-cost]';
  var reqItemLocation = '[data-test-id=requested-item-card-3] [data-test-id=req-item-location]';
  var reqItemStage = '[data-test-id=requested-item-card-1] .req-stage-trigger';
  var loanerReqItemStage = '[data-test-id=requested-item-card-3] .req-stage-trigger';
  var reqItemFromDate = '[data-test-id=requested-item-card-3] [data-test-id=req-item-from-date]';
  var reqItemToDate = '[data-test-id=requested-item-card-3] [data-test-id=req-item-to-date]'; //more info button

  var reqItemMoreInfoBtnOfLoanerRI = '[data-test-id=requested-item-card-3] [data-test-id=req-item-more-info-btn]';
  var reqItemMoreInfoBtnOfAPermanentRI = '[data-test-id=requested-item-card-2] [data-test-id=req-item-more-info-btn]';
  var reqItemMoreInfoDescription = '[data-test-id=requested-item-card-3] [data-test-id=more-info-description]';
  var reqItemMoreInfoCustomFieldSection = '[data-test-id=requested-item-card-3] [data-test-id=req-item-more-info-custom-field-section]';
  var stageDropdownContent = '[data-test-id=requested-item-card-1] .req-stage-content';
  var stageDropdownContentChoices = '[data-test-id=requested-item-card-1] .req-stage-content .basic-dropdown-item';
  var loanerItemStageDropdownContentChoices = '[data-test-id=requested-item-card-3] .req-stage-content .basic-dropdown-item';

  var _default = (0, _emberCliPageObject.create)({
    //count
    noOfRequestedItems: (0, _emberCliPageObject.count)(requestedItemCard),
    noOfServiceItemsListed: (0, _emberCliPageObject.count)('.catalog-item-card'),
    // text
    reqItemName: (0, _emberCliPageObject.text)(reqItemName),
    reqItemQty: (0, _emberCliPageObject.text)(reqItemQty),
    reqItemCost: (0, _emberCliPageObject.text)(reqItemCost),
    reqItemLocation: (0, _emberCliPageObject.text)(reqItemLocation),
    reqItemFromDate: (0, _emberCliPageObject.text)(reqItemFromDate),
    reqItemToDate: (0, _emberCliPageObject.text)(reqItemToDate),
    reqItemStageText: (0, _emberCliPageObject.text)(reqItemStage),
    reqItemToggleInfoTextOfLoanerRI: (0, _emberCliPageObject.text)(reqItemMoreInfoBtnOfLoanerRI),
    noSIEmptyStateTitleText: (0, _emberCliPageObject.text)('.catalog-items-empty > h2'),
    //click
    modalSubmit: (0, _emberCliPageObject.clickable)('[data-test-id="modal-submit"]'),
    cancelModalSubmitBtn: (0, _emberCliPageObject.clickable)('.form-button--submit'),
    reqItemMoreInfoBtnOfLoanerRI: (0, _emberCliPageObject.clickable)(reqItemMoreInfoBtnOfLoanerRI),
    reqItemMoreInfoBtnOfPermanentRI: (0, _emberCliPageObject.clickable)(reqItemMoreInfoBtnOfAPermanentRI),
    clickStageTrigger: (0, _emberCliPageObject.clickable)(reqItemStage),
    clickLoanerStageTrigger: (0, _emberCliPageObject.clickable)(loanerReqItemStage),
    clickAddReqItemBtn: (0, _emberCliPageObject.clickable)(addReqItemBtn),
    clearSearchBtnClickable: (0, _emberCliPageObject.clickable)(clearBtnInSearch),
    adobeCardClickable: (0, _emberCliPageObject.clickable)(adobeCard),
    placeAddItemRequestBtnClick: (0, _emberCliPageObject.clickable)(placeAddItemRequestBtn),
    //visible
    noRequestedItemsEmptyState: (0, _emberCliPageObject.isVisible)(noRequestedItemsEmptyState),
    deleteReqItemModalExists: (0, _emberCliPageObject.isVisible)('.delete-requested-item-modal'),
    reqItemMoreInfoDescExists: (0, _emberCliPageObject.isVisible)(reqItemMoreInfoDescription),
    reqItemMoreInfoCustomFieldSectionExists: (0, _emberCliPageObject.isVisible)(reqItemMoreInfoCustomFieldSection),
    isReqItemStageVisible: (0, _emberCliPageObject.isVisible)(reqItemStage),
    stageDropdownContentVisible: (0, _emberCliPageObject.isVisible)(stageDropdownContent),
    cancellationModalVisible: (0, _emberCliPageObject.isVisible)('.req-stage-cancel-modal'),
    addReqItemSliderExists: (0, _emberCliPageObject.isVisible)('.add-req-item-modal'),
    clearSearchBtnVisible: (0, _emberCliPageObject.isVisible)(clearBtnInSearch),
    noSIEmptyStateVisible: (0, _emberCliPageObject.isVisible)('.catalog-items-empty'),
    otherResultsTitleVisible: (0, _emberCliPageObject.isVisible)('#other-results'),
    otherResultsListVisible: (0, _emberCliPageObject.isVisible)('.list-catalog-items[data-test-id="other-results-list"]'),
    addReqItemBtnVisible: (0, _emberCliPageObject.isVisible)(addReqItemBtn),
    //Hidden
    clearSearchBtnHidden: (0, _emberCliPageObject.isHidden)(clearBtnInSearch),
    catalogSearchValue: (0, _emberCliPageObject.value)(searchCatalogItemInput),
    //fillable
    fillCancellationModalTextArea: (0, _emberCliPageObject.fillable)('[data-test-field-name="remarks"] textarea'),
    catalogSearchInput: (0, _emberCliPageObject.fillable)(searchCatalogItemInput),
    //triggers
    catalogSearchkeyUp: (0, _emberCliPageObject.triggerable)('keyup', searchCatalogItemInput),
    //Collection
    stageDropdownContentChoices: (0, _emberCliPageObject.collection)(stageDropdownContentChoices, {
      text: (0, _emberCliPageObject.text)('.stage-option-text')
    }),
    loanerItemStageDropdownContentChoices: (0, _emberCliPageObject.collection)(loanerItemStageDropdownContentChoices, {
      text: (0, _emberCliPageObject.text)('.stage-option-text')
    })
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-tickets/summary", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = (0, _emberCliPageObject.create)({
    url: {
      showPage: function showPage(id) {
        return "/tickets/".concat(id);
      }
    },
    // Status Summary component
    summaryExists: (0, _emberCliPageObject.isVisible)('[data-test-id="ticket-summary-wrapper"]'),
    statusSummaryExists: (0, _emberCliPageObject.isVisible)('[data-test-id="status-info-container"]'),
    resolutionStatusSummaryExists: (0, _emberCliPageObject.isVisible)('[data-test-id="resolved-status-label"]'),
    // Due fields
    frDueSummaryExists: (0, _emberCliPageObject.isVisible)('[data-test-id="fr-due-container"]'),
    resolutionDueSummaryExists: (0, _emberCliPageObject.isVisible)('[data-test-id="resol-due-container"]'),
    changeDueByFormExists: (0, _emberCliPageObject.isVisible)('[data-test-id="change-due-by-form-container"]'),
    editDuebyBtnExists: (0, _emberCliPageObject.isVisible)('[data-test-id="edit-due-by-btn"]'),
    editDuebyBtn: (0, _emberCliPageObject.clickable)('[data-test-id="edit-due-by-btn"]'),
    dateMenuPickerContExists: (0, _emberCliPageObject.isVisible)('[data-test-id="date-picker-container"]'),
    datepickerContExists: (0, _emberCliPageObject.isVisible)('[data-test-id="custom-date-picker-container"]'),
    datePickerFooterExists: (0, _emberCliPageObject.isVisible)('[data-test-id="custom-date-picker-footer"]'),
    datePickerCancelBtnExists: (0, _emberCliPageObject.isVisible)('[data-test-id="date-picker-cancel-btn"]'),
    datePickerCancelBtn: (0, _emberCliPageObject.clickable)('[data-test-id="date-picker-cancel-btn"]'),
    datePickerUpdateBtnExists: (0, _emberCliPageObject.isVisible)('[data-test-id="date-picker-update-btn"]'),
    datePickerUpdateBtn: (0, _emberCliPageObject.clickable)('[data-test-id="date-picker-update-btn"]'),
    datePickerUpdateDisabledBtnExists: (0, _emberCliPageObject.isVisible)('[data-test-id="date-picker-update-disabled-btn"]'),
    datePickerUpdateDisabledBtn: (0, _emberCliPageObject.clickable)('[data-test-id="date-picker-update-disabled-btn"]'),
    datePickerErrorBannerExists: (0, _emberCliPageObject.isVisible)('[data-test-id="date-picker-error-banner"]'),
    defaultDateMenuPickerExists: (0, _emberCliPageObject.isVisible)('[data-test-id="default-date-menu-picker"]'),
    customDatePickerBtnExists: (0, _emberCliPageObject.isVisible)('[data-test-id="custom-date-picker-btn"]'),
    customDatePickerBtn: (0, _emberCliPageObject.clickable)('[data-test-id="custom-date-picker-btn"]'),
    dateValueInputExists: (0, _emberCliPageObject.isVisible)('[data-test-id="date-text-field-picker"]'),
    monthValueDdExists: (0, _emberCliPageObject.isVisible)('[data-test-id="calendar-dropdown-month"]'),
    yearValueDdInputExists: (0, _emberCliPageObject.isVisible)('[data-test-id="calendar-dropdown-year"]'),
    // Approval Summary component
    approvalInfoSummaryExists: (0, _emberCliPageObject.isVisible)('[data-test-id="approval-info"]'),
    approvalStatusSummaryExists: (0, _emberCliPageObject.isVisible)('[data-test-id="approval-status"]'),
    approvalSummaryContExists: (0, _emberCliPageObject.isVisible)('[data-test-id="approval-actions-container"]'),
    approveBtnExists: (0, _emberCliPageObject.isVisible)('[data-test-id="approve-btn"]'),
    approveBtn: (0, _emberCliPageObject.clickable)('[data-test-id="approve-btn"]'),
    rejectBtnExists: (0, _emberCliPageObject.isVisible)('[data-test-id="reject-btn"]'),
    rejectBtn: (0, _emberCliPageObject.clickable)('[data-test-id="reject-btn"]'),
    remarkContExists: (0, _emberCliPageObject.isVisible)('[data-test-id="remark-container"]'),
    remarkCancelBtnExists: (0, _emberCliPageObject.isVisible)('[data-test-id="remark-cancel-btn"]'),
    remarkCancelBtn: (0, _emberCliPageObject.clickable)('[data-test-id="remark-cancel-btn"]'),
    remarkSubmitBtnExists: (0, _emberCliPageObject.isVisible)('[data-test-id="remark-submit-btn"]'),
    remarkSubmitBtn: (0, _emberCliPageObject.clickable)('[data-test-id="remark-submit-btn"]'),
    // aws info summary component
    awsInfoContExists: (0, _emberCliPageObject.isVisible)('[data-test-id="aws-summary-container"]'),
    resumeAwsNotificationBtnExists: (0, _emberCliPageObject.isVisible)('[data-test-id="aws-resume-notification-btn"]'),
    resumeAwsNotificationBtn: (0, _emberCliPageObject.clickable)('[data-test-id="aws-resume-notification-btn"]'),
    // Resolution hours summary component
    resolutionHoursContExists: (0, _emberCliPageObject.isVisible)('[data-test-id="resolution-hours-container"]'),
    resolutionHoursInfoExists: (0, _emberCliPageObject.isVisible)('[data-test-id="resolution-hours-info"]'),
    // Feedback summary component
    feedbackContExists: (0, _emberCliPageObject.isVisible)('[data-test-id="feedback-container"]'),
    viewFeedbackBtnExists: (0, _emberCliPageObject.isVisible)('[data-test-id="view-feedback-btn"]'),
    viewFeedbackBtn: (0, _emberCliPageObject.clickable)('[data-test-id="view-feedback-btn"]')
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/module-tickets/tasks", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = (0, _emberCliPageObject.create)({
    newForm: {
      exists: (0, _emberCliPageObject.isVisible)('[data-test-task-modal-form]'),
      hasSubmitBtn: (0, _emberCliPageObject.isVisible)('[data-test-task-modal-form-submit]'),
      hasErrorName: (0, _emberCliPageObject.isVisible)('[data-test-field-name="title"] .form-field--errors'),
      hasFieldTitle: (0, _emberCliPageObject.isVisible)('[data-test-field-name="title"] input'),
      hasFieldDescription: (0, _emberCliPageObject.isVisible)('[data-test-field-name="description"] .froala-editor-container [contenteditable="true"]'),
      hasFieldGroupId: (0, _emberCliPageObject.isVisible)('[data-test-field-name="groupId"] .ember-power-select-trigger'),
      hasFieldOwnerId: (0, _emberCliPageObject.isVisible)('[data-test-field-name="ownerId"] .ember-power-select-trigger'),
      hasFieldStatus: (0, _emberCliPageObject.isVisible)('[data-test-field-name="status"] .ember-power-select-trigger'),
      hasFieldNotifyBefore: (0, _emberCliPageObject.isVisible)('[data-test-field-name="notifyBefore"] .ember-power-select-trigger'),
      hasFieldDueDate: (0, _emberCliPageObject.isVisible)('[data-test-field-name="dueDate"]'),
      hasErrorTitle: (0, _emberCliPageObject.isVisible)('[data-test-field-name="title"] .form-field--errors'),
      hasGoogleCalenderVisible: (0, _emberCliPageObject.isVisible)('[data-test-id="gc_checkbox"]'),
      fillTitle: (0, _emberCliPageObject.fillable)('[data-test-field-name="title"] input'),
      fillDescription: (0, _emberCliPageObject.fillable)('[data-test-field-name="description"] .froala-editor-container [contenteditable="true"]'),
      getTitle: (0, _emberCliPageObject.value)('[data-test-field-name="title"] input'),
      getDescription: (0, _emberCliPageObject.value)('[data-test-field-name="description"] .froala-editor-container [contenteditable="true"]'),
      save: (0, _emberCliPageObject.clickable)('[data-test-task-modal-form-submit]'),
      cancel: (0, _emberCliPageObject.clickable)('[data-test-id="modal-cancel"]'),
      selectStatusDropdown: (0, _emberCliPageObject.clickable)('[data-test-field-name="status"]'),
      selectStatusOpen: (0, _emberCliPageObject.clickable)('[data-test-field-name="status"] [data-option-index="0"]'),
      selectStatusInProgress: (0, _emberCliPageObject.clickable)('[data-test-field-name="status"] [data-option-index="1"]'),
      selectStatusCompleted: (0, _emberCliPageObject.clickable)('[data-test-field-name="status"] [data-option-index="2"]'),
      selectNotifyNever: (0, _emberCliPageObject.clickable)('[data-test-field-name="notifyBefore"] [data-option-index="0"]'),
      selectNotify2Hours: (0, _emberCliPageObject.clickable)('[data-test-field-name="notifyBefore"] [data-option-index="5"]')
    }
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/relationship-map", ["exports", "ember-cli-page-object", "freshservice/tests/pages/components/utils/form-fields", "ember-cli-page-object/macros", "ember-power-select/test-support/helpers"], function (_exports, _emberCliPageObject, _formFields, _macros, _helpers) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  // map elements
  var mapNodes = '[data-test-id=map-nodes]';
  var mapLinks = '[data-test-id=map-link]';
  var containerSvg = '[data-test-id=relationship-map-svg]';
  var mapTooltip = '[data-test-id=map-tooltip]'; //Level Change elements

  var mapSettingsButton = '[data-test-id=map-settings-btn]';
  var mapSettingsDd = '[data-test-id=map-type-dd]';
  var mapLoadingIndicator = '[data-test-id=map-loading-indicator]';
  var name = '[data-test-id=node-name]';
  var type = '[data-test-id=node-type]';
  var icon = '[data-test-id=node-icon]';
  var boundingBox = '[data-test-id=node-box]';
  var nodeLink = '[data-test-id=node-link]';
  var incidentCount = '[data-test-id=incident-count]'; // zoom interactions

  var resetBtn = '[data-test-id=reset]';
  var zoomInBtn = '[data-test-id=zoom-in]';
  var zoomOutBtn = '[data-test-id=zoom-out]';
  var panContainer = '[data-test-id=pan-container]'; //Node Hover Tooltip Elements

  var hoverTooltip = '[data-test-id=node-hover-actions]';
  var viewRelationshipMapButton = '[data-test-id=view-relationship-map]';
  var viewNodeDetailsButton = '[data-test-id=view-node-details]';
  var detailsModal = '[data-test-id=details-modal-header]';
  var addModal = '[data-test-id=add-modal-header]';
  var viewAddModalButton = '[data-test-id=view-add-modal]';
  var openIncidentCount = '[data-test-id=hovered-node-open-incidents]'; // Map add sidepane

  var addRelationshipTable = '[data-test-id=add-relationship-table] .lt-row';
  var checkBoxCell = '[data-test-id=check-box-cell]';
  var assetName = '[data-test-id=asset-name]';
  var addRelationshipSubmit = '[data-test-id=relationship-add-submit]';
  var relationshipTypeDropdown = '[data-test-field-name=relationship-type-wrapper]';
  var relationshipDropdownOptions = '[data-test-field-name=relationship-type-wrapper] .ember-power-select-option';
  var relationshipTypeName = '[data-test-id=rel-name]';
  var entitySubNodeTypeDropdown = '[data-test-field-name=subEntityType]';
  var prevButton = '[data-test-id=pageNavPrev]';
  var nextButton = '[data-test-id=pageNavNext]';
  var nodeSearchBox = '[data-test-id=relationship-node-search]'; //user details

  var locationName = '[data-test-id=location-name]';
  var userEmail = '[data-test-id=user-email-id]';
  var reportingManager = '[data-test-id=reporting-manager]'; //Asset details

  var assetState = '[data-test-id=asset-state]';
  var usedBy = '[data-test-id=used-by]';
  var managedBy = '[data-test-id=managed-by]';
  var assetImpact = '[data-test-id=asset-impact]'; //Dept details

  var departmentHead = '[data-test-id=department-head]';
  var primeUser = '[data-test-id=prime-user]'; //Unresolved issues

  var issueName = '[data-test-id=issue-name]';
  var userName = '[data-test-id=user-name]';
  var startDate = '[data-test-id=start-date]';
  var endDate = '[data-test-id=end-date]';
  var changesTabNav = '[data-test-id=unresolved-issue-tabs] .changes-tab.tabs__item__nav';
  var changesCardContainer = '[data-test-id=changes-tab-content] [data-test-id=cards-container]';
  var ticketsCardContainer = '[data-test-id=tickets-tab-content] [data-test-id=cards-container]';

  var _default = (0, _emberCliPageObject.create)({
    //elements
    containerSvg: containerSvg,
    clickMapSettingsButton: (0, _emberCliPageObject.clickable)(mapSettingsButton),
    navigateToPrevPage: (0, _emberCliPageObject.clickable)(prevButton),
    navigateToNextPage: (0, _emberCliPageObject.clickable)(nextButton),
    routeMapToCurrentNode: (0, _emberCliPageObject.clickable)(viewRelationshipMapButton),
    viewNodeDetails: (0, _emberCliPageObject.clickable)(viewNodeDetailsButton),
    viewAddModal: (0, _emberCliPageObject.clickable)(viewAddModalButton),
    isMapTooltipVisible: (0, _emberCliPageObject.hasClass)("tooltip-active", mapTooltip),
    // dom exists - fields
    isSvgVisible: (0, _emberCliPageObject.isVisible)(containerSvg),
    isMapSettingsDdVisible: (0, _emberCliPageObject.isVisible)(mapSettingsDd),
    isMapLoadingIndicatorVisible: (0, _emberCliPageObject.isVisible)(mapLoadingIndicator),
    isRelDetailsModalVisible: (0, _emberCliPageObject.isVisible)(detailsModal),
    viewAddModalVisible: (0, _emberCliPageObject.isVisible)(addModal),
    // zoom actions
    reset: (0, _emberCliPageObject.clickable)(resetBtn),
    zoomIn: (0, _emberCliPageObject.clickable)(zoomInBtn),
    zoomOut: (0, _emberCliPageObject.clickable)(zoomOutBtn),
    mapTransform: (0, _emberCliPageObject.attribute)('transform', panContainer),
    mapScale: (0, _macros.getter)(function () {
      var regExp = /scale\((.*)\)/;
      return parseInt(regExp.exec(this.mapTransform)[1]);
    }),
    isHoverTooltipVisible: (0, _emberCliPageObject.isVisible)(hoverTooltip),
    mapTranslate: (0, _macros.getter)(function () {
      var regExp = /\(([^)]+)\)/;
      return regExp.exec(this.mapTransform)[1];
    }),
    rootNodeTranslate: (0, _macros.getter)(function () {
      var regExp = /\(([^)]+)\)/,
          stringCoordinates = regExp.exec(this.nodes[0].transform)[1],
          // eg: stringCoordinates = "100.112, 100.112"
      roundedCoordinates = stringCoordinates.split(',').map(function (coordinate) {
        return Math.round(parseInt(coordinate));
      }); // roundedCoordinates = [100,100]

      return roundedCoordinates;
    }),
    searchRelationshipType: function searchRelationshipType(term) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _helpers.clickTrigger)(relationshipTypeDropdown);

              case 2:
                _context.next = 4;
                return (0, _helpers.typeInSearch)(term);

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    },
    searchNode: (0, _emberCliPageObject.fillable)(nodeSearchBox),
    // collections
    nodes: (0, _emberCliPageObject.collection)(mapNodes, {
      name: (0, _emberCliPageObject.text)(name),
      type: (0, _emberCliPageObject.text)(type),
      incidentCount: (0, _emberCliPageObject.text)(incidentCount),
      boxRadius: (0, _emberCliPageObject.attribute)('rx', boundingBox),
      iconName: (0, _emberCliPageObject.attribute)('href', icon),
      transform: (0, _emberCliPageObject.attribute)('transform'),
      isIncidentCountDisplayed: (0, _emberCliPageObject.isVisible)(incidentCount),
      // drag interactions
      startDrag: (0, _emberCliPageObject.triggerable)('mousedown', boundingBox, {
        // define the starting point of drag
        eventProperties: {
          clientX: 0,
          clientY: 0
        }
      }),
      dragToPosition: (0, _emberCliPageObject.triggerable)('mousemove', boundingBox, {
        // define the point to which dragged
        eventProperties: {
          clientX: 100,
          clientY: 100
        }
      }),
      stopDrag: (0, _emberCliPageObject.triggerable)('mouseup', boundingBox),
      hasActiveClass: (0, _emberCliPageObject.hasClass)('active', boundingBox),
      showHoverTooltip: (0, _emberCliPageObject.triggerable)('mouseover', boundingBox)
    }),
    // Add relationship
    assetsList: (0, _emberCliPageObject.collection)(addRelationshipTable, {
      selectRow: (0, _emberCliPageObject.clickable)(checkBoxCell),
      assetName: (0, _emberCliPageObject.text)(assetName)
    }),
    isSubEntityTypeDropdownVisible: (0, _emberCliPageObject.isVisible)(entitySubNodeTypeDropdown),
    // unresolved issue cards
    ticketCards: (0, _emberCliPageObject.collection)(ticketsCardContainer, {
      userName: (0, _emberCliPageObject.text)(userName),
      issueName: (0, _emberCliPageObject.text)(issueName)
    }),
    changeCards: (0, _emberCliPageObject.collection)(changesCardContainer, {
      userName: (0, _emberCliPageObject.text)(userName),
      issueName: (0, _emberCliPageObject.text)(issueName),
      startDate: (0, _emberCliPageObject.text)(startDate),
      endDate: (0, _emberCliPageObject.text)(endDate)
    }),
    //User details
    locationNameValue: (0, _emberCliPageObject.text)(locationName),
    reportingManagerValue: (0, _emberCliPageObject.text)(reportingManager),
    userEmailValue: (0, _emberCliPageObject.text)(userEmail),
    //asset details
    assetStateValue: (0, _emberCliPageObject.text)(assetState),
    usedByValue: (0, _emberCliPageObject.text)(usedBy),
    managedByValue: (0, _emberCliPageObject.text)(managedBy),
    assetImpactValue: (0, _emberCliPageObject.text)(assetImpact),
    openIncidentCount: (0, _emberCliPageObject.text)(openIncidentCount),
    //dept details
    departmentHeadValue: (0, _emberCliPageObject.text)(departmentHead),
    primeUserValue: (0, _emberCliPageObject.text)(primeUser),
    relationshipDropdownOptions: (0, _emberCliPageObject.collection)(relationshipDropdownOptions, {
      name: (0, _emberCliPageObject.text)(relationshipTypeName)
    }),
    addRelationship: (0, _emberCliPageObject.clickable)(addRelationshipSubmit),
    selectChangeTab: (0, _emberCliPageObject.clickable)(changesTabNav),
    links: (0, _emberCliPageObject.collection)(mapLinks, {
      mouseHover: (0, _emberCliPageObject.triggerable)('mouseover', nodeLink),
      mouseOut: (0, _emberCliPageObject.triggerable)('mouseout', nodeLink),
      hasActiveClass: (0, _emberCliPageObject.hasClass)('active')
    }),
    formUtils: _formFields.default
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/ui-components/attach-files/attach-files", ["exports", "ember-cli-page-object", "@ember/test-helpers"], function (_exports, _emberCliPageObject, _testHelpers) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var _default = (0, _emberCliPageObject.create)({
    hasAttachFilesContainer: (0, _emberCliPageObject.isVisible)('[data-test-id="attach-files"]'),
    hasAttachFilesBtn: (0, _emberCliPageObject.isVisible)('[data-test-id="attach-files"] #attach_file'),
    hasExtraInfo: (0, _emberCliPageObject.isVisible)('[data-test-id="attach-files"] .attach-help-size'),
    hasLoader: (0, _emberCliPageObject.isPresent)('[data-test-id="attached-file"] .attach-file-loader'),
    hasDragAndDrop: (0, _emberCliPageObject.isVisible)('[data-test-id="attachment-list-container-drag-drop"] .drop-zone-container'),
    isDragAndDropZoneHidden: (0, _emberCliPageObject.hasClass)('hide-drag-drop', '[data-test-id="attachment-list-container-drag-drop"] .drop-zone-container'),
    hasUnsupportedDataWarningModal: (0, _emberCliPageObject.isVisible)('.unsupported-content-warning'),
    closeUnsupportedDataWarningModal: (0, _emberCliPageObject.clickable)('[data-test-id="modal-submit"]'),
    unsupportedDataWarningModalText: (0, _emberCliPageObject.text)('.unsupported-content-warning'),
    addAttachment: function addAttachment(fileName) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.triggerEvent)('input#attach_file', 'change', {
                  files: [new Blob([fileName])]
                });

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    },
    dropAttachments: function dropAttachments(fileName, type) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.triggerEvent)('[data-test-id="attachment-list-container-drag-drop"]', 'drop', {
                  dataTransfer: {
                    files: [new File([fileName], fileName, {
                      type: type
                    })]
                  }
                });

              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }))();
    },
    dragOver: function dragOver(fileName) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return (0, _testHelpers.triggerEvent)('[data-test-id="attachment-list-container-drag-drop"]', 'dragover', {
                  dataTransfer: {
                    files: [new Blob([fileName])]
                  }
                });

              case 2:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }))();
    },
    dragEnter: function dragEnter(fileName) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return (0, _testHelpers.triggerEvent)('[data-test-id="attachment-list-container-drag-drop"]', 'dragenter', {
                  dataTransfer: {
                    files: [new Blob([fileName])]
                  }
                });

              case 2:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }))();
    },
    dragLeave: function dragLeave() {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return (0, _testHelpers.triggerEvent)('[data-test-id="attachment-list-container-drag-drop"]', 'dragleave', {});

              case 2:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }))();
    },
    removeAttachment: (0, _emberCliPageObject.collection)('[data-test-id="attached-file"]', {
      deleteFile: (0, _emberCliPageObject.clickable)('.delete-file')
    }),
    attachmentsCount: (0, _emberCliPageObject.count)('[data-test-id="attached-file"]')
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/ui-components/common-filter/list", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = (0, _emberCliPageObject.create)({
    openFilter: (0, _emberCliPageObject.clickable)('.menu-trigger'),
    selectedFilter: (0, _emberCliPageObject.text)('.filter-name'),
    modalExists: (0, _emberCliPageObject.isVisible)('.menu-list-container')
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/ui-components/common-module/entity-templates", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = (0, _emberCliPageObject.create)({
    isTemplatesRendered: (0, _emberCliPageObject.isVisible)('.entity-template'),
    hasTemplatesDropdown: (0, _emberCliPageObject.isVisible)('.template-list-dropdown'),
    hasClearTemplatesBtn: (0, _emberCliPageObject.isVisible)('.clear-template'),
    haRecentTemplates: (0, _emberCliPageObject.isVisible)('.recent-templates'),
    hasCreateTemplateBtn: (0, _emberCliPageObject.isVisible)('.create-template'),
    hasTemplateSearch: (0, _emberCliPageObject.isVisible)('[data-test-field-name="template"] .ember-power-select-search'),
    applyRecentTemplate: (0, _emberCliPageObject.clickable)('.recent-templates .recent-template-list-item button'),
    triggerTemplateDropdown: (0, _emberCliPageObject.clickable)('[data-test-field-name="template"] .ember-basic-dropdown-trigger'),
    clearAppliedTemplate: (0, _emberCliPageObject.clickable)('.clear-template'),
    searchTemplate: (0, _emberCliPageObject.fillable)('[data-test-field-name="template"] .ember-power-select-search-input')
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/ui-components/form-fields/textfield-multiselect", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var container = '[data-test-id=textfeild-multiselect-container]';
  var pill = '[data-test-id="textfeild-multiselect-pill"]';
  var pillClose = '[data-test-id="textfeild-multiselect-pill-close"]';
  var input = '.fs-multiple-option-input';

  var _default = (0, _emberCliPageObject.create)({
    // text
    containerText: (0, _emberCliPageObject.text)(container),
    // collection
    pill: (0, _emberCliPageObject.collection)(pill),
    pillClose: (0, _emberCliPageObject.collection)(pillClose),
    //fillable
    fillInInput: (0, _emberCliPageObject.fillable)(input),
    // value
    value: (0, _emberCliPageObject.value)(input),
    //Clickable
    editPill: (0, _emberCliPageObject.clickable)(pill),
    removePill: (0, _emberCliPageObject.clickable)(pillClose),
    // Selector
    inputEle: input,
    //blur or focusout  
    blurInput: (0, _emberCliPageObject.blurrable)(input),
    // Key
    backspaceKey: "Backspace",
    enterKey: "Enter",
    colonKey: ";",
    commaKey: ","
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/ui-components/progress-chart", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var progressChart = '[data-test-id=progress-charts]';
  var progressBarWrapper = '[data-test-id=graph-item-wrapper]';
  var progressBar = '[data-test-id=progress-bar]';
  var progressLine = '[data-test-id=progress-line]';
  var overflowLine = '[data-test-id=overflow-line]';
  var baseLine = '[data-test-id=base-line]';
  var barTitle = '[data-test-id=bar-title]';
  var barDescription = '[data-test-id=bar-description]';
  var progressCount = '[data-test-id=progress-count]';
  var totalText = '[data-test-id=total-text]';
  var clickFirstItem = '[data-test-id="graph-item-wrapper"]:first-child';

  var _default = (0, _emberCliPageObject.create)({
    // visible
    isChartVisible: (0, _emberCliPageObject.isVisible)(progressChart),
    //collection
    progressBars: (0, _emberCliPageObject.collection)({
      itemScope: progressBarWrapper,
      item: {
        totalText: (0, _emberCliPageObject.text)(totalText),
        progressCount: (0, _emberCliPageObject.text)(progressCount),
        barDescription: (0, _emberCliPageObject.text)(barDescription),
        barTitle: (0, _emberCliPageObject.text)(barTitle),
        progressLineColour: (0, _emberCliPageObject.attribute)('stroke', progressLine),
        baseLineColour: (0, _emberCliPageObject.attribute)('stroke', baseLine),
        overflowLineColour: (0, _emberCliPageObject.attribute)('stroke', overflowLine),
        barWidth: (0, _emberCliPageObject.attribute)('stroke-width', progressBar),
        isProgressLineVisible: (0, _emberCliPageObject.isVisible)(progressLine),
        isOverFlowLineVisible: (0, _emberCliPageObject.isVisible)(overflowLine)
      }
    }),
    // events
    clickFirstItem: (0, _emberCliPageObject.clickable)(clickFirstItem)
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/ui-components/ui-pills", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var pills = '[data-test-id=ui-pills]';
  var pillsEmpty = '[data-test-id=ui-pills-empty]';
  var remainingPills = '[data-test-id=remaining-pills]';
  var remainingPillsButton = '[data-test-id=remaining-pills-button]';

  var _default = (0, _emberCliPageObject.create)({
    //text
    pillsEmptyText: (0, _emberCliPageObject.text)(pillsEmpty),
    remainingPillsCount: (0, _emberCliPageObject.text)(remainingPillsButton),
    // visible
    isRemainingPillsButtonVisible: (0, _emberCliPageObject.isVisible)(remainingPillsButton),
    //triggerable
    checkRemainingPills: (0, _emberCliPageObject.triggerable)('mouseover', remainingPillsButton),
    //collection
    visiblePills: (0, _emberCliPageObject.collection)(pills),
    pillsOnHover: (0, _emberCliPageObject.collection)(remainingPills)
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/ui-components/workspace/breadcrumb", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = (0, _emberCliPageObject.create)({
    globalWorkspace: (0, _emberCliPageObject.isVisible)('[data-test-id="global-workspace"]'),
    customWorkspace: (0, _emberCliPageObject.isVisible)('[data-test-id="custom-workspace"]'),
    adminLink: (0, _emberCliPageObject.isVisible)('[data-test-id="admin-link"]')
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/ui-components/workspace/logo", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = (0, _emberCliPageObject.create)({
    workspaceLogo: (0, _emberCliPageObject.isVisible)('[data-test-id="ws-logo"]'),
    workspaceName: (0, _emberCliPageObject.isVisible)('[data-test-id="ws-name"]')
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/components/utils/form-fields", ["exports", "ember-cli-page-object", "@ember/test-helpers", "ember-power-select/test-support", "ember-power-select/test-support/helpers", "ember-basic-dropdown/test-support/helpers", "moment"], function (_exports, _emberCliPageObject, _testHelpers, _testSupport, _helpers, _helpers2, _moment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var _default = (0, _emberCliPageObject.create)({
    clickDropdownOption: (0, _emberCliPageObject.clickOnText)('.ember-basic-dropdown-content'),
    findDOMByText: function findDOMByText(text, rootTree) {
      if (!rootTree) throw 'Should mention root DOM';
      var treeWalker = document.createTreeWalker(rootTree, NodeFilter.SHOW_TEXT);

      while (treeWalker.nextNode()) {
        var node = treeWalker.currentNode;
        if (node.nodeType === Node.TEXT_NODE && node.textContent === text) return node.parentNode;
      }
    },

    /**
     * @param {string} testId - data test id of the field
     * @param {string} optionText - option text to select
     * @param {boolean} strictCheck - if dropdown content has same text, we can use this option
     * @param {string} rootElement - if trigger and dropdown content has same text we can specify rootElement
     */
    selectBasicDropdown: function selectBasicDropdown(testId, optionText) {
      var _arguments = arguments,
          _this = this;

      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var strictCheck, rootElement, field;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                strictCheck = _arguments.length > 2 && _arguments[2] !== undefined ? _arguments[2] : false;
                rootElement = _arguments.length > 3 && _arguments[3] !== undefined ? _arguments[3] : '';
                field = "[data-test-id=".concat(testId, "]");
                _context.next = 5;
                return (0, _helpers2.clickTrigger)(field);

              case 5:
                if (!strictCheck) {
                  _context.next = 11;
                  break;
                }

                field = (0, _testHelpers.find)(field);
                field = rootElement ? field.querySelector(rootElement) : field;
                (0, _testHelpers.click)(_this.findDOMByText(optionText, field));
                _context.next = 15;
                break;

              case 11:
                _context.t0 = optionText;

                if (!_context.t0) {
                  _context.next = 15;
                  break;
                }

                _context.next = 15;
                return _this.clickDropdownOption(optionText);

              case 15:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    },

    /**
     * Selects the given option in a basic dropdown selected via the given class name
     *
     * @public
     * @param {string} className - class name of the dropdown
     * @param {string} optionText - option text to select
     */
    selectBasicDropdownByClassName: function selectBasicDropdownByClassName(className, optionText) {
      var _this2 = this;

      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var fieldSelector;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                fieldSelector = ".".concat(className);
                _context2.next = 3;
                return (0, _helpers2.clickTrigger)(fieldSelector);

              case 3:
                _context2.next = 5;
                return _this2.clickDropdownOption(optionText);

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }))();
    },

    /**
     * Returns the selected option text in a basic dropdown selected via the given test id
     *
     * @public
     * @param {string} testId - data test id of the field
     */
    getBasicDropdownSelectedText: function getBasicDropdownSelectedText(testId) {
      var fieldSelector = "[data-test-id=".concat(testId, "] .ember-basic-dropdown-trigger");
      return (0, _testHelpers.find)(fieldSelector).innerText.trim();
    },

    /**
     * Selects the given single option in a power select via given test id
     *
     * @public
     * @param {string} fieldName - name of the field
     * @param {string} optionToSelect - value of the option
     */
    selectSingle: function selectSingle(fieldName, optionToSelect) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        var fieldSelector;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                fieldSelector = "[data-test-field-name=\"".concat(fieldName, "\"]");
                _context3.next = 3;
                return (0, _helpers.clickTrigger)(fieldSelector);

              case 3:
                _context3.next = 5;
                return (0, _testSupport.selectChoose)(fieldSelector, '.ember-power-select-option', optionToSelect);

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }))();
    },
    selectSingleByClassName: function selectSingleByClassName(className, optionToSelect) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return (0, _helpers.clickTrigger)("".concat(className));

              case 2:
                _context4.next = 4;
                return (0, _testSupport.selectChoose)("".concat(className), '.ember-power-select-option', optionToSelect);

              case 4:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }))();
    },

    /**
     * @public
     * @param {string} fieldName - name of the field
     * @param {boolean} getOptions - will query the field options if passed as true
     * @returns {object} { label, selected, options, count }
     */
    getDataForField: function getDataForField(fieldName) {
      var _arguments2 = arguments;
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
        var getOptions, field, label, options, selected, properties, _options, _field$querySelector$, _field$querySelector$2, _field$querySelector$3, _field$querySelector$4, _field$querySelector, _field$querySelector$5, dateValue, timeValue;

        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                getOptions = _arguments2.length > 1 && _arguments2[1] !== undefined ? _arguments2[1] : false;
                field = (0, _testHelpers.find)("[data-test-field-name=\"".concat(fieldName, "\"]"));
                label = field.querySelector('label') || '';
                options = [];
                selected = null;
                properties = {};

                if (label) {
                  label = label.cloneNode(true); // when label has star (required field)

                  if (typeof label.children[0] !== 'undefined') {
                    label.removeChild(label.children[0]);
                  }

                  label = label.textContent.trim();
                }

                if (!getOptions) {
                  _context5.next = 25;
                  break;
                }

                if (!field.classList.contains('autocomplete-field')) {
                  _context5.next = 12;
                  break;
                }

                // autocomplete field options are not prepopulated, they are fetched on demand
                // get selected
                if (field.querySelectorAll('.ember-power-select-multiple-option').length) {
                  selected = [];
                  _options = field.querySelectorAll('.ember-power-select-multiple-option');

                  _options.forEach(function (option) {
                    option = option.cloneNode(true); // remove the close button

                    option.removeChild(option.children[0]);
                    selected.push(option.innerText.trim());
                  });
                } else {
                  // get selected
                  if (field.querySelector('.ember-power-select-selected-item')) {
                    selected = (_field$querySelector$ = field.querySelector('.ember-power-select-selected-item').innerText) === null || _field$querySelector$ === void 0 ? void 0 : _field$querySelector$.trim();
                  }
                }

                _context5.next = 25;
                break;

              case 12:
                if (!(field.classList.contains('select-field') || field.classList.contains('dependent-select-dropdown-field'))) {
                  _context5.next = 24;
                  break;
                }

                // get selected
                if (field.querySelector('.ember-power-select-selected-item')) {
                  selected = (_field$querySelector$2 = field.querySelector('.ember-power-select-selected-item').innerText) === null || _field$querySelector$2 === void 0 ? void 0 : _field$querySelector$2.trim();
                } // click


                _context5.next = 16;
                return (0, _helpers.clickTrigger)("[data-test-field-name=\"".concat(fieldName, "\"]"));

              case 16:
                _context5.next = 18;
                return (0, _testHelpers.findAll)("[data-test-field-name=\"".concat(fieldName, "\"] .ember-power-select-option"));

              case 18:
                options = _context5.sent;
                options = options.map(function (option) {
                  return option.innerText;
                });
                properties['editable'] = !field.querySelector('.ember-power-select-trigger').ariaDisabled;
                properties['required'] = field.querySelectorAll('label .star').length !== 0;
                _context5.next = 25;
                break;

              case 24:
                if (field.classList.contains('radio-group')) {
                  options = field.querySelectorAll('[type=radio]');
                  selected = {
                    value: field.querySelector('input:checked').value,
                    checked: field.querySelector('input:checked').checked
                  };
                }

              case 25:
                // Date fields
                if (field.classList.contains('date-field')) {
                  selected = (_field$querySelector$3 = field.querySelector('input[type="text"].date-text-field').value) === null || _field$querySelector$3 === void 0 ? void 0 : _field$querySelector$3.trim();
                } else if (field.classList.contains('date-time-split-field')) {
                  dateValue = (_field$querySelector$4 = field.querySelector('input[type="text"].date-text-field').value) === null || _field$querySelector$4 === void 0 ? void 0 : _field$querySelector$4.trim();
                  timeValue = (_field$querySelector = field.querySelector('.time-picker-wrapper .ember-power-select-selected-item')) === null || _field$querySelector === void 0 ? void 0 : (_field$querySelector$5 = _field$querySelector.innerText) === null || _field$querySelector$5 === void 0 ? void 0 : _field$querySelector$5.trim();
                  selected = [dateValue, timeValue];
                }

                return _context5.abrupt("return", {
                  label: label,
                  selected: selected,
                  options: options,
                  count: options.length,
                  properties: properties
                });

              case 27:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }))();
    },

    /**
     * Select the given option with given search term in a
     * autocomplete field selected via test field name
     *
     * @public
     * @param {string} fieldName - name of the field
     * @param {string} searchTerm - search term to be typed
     * @param {string} optionToSelect - value of the option
     */
    autocompleteSelectMultiple: function autocompleteSelectMultiple(fieldName, searchTerm, optionToSelect) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
        var fieldSelector;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                fieldSelector = "[data-test-field-name=\"".concat(fieldName, "\"]");
                _context6.next = 3;
                return (0, _helpers.clickTrigger)(fieldSelector);

              case 3:
                _context6.next = 5;
                return (0, _helpers.typeInSearch)(fieldSelector, searchTerm);

              case 5:
                _context6.next = 7;
                return (0, _testSupport.selectChoose)(fieldSelector, '.ember-power-select-option', optionToSelect);

              case 7:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }))();
    },
    autocompleteSelectMultipleWithoutSearch: function autocompleteSelectMultipleWithoutSearch(fieldName, optionToSelect) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
        var fieldSelector;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                fieldSelector = "[data-test-field-name=\"".concat(fieldName, "\"]");
                _context7.next = 3;
                return (0, _helpers.clickTrigger)(fieldSelector);

              case 3:
                _context7.next = 5;
                return (0, _testSupport.selectChoose)(fieldSelector, '.ember-power-select-option', optionToSelect);

              case 5:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }))();
    },

    /**
     * Selects the given date in a date field selected via test field name
     *
     * @public
     * @param {string} fieldName - name of the field
     * @param {string} date - formattedDate (YYYY-MM-DD)
     */
    calendarSelectSingleDate: function calendarSelectSingleDate(fieldName, date) {
      var _this3 = this;

      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return (0, _helpers2.clickTrigger)("[data-test-field-name=\"".concat(fieldName, "\"]"));

              case 2:
                _context8.next = 4;
                return _this3.selectDateInCalendar(fieldName, date);

              case 4:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }))();
    },

    /**
     * Can select date from different month and year in a calendar via test field name
     *
     * @public
     * @param {string} fieldName - name of the field - data-test-field-name
     * @param {number, string} - month to be chosen [ 00 -> Jan ,.., 11 -> Dec ](moment std)
     * @param {number, string} - year to be chosen 
     * @param {string} fullDate - formattedDate (YYYY-MM-DD)
     * 
     * Asking for month & year via arguments and not using the 'date' value to 
     * figure them out because of having different date format possibilities.
     */
    calendarSelectAnySingleDate: function calendarSelectAnySingleDate(fieldName, mon, year, fullDate) {
      var _this4 = this;

      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
        var month, currentMonth;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return (0, _helpers2.clickTrigger)("[data-test-field-name=\"".concat(fieldName, "\"]"));

              case 2:
                month = (0, _moment.default)().month(mon).format("MMM");
                currentMonth = (0, _moment.default)().format('MMM');

                if (!(year != (0, _moment.default)().year())) {
                  _context9.next = 7;
                  break;
                }

                _context9.next = 7;
                return _this4.selectBasicDropdownByClassName("calendar-dropdown-year #year-dropdown", year);

              case 7:
                if (!(month != currentMonth)) {
                  _context9.next = 10;
                  break;
                }

                _context9.next = 10;
                return _this4.selectBasicDropdownByClassName("calendar-dropdown-month #month-dropdown", month);

              case 10:
                _context9.next = 12;
                return _this4.selectDateInCalendar(fieldName, fullDate);

              case 12:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9);
      }))();
    },
    selectDateInCalendar: function selectDateInCalendar(fieldName, date) {
      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
        var _document$querySelect;

        var fieldSelector, newUTCPikcer;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                fieldSelector = "[data-test-field-name=\"".concat(fieldName, "\"] [data-date=\"").concat(date, "\"]");
                _context10.next = 3;
                return (0, _testHelpers.click)(fieldSelector);

              case 3:
                // for new UTC pickers
                newUTCPikcer = (_document$querySelect = document.querySelector(fieldSelector)) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.closest('.date-picker-wrapper-utc');

                if (!newUTCPikcer) {
                  _context10.next = 7;
                  break;
                }

                _context10.next = 7;
                return (0, _testHelpers.click)(newUTCPikcer.querySelector('.btn-primary'));

              case 7:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10);
      }))();
    }
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/projects/index", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // Selectors
  var SELECTORS = {
    PAGE_HEADING: '.empty-state-container h3',
    PAGE_DESCRIPTION: '.empty-state-container p',
    PAGE_REVERT_IDENTITY_LINK: '.assumed-identity a',
    PROJECTS_CONTENT: 'iframe'
  };

  var _default = (0, _emberCliPageObject.create)({
    // visit
    visit: (0, _emberCliPageObject.visitable)("/project_management"),
    // text
    headingText: (0, _emberCliPageObject.text)(SELECTORS.PAGE_HEADING),
    descriptionText: (0, _emberCliPageObject.text)(SELECTORS.PAGE_DESCRIPTION),
    revertIdentityLink: (0, _emberCliPageObject.text)(SELECTORS.PAGE_REVERT_IDENTITY_LINK),
    // contents
    isIframePresent: (0, _emberCliPageObject.isPresent)(SELECTORS.PROJECTS_CONTENT)
  });

  _exports.default = _default;
});
define("freshservice/tests/pages/projects/project-management", ["exports", "ember-cli-page-object"], function (_exports, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // Selectors
  var SELECTORS = {
    PROJECTS_CONTENT: 'iframe'
  };

  var _default = (0, _emberCliPageObject.create)({
    // visit
    visit: (0, _emberCliPageObject.visitable)("/admin/project-management/admin-settings"),
    // contents
    isIframePresent: (0, _emberCliPageObject.isPresent)(SELECTORS.PROJECTS_CONTENT)
  });

  _exports.default = _default;
});
define("freshservice/tests/test-helper", ["freshservice/app", "freshservice/config/environment", "qunit", "@ember/test-helpers", "qunit-dom", "ember-qunit", "ember-a11y-testing/test-support", "freshservice/tests/helpers/flash-message"], function (_app, _environment, QUnit, _testHelpers, _qunitDom, _emberQunit, _testSupport, _flashMessage) {
  "use strict";

  (0, _qunitDom.setup)(QUnit.assert);
  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));
  (0, _testSupport.setupGlobalA11yHooks)(function () {
    return true;
  });
  (0, _emberQunit.start)();
});
define("freshservice/tests/unit/Class/business-rule-executor/action-processor-test", ["qunit", "ember-qunit", "freshservice/tests/lib/intl", "freshservice/mirage/fixtures/business-rules-executor", "freshservice/Class/business-rule-executor/action-processor", "freshservice/constants/business-rule-executor"], function (_qunit, _emberQunit, _intl, _businessRulesExecutor, _actionProcessor, _businessRuleExecutor) {
  "use strict";

  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

  function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Unit | Class | business-rule-executor | action-processor', function (hooks) {
    (0, _emberQunit.setupTest)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var _this = this;

      var intl, moduleFields;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              intl = this.owner.lookup('service:intl');

              this.getFormField = function (fields, fieldName) {
                return fields.find(function (f) {
                  return f.name === fieldName;
                });
              };

              moduleFields = {
                getFormField: function getFormField(fieldName) {
                  return _this.getFormField(Ember.A(_toConsumableArray(_businessRulesExecutor.default.ticketFormFields)), fieldName);
                }
              };
              this.services = {
                moduleFields: moduleFields,
                intl: intl
              };

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('#1 processActions test', function (assert) {
      var action = [{
        "name": ["status"],
        "values": [2, 3, 4],
        "property": "populate"
      }, {
        "name": ["source"],
        "values": [3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16],
        "property": "remove"
      }, {
        "name": ["priority"],
        "property": "disable"
      }, {
        "name": ["priority"],
        "property": "mandate"
      }, {
        "name": ["description", "approval_request", "config_item_ids", "attachment_ids"],
        "property": "hide"
      }, {
        "name": ["category"],
        "values": [{
          "display_id": 267,
          "nested_options": [{
            "display_id": 268,
            "nested_options": [{
              "display_id": 269,
              "nested_options": null
            }]
          }]
        }],
        "property": "remove",
        "nested_levels": ["sub_category", "item_category"]
      }, {
        "name": ["department_id"],
        "values": [7, 5],
        "property": "populate"
      }],
          formSchema = Ember.A(_toConsumableArray(_businessRulesExecutor.default.ticketFormSchema)),
          module = "ticket",
          services = this.services;
      var trigger = "status";
      var fieldStates = {},
          actionProcessor1 = new _actionProcessor.default({
        formSchema: formSchema,
        modelSchema: {},
        module: module,
        trigger: trigger,
        services: services,
        fieldStates: fieldStates,
        nonFormSchemaFields: _businessRuleExecutor.nonFormSchemaFields
      });
      var sourceField = this.getFormField(formSchema, "source"),
          departmentField = this.getFormField(formSchema, "department_id"),
          categoryField = this.getFormField(formSchema, "category"),
          statusField = this.getFormField(formSchema, "status");
      assert.notEqual(sourceField.getChoices.length, 2, "Source Field actions - yet to applied");
      assert.notEqual(departmentField.getChoices.length, 2, "department Field actions - yet to applied");
      assert.notEqual(categoryField.fields[0].fields[0].getChoices.length, 4, "category Field actions - yet to applied");
      actionProcessor1.processActions(action);
      actionProcessor1.applyActions();
      assert.notEqual(statusField.getChoices.length, action[0].values.length, "Status Field actions not applied, since the trigger is 'status'");
      assert.equal(sourceField.getChoices.length, 2, "Source Field actions has applied");
      assert.equal(departmentField.getChoices.length, 2, "department Field actions has applied");
      assert.equal(categoryField.fields[0].fields[0].getChoices.length, 5, "category Field actions has applied");
      trigger = "source";
      var actionProcessor2 = new _actionProcessor.default({
        formSchema: formSchema,
        modelSchema: {},
        module: module,
        trigger: trigger,
        services: services,
        fieldStates: fieldStates,
        nonFormSchemaFields: _businessRuleExecutor.nonFormSchemaFields
      });
      actionProcessor2.processActions(action);
      actionProcessor2.fieldStates['invalid-field'] = {};
      actionProcessor2.applyActions();
      assert.equal(statusField.getChoices.length, action[0].values.length, "Status Field actions has applied, since the trigger is changed now");
    });
  });
});
define("freshservice/tests/unit/Class/business-rule-executor/condition-checker-test", ["qunit", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/mirage/fixtures/ticket-form-fields", "freshservice/Class/business-rule-executor/condition-checker"], function (_qunit, _emberQunit, _testSupport, _ticketFormFields, _conditionChecker) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Unit | Class | business-rule-executor | condition-checker', function (hooks) {
    (0, _emberQunit.setupTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var store;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.server.loadFixtures('tickets');
              this.server.loadFixtures('users');
              store = this.owner.lookup('service:store');
              _context.next = 5;
              return store.findRecord('ticket', 13);

            case 5:
              this.ticket = _context.sent;
              _context.next = 8;
              return store.findRecord('user', 22);

            case 8:
              this.user = _context.sent;

            case 9:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    (0, _qunit.test)('#1 condition.isSatisfied "ticket form field - urgency" test', function (assert) {
      var condition = {
        "name": "urgency",
        "value": "2",
        "operator": "is",
        "evaluate_on": "ticket"
      };
      var satisfied = (0, _conditionChecker.isSatisfied)(condition, _ticketFormFields.default, this.ticket, {
        currentUserData: this.user
      });
      assert.notEqual(satisfied, true, "BR form default field condition not satisfied");
      this.ticket.urgency = 2;
      satisfied = (0, _conditionChecker.isSatisfied)(condition, _ticketFormFields.default, this.ticket, {});
      assert.equal(satisfied, true, "BR form default field condition satisfied");
    });
    (0, _qunit.test)('#2 condition.isSatisfied "user data - email" test', function (assert) {
      var condition = {
        "name": "email",
        "value": "sample@freshservice.com",
        "operator": "contains",
        "evaluate_on": "current_user"
      };
      this.user.email = "";
      var satisfied = (0, _conditionChecker.isSatisfied)(condition, _ticketFormFields.default, this.ticket, {
        currentUserData: this.user
      });
      assert.notEqual(satisfied, true, "BR user field condition not satisfied");
      this.user.email = "sample@freshservice.com";
      satisfied = (0, _conditionChecker.isSatisfied)(condition, _ticketFormFields.default, this.ticket, {
        currentUserData: this.user
      });
      assert.equal(satisfied, true, "BR user field condition satisfied");
    });
    (0, _qunit.test)('#3 condition.isSatisfied "lookup fields" test', function (assert) {
      var lookupCondition = {
        "name": "customFields.lf_custom_lookup_depts",
        "value": "2",
        "operator": "is",
        "evaluate_on": "ticket"
      };
      this.ticket.customFields.lf_custom_lookup_depts = {
        "id": 2,
        "value": "Sales"
      };
      var satisfied = (0, _conditionChecker.isSatisfied)(lookupCondition, _ticketFormFields.default, this.ticket, {});
      assert.equal(satisfied, true, "BR single lookup condition satisfied");
      var multiLookupCondition = {
        "name": "customFields.msf_cus_luk_multi_depts",
        "value": "2",
        "operator": "includes",
        "evaluate_on": "ticket"
      };
      this.ticket.customFields.msf_cus_luk_multi_depts = [{
        "id": 2,
        "value": "Sales"
      }, {
        "id": 4,
        "value": "Finance"
      }];
      satisfied = (0, _conditionChecker.isSatisfied)(multiLookupCondition, _ticketFormFields.default, this.ticket, {});
      assert.equal(satisfied, true, "BR multi lookup condition satisfied");
    });
    (0, _qunit.test)('#4 condition.isSatisfied "system fields" test', function (assert) {
      var condition = {
        "name": "portal",
        "value": "1",
        "operator": "is",
        "evaluate_on": "system"
      };
      this.user['accountData'] = {
        portal: {
          id: 1
        }
      };
      var satisfied = (0, _conditionChecker.isSatisfied)(condition, _ticketFormFields.default, this.ticket, {
        currentAccount: this.user
      });
      assert.equal(satisfied, true, "BR system field condition satisfied");
    });
    (0, _qunit.test)('#5 condition.isSatisfied "invalid condition" test', function (assert) {
      var condition = {
        "name": "urgency",
        "value": "2",
        "operator": "invalid_operator",
        "evaluate_on": "ticket"
      };
      var satisfied = (0, _conditionChecker.isSatisfied)(condition, _ticketFormFields.default, this.ticket, {});
      assert.notEqual(satisfied, true, "BR invalid_operator condition operator");
      condition = {
        "name": "custom_date",
        "operator": "is_not",
        "field_type": "date",
        "evaluate_on": "current_user"
      };
      satisfied = (0, _conditionChecker.isSatisfied)(condition, _ticketFormFields.default, this.ticket, {
        currentUserData: {}
      });
      assert.notEqual(satisfied, true, "BR invalid condition");
    });
  });
});
define("freshservice/tests/unit/Class/business-rule-executor/index-test", ["qunit", "ember-qunit", "ember-cli-mirage/test-support", "freshservice/tests/lib/intl", "freshservice/tests/lib/stub-current-user", "freshservice/mirage/fixtures/ticket-form-fields", "freshservice/constants/business-rule-executor", "freshservice/Class/business-rule-executor"], function (_qunit, _emberQunit, _testSupport, _intl, _stubCurrentUser, _ticketFormFields, _businessRuleExecutor, _businessRuleExecutor2) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var TEST_USER = {
    "first_name": "Support",
    "email": "sample@freshservice.com"
  };
  (0, _qunit.module)('Unit | Class | business-rule-executor', function (hooks) {
    (0, _emberQunit.setupTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    (0, _intl.setupTranslations)(hooks);
    hooks.beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var store;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              (0, _stubCurrentUser.stubCurrentUser)(TEST_USER);
              this.server.loadFixtures('tickets');
              store = this.owner.lookup('service:store');
              _context.next = 5;
              return store.findRecord('ticket', 13);

            case 5:
              this.ticket = _context.sent;
              this.currentUser = this.owner.lookup("service:current-user");

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    hooks.after(function () {
      this.owner.destroy("service:current-user");
    });
    (0, _qunit.test)('#1 brExecutor _processConditions test', function (assert) {
      var services = {
        currentUserData: this.currentUser,
        currentEntity: {
          ipsum: 'lorem'
        }
      },
          moduleConfig = {
        module: 'ticket',
        prefix: _businessRuleExecutor.customFieldNamePrefix['ticket']
      },
          brConfig = {
        business_rules: [],
        services: services
      };
      this.brExecutor = new _businessRuleExecutor2.default(moduleConfig, brConfig);
      this.brExecutor.formFields = _ticketFormFields.default;
      var condition = {
        "any": [{
          "name": "urgency",
          "value": "2",
          "operator": "is",
          "evaluate_on": "ticket"
        }, {
          "name": "msf_custom_ms_dropdown",
          "value": ["178", "179"],
          "getter": "multi_select_fields",
          "operator": "includes",
          "column_name": "mstf_01",
          "evaluate_on": "ticket"
        }]
      };

      var satisfied = this.brExecutor._processConditions(condition, this.ticket);

      assert.notEqual(satisfied, true, "BR _processConditions of 'any' not satisfied");
      this.ticket.urgency = 2;
      satisfied = this.brExecutor._processConditions(condition, this.ticket);
      assert.equal(satisfied, true, "BR _processConditions of 'any' satisfied");
      condition = {
        "all": [{
          "name": "urgency",
          "value": "2",
          "operator": "is",
          "evaluate_on": "ticket"
        }, {
          "name": "msf_custom_ms_dropdown",
          "value": ["178", "179"],
          "getter": "multi_select_fields",
          "operator": "includes",
          "column_name": "mstf_01",
          "evaluate_on": "ticket"
        }]
      };
      satisfied = this.brExecutor._processConditions(condition, this.ticket);
      assert.notEqual(satisfied, true, "BR _processConditions of 'all' not satisfied");
      condition = {
        "all": [{
          "name": "urgency",
          "value": "2",
          "operator": "is",
          "evaluate_on": "ticket"
        }, {
          "name": "priority",
          "value": "2",
          "operator": "is",
          "evaluate_on": "ticket"
        }]
      };
      satisfied = this.brExecutor._processConditions(condition, this.ticket);
      assert.equal(satisfied, true, "BR _processConditions of 'all' satisfied");
      condition = {
        "all": [{
          "name": "email",
          "value": "sample@freshservice.com",
          "operator": "is",
          "evaluate_on": "current_user"
        }, {
          "name": "first_name",
          "value": "Support",
          "operator": "contains",
          "evaluate_on": "current_user"
        }]
      };
      satisfied = this.brExecutor._processConditions(condition, this.ticket);
      assert.equal(satisfied, true, "BR user data based _processConditions of 'all' satisfied");
      condition = {
        "all": [{
          "name": "ipsum",
          "value": "lorem",
          "operator": "is",
          "evaluate_on": "current_entity"
        }]
      };
      satisfied = this.brExecutor._processConditions(condition, this.ticket);
      assert.equal(satisfied, true, "BR current_entity data based _processConditions of 'all' satisfied");
    });
    (0, _qunit.test)('#2 brExecutor modelSchema changes - test', function (assert) {
      var services = {
        currentAccount: {
          id: 1
        }
      },
          moduleConfig = {
        module: 'ticket',
        prefix: _businessRuleExecutor.customFieldNamePrefix['ticket']
      },
          modelSchema = {
        status: '3'
      },
          brConfig = {
        business_rules: [{
          "id": 1,
          "condition_data": {
            "any": [{
              "name": "status",
              "value": "3",
              "operator": "is",
              "evaluate_on": "ticket"
            }]
          },
          "action_data": {
            "action": [{
              "name": ["source", "urgency", "impact"],
              "property": "hide"
            }, {
              "name": ["agent", "category"],
              "property": "disable"
            }]
          },
          "is_reversible": true,
          "is_validation": false
        }],
        services: services
      };
      this.brExecutor = new _businessRuleExecutor2.default(moduleConfig, brConfig);
      this.brExecutor.formFields = _ticketFormFields.default;
      this.brExecutor.execute([], modelSchema, 'status');
      this.brExecutor.execute(_ticketFormFields.default, modelSchema, 'status');

      this.brExecutor._originalFieldStates.hidden.push('urgency');

      this.brExecutor.setFieldStates(modelSchema);
      assert.equal(modelSchema.br_hidden_fields.length, 2, "Field states - hidden fields has been updated properly");
      assert.equal(modelSchema.br_hidden_fields.includes('urgency'), false, "Field states - hidden fields does not includes Original field state");
      assert.notEqual(modelSchema.br_validation_excludes.length, 0, "JWT has been generated");
    });
    (0, _qunit.test)('#3 brExecutor execute Validation Rules', function (assert) {
      var hasException = false;
      var services = {
        flashMessages: {
          danger: function danger(msg) {
            hasException = msg[0] === 'has error';
          },
          clearMessages: function clearMessages() {
            hasException = false;
          }
        }
      },
          moduleConfig = {
        module: 'ticket',
        prefix: _businessRuleExecutor.customFieldNamePrefix['ticket']
      },
          modelSchema = {
        status: '3'
      },
          brConfig = {
        business_rules: [{
          "id": 2,
          "condition_data": {
            "any": [{
              "name": "status",
              "value": "4",
              "operator": "is",
              "evaluate_on": "ticket"
            }]
          },
          "action_data": {
            "action": [{
              "name": ["has error"],
              "property": "message"
            }]
          },
          "is_reversible": true,
          "is_validation": true
        }, {
          "id": 3,
          "condition_data": {
            "all": null
          },
          "action_data": {
            "action": [{
              "name": ["has error"],
              "property": "message"
            }]
          },
          "is_reversible": true,
          "is_validation": true
        }],
        services: services
      };
      this.brExecutor = new _businessRuleExecutor2.default(moduleConfig, brConfig);
      assert.equal(this.brExecutor.executeValidationRules(modelSchema), true, "Form has Business rule alert Exception");
      assert.equal(hasException, true, "Exception message has been notified");
      brConfig.business_rules[1].is_validation = false;
      assert.equal(this.brExecutor.executeValidationRules(modelSchema), false, "Form does not have Business rule alert Exception - Case 1");
      assert.equal(hasException, false, "Exception message has not been notified");
      brConfig.business_rules.splice(0, 1);
      assert.equal(this.brExecutor.executeValidationRules(modelSchema), false, "Form does not have Business rule alert Exception - Case 2");
    });
    (0, _qunit.test)('#4 brExecutor - NonModelSchemaFields Validation tests', function (assert) {
      var services = {},
          moduleConfig = {
        module: 'ticket',
        prefix: _businessRuleExecutor.customFieldNamePrefix['ticket']
      },
          modelSchema = {},
          brConfig = {
        business_rules: [],
        services: services
      };
      this.brExecutor = new _businessRuleExecutor2.default(moduleConfig, brConfig);
      this.brExecutor.nonFormSchemaFields.attachment_ids['notAllowed'] = true;
      assert.equal(this.brExecutor.areNonModelSchemaFieldsValid(modelSchema), true, "BR non form schema field.notAllowed validated");
    });
  });
});
define("freshservice/tests/unit/adapters/form-field-test", ["qunit", "ember-qunit", "freshservice/tests/lib/stub-current-user", "freshservice/tests/lib/stub-current-account"], function (_qunit, _emberQunit, _stubCurrentUser, _stubCurrentAccount) {
  "use strict";

  (0, _qunit.module)('Unit | Adapter | form field', function (hooks) {
    (0, _emberQunit.setupTest)(hooks);
    hooks.beforeEach(function () {
      var formFieldAdapter = this.owner.lookup('adapter:form-field');
      var requestHash = formFieldAdapter.ajaxOptions('/ticket_form_fields', 'GET');
      this.acceptLanguageRequestHeader = requestHash.headers['Accept-Language'];
    });
    (0, _qunit.test)("Should set 'Accept-Language' request header", function (assert) {
      (0, _stubCurrentUser.stubCurrentUser)(); // stub default user with default language `en`

      assert.ok(this.acceptLanguageRequestHeader, "'Accept-Language' header is present as expected");
      assert.equal(this.acceptLanguageRequestHeader, 'en', "'Accept-Language' header is set as 'en' as expected");
    });
    (0, _qunit.test)("Should fallback to currentAccount.language if not set in currentUser for 'Accept-Language' header", function (assert) {
      (0, _stubCurrentUser.stubCurrentUser)({
        language: ''
      }); // in case language is not set in currentUser

      (0, _stubCurrentAccount.stubCurrentAccount)(); // stub default account with default language `en`

      assert.equal(this.acceptLanguageRequestHeader, 'en', "'Accept-Language' header is set as 'en' as expected, fallback from currentAccount.language");
    });
    (0, _qunit.test)("Should fallback to 'en' if not 'language' is not set in currentUser & currentAccount, for 'Accept-Language' header", function (assert) {
      (0, _stubCurrentUser.stubCurrentUser)({
        language: ''
      }); // in case language is not set in currentUser

      (0, _stubCurrentAccount.stubCurrentAccount)({
        language: ''
      }); // in case language is not set in currentAccount

      assert.equal(this.acceptLanguageRequestHeader, 'en', "'Accept-Language' header is set as 'en' as expected, fallback after currentAccount.language & currentUser.language are not set");
    });
  });
});
define("freshservice/tests/unit/adapters/freshrelease-base-test", ["qunit", "ember-qunit"], function (_qunit, _emberQunit) {
  "use strict";

  (0, _qunit.module)('Unit | Adapter | freshrelease base', function (hooks) {
    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.

    (0, _qunit.test)('it exists', function (assert) {
      var adapter = this.owner.lookup('adapter:freshrelease-base');
      assert.ok(adapter);
    });
  });
});
define("freshservice/tests/unit/adapters/task-test", ["qunit", "ember-qunit"], function (_qunit, _emberQunit) {
  "use strict";

  (0, _qunit.module)('Unit | Adapter | task', function (hooks) {
    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.

    (0, _qunit.test)('it exists', function (assert) {
      var adapter = this.owner.lookup('adapter:task');
      assert.ok(adapter);
    });
  });
});
define("freshservice/tests/unit/adapters/ticket-table-header-test", ["qunit", "ember-qunit"], function (_qunit, _emberQunit) {
  "use strict";

  (0, _qunit.module)('Unit | Adapter | ticket table header', function (hooks) {
    (0, _emberQunit.setupTest)(hooks);
    (0, _qunit.test)('Should build expected url for ticket-table-header model', function (assert) {
      var adapter = this.owner.lookup('adapter:ticket-table-header');
      var url = adapter.buildURL('ticket-table-header', null, {}, 'findAll', {});
      assert.equal(url, '/api/_/tickets/headers');
    });
  });
});
define("freshservice/tests/unit/controllers/admin/explore-plan/goal-selection-test", ["qunit", "ember-qunit"], function (_qunit, _emberQunit) {
  "use strict";

  (0, _qunit.module)('Unit | Controller | admin/explore-plan/goal-selection', function (hooks) {
    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.

    (0, _qunit.test)('it exists', function (assert) {
      var controller = this.owner.lookup('controller:admin/explore-plan/goal-selection');
      assert.ok(controller);
    });
  });
});
define("freshservice/tests/unit/controllers/marketplace-test", ["qunit", "ember-qunit", "freshservice/constants/admin/marketplace", "sinon"], function (_qunit, _emberQunit, _marketplace, _sinon) {
  "use strict";

  (0, _qunit.module)('Unit | Controller | Marketplace', function (hooks) {
    (0, _emberQunit.setupTest)(hooks);
    (0, _qunit.test)('it exists', function (assert) {
      var controller = this.owner.lookup('controller:admin/marketplace/apps');
      assert.ok(controller);
    });
    (0, _qunit.test)('it Reset Router', function (assert) {
      var controller = this.owner.lookup('controller:admin/marketplace/apps');
      controller.resetRoute();
      assert.equal(!!controller.name, false);
    });
    (0, _qunit.test)('it Initialize beforeGalleryLoad', function (assert) {
      var marketplaceAdapter = Ember.Service.extend({
        getGallery: function getGallery() {
          return {
            redirectUrl: '',
            iframeElement: {
              src: '',
              contentWindow: '',
              document: {
                addEventListener: function addEventListener() {}
              }
            }
          };
        }
      });
      this.owner.register('service:marketplace-adapter', marketplaceAdapter);
      var controller = this.owner.lookup('controller:admin/marketplace/apps');
      controller.beforeGalleryLoad();
      assert.equal(!!controller.isLoadingFrame, true);
    });
    (0, _qunit.test)('it iframeElement load', function (assert) {
      var mkpManager = {
        setupChannel: function setupChannel() {}
      };

      window.MarketplaceManager = function () {
        return mkpManager;
      };

      var marketplaceAdapter = Ember.Service.extend({
        getGallery: function getGallery() {
          return {
            redirectUrl: '',
            iframeElement: {
              src: '',
              contentWindow: '',
              document: {
                addEventListener: function addEventListener() {}
              }
            }
          };
        }
      });
      this.owner.register('service:marketplace-adapter', marketplaceAdapter);
      var controller = this.owner.lookup('controller:admin/marketplace/apps');
      controller.beforeGalleryLoad();
      controller.galleryInstance.iframeElement.onload();
      assert.equal(controller.marketplaceEventManager, mkpManager);
    });
    (0, _qunit.test)('it getHeaders', function (assert) {
      var controller = this.owner.lookup('controller:admin/marketplace/apps');
      var headers = controller.getHeaders();
      assert.equal(headers['Content-Type'], "application/json");
    });
    (0, _qunit.test)('it _marketplaceEventHandler', function (assert) {
      var controller = this.owner.lookup('controller:admin/marketplace/apps');

      var fetchReq = _sinon.default.stub(controller.fetch, 'request');

      controller._marketplaceEventHandler({
        event_type: _marketplace.NATIVE_APP_INSTALL,
        extension_name: 'jira',
        extension_id: 1,
        extension_type: 1,
        version_id: 1
      });

      assert.ok(fetchReq.calledOnce);
      fetchReq.restore();
    });
    (0, _qunit.test)('it _nativeAppInstallHandler success', function (assert) {
      var controller = this.owner.lookup('controller:admin/marketplace/apps');

      var fetchReq = _sinon.default.stub(window, 'fetch').returns(Promise.resolve({}));

      controller._marketplaceEventHandler({
        event_type: _marketplace.NATIVE_APP_INSTALL,
        extension_name: 'jira-freshservice',
        extension_id: 1,
        extension_type: 1,
        version_id: 1
      });

      assert.ok(fetchReq.calledOnce);
      fetchReq.restore();
    });
    (0, _qunit.test)('it _nativeAppInstallHandler failure', function (assert) {
      var rejectedPromise = Promise.reject({
        message: 'Error'
      });
      var controller = this.owner.lookup('controller:admin/marketplace/apps');

      var fetchReq = _sinon.default.stub(window, 'fetch').returns(rejectedPromise);

      controller._marketplaceEventHandler({
        event_type: _marketplace.NATIVE_APP_INSTALL,
        extension_name: 'jira-freshservice',
        extension_id: 1,
        extension_type: 1,
        version_id: 1
      });

      assert.ok(fetchReq.calledOnce);
      fetchReq.restore();
    });
    (0, _qunit.test)('it _nativeAppUninstallHandler success', function (assert) {
      var controller = this.owner.lookup('controller:admin/marketplace/apps');

      var fetchReq = _sinon.default.stub(window, 'fetch').returns(Promise.resolve({}));

      controller._marketplaceEventHandler({
        event_type: _marketplace.NATIVE_APP_UNINSTALL,
        extension_name: 'jira-freshservice',
        extension_id: 1,
        extension_type: 1,
        version_id: 1
      });

      assert.ok(fetchReq.calledOnce);
      fetchReq.restore();
    });
    (0, _qunit.test)('it _nativeAppUninstallHandler failure', function (assert) {
      var controller = this.owner.lookup('controller:admin/marketplace/apps');

      var fetchReq = _sinon.default.stub(window, 'fetch').returns(Promise.reject({}));

      controller._marketplaceEventHandler({
        event_type: _marketplace.NATIVE_APP_UNINSTALL,
        extension_name: 'jira-freshservice',
        extension_id: 1,
        extension_type: 1,
        version_id: 1
      });

      assert.ok(fetchReq.calledOnce);
      fetchReq.restore();
    });
    (0, _qunit.test)('it _nativeAppUpdateHandler success', function (assert) {
      var controller = this.owner.lookup('controller:admin/marketplace/apps');

      var fetchReq = _sinon.default.stub(window, 'fetch').returns(Promise.resolve({}));

      controller._marketplaceEventHandler({
        event_type: _marketplace.NATIVE_APP_UPDATE,
        extension_name: 'jira-freshservice',
        extension_id: 1,
        extension_type: 1,
        version_id: 1
      });

      assert.ok(fetchReq.calledOnce);
      fetchReq.restore();
    });
    (0, _qunit.test)('it _nativeAppUpdateHandler failure', function (assert) {
      var controller = this.owner.lookup('controller:admin/marketplace/apps');

      var fetchReq = _sinon.default.stub(window, 'fetch').returns(Promise.reject({}));

      controller._marketplaceEventHandler({
        event_type: _marketplace.NATIVE_APP_UPDATE,
        extension_name: 'jira-freshservice',
        extension_id: 1,
        extension_type: 1,
        version_id: 1
      });

      assert.ok(fetchReq.calledOnce);
      fetchReq.restore();
    });
    (0, _qunit.test)('it remove Listner ', function (assert) {
      var controller = this.owner.lookup('controller:admin/marketplace/apps');

      var listner = _sinon.default.stub(window, 'removeEventListener');

      controller.removeListners();
      assert.ok(listner.calledOnce);
      listner.restore();
    });
    (0, _qunit.test)('it showFlashMessage Listner ', function (assert) {
      var controller = this.owner.lookup('controller:admin/marketplace/apps');

      var listner = _sinon.default.stub(controller.flashMessages, 'danger');

      controller.showFlashMessage({
        adminFlashes: [{
          'type': 'danger',
          'message': 'my message'
        }]
      });
      assert.ok(listner.calledOnce);
      listner.restore();
    });
  });
});
define("freshservice/tests/unit/controllers/tickets-test", ["qunit", "ember-qunit"], function (_qunit, _emberQunit) {
  "use strict";

  (0, _qunit.module)('Unit | Controller | tickets', function (hooks) {
    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.

    (0, _qunit.test)('it exists', function (assert) {
      var controller = this.owner.lookup('controller:tickets');
      assert.ok(controller);
    });
  });
});
define("freshservice/tests/unit/controllers/workload/index-test", ["qunit", "ember-qunit"], function (_qunit, _emberQunit) {
  "use strict";

  (0, _qunit.module)('Unit | Controller | workload', function (hooks) {
    (0, _emberQunit.setupTest)(hooks);
    hooks.beforeEach(function () {
      this.controller = this.owner.lookup('controller:workload/index');
    });
    (0, _qunit.test)('controller exists', function (assert) {
      assert.ok(this.controller);
    });
    (0, _qunit.test)('controller has queryParams', function (assert) {
      assert.equal('queryParams' in this.controller && this.controller.queryParams.length === 8, true, 'Query Params exist');
    });
    (0, _qunit.test)('trigger controller reset action', function (assert) {
      var transitionRoute = '';
      var router = {
        transitionTo: function transitionTo(route) {
          transitionRoute = route;
        }
      };
      this.controller.set('router', router);
      this.controller.send('resetFilter');
      assert.equal(transitionRoute, 'workload.index', 'Transition to workload index route');
    });
  });
});
define("freshservice/tests/unit/initializers/bootstrap-test", ["freshservice/initializers/bootstrap", "qunit", "ember-qunit"], function (_bootstrap, _qunit, _emberQunit) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.skip)('Unit | Initializer | bootstrap', function (hooks) {
    (0, _emberQunit.setupTest)(hooks);
    hooks.beforeEach(function () {
      this.TestApplication = Ember.Application.extend();
      this.TestApplication.initializer({
        name: 'initializer under test',
        initialize: _bootstrap.initialize
      });
      this.application = this.TestApplication.create({
        autoboot: false
      });
    });
    hooks.afterEach(function () {
      Ember.run(this.application, 'destroy');
    }); // Replace this with your real tests.

    (0, _qunit.test)('it works', /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.application.boot();

              case 2:
                assert.ok(true);

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/unit/initializers/ember-flash-messages-test", ["freshservice/initializers/ember-flash-messages", "qunit"], function (_emberFlashMessages, _qunit) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.skip)('Unit | Initializer | ember-flash-messages', function (hooks) {
    hooks.beforeEach(function () {
      this.TestApplication = Ember.Application.extend();
      this.TestApplication.initializer({
        name: 'initializer under test',
        initialize: _emberFlashMessages.initialize
      });
      this.application = this.TestApplication.create({
        autoboot: false
      });
    });
    hooks.afterEach(function () {
      Ember.run(this.application, 'destroy');
    }); // Replace this with your real tests.

    (0, _qunit.test)('it works', /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.application.boot();

              case 2:
                assert.ok(true);

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/unit/models/integrations/jira-test", ["qunit", "ember-qunit"], function (_qunit, _emberQunit) {
  "use strict";

  (0, _qunit.module)('Unit | Model | integrations/jira', function (hooks) {
    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.

    (0, _qunit.test)('it exists', function (assert) {
      var store = this.owner.lookup('service:store');
      var model = store.createRecord('integrations/jira', {});
      assert.ok(model);
    });
  });
});
define("freshservice/tests/unit/models/integrations/pivotal-tracker-test", ["qunit", "ember-qunit"], function (_qunit, _emberQunit) {
  "use strict";

  (0, _qunit.module)('Unit | Model | Integrations | PivotalTracker', function (hooks) {
    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.

    (0, _qunit.test)('it exists', function (assert) {
      var store = this.owner.lookup('service:store');
      var model = store.createRecord('integrations/pivotal-tracker', {});
      assert.ok(model);
    });
  });
});
define("freshservice/tests/unit/models/language-test", ["qunit", "ember-qunit"], function (_qunit, _emberQunit) {
  "use strict";

  (0, _qunit.module)('Unit | Model | language', function (hooks) {
    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.

    (0, _qunit.test)('it exists', function (assert) {
      var store = this.owner.lookup('service:store');
      var model = store.createRecord('language', {});
      assert.ok(model);
    });
  });
});
define("freshservice/tests/unit/models/task-test", ["qunit", "ember-qunit"], function (_qunit, _emberQunit) {
  "use strict";

  (0, _qunit.module)('Unit | Model | task', function (hooks) {
    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.

    (0, _qunit.test)('it exists', function (assert) {
      var store = this.owner.lookup('service:store');
      var model = store.createRecord('task', {});
      assert.ok(model);
    });
  });
});
define("freshservice/tests/unit/models/ticket-table-header-test", ["qunit", "ember-qunit"], function (_qunit, _emberQunit) {
  "use strict";

  (0, _qunit.module)('Unit | Model | ticket table header', function (hooks) {
    (0, _emberQunit.setupTest)(hooks);
    (0, _qunit.test)('it exists', function (assert) {
      var store = this.owner.lookup('service:store');
      var model = store.createRecord('ticket-table-header', {});
      assert.ok(model);
    });
  });
});
define("freshservice/tests/unit/routes/admin/explore-plan/goal-selection-test", ["qunit", "ember-qunit"], function (_qunit, _emberQunit) {
  "use strict";

  (0, _qunit.module)('Unit | Route | admin/explore-plan/goal-selection', function (hooks) {
    (0, _emberQunit.setupTest)(hooks);
    (0, _qunit.test)('it exists', function (assert) {
      var route = this.owner.lookup('route:admin/explore-plan/goal-selection');
      assert.ok(route);
    });
  });
});
define("freshservice/tests/unit/routes/admin/field-suggester-test", ["qunit", "ember-qunit"], function (_qunit, _emberQunit) {
  "use strict";

  (0, _qunit.skip)('Unit | Route | admin/field_suggester', function (hooks) {
    (0, _emberQunit.setupTest)(hooks);
    (0, _qunit.test)('it exists', function (assert) {
      var route = this.owner.lookup('route:admin/field-suggester');
      assert.ok(route);
    });
  });
});
define("freshservice/tests/unit/routes/admin/response-suggestions-test", ["qunit", "ember-qunit", "freshservice/tests/lib/stub-fetch", "freshservice/tests/lib/sinon-context"], function (_qunit, _emberQunit, _stubFetch, _sinonContext) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Unit | Route | admin/response_suggestions', function (hooks) {
    (0, _emberQunit.setupTest)(hooks);
    (0, _sinonContext.setupSinonSandbox)(hooks);
    (0, _qunit.test)('it check if route model is called proper', /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var mockModelData, fetchStub, route, model;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                mockModelData = [{
                  'token': 'solution_article'
                }, {
                  'token': 'canned_response'
                }];
                fetchStub = (0, _stubFetch.stubFetch)();
                fetchStub.withArgs('predictive_intelligence/fetch_freddy_config').returns(Promise.resolve(mockModelData));
                route = this.owner.lookup('route:admin/response-suggestions');
                assert.ok(route);
                _context.next = 7;
                return route.model();

              case 7:
                model = _context.sent;
                assert.deepEqual(model, mockModelData);

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/unit/routes/admin/workload-management/index-test", ["qunit", "ember-qunit", "freshservice/tests/lib/stub-current-user"], function (_qunit, _emberQunit, _stubCurrentUser) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var NO_ADMIN_USER = {
    hasActiveFreshId: true,
    isAssumedUser: false
  };
  (0, _qunit.module)('Unit | Route | admin/workload-management/index', function (hooks) {
    (0, _emberQunit.setupTest)(hooks);
    hooks.beforeEach(function () {
      this.route = this.owner.lookup('route:admin/workload-management/index');
      this.route.set('currentAccount', this.owner.lookup('service:current-account'));
    });
    (0, _qunit.test)('check route exists', function (assert) {
      assert.ok(this.route);
    });
    (0, _qunit.test)('check before Model abort scenario', /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var isAbortCalled, transition;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                isAbortCalled = false;
                transition = {
                  abort: function abort() {
                    isAbortCalled = true;
                  }
                };
                _context.next = 4;
                return this.route.beforeModel(transition);

              case 4:
                assert.equal(isAbortCalled, true, 'Route aborted when workload feature not enabled');

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('check before Model abort scenario without workload privilege', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var isAbortCalled, transition;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)(NO_ADMIN_USER);
                isAbortCalled = false;
                transition = {
                  abort: function abort() {
                    isAbortCalled = true;
                  }
                };
                _context2.next = 5;
                return this.route.beforeModel(transition);

              case 5:
                assert.equal(isAbortCalled, true, 'Route aborted when if no privilege for workload');

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/unit/routes/tickets-test", ["qunit", "ember-qunit"], function (_qunit, _emberQunit) {
  "use strict";

  (0, _qunit.module)('Unit | Route | tickets', function (hooks) {
    (0, _emberQunit.setupTest)(hooks);
    (0, _qunit.test)('it exists', function (assert) {
      // let route = this.owner.lookup('route:tickets');
      assert.ok(true);
    });
  });
});
define("freshservice/tests/unit/routes/tickets/view/index-test", ["qunit", "ember-qunit"], function (_qunit, _emberQunit) {
  "use strict";

  (0, _qunit.module)('Unit | Route | tickets/view/index', function (hooks) {
    (0, _emberQunit.setupTest)(hooks);
    (0, _qunit.test)('it exists', function (assert) {
      // let route = this.owner.lookup('route:tickets/view/index');
      assert.ok(true);
    });
  });
});
define("freshservice/tests/unit/routes/tickets/view/show-test", ["qunit", "ember-qunit"], function (_qunit, _emberQunit) {
  "use strict";

  (0, _qunit.module)('Unit | Route | tickets/view/show', function (hooks) {
    (0, _emberQunit.setupTest)(hooks);
    (0, _qunit.test)('it exists', function (assert) {
      // let route = this.owner.lookup('route:tickets/view/show');
      assert.ok(true);
    });
  });
});
define("freshservice/tests/unit/routes/workload/index-test", ["qunit", "ember-qunit", "freshservice/tests/lib/stub-current-user"], function (_qunit, _emberQunit, _stubCurrentUser) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var NO_WORKLOAD_USER = {
    hasActiveFreshId: true,
    isAssumedUser: false
  };
  (0, _qunit.module)('Unit | Route | workload/index', function (hooks) {
    (0, _emberQunit.setupTest)(hooks);
    hooks.beforeEach(function () {
      this.route = this.owner.lookup('route:workload/index');
      this.route.set('currentAccount', this.owner.lookup('service:current-account'));
    });
    (0, _qunit.test)('check route exists', function (assert) {
      assert.ok(this.route);
    });
    (0, _qunit.test)('check before Model abort scenario', /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var isAbortCalled, transition;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                isAbortCalled = false;
                transition = {
                  abort: function abort() {
                    isAbortCalled = true;
                  }
                };
                _context.next = 4;
                return this.route.beforeModel(transition);

              case 4:
                assert.equal(isAbortCalled, true, 'Route aborted when workload feature not enabled');

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('check before Model abort scenario without workload privilege', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var isAbortCalled, transition;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)(NO_WORKLOAD_USER);
                isAbortCalled = false;
                transition = {
                  abort: function abort() {
                    isAbortCalled = true;
                  }
                };
                _context2.next = 5;
                return this.route.beforeModel(transition);

              case 5:
                assert.equal(isAbortCalled, true, 'Route aborted when if no privilege for workload');

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/unit/serializers/project-test", ["qunit", "ember-qunit"], function (_qunit, _emberQunit) {
  "use strict";

  (0, _qunit.module)('Unit | Serializer | project', function (hooks) {
    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.

    (0, _qunit.test)('it exists', function (assert) {
      var store = this.owner.lookup('service:store');
      var serializer = store.serializerFor('project');
      assert.ok(serializer);
    });
    (0, _qunit.test)('it serializes records', function (assert) {
      var store = this.owner.lookup('service:store');
      var record = store.createRecord('project', {});
      var serializedRecord = record.serialize();
      assert.ok(serializedRecord);
    });
  });
});
define("freshservice/tests/unit/serializers/release-test", ["qunit", "ember-qunit"], function (_qunit, _emberQunit) {
  "use strict";

  (0, _qunit.module)('Unit | Serializer | release', function (hooks) {
    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.

    (0, _qunit.test)('it exists', function (assert) {
      var store = this.owner.lookup('service:store');
      var serializer = store.serializerFor('release');
      assert.ok(serializer);
    });
    (0, _qunit.test)('it serializes records', function (assert) {
      var store = this.owner.lookup('service:store');
      var record = store.createRecord('release', {});
      var serializedRecord = record.serialize();
      assert.ok(serializedRecord);
    });
  });
});
define("freshservice/tests/unit/serializers/ticket-table-header-test", ["qunit", "ember-qunit"], function (_qunit, _emberQunit) {
  "use strict";

  (0, _qunit.module)('Unit | Serializer | ticket table header', function (hooks) {
    (0, _emberQunit.setupTest)(hooks);
    (0, _qunit.test)('Check `normalizeFindAllResponse`', function (assert) {
      var store = this.owner.lookup('service:store');
      var model = store.modelFor('ticket-table-header');
      var serializer = store.serializerFor('ticket-table-header');
      var payload = {
        'headers': [{
          date_only: null,
          default: true,
          field_type: null,
          fixed: true,
          frozen: true,
          include: null,
          key: "display_id",
          label: "Ticket ID",
          name: "display_id",
          nested: null,
          position: 4,
          selected: true
        }, {
          date_only: null,
          default: true,
          field_type: null,
          fixed: true,
          frozen: true,
          include: null,
          key: "subject",
          label: "Subject",
          name: "ticket_subject",
          nested: null,
          position: 4,
          selected: true
        }, {
          date_only: null,
          default: true,
          field_type: null,
          fixed: true,
          frozen: true,
          include: ['requester'],
          key: "requester.name",
          label: "Requester",
          name: "requester",
          nested: null,
          position: 4,
          selected: true
        }]
      };
      var json = serializer.normalizeResponse(store, model, payload, null, 'findAll');
      assert.equal(json.data.length, 3);
      assert.equal(json.data[0].type, 'ticket-table-header'); // `ticket-table-header`

      assert.notOk(payload.headers); // deleted in the serializer

      assert.ok(payload.ticket_table_headers); // transformation happened inside serializer

      assert.equal(json.data[0].id, payload.ticket_table_headers[0].name); // `id` has been set as `name` via the serializer

      assert.equal(json.data[0].attributes.name, 'display_id');
    });
  });
});
define("freshservice/tests/unit/services/common-shortcuts-test", ["qunit", "ember-qunit", "sinon", "ember-keyboard"], function (_qunit, _emberQunit, _sinon, _emberKeyboard) {
  "use strict";

  (0, _qunit.module)('Unit | Service | keyboard-shortcuts.common-shortcuts', function (hooks) {
    (0, _emberQunit.setupTest)(hooks);
    var currentUser;
    var commonShortcuts;
    hooks.beforeEach(function () {
      currentUser = this.owner.lookup('service:current-user');
      currentUser.preferences = {
        shortcuts_enabled: true
      };
      var CommonShortcutsService = this.owner.factoryFor('service:keyboard-shortcuts.common-shortcuts');
      commonShortcuts = CommonShortcutsService.create();
    });
    hooks.after(function () {
      this.owner.destroy("service:current-user");
    });
    (0, _qunit.test)('keyboard should activate based on shortcuts enabled', function (assert) {
      assert.equal(commonShortcuts.keyboardActivated, true, 'keyboardActivated is true when shortcuts is enabled');
    });
    (0, _qunit.test)('set the context', function (assert) {
      commonShortcuts.context = '100';
      assert.equal(commonShortcuts._context, '100', 'Setting test data as context works');
    });
    (0, _qunit.test)('on keypress of n(note)', function (assert) {
      var spy = _sinon.default.spy();

      commonShortcuts.context = {
        addNote: spy
      };
      (0, _emberKeyboard.triggerKeyDown)('n');
      assert.ok(spy.calledOnce, 'addNote method is called in the service when "n" key is triggered');
    });
    (0, _qunit.test)('on keypress of t(task)', function (assert) {
      var spy = _sinon.default.spy();

      commonShortcuts.context = {
        addTask: spy
      };
      (0, _emberKeyboard.triggerKeyDown)('t');
      assert.ok(spy.calledOnce, 'addTask method is called in the service when "t" key is triggered');
    });
    (0, _qunit.test)('on keypress of #(delete)', function (assert) {
      var spy = _sinon.default.spy();

      commonShortcuts.context = {
        deleteTicket: spy
      };
      (0, _emberKeyboard.triggerKeyDown)('#');
      assert.ok(spy.calledOnce, 'deleteTicket method is called in the service when "#" key is triggered');
    });
    (0, _qunit.test)('on keypress of @(pickup)', function (assert) {
      var spy = _sinon.default.spy();

      commonShortcuts.context = {
        pickupTicket: spy
      };
      (0, _emberKeyboard.triggerKeyDown)('@');
      assert.ok(spy.calledOnce, 'pickupTicket method is called in the service when "@" key is triggered');
    });
  });
});
define("freshservice/tests/unit/services/intl-test", ["qunit", "ember-qunit", "ember-window-mock", "freshservice/tests/lib/stub-current-account"], function (_qunit, _emberQunit, _emberWindowMock, _stubCurrentAccount) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var LOCALE = "en";
  var TEST_ACCOUNT = {
    customTranslations: {
      module_names: {
        Ticket: "Case",
        Tickets: "Cases",
        ticket: "case",
        tickets: "cases"
      }
    }
  };
  var LOCALE_TRANSLATIONS = {
    foo: {
      bar: {
        ticket: "'{Ticket}'",
        tickets_list: "'{Tickets}' list",
        ticket_description: "'{ticket}' description",
        tickets_count: "<b>{count}</b> '{tickets}'"
      }
    }
  };
  (0, _qunit.module)("Unit | Service | intl", function (hooks) {
    (0, _emberQunit.setupTest)(hooks);
    (0, _emberWindowMock.setupWindowMock)(hooks);

    var _intl;

    hooks.beforeEach(function () {
      _intl = this.owner.lookup("service:intl");

      _intl.setLocale(LOCALE);

      _intl.addTranslations(LOCALE, LOCALE_TRANSLATIONS);

      (0, _stubCurrentAccount.stubCurrentAccount)(TEST_ACCOUNT);
    });
    hooks.afterEach(function () {
      this.owner.lookup("service:current-account").destroy();
    }); // 1.

    (0, _qunit.test)("Intl service exists with proper locale", function (assert) {
      assert.ok(_intl);
      assert.equal(_intl.locale, LOCALE);
      assert.ok(_intl.exists("foo.bar.ticket", "en"));
    }); // 2.

    (0, _qunit.test)("Intl service supports custom translations", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var value1, value2, value3, value4;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Act
                value1 = _intl.t("foo.bar.ticket");
                value2 = _intl.t("foo.bar.tickets_list");
                value3 = _intl.t("foo.bar.ticket_description");
                value4 = _intl.t("foo.bar.tickets_count", {
                  count: 123
                }); // Assert

                assert.equal(value1, "Case");
                assert.equal(value2, "Cases list");
                assert.equal(value3, "case description");
                assert.equal(value4, "<b>123</b> cases");

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }()); // 3.

    (0, _qunit.test)("Intl service with test lang enabled (via window variable)", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var value1, value2, value3, value4;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                // Assert
                window.TEST_LANGUAGE_ENABLER = true; // Act

                value1 = _intl.t("foo.bar.ticket");
                value2 = _intl.t("foo.bar.tickets_list");
                value3 = _intl.t("foo.bar.ticket_description");
                value4 = _intl.t("foo.bar.tickets_count", {
                  count: 456,
                  htmlSafe: true
                }); // Assert

                assert.equal(value1, "Case$$$$");
                assert.equal(value2, "Cases list$$$$");
                assert.equal(value3, "case description$$$$");
                assert.deepEqual(value4, Ember.String.htmlSafe("<b>456</b> cases$$$$"));
                window.TEST_LANGUAGE_ENABLER = false;

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }()); // 4.

    (0, _qunit.test)("Intl service with test lang enabled (via localStorage)", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var value1, value2, value3, value4;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                // Assert
                window.localStorage.setItem("EMBER_TEST_LANGUAGE_ENABLER", "true"); // Act

                value1 = _intl.t("foo.bar.ticket");
                value2 = _intl.t("foo.bar.tickets_list");
                value3 = _intl.t("foo.bar.ticket_description");
                value4 = _intl.t("foo.bar.tickets_count", {
                  count: 456,
                  htmlSafe: true
                }); // Assert

                assert.equal(value1, "Case$$$$");
                assert.equal(value2, "Cases list$$$$");
                assert.equal(value3, "case description$$$$");
                assert.deepEqual(value4, Ember.String.htmlSafe("<b>456</b> cases$$$$"));
                window.localStorage.removeItem("EMBER_TEST_LANGUAGE_ENABLER");

              case 10:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x3) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/unit/services/marketplace-adapter-test", ["qunit", "ember-qunit", "freshservice/config/environment", "sinon"], function (_qunit, _emberQunit, _environment, _sinon) {
  "use strict";

  (0, _qunit.module)("Unit | Service | Marketplace", function (hooks) {
    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.

    (0, _qunit.test)('it exists', function (assert) {
      var service = this.owner.lookup('service:marketplace-adapter');
      assert.ok(service);
    });
    (0, _qunit.test)('get Domain for dev', function (assert) {
      var service = this.owner.lookup('service:marketplace-adapter');
      _environment.default.environment = 'development';
      assert.equal(service.domain, "http://".concat(service.currentAccount.full_domain, ":4000"));
      _environment.default.environment = 'test';
    });
    (0, _qunit.test)('get Domain for prod', function (assert) {
      var service = this.owner.lookup('service:marketplace-adapter');
      assert.equal(service.domain, "https://".concat(service.currentAccount.full_domain));
    });
    (0, _qunit.test)('Inject freshparent', function (assert) {
      var service = this.owner.lookup('service:marketplace-adapter');
      assert.equal(service._injectFreshParent() instanceof Promise, true);
    });
    (0, _qunit.test)('On _onScriptLoadError', function (assert) {
      var errorLogged = {};

      var logger = _sinon.default.stub(window.console, 'log');

      var service = this.owner.lookup('service:marketplace-adapter');

      service._onScriptLoadError(errorLogged);

      assert.ok(logger.calledOnce);
      logger.restore();
    });
    (0, _qunit.test)('On _initializeMarketplace error', function (assert) {
      var service = this.owner.lookup('service:marketplace-adapter');

      window.MarketplaceManager = function () {
        throw new Error();
      };

      service._initializeMarketplace({});

      assert.equal(service.isMarketplaceScriptInitialized, false);
    });
    (0, _qunit.test)('On _initializeMarketplace success', function (assert) {
      var service = this.owner.lookup('service:marketplace-adapter');

      window.MarketplaceManager = function () {};

      service._initializeMarketplace({});

      assert.equal(service.isMarketplaceScriptInitialized, true);
    });
    (0, _qunit.test)('On getApps', function (assert) {
      var service = this.owner.lookup('service:marketplace-adapter');
      var apps = [];
      service.marketplaceManager = {
        getApps: function getApps() {
          return apps;
        }
      };
      assert.equal(service.getApps(), apps);
    });
    (0, _qunit.test)('On get Gallery Method', function (assert) {
      var service = this.owner.lookup('service:marketplace-adapter');
      var galleryParams = '';
      service.marketplaceManager = {
        getGallery: function getGallery(params) {
          return galleryParams = params;
        }
      };
      service.getGallery();
      assert.equal(galleryParams.initialRoute, 'installed_apps');
    });
    (0, _qunit.test)('On get Gallery Method', function (assert) {
      var logger = _sinon.default.stub(window.console, 'log');

      var service = this.owner.lookup('service:marketplace-adapter');

      service._injectFreshParent = function () {
        return Promise.reject({});
      };

      service.initializeFreshParent().then(function () {
        assert.ok(logger.calledOnce);
        logger.restore();
      });
    });
    (0, _qunit.skip)('On initializeMarketplaceManager', function (assert) {
      window.marketplaceUniqueManager = {};
      var service = this.owner.lookup('service:marketplace-adapter');

      service._injectFreshParent = function () {
        return Promise.resolve(window.marketplaceUniqueManager);
      };

      service.initializeMarketplaceManager({
        page: 12
      }).then(function (res) {
        assert.equal(window.marketplaceUniqueManager, res);
      });
    });
  });
});
define("freshservice/tests/unit/services/native-integration-test", ["qunit", "ember-qunit"], function (_qunit, _emberQunit) {
  "use strict";

  (0, _qunit.module)('Unit | Service | native-integration', function (hooks) {
    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.

    (0, _qunit.test)('it exists', function (assert) {
      var service = this.owner.lookup('service:native-integration');
      assert.ok(service);
    });
  });
});
define("freshservice/tests/unit/services/portal-designer-translations-test", ["qunit", "ember-qunit", "freshservice/constants/portal-designer/placeholders"], function (_qunit, _emberQunit, _placeholders) {
  "use strict";

  var MOCK_TRANSLATIONS = {
    "en": {
      "portal": {
        "home_title": "How can we help you ?"
      }
    }
  };
  var BUILDER_SERVICE_STUB = Ember.Service.extend({
    translations: MOCK_TRANSLATIONS
  });
  (0, _qunit.module)('Unit | Service | portal-designer-translations', function (hooks) {
    (0, _emberQunit.setupTest)(hooks);
    hooks.beforeEach(function () {
      this.owner.register('service:portal-builder', BUILDER_SERVICE_STUB);
    }); // Replace this with your real tests.

    (0, _qunit.test)('it exists', function (assert) {
      var service = this.owner.lookup('service:portal-designer-translations');
      assert.ok(service);
    });
    (0, _qunit.test)('it updates translation', function (assert) {
      var service = this.owner.lookup('service:portal-designer-translations');
      service.set('customTranslations', {});
      service.updateTranslation('en.portal.home_title', 'How are you ?');
      assert.equal(service.customTranslations.en.portal.home_title, 'How are you ?', 'translation updated');
    });
    (0, _qunit.test)('it updates placeholders', function (assert) {
      var service = this.owner.lookup('service:portal-designer-translations');
      service.updatePlaceholders(["user_info.first_name", "portal.name"]);
      assert.deepEqual(service.usedPlaceholders, ["{{user_info.first_name}}", "{{portal.name}}"], "used placeholders updated");
      Ember.set(service, 'placeholderForPortal', false);
      var allowedPlaceholders = service.allowedPlaceholderOptions;
      var allowedPlaceholdersExpected = [{
        "category": "Requester",
        "placeholders": [{
          "name": "Requester first name",
          "value": "{{user_info.first_name}}"
        }]
      }, {
        "category": "Helpdesk",
        "placeholders": [{
          "name": "Helpdesk name",
          "value": "{{portal.name}}"
        }]
      }];
      assert.deepEqual(allowedPlaceholders, allowedPlaceholdersExpected, 'allowed placeholders updated');
      Ember.set(service, 'placeholderForPortal', true);
      var placeholderForPortal = service.allowedPlaceholderOptions;
      assert.deepEqual(placeholderForPortal, _placeholders.default, 'allowed all placeholders for portal');
    });
  });
});
define("freshservice/tests/unit/services/profile-avatar-test", ["qunit", "ember-qunit", "ember-cli-mirage/test-support"], function (_qunit, _emberQunit, _testSupport) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)("Unit | Service | profile-avatar", function (hooks) {
    (0, _emberQunit.setupTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);

    var _avatarService;

    hooks.beforeEach(function () {
      var AvatarService = this.owner.factoryFor("service:profile-avatar");
      _avatarService = AvatarService.create();
    }); // 1.

    (0, _qunit.test)("profile avatar service exists", function (assert) {
      assert.ok(_avatarService);
    }); // 2.

    (0, _qunit.test)("getAvatarUrl with no actorId should throw error", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var promise;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                promise = _avatarService.getAvatarUrl(null);
                _context.next = 3;
                return assert.rejects(promise, "Promise rejected with message 'actorId' is required to generate avatar url' as expected");

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }()); // 3.

    (0, _qunit.test)("check for empty avatar url response when calling getAvatarUrl with valid actorId", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var done, MOCK_ACTOR_ID;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                done = assert.async(1);
                MOCK_ACTOR_ID = "1";
                this.server.get("/api/_/users/:id/profile_image_no_blank", {
                  image_url: ""
                }, 200);

                _avatarService.getAvatarUrl(MOCK_ACTOR_ID).then(function (_ref3) {
                  var image_url = _ref3.image_url;
                  assert.equal(image_url, "", "Received empty image_url response as expected");
                  done();
                });

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }()); // 4.

    (0, _qunit.test)("check for valid avatar url response when calling getAvatarUrl with valid actorId", /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var done, md5, MOCK_ACTOR_ID, MOCK_AVATAR_URL;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                done = assert.async(1);
                md5 = this.owner.lookup("service:md5");
                MOCK_ACTOR_ID = "1";
                MOCK_AVATAR_URL = "https://picsum.photos/200";
                this.server.get("/api/_/users/:id/profile_image_no_blank", function (schema, request) {
                  assert.equal(request.queryParams.hashval, md5.encrypt("actor_id:" + MOCK_ACTOR_ID), "queryParams md5 hashval encryption is valid as expected");
                  return {
                    image_url: MOCK_AVATAR_URL
                  };
                }, 200);

                _avatarService.getAvatarUrl(MOCK_ACTOR_ID).then(function (_ref5) {
                  var image_url = _ref5.image_url;
                  assert.equal(image_url, MOCK_AVATAR_URL, "Received valid image_url response as expected");
                  done();
                });

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/unit/services/reload-necessary-test", ["qunit", "ember-qunit", "ember-cli-mirage/test-support", "ember-cli-mirage/response", "sinon", "freshservice/tests/lib/stub-current-user"], function (_qunit, _emberQunit, _testSupport, _response, _sinon, _stubCurrentUser) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Unit | Service | reload-necessary', function (hooks) {
    (0, _emberQunit.setupTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);
    var store, reloadNecessary;
    hooks.beforeEach(function () {
      store = this.owner.lookup('service:store');
      reloadNecessary = this.owner.lookup('service:reload-necessary');
    });
    hooks.afterEach(function () {
      Ember.set(reloadNecessary, 'appDataChanged', false);
      Ember.set(reloadNecessary, 'isFetchPending', false);
      localStorage.removeItem('account-data-version');
      localStorage.removeItem('current-locale');
    });
    (0, _qunit.test)('Should check if response headers are being inspected for data-version header changes', /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var mockDataVersion, _Response, mockHeaders;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                Ember.set(reloadNecessary, 'currentDataVersion', 1);
                Ember.set(reloadNecessary, 'currentLocale', 'en');
                mockDataVersion = Date.now();
                _Response = new _response.default(200, {
                  'X-Account-Data-Version': mockDataVersion
                }, {}), mockHeaders = _Response.headers;
                _context.next = 6;
                return reloadNecessary.handleDataVersionChanges(mockHeaders);

              case 6:
                assert.equal(reloadNecessary.appDataChanged, true, 'Response headers are inspected to get the data-version change, as expected');
                assert.equal(reloadNecessary.currentDataVersion, mockDataVersion);
                assert.equal(reloadNecessary.currentLocale, 'en');

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should reset the `appDataChanged` value after model data reload', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                Ember.set(reloadNecessary, 'appDataChanged', true); // check store data before reload

                assert.ok(store.peekAll('bootstrap').length === 0);
                assert.ok(store.peekAll('ticket-form-field').length === 0);
                _context2.next = 5;
                return reloadNecessary.reloadModels();

              case 5:
                assert.equal(reloadNecessary.appDataChanged, false);
                assert.equal(reloadNecessary.isFetchPending, false); // ensures callbacks invocation
                // check store data after reload

                assert.ok(store.peekAll('bootstrap').length > 0);
                assert.ok(store.peekAll('ticket-form-field').length > 0);

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should call success callback after fetching the ticketFields data', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var moduleFieldsSpy;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                moduleFieldsSpy = {
                  onFetchFieldsSuccess: _sinon.default.spy()
                };
                Ember.set(reloadNecessary, 'moduleFieldsService', moduleFieldsSpy);
                Ember.set(reloadNecessary, 'appDataChanged', true);
                _context3.next = 5;
                return reloadNecessary.reloadModels();

              case 5:
                assert.ok(moduleFieldsSpy.onFetchFieldsSuccess.calledOnce, 'moduleFieldsService.onFetchFieldsSuccess() was called as expected on success');
                assert.equal(reloadNecessary.appDataChanged, false);

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x3) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should call success callback after fetching the agentsGroups data', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var agentsGroupsSpy;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                agentsGroupsSpy = {
                  onFetchAgentsGroupsSuccess: _sinon.default.spy()
                };
                Ember.set(reloadNecessary, 'agentsGroupsService', agentsGroupsSpy);
                Ember.set(reloadNecessary, 'appDataChanged', true);
                _context4.next = 5;
                return reloadNecessary.reloadModels();

              case 5:
                assert.ok(agentsGroupsSpy.onFetchAgentsGroupsSuccess.calledOnce, 'agentsGroupsService.onFetchAgentsGroupsSuccess() was called as expected on success');
                assert.equal(reloadNecessary.appDataChanged, false);

              case 7:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      return function (_x4) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should check if `appDataChanged` changes, when there is change in `currentDataVersion`', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                Ember.set(reloadNecessary, 'currentDataVersion', 1);
                _context5.next = 3;
                return reloadNecessary._checkForChanges(2);

              case 3:
                // change in data-version should set appDataChanged to true
                assert.equal(reloadNecessary.appDataChanged, true);

              case 4:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      return function (_x5) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should check if `appDataChanged` changes, when there is change in `currentLocale`', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                Ember.set(reloadNecessary, 'currentLocale', 'en');
                (0, _stubCurrentUser.stubCurrentUser)({
                  language: 'nl'
                }); // change in locale should set appDataChanged to true

                _context6.next = 4;
                return reloadNecessary._checkForChanges();

              case 4:
                // has both locale and data-version checks
                assert.equal(reloadNecessary.appDataChanged, true);

              case 5:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      return function (_x6) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should check if `appDataChanged` does not change, when there is no change in `currentDataVersion` or `currentLocale`', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                (0, _stubCurrentUser.stubCurrentUser)({
                  language: 'en'
                });
                Ember.set(reloadNecessary, 'currentLocale', 'en');
                Ember.set(reloadNecessary, 'currentDataVersion', 1);
                _context7.next = 5;
                return reloadNecessary._checkForChanges(1);

              case 5:
                // has both locale and data-version checks
                assert.equal(reloadNecessary.appDataChanged, false);

              case 6:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      return function (_x7) {
        return _ref7.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/unit/services/table-shortcuts-test", ["qunit", "ember-qunit", "sinon", "ember-keyboard"], function (_qunit, _emberQunit, _sinon, _emberKeyboard) {
  "use strict";

  (0, _qunit.module)('Unit | Service | keyboard-shortcuts.table-shortcuts', function (hooks) {
    (0, _emberQunit.setupTest)(hooks);
    var currentUser;
    var tableShortcuts;
    hooks.beforeEach(function () {
      currentUser = this.owner.lookup('service:current-user');
      currentUser.preferences = {
        shortcuts_enabled: true
      };
      var TableShortcutsService = this.owner.factoryFor('service:keyboard-shortcuts.table-shortcuts');
      tableShortcuts = TableShortcutsService.create();
    });
    (0, _qunit.test)('keyboard should activate based on shortcuts enabled', function (assert) {
      assert.equal(tableShortcuts.keyboardActivated, true, 'keyboardActivated is true when shortcuts is enabled');
    });
    (0, _qunit.test)('set the context', function (assert) {
      tableShortcuts.context = '100';
      assert.equal(tableShortcuts._context, '100', 'Setting test data as context works');
    });
    (0, _qunit.test)('on keypress of Alt+left(Prev Page)', function (assert) {
      var spy = _sinon.default.spy();

      tableShortcuts.context = {
        prevPage: spy
      };
      (0, _emberKeyboard.triggerKeyDown)('Alt+ArrowLeft');
      assert.ok(spy.calledOnce, 'prevPage method is called in the service when "Alt+ArrowLeft" is triggered');
    });
    (0, _qunit.test)('on keypress of Alt+right(next Page)', function (assert) {
      var spy = _sinon.default.spy();

      tableShortcuts.context = {
        nextPage: spy
      };
      (0, _emberKeyboard.triggerKeyDown)('Alt+ArrowRight');
      assert.ok(spy.calledOnce, 'nextPage method is called in the service when "Alt+ArrowRight" key is triggered');
    });
    (0, _qunit.test)('on keypress of ArrowUp/K(prev ticket)', function (assert) {
      var spy = _sinon.default.spy();

      tableShortcuts.context = {
        prevRow: spy
      };
      (0, _emberKeyboard.triggerKeyDown)('k');
      assert.ok(spy.calledOnce, 'prevRow method is called in the service when "j" key is triggered');
    });
    (0, _qunit.test)('on keypress of ArrowDown/j(next ticket)', function (assert) {
      var spy = _sinon.default.spy();

      tableShortcuts.context = {
        nextRow: spy
      };
      (0, _emberKeyboard.triggerKeyDown)('j');
      assert.ok(spy.calledOnce, 'nextRow method is called in the service when "k" key is triggered');
    });
    (0, _qunit.test)('on keypress of return(active)', function (assert) {
      var spy = _sinon.default.spy();

      tableShortcuts.context = {
        viewActiveRow: spy
      };
      (0, _emberKeyboard.triggerKeyDown)('Enter');
      assert.ok(spy.calledOnce, 'viewActiveRow method is called in the service when "Enter" key is triggered');
    });
    (0, _qunit.test)('on keypress of x(select)', function (assert) {
      var spy = _sinon.default.spy();

      tableShortcuts.context = {
        selectARow: spy
      };
      (0, _emberKeyboard.triggerKeyDown)('x');
      assert.ok(spy.calledOnce, 'selectARow method is called in the service when "x" key is triggered');
    });
    (0, _qunit.test)('on keypress of Shift+x(Select All)', function (assert) {
      var spy = _sinon.default.spy();

      tableShortcuts.context = {
        selectAllRow: spy
      };
      (0, _emberKeyboard.triggerKeyDown)('shift+X');
      assert.ok(spy.calledOnce, 'selectAllRow method is called in the service when "Shift+X" key is triggered');
    });
  });
});
define("freshservice/tests/unit/services/ticket-details-test", ["qunit", "ember-qunit", "sinon", "ember-keyboard"], function (_qunit, _emberQunit, _sinon, _emberKeyboard) {
  "use strict";

  (0, _qunit.module)('Unit | Service | keyboard-shortcuts.ticket-details', function (hooks) {
    (0, _emberQunit.setupTest)(hooks);
    var currentUser;
    var service;
    hooks.beforeEach(function () {
      currentUser = this.owner.lookup('service:current-user');
      currentUser.preferences = {
        shortcuts_enabled: true
      };
      var TicketDetailsShortcutsService = this.owner.factoryFor('service:keyboard-shortcuts.ticket-details');
      service = TicketDetailsShortcutsService.create();
    });
    (0, _qunit.test)('keyboard should activate based on shortcuts enabled', function (assert) {
      assert.equal(service.keyboardActivated, true, 'keyboardActivated is true when shortcuts is enabled');
    });
    (0, _qunit.test)('it should expand conversations, on press "]"', function (assert) {
      var spy = _sinon.default.spy();

      service.context = {
        loadMoreConversations: spy
      };
      (0, _emberKeyboard.triggerKeyDown)(']');
      assert.ok(spy.calledOnce, 'loadMoreConversations method is called in the service when "]" key is triggered');
    });
    (0, _qunit.test)('it should open properties, on press "p"', function (assert) {
      var spy = _sinon.default.spy();

      service.context = {
        focusProperties: spy
      };
      (0, _emberKeyboard.triggerKeyDown)('p');
      assert.ok(spy.calledOnce, 'focusProperties method is called in the service when "p" key is triggered');
    });
    (0, _qunit.test)('it should open scenario model, on press "]"', function (assert) {
      var spy = _sinon.default.spy();

      service.context = {
        openScenarioModel: spy
      };
      (0, _emberKeyboard.triggerKeyDown)('s');
      assert.ok(spy.calledOnce, 'openScenarioModel method is called in the service when "]" key is triggered');
    });
    (0, _qunit.test)('it should open note editor, on press "n"', function (assert) {
      var spy = _sinon.default.spy();

      service.context = {
        addNote: spy
      };
      (0, _emberKeyboard.triggerKeyDown)('n');
      assert.ok(spy.calledOnce, 'addNote method is called in the service when "n" key is triggered');
    });
    (0, _qunit.test)('it should open reply editor, on press "r"', function (assert) {
      var spy = _sinon.default.spy();

      service.context = {
        replyTicket: spy
      };
      (0, _emberKeyboard.triggerKeyDown)('r');
      assert.ok(spy.calledOnce, 'replyTicket method is called in the service when "r" key is triggered');
    });
    (0, _qunit.test)('it should open forward editor, on press "f"', function (assert) {
      var spy = _sinon.default.spy();

      service.context = {
        forwardTicket: spy
      };
      (0, _emberKeyboard.triggerKeyDown)('f');
      assert.ok(spy.calledOnce, 'forwardTicket method is called in the service when "f" key is triggered');
    });
    (0, _qunit.test)('it should toggle watcher, on press "w"', function (assert) {
      var spy = _sinon.default.spy();

      service.context = {
        toggleWatcher: spy
      };
      (0, _emberKeyboard.triggerKeyDown)('w');
      assert.ok(spy.calledOnce, 'toggleWatcher method is called in the service when "w" key is triggered');
    });
  });
});
define("freshservice/tests/unit/services/ticket-list-test", ["qunit", "ember-qunit", "sinon", "ember-keyboard"], function (_qunit, _emberQunit, _sinon, _emberKeyboard) {
  "use strict";

  (0, _qunit.module)('Unit | Service | keyboard-shortcuts.ticket-list', function (hooks) {
    (0, _emberQunit.setupTest)(hooks);
    var currentUser;
    var ticketListShortcuts;
    hooks.beforeEach(function () {
      currentUser = this.owner.lookup('service:current-user');
      currentUser.preferences = {
        shortcuts_enabled: true
      };
      var TicketListShortcutsService = this.owner.factoryFor('service:keyboard-shortcuts.ticket-list');
      ticketListShortcuts = TicketListShortcutsService.create();
    });
    (0, _qunit.test)('keyboard should activate based on shortcuts enabled', function (assert) {
      assert.equal(ticketListShortcuts.keyboardActivated, true, 'keyboardActivated is true when shortcuts is enabled');
    });
    (0, _qunit.test)('set the context', function (assert) {
      ticketListShortcuts.context = '100';
      assert.equal(ticketListShortcuts._context, '100', 'Setting test data as context works');
    });
    (0, _qunit.test)('show the hover card', function (assert) {
      var spy = _sinon.default.spy();

      ticketListShortcuts.context = {
        showHoverCard: spy
      };
      (0, _emberKeyboard.triggerKeyDown)(' ');
      assert.ok(spy.calledOnce, 'showHoverCard method is called in the service when "space" key is triggered');
    });
    (0, _qunit.test)('set the ticket as spam', function (assert) {
      var spy = _sinon.default.spy();

      ticketListShortcuts.context = {
        spamTicket: spy
      };
      (0, _emberKeyboard.triggerKeyDown)('!');
      assert.ok(spy.calledOnce, 'spamTicket method is called in the service when "!" key is triggered');
    });
    (0, _qunit.test)('close the ticket', function (assert) {
      var spy = _sinon.default.spy();

      ticketListShortcuts.context = {
        closeTicket: spy
      };
      (0, _emberKeyboard.triggerKeyDown)('~');
      assert.ok(spy.calledOnce, 'closeTicket method is called when "~" key is triggered');
    });
    (0, _qunit.skip)('skip the notification', function (assert) {
      var spy = _sinon.default.spy();

      ticketListShortcuts.context = {
        closeTicketWithoutNotification: spy
      };
      (0, _emberKeyboard.triggerKeyDown)('Alt+~');
      assert.ok(spy.calledOnce, 'closeTicketWithoutNotification method is called when "Alt+~" key is triggered');
    });
    (0, _qunit.test)('reply a ticket', function (assert) {
      var spy = _sinon.default.spy();

      ticketListShortcuts.context = {
        replyTicket: spy
      };
      (0, _emberKeyboard.triggerKeyDown)('r');
      assert.ok(spy.calledOnce, 'replyTicket method is called when "r" key is triggered');
    });
    (0, _qunit.test)('forward a ticket', function (assert) {
      var spy = _sinon.default.spy();

      ticketListShortcuts.context = {
        forwardTicket: spy
      };
      (0, _emberKeyboard.triggerKeyDown)('f');
      assert.ok(spy.calledOnce, 'forwardTicket method is called when "f" key is triggered');
    });
  });
});
define("freshservice/tests/unit/services/workload-test", ["qunit", "ember-qunit"], function (_qunit, _emberQunit) {
  "use strict";

  var MOCK_FETCH_SERVICE = Ember.Service.extend({
    request: function request(path, options) {
      var response = null;
      this.setProperties({
        path: path,
        options: options
      });

      if (path === 'workload/users/123/assignment_metrics') {
        response = {
          total: 10,
          unplanned: 0,
          overdue: 2
        };
      } else if (path.indexOf('freshrelease/settings/filter_issues') > -1) {
        response = {
          body: {
            issues: [],
            meta: {
              totalPage: 12
            }
          }
        };
      } else {
        response = {
          data: [],
          has_next: false
        };
      }

      return Ember.RSVP.resolve(response);
    }
  });
  (0, _qunit.module)('Unit | Service | workload', function (hooks) {
    (0, _emberQunit.setupTest)(hooks);
    hooks.beforeEach(function () {
      this.owner.register('service:fetch', MOCK_FETCH_SERVICE);
      this.set('infinityModelOptions', {
        page: 1,
        per_page: 30,
        planType: 'planned',
        statusType: 'overdue',
        sortOrder: 'asc',
        sortBy: 'planned_start_date',
        userId: '123'
      });
    });
    (0, _qunit.test)('it exists', function (assert) {
      var service = this.owner.lookup('service:workload');
      assert.ok(service);
    });
    (0, _qunit.test)('it should make request to fetch assignment metrics', function (assert) {
      var service = this.owner.lookup('service:workload');
      var fetchService = this.owner.lookup('service:fetch');
      service.getAssignmentsMetrics('123');
      assert.equal(fetchService.path, 'workload/users/123/assignment-metrics');
      assert.equal(fetchService.options.method, 'GET');
    });
    (0, _qunit.test)('it should make request to fetch assignments of change type', function (assert) {
      var service = this.owner.lookup('service:workload');
      var fetchService = this.owner.lookup('service:fetch');
      service.fetchAssignments('change', this.infinityModelOptions);
      assert.equal(fetchService.path, 'changes/filtered_index');
      assert.equal(fetchService.options.method, 'POST');
    });
    (0, _qunit.test)('it should make request to fetch assignments of problem type', function (assert) {
      var service = this.owner.lookup('service:workload');
      var fetchService = this.owner.lookup('service:fetch');
      service.fetchAssignments('problem', this.infinityModelOptions);
      assert.equal(fetchService.path, 'problems/filtered_index');
      assert.equal(fetchService.options.method, 'POST');
    });
    (0, _qunit.test)('it should make request to fetch assignments of release type', function (assert) {
      var service = this.owner.lookup('service:workload');
      var fetchService = this.owner.lookup('service:fetch');
      service.fetchAssignments('release', this.infinityModelOptions);
      assert.equal(fetchService.path, 'releases/filtered_index');
      assert.equal(fetchService.options.method, 'POST');
    });
    (0, _qunit.test)('it should make request to fetch assignments of task type', function (assert) {
      var service = this.owner.lookup('service:workload');
      var fetchService = this.owner.lookup('service:fetch');
      service.fetchAssignments('task', this.infinityModelOptions);
      assert.equal(fetchService.path, 'tasks/filtered-index');
      assert.equal(fetchService.options.method, 'POST');
    });
    (0, _qunit.test)('it should make request to fetch assignments of ticket type', function (assert) {
      var service = this.owner.lookup('service:workload');
      var fetchService = this.owner.lookup('service:fetch');
      service.fetchAssignments('ticket', this.infinityModelOptions);
      assert.ok(fetchService.path.indexOf('tickets/filtered_index') > -1);
      assert.equal(fetchService.options.method, 'POST');
    });
    (0, _qunit.test)('it should make request to fetch assignments of project tasks type', function (assert) {
      var service = this.owner.lookup('service:workload');
      var fetchService = this.owner.lookup('service:fetch');
      service.fetchAssignments('project_task', this.infinityModelOptions);
      assert.ok(fetchService.path.indexOf('freshrelease/settings/filter_issues') > -1);
      assert.equal(fetchService.options.method, 'GET');
    });
    (0, _qunit.test)('it should throw error if module fetch not defined', function (assert) {
      var _this = this;

      assert.throws(function () {
        var service = _this.owner.lookup('service:workload');

        service.fetchAssignments('asset', _this.infinityModelOptions);
      }, 'Error: could not find the index api impl for asset');
    });
  });
});
define("freshservice/tests/unit/utils/business-rule-executor-test", ["qunit", "freshservice/mirage/fixtures/ticket-form-fields", "freshservice/mirage/fixtures/sr-item-for-br", "freshservice/utils/common", "freshservice/mirage/fixtures/business-rules-executor", "freshservice/utils/business-rule-executor", "freshservice/constants/business-rule-executor", "moment"], function (_qunit, _ticketFormFields, _srItemForBr, _common, _businessRulesExecutor, _businessRuleExecutor, _businessRuleExecutor2, _moment) {
  "use strict";

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

  function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  var getFormField = function getFormField(fieldName) {
    return _ticketFormFields.default.find(function (f) {
      return f.name === fieldName;
    });
  };

  var getSRField = function getSRField(fieldName) {
    return _srItemForBr.default.custom_fields.find(function (f) {
      return f.name === fieldName;
    });
  };

  (0, _qunit.module)('Unit | Utility | business-rule-executor', function () {
    (0, _qunit.test)('setChoices test asserts', function (assert) {
      var statusField = (0, _common.deepCloneNestedObject)(getFormField('status')),
          populateConstraint = new Set([2, 3, 4]),
          populateChoicesOutput = JSON.stringify(statusField.choices.filter(function (choice) {
        return populateConstraint.has(choice.id);
      }));

      _businessRuleExecutor.default.setChoices(statusField.choices, populateConstraint, false); // popupate (3rd parameter action.property === 'remove')


      assert.equal(JSON.stringify(statusField.choices), populateChoicesOutput, "set Choices for 'populate'");
      var removeConstraint = new Set([2]),
          removeChoicesOutput = JSON.stringify(statusField.choices.filter(function (choice) {
        return !removeConstraint.has(choice.id);
      }));

      _businessRuleExecutor.default.setChoices(statusField.choices, removeConstraint, true); // remove


      assert.equal(JSON.stringify(statusField.choices), removeChoicesOutput, "set Choices for 'remove'");
    });
    (0, _qunit.test)('setNestedChoices test asserts', function (assert) {
      var categoryField = getFormField('category'),
          categoryFieldPopulateSrc = (0, _common.deepCloneNestedObject)(categoryField),
          categoryFieldRemoveSrc = (0, _common.deepCloneNestedObject)(categoryField),
          constraint = new Set([58, 59, 60]);

      _businessRuleExecutor.default.setNestedChoices(categoryFieldPopulateSrc, constraint, "populate");

      assert.equal(categoryFieldPopulateSrc.choices[0].display_id, 58);
      assert.equal(categoryFieldPopulateSrc.choices[0].nested_options[0].display_id, 59);
      assert.equal(categoryFieldPopulateSrc.choices[0].nested_options[0].nested_options[0].display_id, 60);

      _businessRuleExecutor.default.setNestedChoices(categoryFieldRemoveSrc, constraint, "remove");

      assert.equal(categoryFieldRemoveSrc.choices[0].display_id, 68);
      assert.equal(categoryFieldRemoveSrc.choices[1].display_id, 73);
      assert.equal(categoryFieldRemoveSrc.choices[2].display_id, 76);
    });
    (0, _qunit.test)('setFormservNestedChoices test asserts', function (assert) {
      var categoryField = getSRField('stage_1'),
          categoryFieldPopulateSrc = (0, _common.deepCloneNestedObject)(categoryField),
          categoryFieldRemoveSrc = (0, _common.deepCloneNestedObject)(categoryField),
          constraint = new Set(['Hardware_0', 'Hand Tools_1', 'Screw Driver_2']);

      _businessRuleExecutor.default.setFormservNestedChoices(categoryFieldPopulateSrc, constraint, true); // populate


      assert.equal(JSON.stringify(categoryFieldPopulateSrc.choices), JSON.stringify(_businessRulesExecutor.default.postPopulateSRNested1.choices), "set setFormservNestedChoices level1 choices for 'populate'");
      assert.equal(JSON.stringify(categoryFieldPopulateSrc.fields[0].choices), JSON.stringify(_businessRulesExecutor.default.postPopulateSRNested1.fields[0].choices), "set setFormservNestedChoices level2 choices for 'populate'");
      assert.equal(JSON.stringify(categoryFieldPopulateSrc.fields[0].fields[0].choices), JSON.stringify(_businessRulesExecutor.default.postPopulateSRNested1.fields[0].fields[0].choices), "set setFormservNestedChoices level3 choices for 'populate'");

      _businessRuleExecutor.default.setFormservNestedChoices(categoryFieldRemoveSrc, constraint, false); // remove


      assert.equal(JSON.stringify(categoryFieldRemoveSrc.choices), JSON.stringify(_businessRulesExecutor.default.postRemoveSRNested1.choices), "set setFormservNestedChoices level1 choices for 'remove'");
      assert.equal(JSON.stringify(categoryFieldRemoveSrc.fields[0].choices), JSON.stringify(_businessRulesExecutor.default.postRemoveSRNested1.fields[0].choices), "set setFormservNestedChoices level2 choices for 'remove'");
      assert.equal(JSON.stringify(categoryFieldRemoveSrc.fields[0].fields[0].choices), JSON.stringify(_businessRulesExecutor.default.postRemoveSRNested1.fields[0].fields[0].choices), "set setFormservNestedChoices level3 choices for 'remove'");
    });
    (0, _qunit.test)('conditionsHash "not_selected" operator test asserts', function (assert) {
      assert.equal(_businessRuleExecutor.default.conditionsHash.not_selected({
        valueNumber: 0
      }), true);
      assert.notEqual(_businessRuleExecutor.default.conditionsHash.not_selected({
        valueNumber: 1
      }), true);
    });
    (0, _qunit.test)('conditionsHash "selected" operator test asserts', function (assert) {
      assert.equal(_businessRuleExecutor.default.conditionsHash.selected({
        valueNumber: 1
      }), true);
      assert.notEqual(_businessRuleExecutor.default.conditionsHash.selected({
        valueNumber: 2
      }), true);
    });
    (0, _qunit.test)('conditionsHash "is" operator test asserts', function (assert) {
      assert.equal(_businessRuleExecutor.default.conditionsHash.is({
        valueString: 'lorem'
      }, {
        valueString: 'lorem'
      }), true);
      assert.equal(_businessRuleExecutor.default.conditionsHash.is({
        valueString: '2'
      }, {
        valueString: '2'
      }), true);
      assert.equal(_businessRuleExecutor.default.conditionsHash.is({
        valueString: 'ipsum'
      }, {
        valueString: 'lorem'
      }), false);
    });
    (0, _qunit.test)('conditionsHash "is_not" operator test asserts', function (assert) {
      assert.equal(_businessRuleExecutor.default.conditionsHash.is_not({
        valueString: 'lorem'
      }, {
        valueString: 'lorem'
      }), false);
      assert.equal(_businessRuleExecutor.default.conditionsHash.is_not({
        valueString: '2'
      }, {
        valueString: '2'
      }), false);
      assert.equal(_businessRuleExecutor.default.conditionsHash.is_not({
        valueString: 'ipsum'
      }, {
        valueString: 'lorem'
      }), true);
    });
    (0, _qunit.test)('conditionsHash "greater_than_or_eql" operator test asserts', function (assert) {
      assert.equal(_businessRuleExecutor.default.conditionsHash.greater_than_or_eql({
        valueNumber: 3
      }, {
        valueNumber: 2
      }), true);
      assert.equal(_businessRuleExecutor.default.conditionsHash.greater_than_or_eql({
        valueNumber: 2
      }, {
        valueNumber: '2'
      }), true);
      assert.equal(_businessRuleExecutor.default.conditionsHash.greater_than_or_eql({
        valueNumber: 2
      }, {
        valueNumber: 3
      }), false);
    });
    (0, _qunit.test)('conditionsHash "less_than_or_eql" operator test asserts', function (assert) {
      assert.equal(_businessRuleExecutor.default.conditionsHash.less_than_or_eql({
        valueNumber: 3
      }, {
        valueNumber: 2
      }), false);
      assert.equal(_businessRuleExecutor.default.conditionsHash.less_than_or_eql({
        valueNumber: 2
      }, {
        valueNumber: '2'
      }), true);
      assert.equal(_businessRuleExecutor.default.conditionsHash.less_than_or_eql({
        valueNumber: 2
      }, {
        valueNumber: 3
      }), true);
    });
    (0, _qunit.test)('conditionsHash "greater_than" operator test asserts', function (assert) {
      assert.equal(_businessRuleExecutor.default.conditionsHash.greater_than({
        valueNumber: 3
      }, {
        valueNumber: 2
      }), true);
      assert.equal(_businessRuleExecutor.default.conditionsHash.greater_than({
        valueNumber: 2
      }, {
        valueNumber: '2'
      }), false);
      assert.equal(_businessRuleExecutor.default.conditionsHash.greater_than({
        valueNumber: 2
      }, {
        valueNumber: 3
      }), false);
    });
    (0, _qunit.test)('conditionsHash "less_than" operator test asserts', function (assert) {
      assert.equal(_businessRuleExecutor.default.conditionsHash.less_than({
        valueNumber: 3
      }, {
        valueNumber: 2
      }), false);
      assert.equal(_businessRuleExecutor.default.conditionsHash.less_than({
        valueNumber: 2
      }, {
        valueNumber: '2'
      }), false);
      assert.equal(_businessRuleExecutor.default.conditionsHash.less_than({
        valueNumber: 2
      }, {
        valueNumber: 3
      }), true);
    });
    (0, _qunit.test)('conditionsHash "starts_with" operator test asserts', function (assert) {
      assert.equal(_businessRuleExecutor.default.conditionsHash.starts_with({
        valueStringTrimmed: 'lorem ipsum'
      }, {
        valueString: 'lorem'
      }), true);
      assert.equal(_businessRuleExecutor.default.conditionsHash.starts_with({
        valueStringTrimmed: '2ipsum'
      }, {
        valueString: '2'
      }), true);
      assert.equal(_businessRuleExecutor.default.conditionsHash.starts_with({
        valueStringTrimmed: 'lorem'
      }, {
        valueString: 'ipsum lorem'
      }), false);
    });
    (0, _qunit.test)('conditionsHash "ends_with" operator test asserts', function (assert) {
      assert.equal(_businessRuleExecutor.default.conditionsHash.ends_with({
        valueStringTrimmed: 'ipsum lorem'
      }, {
        valueString: 'lorem'
      }), true);
      assert.equal(_businessRuleExecutor.default.conditionsHash.ends_with({
        valueStringTrimmed: '2ipsum2'
      }, {
        valueString: '2'
      }), true);
      assert.equal(_businessRuleExecutor.default.conditionsHash.ends_with({
        valueStringTrimmed: 'lorem'
      }, {
        valueString: 'lorem ipsum'
      }), false);
    });
    (0, _qunit.test)('conditionsHash "is_empty" operator test asserts', function (assert) {
      assert.equal(_businessRuleExecutor.default.conditionsHash.is_empty({
        valueStringTrimmed: 'lorem'
      }), false);
      assert.equal(_businessRuleExecutor.default.conditionsHash.is_empty({
        valueStringTrimmed: ''
      }), true);
    });
    (0, _qunit.test)('conditionsHash "is_not_empty" operator test asserts', function (assert) {
      assert.equal(_businessRuleExecutor.default.conditionsHash.is_not_empty({
        valueStringTrimmed: 'lorem'
      }), true);
      assert.equal(_businessRuleExecutor.default.conditionsHash.is_not_empty({
        valueStringTrimmed: ''
      }), false);
    });
    (0, _qunit.test)('conditionsHash "contains" operator test asserts', function (assert) {
      assert.equal(_businessRuleExecutor.default.conditionsHash.contains({
        value: 'lorem'
      }, {
        value: ['lorem']
      }), true);
      assert.equal(_businessRuleExecutor.default.conditionsHash.contains({
        value: ['lorem']
      }, {
        value: 'lorem'
      }), true);
      assert.equal(_businessRuleExecutor.default.conditionsHash.contains({
        value: ['lorem']
      }, {
        value: ['lorem']
      }), true);
      assert.equal(_businessRuleExecutor.default.conditionsHash.contains({
        value: 'ipsum'
      }, {
        value: ['lorem']
      }), false);
      assert.equal(_businessRuleExecutor.default.conditionsHash.contains({
        value: ['ipsum']
      }, {
        value: 'lorem'
      }), false);
      assert.equal(_businessRuleExecutor.default.conditionsHash.contains({
        value: ['ipsum']
      }, {
        value: ['lorem']
      }), false);
    });
    (0, _qunit.test)('conditionsHash "does_not_contain" operator test asserts', function (assert) {
      assert.equal(_businessRuleExecutor.default.conditionsHash.does_not_contain({
        value: 'lorem'
      }, {
        value: ['lorem']
      }), false);
      assert.equal(_businessRuleExecutor.default.conditionsHash.does_not_contain({
        value: ['lorem']
      }, {
        value: 'lorem'
      }), false);
      assert.equal(_businessRuleExecutor.default.conditionsHash.does_not_contain({
        value: ['lorem']
      }, {
        value: ['lorem']
      }), false);
      assert.equal(_businessRuleExecutor.default.conditionsHash.does_not_contain({
        value: 'ipsum'
      }, {
        value: ['lorem']
      }), true);
      assert.equal(_businessRuleExecutor.default.conditionsHash.does_not_contain({
        value: ['ipsum']
      }, {
        value: 'lorem'
      }), true);
      assert.equal(_businessRuleExecutor.default.conditionsHash.does_not_contain({
        value: ['ipsum']
      }, {
        value: ['lorem']
      }), true);
    });
    (0, _qunit.test)('conditionsHash "date_operators" operator test asserts', function (assert) {
      var dateString = '2022-06-24T18:30:00.000Z';
      var twoDaysAgo = (0, _moment.default)().subtract(2, 'days').format();
      var twoDaysAway = (0, _moment.default)().add(2, 'days').format();
      assert.equal(_businessRuleExecutor.default.conditionsHash.date_operators({
        value: 'lorem'
      }, {
        operator: 'is_empty_empty'
      }), false);
      assert.equal(_businessRuleExecutor.default.conditionsHash.date_operators({
        value: 'lorem'
      }, {
        operator: 'is_empty'
      }), true);
      assert.equal(_businessRuleExecutor.default.conditionsHash.date_operators({
        value: dateString
      }, {
        value: ['24 Jun, 2022', '25 Jun, 2022'],
        operator: 'is_in_the_range'
      }), true);
      assert.equal(_businessRuleExecutor.default.conditionsHash.date_operators({
        value: dateString
      }, {
        value: ['24 Jun, 2022', '24 Jun, 2022'],
        operator: 'is_in_the_range'
      }), true);
      assert.equal(_businessRuleExecutor.default.conditionsHash.date_operators({
        value: dateString
      }, {
        value: '24 Jun, 2022',
        operator: 'is'
      }), true);
      assert.equal(_businessRuleExecutor.default.conditionsHash.date_operators({
        value: dateString
      }, {
        value: '25 Jun, 2022',
        operator: 'is_not'
      }), true);
      assert.equal(_businessRuleExecutor.default.conditionsHash.date_operators({
        value: dateString
      }, {
        operator: 'is_not_empty'
      }), false);
      assert.equal(_businessRuleExecutor.default.conditionsHash.date_operators({
        value: dateString
      }, {
        value: '23 Jun, 2022',
        operator: 'greater_than'
      }), true);
      assert.equal(_businessRuleExecutor.default.conditionsHash.date_operators({
        value: dateString
      }, {
        value: '24 Jun, 2022',
        operator: 'greater_than_or_eql'
      }), true);
      assert.equal(_businessRuleExecutor.default.conditionsHash.date_operators({
        value: dateString
      }, {
        value: '25 Jun, 2022',
        operator: 'less_than'
      }), true);
      assert.equal(_businessRuleExecutor.default.conditionsHash.date_operators({
        value: dateString
      }, {
        value: '24 Jun, 2022',
        operator: 'less_than_or_eql'
      }), true);
      assert.equal(_businessRuleExecutor.default.conditionsHash.date_operators({
        value: twoDaysAgo
      }, {
        value: '',
        valueNumber: 2,
        operator: 'exactly_ago'
      }), true);
      assert.equal(_businessRuleExecutor.default.conditionsHash.date_operators({
        value: twoDaysAgo
      }, {
        value: '',
        valueNumber: 8,
        operator: 'not_exactly_ago'
      }), true);
      assert.equal(_businessRuleExecutor.default.conditionsHash.date_operators({
        value: twoDaysAway
      }, {
        value: '',
        valueNumber: 2,
        operator: 'exactly_away'
      }), true);
      assert.equal(_businessRuleExecutor.default.conditionsHash.date_operators({
        value: twoDaysAway
      }, {
        value: '',
        valueNumber: 8,
        operator: 'not_exactly_away'
      }), true);
      assert.equal(_businessRuleExecutor.default.conditionsHash.date_operators({
        value: twoDaysAgo
      }, {
        value: '',
        valueNumber: 2,
        operator: 'atleast_ago'
      }), true);
      assert.equal(_businessRuleExecutor.default.conditionsHash.date_operators({
        value: twoDaysAgo
      }, {
        value: '',
        valueNumber: 8,
        operator: 'not_atleast_ago'
      }), true);
      assert.equal(_businessRuleExecutor.default.conditionsHash.date_operators({
        value: twoDaysAway
      }, {
        value: '',
        valueNumber: 2,
        operator: 'atleast_away'
      }), true);
      assert.equal(_businessRuleExecutor.default.conditionsHash.date_operators({
        value: twoDaysAway
      }, {
        value: '',
        valueNumber: 8,
        operator: 'not_atleast_away'
      }), true);
    });
    (0, _qunit.test)('BUSINESS_RULES_URL test', function (assert) {
      assert.equal((0, _businessRuleExecutor2.BUSINESS_RULES_URL)('ticket', 'cf_'), 'business_rules?ember_api=true&module_type=ticket&form_type=new_form&cf_name_prefix=cf_&item_id=null&requester=&requested_for=');
    });
    (0, _qunit.test)('BUSINESS_RULES_USER_URL test', function (assert) {
      assert.equal((0, _businessRuleExecutor2.BUSINESS_RULES_USER_URL)('sample@freshservice.com'), '/users/business_rules_user_details?user_email=sample@freshservice.com');
    });
    (0, _qunit.test)('optimizeRulesAndPrepareInitData test', function (assert) {
      var rules = [{
        "condition_data": {
          "all": [{
            "name": "status",
            "evaluate_on": "ticket"
          }]
        },
        "action_data": {
          "action": [{
            "name": ["category"],
            "values": [{
              "display_id": 58,
              "nested_options": [{
                "display_id": 59,
                "nested_options": [{
                  "display_id": 60,
                  "nested_options": null
                }, {
                  "display_id": 61,
                  "nested_options": null
                }]
              }]
            }],
            "property": "populate",
            "nested_levels": ["sub_category", "item_category"]
          }, {
            "name": ["customFields.category"],
            "values": [{
              "display_id": 58,
              "nested_options": []
            }, {
              "display_id": 59
            }],
            "property": "remove"
          }, {
            "name": ["status"],
            "values": [1, 2, 3],
            "property": "populate"
          }, {
            "name": ["status"],
            "values": [1],
            "property": "remove"
          }, {
            "name": ["priority"],
            "values": [1, 2, 3],
            "property": "remove"
          }, {
            "name": ["priority"],
            "values": [1],
            "property": "populate"
          }]
        }
      }];
      var prefix = {
        formSchema: 'customFields.',
        fieldName: 'cf_'
      };
      var executionInitiators = new Set();
      assert.equal(rules[0].action_data.action.length, 6, 'Initial rule actions has length 6'); // default & ticket module

      _businessRuleExecutor.default.optimizeRulesAndPrepareInitData(rules, {
        module: 'ticket',
        prefix: prefix
      }, executionInitiators);

      assert.equal(rules[0].action_data.action.length, 5, 'Optimized rule actions has length 5');
      assert.deepEqual(rules[0].action_data.action[0].values, [58, 59, 60, 61], 'action values of nested field has been replaced with Display IDs - ');
      assert.deepEqual(rules[0].action_data.action[1].values, [59], 'action values has invalid data-format has been excluded');
      assert.deepEqual(rules[0].action_data.action[4].values, [1], 'delete "remove" from "remove > populate" action pattern has been succeeded');
      assert.equal(rules[0].action_data.action[4].property, "populate", 'delete "remove" from "remove > populate" action pattern has been succeeded - property name test');
      assert.equal(executionInitiators.has('status'), true, 'executionInitiators has set to have condition_data');
      assert.equal(executionInitiators.size, 1, 'executionInitiators has correct size');
      assert.deepEqual(_businessRuleExecutor2.customFieldModuleFieldsNameMap[rules[0].action_data.action[1].name], 'cf_category', 'customFieldModuleFieldsNameMap has been updated to have difference in "formSchema" & "fieldName" prefixes'); // service_request module

      rules[0].condition_data = {
        "any": [{
          "name": "customFields.cf_category",
          "evaluate_on": "service_request"
        }, {
          "name": "cf_category",
          "evaluate_on": "service_request"
        }]
      };

      _businessRuleExecutor.default.optimizeRulesAndPrepareInitData(rules, {
        module: 'service_request',
        prefix: prefix
      }, executionInitiators);

      assert.equal(executionInitiators.size, 7, 'executionInitiators has been updated to have SR specific condition-naming patterns');
      assert.deepEqual(_toConsumableArray(executionInitiators), ["status", "customFields.cf_category", "customFieldsCfCategory", "category", "customFields.category", "cf_category", "cfCategory"], "executionInitiators has been updated correctly");
    });
    (0, _qunit.test)('resetFieldStatesChoices test', function (assert) {
      var fieldState = {
        priority: {
          choices: [1, 2, 3]
        },
        status: {
          choices: [4]
        }
      };
      assert.equal(fieldState.priority.choices.length, 3, 'Default choices check');

      _businessRuleExecutor.default.resetFieldStatesChoices(fieldState);

      assert.equal(fieldState.priority.choices.length, 0, 'fieldState has been reset');
    });
    (0, _qunit.test)('excludeHiddenFields test', function (assert) {
      var payload = {
        status: 2,
        priority: 3,
        impact: 6,
        custom_fields: {
          customfield: 4
        }
      };
      var hiddenFields = ['priority', 'customFields.customfield', 'customField.cf_customfield1', 'customField.customfield2'];

      _businessRuleExecutor.default.excludeHiddenFields(payload, hiddenFields, 'ticket');

      assert.deepEqual(payload, {
        status: 2,
        impact: 6,
        custom_fields: {}
      }, 'Ticket - HiddenFields has been excluded from payload');
      var srPayload = {
        status: 2,
        custom_fields: {
          'customfield1': 4,
          'customfield2': 5,
          color: 6
        }
      };

      _businessRuleExecutor.default.excludeHiddenFields(srPayload, hiddenFields, 'service_request');

      assert.deepEqual(srPayload, {
        status: 2,
        custom_fields: {
          color: 6
        }
      }, 'SR - HiddenFields has been excluded from payload');
    });
    (0, _qunit.test)('brModifiedFieldStates test', function (assert) {
      var initialState = {
        optional: ['priority', 'status'],
        disabled: ['priority'],
        hidden: ['status']
      };
      var brState = {
        priority: {
          required: false
        },
        'customFields.customfield': {
          editable: false
        },
        'customField.cf_customfield': {
          editable: true
        },
        'customField.customfield': {
          hidden: true
        }
      };

      var ticketActual = _businessRuleExecutor.default.brModifiedFieldStates(initialState, brState, 'ticket', 1);

      var ticketExpected = {
        "hidden": ["customField.customfield"],
        "validationExcludes": {
          "disabled": ["customfield_1", "customField.customfield"],
          "hidden": ["customField.customfield"],
          "optional": ["customfield_1", "customField.cf_customfield", "customField.customfield"]
        }
      };
      assert.deepEqual(ticketActual, ticketExpected, 'Ticket - brModifiedFieldStates test');
      var srBrState = {
        priority: {
          required: true
        },
        'customFields.customfield': {
          editable: false
        },
        'customField.cf_customfield': {
          editable: true
        },
        'customField.customfield': {
          hidden: true
        }
      };

      var srActual = _businessRuleExecutor.default.brModifiedFieldStates(initialState, srBrState, 'service_request', 1);

      var srExpected = {
        "hidden": ["customField.customfield"],
        "validationExcludes": {
          "disabled": ["customfield_1", "customfield_1"],
          "hidden": ["customfield_1"],
          "optional": ["customfield_1", "cf_customfield_1", "customfield_1"]
        }
      };
      assert.deepEqual(srActual, srExpected, 'Ticket - brModifiedFieldStates test');
    });
    (0, _qunit.test)('convertLookupFieldValues test', function (assert) {
      var invalidValue = 5;
      var sigleLookupValue = {
        id: 2
      };
      var multiLookupInvalidValue = [];
      var multiLookupValue = [{
        id: 2
      }, {
        id: 3
      }];
      assert.equal(_businessRuleExecutor.default.convertLookupFieldValues(invalidValue), 5, 'invalidValue test');
      assert.equal(_businessRuleExecutor.default.convertLookupFieldValues(sigleLookupValue), 2, 'sigleLookupValue test');
      assert.deepEqual(_businessRuleExecutor.default.convertLookupFieldValues(multiLookupInvalidValue), [], 'multiLookupInvalidValue test');
      assert.deepEqual(_businessRuleExecutor.default.convertLookupFieldValues(multiLookupValue), [2, 3], 'multiLookupValue test');
    });
    (0, _qunit.test)('combinePopulateRemoveActions test', function (assert) {
      var action1 = [];
      var action2 = [{
        values: new Set([1])
      }, {
        values: new Set()
      }];
      var action3 = [{
        values: new Set([1, 2, 3, 4])
      }, {
        values: new Set([1, 2])
      }];
      assert.deepEqual(_businessRuleExecutor.default.combinePopulateRemoveActions(action1), {}, 'empty action test');
      assert.deepEqual(Array.from(_businessRuleExecutor.default.combinePopulateRemoveActions(action2).values), [1], 'empty "remove" action test');
      assert.deepEqual(_businessRuleExecutor.default.combinePopulateRemoveActions(action3).property, 'populate', 'valid "populate > remove" property - test');
      assert.deepEqual(Array.from(_businessRuleExecutor.default.combinePopulateRemoveActions(action3).values), [3, 4], 'valid "populate > remove" values - test');
    });
    (0, _qunit.test)('setSrValidationExcludes test', function (assert) {
      var modelSchema = {
        childItems: [{
          service_item_id: 11,
          brExecutor: {
            getFieldStates: function getFieldStates(childItemId) {
              return {
                excludes: _defineProperty({}, childItemId, {
                  optional: ['lorem', 'ipsum']
                })
              };
            }
          }
        }, {
          service_item_id: 12,
          brExecutor: {
            getFieldStates: function getFieldStates(childItemId) {
              return {
                excludes: _defineProperty({}, childItemId, {
                  optional: []
                })
              };
            }
          }
        }]
      };
      var formId = 10;
      var brFieldStates = {
        excludes: _defineProperty({}, formId, {
          optional: ['bundleitem_13', 'bundleitem_14']
        })
      };

      _businessRuleExecutor.default.setSrValidationExcludes(modelSchema, formId, brFieldStates);

      assert.deepEqual(brFieldStates.excludes.bundle_items, {
        '10': ['13', '14']
      }, 'bundle_items - excludes test');
      assert.deepEqual(brFieldStates.excludes['11'], {
        optional: ['lorem', 'ipsum']
      }, 'child item - excludes test');
    });
  });
});
define("freshservice/tests/unit/utils/common-test", ["qunit", "ember-window-mock", "freshservice/utils/common"], function (_qunit, _emberWindowMock, _common) {
  "use strict";

  (0, _qunit.module)('Unit | Utility | common', function () {
    (0, _qunit.test)('conditionalLogger is not enabled on page load', function (assert) {
      assert.notEqual(_common.conditionalLogger.log, _emberWindowMock.default.console.log, "conditionalLogger is not enabled on page load");
    });
    (0, _qunit.skip)('conditionalLogger is enabled on page load (depends on window.location.search)', function (assert) {
      _emberWindowMock.default.location.search = "debug=true";
      assert.equal(_common.conditionalLogger.log, _emberWindowMock.default.console.log, "conditionalLogger is enabled on page load");
    });
  });
});
define("freshservice/tests/unit/utils/html-escape-test", ["freshservice/utils/html-escape", "qunit"], function (_htmlEscape, _qunit) {
  "use strict";

  (0, _qunit.module)('Unit | Utility | html-escape', function () {
    (0, _qunit.test)('Should escape html content', function (assert) {
      var result = (0, _htmlEscape.default)('<img src=x onerror=alert(document.cookie)>');
      assert.equal(result, '&lt;img src&#x3D;x onerror&#x3D;alert(document.cookie)&gt;');
    });
  });
});
define("freshservice/tests/unit/utils/html-sanitize-test", ["freshservice/utils/html-sanitize", "qunit"], function (_htmlSanitize, _qunit) {
  "use strict";

  (0, _qunit.module)('Unit | Utility | html-sanitize', function () {
    (0, _qunit.test)('Should sanitize all html content', function (assert) {
      var result = (0, _htmlSanitize.default)('<b>hello</b>', {
        noTags: true
      });
      assert.equal(result, 'hello');
    });
    (0, _qunit.test)('Should sanitize html content', function (assert) {
      var result = (0, _htmlSanitize.default)('<img src=x onerror=alert(1)/>');
      assert.equal(result, '<img src="x">');
    });
  });
});
define("freshservice/tests/unit/utils/model-serializer-util-test", ["qunit", "freshservice/utils/model-serializer-util", "ember-cli-mirage/test-support", "ember-qunit"], function (_qunit, _modelSerializerUtil, _testSupport, _emberQunit) {
  "use strict";

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  (0, _qunit.module)('Unit | Utility | model-serializer', function (hooks) {
    (0, _emberQunit.setupTest)(hooks);
    (0, _testSupport.setupMirage)(hooks);

    var Moment = /*#__PURE__*/function () {
      function Moment() {
        _classCallCheck(this, Moment);

        _defineProperty(this, "time", null);
      }

      _createClass(Moment, [{
        key: "moment",
        value: function moment(t) {
          this.time = t;
          return this;
        }
      }, {
        key: "format",
        value: function format() {
          return this.time;
        }
      }]);

      return Moment;
    }();

    window.__CLASSIC_OWN_CLASSES__.set(Moment, true);

    (0, _qunit.test)('serialize models to underscored object', /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var moment, store, record, result;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                moment = new Moment();
                store = this.owner.lookup('service:store');
                _context.next = 4;
                return store.createRecord('time-entry', {
                  createdAt: '2022-05-20T11:08:09+05:30',
                  updatedAt: '2022-05-20T11:08:09+05:30',
                  startTime: '2022-05-20T11:08:09+05:30',
                  billable: true,
                  timeSpent: '11:00',
                  note: 'abcd',
                  customFields: {
                    customText: 'custom text'
                  }
                });

              case 4:
                record = _context.sent;
                result = (0, _modelSerializerUtil.SERIALIZE_MODEL_TO_UNEDERSCORED_OBJECT)(record, moment);
                assert.equal(result.created_at, '2022-05-20T11:08:09+05:30');
                assert.equal(result.time_spent, '11:00');
                assert.true(_typeof(result.custom_fields) === 'object');

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
  });
});
define("freshservice/tests/unit/utils/module-view-test", ["qunit"], function (_qunit) {
  "use strict";

  // import moduleView from 'freshservice/utils/module-view';
  (0, _qunit.module)('Unit | Utility | module-view', function () {
    (0, _qunit.test)('it works', function (assert) {
      assert.ok(true);
    });
  });
});
define("freshservice/tests/unit/validators/multi-select-field-email-validator-test", ["qunit", "ember-qunit"], function (_qunit, _emberQunit) {
  "use strict";

  (0, _qunit.module)('Unit | Validator | multi-select-field-email-validator', function (hooks) {
    (0, _emberQunit.setupTest)(hooks);
    var options = {
      message: 'invalid fields',
      attributeName: 'emailField'
    };
    var validator;
    hooks.beforeEach(function () {
      validator = this.owner.lookup('validator:multi-select-field-email-validator');
    });
    (0, _qunit.test)('Should not break even if options attribute is not passed.', function (assert) {
      var model = {
        emailField: [{
          details: "andrea@freshservice.com"
        }]
      };
      var message = validator.validate(model.emailField, '', model, 'emailField');
      assert.equal(message, true);
    });
    (0, _qunit.test)('Should return true on valid value', function (assert) {
      var model = {
        emailField: [{
          details: "andrea@freshservice.com"
        }]
      };
      var message = validator.validate(model.emailField, options, model);
      assert.equal(message, true);
    });
    (0, _qunit.test)('Should return error message on invalid value', function (assert) {
      var model = {
        emailField: [{
          details: "andrea@freshservice"
        }]
      };
      var message = validator.validate(model.emailField, options, model);
      assert.equal(message, options.message);
    });
  });
});
define('freshservice/config/environment', [], function() {
  
          var exports = {
            'default': {"marketplaceFreshParentUrl":"https://static.freshcloud.io/fdk/2.0/assets/fresh_parent.js","freshReleasePlatform":{"routeName":"projects","routePath":"project_management"},"modulePrefix":"freshservice","environment":"test","rootURL":"/a/","locationType":"none","EmberENV":{"FEATURES":{},"EXTEND_PROTOTYPES":false,"LOG_STACKTRACE_ON_DEPRECATION":false,"_APPLICATION_TEMPLATE_WRAPPER":false,"_DEFAULT_ASYNC_OBSERVERS":true,"_JQUERY_INTEGRATION":false,"_TEMPLATE_ONLY_GLIMMER_COMPONENTS":true},"APP":{"rootElement":"#ember-testing","LOG_ACTIVE_GENERATION":false,"LOG_VIEW_LOOKUPS":false,"autoboot":false,"renderInEmber":true,"hostURL":"http://localhost.freshservice-dev.com:4000","name":"freshservice","version":"0.0.1+34a9c59a"},"OPTIONS":{"test":true,"fingerprint":{"enabled":false,"extensions":["js","css","png","jpg","gif","json","svg","js"],"prepend":"http://localhost.freshservice-dev.com:7357/","exclude":["assets/fs-chunk-**"]},"outputPaths":{"app":{"css":{"app":"/assets/freshservice.css","modules/admin/main":"/assets/modules/styles/admin.css","modules/ams/main":"/assets/modules/styles/ams.css","modules/services/main":"/assets/modules/styles/services.css","modules/assets/main":"/assets/modules/styles/assets.css","modules/projects/main":"/assets/modules/styles/projects.css","modules/purchase-order/main":"/assets/modules/styles/purchase-order.css","modules/sam/main":"/assets/modules/styles/sam.css","modules/solutions/main":"/assets/modules/styles/solutions.css","modules/dashboard/main":"/assets/modules/styles/dashboard.css","modules/leaderboard/main":"/assets/modules/styles/leaderboard.css","modules/quest/main":"/assets/modules/styles/quest.css","modules/approvals/main":"/assets/modules/styles/approvals.css","modules/tickets/main":"/assets/modules/styles/tickets.css","modules/catalog/main":"/assets/modules/styles/catalog.css","modules/workloads/main":"/assets/modules/styles/workloads.css","modules/portal-designer/main":"/assets/modules/styles/portal-designer.css"}}},"sourcemaps":{"enabled":false},"minifyCSS":{"enabled":true},"minifyJS":{"enabled":true},"babel":{"plugins":["/Users/sreeramv/Documents/ws/itil/frontend/node_modules/ember-auto-import/babel-plugin/index.js"]},"autoImport":{"alias":{"froala-editor":"froala-editor/js/froala_editor.pkgd.min.js"},"webpack":{"output":{"chunkFilename":"fs-chunk-[name]-[chunkhash].js"}}},"svgJar":{"rootURL":"/a/","sourceDirs":["public/assets/inline-svg","node_modules/collab-ui/public/assets/images"],"optimizer":{"plugins":[{"cleanupIDs":{"minify":false}}]}},"emberHighCharts":{"includeHighCharts":false},"ember-cli-babel":{"includePolyfill":true},"ember-froala-editor":{"plugins":true,"languages":true,"dynamicImportFroala":true},"ember-service-worker":{"enabled":false,"unregister":false,"versionStrategy":"every-build"},"esw-cache-first":{"api_name":"FS-api-cache","apiPatterns":["/api/_/bootstrap/agents_groups","/api/_/ticket_form_fields"]},"hinting":false,"stylelint":{"generateTests":false,"testFailingFiles":false,"testPassingFiles":false}},"moment":{"includeTimezone":"all","includeLocales":["ar","ca","cs","da","de","en","es-do","es","et","fi","fr","hu","id","it","ja","ko","nb","nl","pl","pt-br","pt","ru","sk","sl","sv","tr","vi","zh-cn","uk","he","th","cy","zh-tw","ro","lv","hr"],"allowEmpty":true},"ember-cli-mirage":{"enabled":true,"usingProxy":false,"useDefaultPassthroughs":true},"ember-froala-editor":{"key":"QFF4nB16B10A8A6F6C5A4fLUQZa1ASFe1EFRNc1He1BCCQDUHnD5D4B3C3C3D7A5C2F5A3=="},"buildEnvironment":"test","ember-form-for":{"errorsPath":"validations.attrs.PROPERTY_NAME.errors"},"stackTraceLimit":30,"exportApplicationGlobal":true,"emberHifi":{"debug":false,"connections":[{"name":"NativeAudio","config":{}},{"name":"HLS","config":{}},{"name":"Howler","config":{}}]},"ember-modal-dialog":{},"ember-a11y-testing":{"componentOptions":{"turnAuditOff":true,"excludeAxeCore":true,"axeOptions":{"iframes":false,"reporter":"v2","resultTypes":["violations"],"rules":{"duplicate-id":{"enabled":false},"duplicate-id-active":{"enabled":false},"duplicate-id-aria":{"enabled":false}}}}}}
          };
          Object.defineProperty(exports, '__esModule', {value: true});
          return exports;
        
});

require('freshservice/tests/test-helper');
EmberENV.TESTS_FILE_LOADED = true;
