(window["webpackJsonp_ember_auto_import_"] = window["webpackJsonp_ember_auto_import_"] || []).push([[3],{

/***/ "./node_modules/gridstack/dist/gridstack-ddi.js":
/*!******************************************************!*\
  !*** ./node_modules/gridstack/dist/gridstack-ddi.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\r\n * gridstack-ddi.ts 4.2.6\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GridStackDDI = void 0;\n/**\r\n * Abstract Partial Interface API for drag'n'drop plugin - look at GridStackDD and HTML5 / Jquery implementation versions\r\n */\n\nvar GridStackDDI = /*#__PURE__*/function () {\n  function GridStackDDI() {\n    _classCallCheck(this, GridStackDDI);\n  }\n\n  _createClass(GridStackDDI, [{\n    key: \"remove\",\n\n    /** removes any drag&drop present (called during destroy) */\n\n    /* eslint-disable-next-line @typescript-eslint/no-unused-vars */\n    value: function remove(el) {\n      return this; // no-op for static grids\n    }\n  }], [{\n    key: \"registerPlugin\",\n\n    /** call this method to register your plugin instead of the default no-op one */\n    value: function registerPlugin(pluginClass) {\n      GridStackDDI.ddi = new pluginClass();\n      return GridStackDDI.ddi;\n    }\n    /** get the current registered plugin to use */\n\n  }, {\n    key: \"get\",\n    value: function get() {\n      return GridStackDDI.ddi || GridStackDDI.registerPlugin(GridStackDDI);\n    }\n  }]);\n\n  return GridStackDDI;\n}();\n\nexports.GridStackDDI = GridStackDDI;\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/gridstack/dist/gridstack-ddi.js?");

/***/ }),

/***/ "./node_modules/gridstack/dist/gridstack-engine.js":
/*!*********************************************************!*\
  !*** ./node_modules/gridstack/dist/gridstack-engine.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\r\n * gridstack-engine.ts 4.2.6\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GridStackEngine = void 0;\n\nvar utils_1 = __webpack_require__(/*! ./utils */ \"./node_modules/gridstack/dist/utils.js\");\n/**\r\n * Defines the GridStack engine that does most no DOM grid manipulation.\r\n * See GridStack methods and vars for descriptions.\r\n *\r\n * NOTE: values should not be modified directly - call the main GridStack API instead\r\n */\n\n\nvar GridStackEngine = /*#__PURE__*/function () {\n  function GridStackEngine() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, GridStackEngine);\n\n    this.addedNodes = [];\n    this.removedNodes = [];\n    this.column = opts.column || 12;\n    this.onChange = opts.onChange;\n    this._float = opts.float;\n    this.maxRow = opts.maxRow;\n    this.nodes = opts.nodes || [];\n  }\n\n  _createClass(GridStackEngine, [{\n    key: \"batchUpdate\",\n    value: function batchUpdate() {\n      if (this.batchMode) return this;\n      this.batchMode = true;\n      this._prevFloat = this._float;\n      this._float = true; // let things go anywhere for now... commit() will restore and possibly reposition\n\n      this.saveInitial(); // since begin update (which is called multiple times) won't do this\n\n      return this;\n    }\n  }, {\n    key: \"commit\",\n    value: function commit() {\n      if (!this.batchMode) return this;\n      this.batchMode = false;\n      this._float = this._prevFloat;\n      delete this._prevFloat;\n      return this._packNodes()._notify();\n    } // use entire row for hitting area (will use bottom reverse sorted first) if we not actively moving DOWN and didn't already skip\n\n  }, {\n    key: \"_useEntireRowArea\",\n    value: function _useEntireRowArea(node, nn) {\n      return !this.float && !this._hasLocked && (!node._moving || node._skipDown || nn.y <= node.y);\n    }\n    /** @internal fix collision on given 'node', going to given new location 'nn', with optional 'collide' node already found.\r\n     * return true if we moved. */\n\n  }, {\n    key: \"_fixCollisions\",\n    value: function _fixCollisions(node) {\n      var nn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : node;\n      var collide = arguments.length > 2 ? arguments[2] : undefined;\n      var opt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      this._sortNodes(-1); // from last to first, so recursive collision move items in the right order\n\n\n      collide = collide || this.collide(node, nn); // REAL area collide for swap and skip if none...\n\n      if (!collide) return false; // swap check: if we're actively moving in gravity mode, see if we collide with an object the same size\n\n      if (node._moving && !opt.nested && !this.float) {\n        if (this.swap(node, collide)) return true;\n      } // during while() collisions MAKE SURE to check entire row so larger items don't leap frog small ones (push them all down starting last in grid)\n\n\n      var area = nn;\n\n      if (this._useEntireRowArea(node, nn)) {\n        area = {\n          x: 0,\n          w: this.column,\n          y: nn.y,\n          h: nn.h\n        };\n        collide = this.collide(node, area, opt.skip); // force new hit\n      }\n\n      var didMove = false;\n      var newOpt = {\n        nested: true,\n        pack: false\n      };\n\n      while (collide = collide || this.collide(node, area, opt.skip)) {\n        // could collide with more than 1 item... so repeat for each\n        var moved = void 0; // if colliding with a locked item OR moving down with top gravity (and collide could move up) -> skip past the collide,\n        // but remember that skip down so we only do this once (and push others otherwise).\n\n        if (collide.locked || node._moving && !node._skipDown && nn.y > node.y && !this.float && ( // can take space we had, or before where we're going\n        !this.collide(collide, Object.assign(Object.assign({}, collide), {\n          y: node.y\n        }), node) || !this.collide(collide, Object.assign(Object.assign({}, collide), {\n          y: nn.y - collide.h\n        }), node))) {\n          node._skipDown = node._skipDown || nn.y > node.y;\n          moved = this.moveNode(node, Object.assign(Object.assign(Object.assign({}, nn), {\n            y: collide.y + collide.h\n          }), newOpt));\n\n          if (collide.locked && moved) {\n            utils_1.Utils.copyPos(nn, node); // moving after lock become our new desired location\n          } else if (!collide.locked && moved && opt.pack) {\n            // we moved after and will pack: do it now and keep the original drop location, but past the old collide to see what else we might push way\n            this._packNodes();\n\n            nn.y = collide.y + collide.h;\n            utils_1.Utils.copyPos(node, nn);\n          }\n\n          didMove = didMove || moved;\n        } else {\n          // move collide down *after* where we will be, ignoring where we are now (don't collide with us)\n          moved = this.moveNode(collide, Object.assign(Object.assign(Object.assign({}, collide), {\n            y: nn.y + nn.h,\n            skip: node\n          }), newOpt));\n        }\n\n        if (!moved) {\n          return didMove;\n        } // break inf loop if we couldn't move after all (ex: maxRow, fixed)\n\n\n        collide = undefined;\n      }\n\n      return didMove;\n    }\n    /** return the nodes that intercept the given node. Optionally a different area can be used, as well as a second node to skip */\n\n  }, {\n    key: \"collide\",\n    value: function collide(skip) {\n      var area = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : skip;\n      var skip2 = arguments.length > 2 ? arguments[2] : undefined;\n      return this.nodes.find(function (n) {\n        return n !== skip && n !== skip2 && utils_1.Utils.isIntercepted(n, area);\n      });\n    }\n  }, {\n    key: \"collideAll\",\n    value: function collideAll(skip) {\n      var area = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : skip;\n      var skip2 = arguments.length > 2 ? arguments[2] : undefined;\n      return this.nodes.filter(function (n) {\n        return n !== skip && n !== skip2 && utils_1.Utils.isIntercepted(n, area);\n      });\n    }\n    /** does a pixel coverage collision, returning the node that has the most coverage that is >50% mid line */\n\n  }, {\n    key: \"collideCoverage\",\n    value: function collideCoverage(node, o, collides) {\n      if (!o.rect || !node._rect) return;\n      var r0 = node._rect; // where started\n\n      var r = Object.assign({}, o.rect); // where we are\n      // update dragged rect to show where it's coming from (above or below, etc...)\n\n      if (r.y > r0.y) {\n        r.h += r.y - r0.y;\n        r.y = r0.y;\n      } else {\n        r.h += r0.y - r.y;\n      }\n\n      if (r.x > r0.x) {\n        r.w += r.x - r0.x;\n        r.x = r0.x;\n      } else {\n        r.w += r0.x - r.x;\n      }\n\n      var collide;\n      collides.forEach(function (n) {\n        if (n.locked || !n._rect) return;\n        var r2 = n._rect; // overlapping target\n\n        var yOver = Number.MAX_VALUE,\n            xOver = Number.MAX_VALUE,\n            overMax = 0.5; // need >50%\n        // depending on which side we started from, compute the overlap % of coverage\n        // (ex: from above/below we only compute the max horizontal line coverage)\n\n        if (r0.y < r2.y) {\n          // from above\n          yOver = (r.y + r.h - r2.y) / r2.h;\n        } else if (r0.y + r0.h > r2.y + r2.h) {\n          // from below\n          yOver = (r2.y + r2.h - r.y) / r2.h;\n        }\n\n        if (r0.x < r2.x) {\n          // from the left\n          xOver = (r.x + r.w - r2.x) / r2.w;\n        } else if (r0.x + r0.w > r2.x + r2.w) {\n          // from the right\n          xOver = (r2.x + r2.w - r.x) / r2.w;\n        }\n\n        var over = Math.min(xOver, yOver);\n\n        if (over > overMax) {\n          overMax = over;\n          collide = n;\n        }\n      });\n      return collide;\n    }\n    /** called to cache the nodes pixel rectangles used for collision detection during drag */\n\n  }, {\n    key: \"cacheRects\",\n    value: function cacheRects(w, h, top, right, bottom, left) {\n      this.nodes.forEach(function (n) {\n        return n._rect = {\n          y: n.y * h + top,\n          x: n.x * w + left,\n          w: n.w * w - left - right,\n          h: n.h * h - top - bottom\n        };\n      });\n      return this;\n    }\n    /** called to possibly swap between 2 nodes (same size or column, not locked, touching), returning true if successful */\n\n  }, {\n    key: \"swap\",\n    value: function swap(a, b) {\n      if (!b || b.locked || !a || a.locked) return false;\n\n      function _doSwap() {\n        var x = b.x,\n            y = b.y;\n        b.x = a.x;\n        b.y = a.y; // b -> a position\n\n        if (a.h != b.h) {\n          a.x = x;\n          a.y = b.y + b.h; // a -> goes after b\n        } else {\n          a.x = x;\n          a.y = y; // a -> old b position\n        }\n\n        a._dirty = b._dirty = true;\n        return true;\n      }\n\n      var touching; // remember if we called it (vs undefined)\n      // same size and same row or column, and touching\n\n      if (a.w === b.w && a.h === b.h && (a.x === b.x || a.y === b.y) && (touching = utils_1.Utils.isTouching(a, b))) return _doSwap();\n      if (touching === false) return; // ran test and fail, bail out\n      // check for taking same columns (but different height) and touching\n\n      if (a.w === b.w && a.x === b.x && (touching || utils_1.Utils.isTouching(a, b))) {\n        if (b.y < a.y) {\n          var t = a;\n          a = b;\n          b = t;\n        } // swap a <-> b vars so a is first\n\n\n        return _doSwap();\n      }\n      /* different X will be weird (expect vertical swap) and different height overlap, so too complex. user regular layout instead\r\n      // else check if swapping would not collide with anything else (requiring a re-layout)\r\n      if (!this.collide(a, {x: a.x, y: a.y, w: b.w, h: b.h}, b) &&\r\n          !this.collide(a, {x: b.x, y: b.y, w: a.w, h: a.h}, b))\r\n        return _doSwap(); */\n\n\n      return false;\n    }\n  }, {\n    key: \"isAreaEmpty\",\n    value: function isAreaEmpty(x, y, w, h) {\n      var nn = {\n        x: x || 0,\n        y: y || 0,\n        w: w || 1,\n        h: h || 1\n      };\n      return !this.collide(nn);\n    }\n    /** re-layout grid items to reclaim any empty space */\n\n  }, {\n    key: \"compact\",\n    value: function compact() {\n      var _this = this;\n\n      if (this.nodes.length === 0) return this;\n\n      this.batchUpdate()._sortNodes();\n\n      var copyNodes = this.nodes;\n      this.nodes = []; // pretend we have no nodes to conflict layout to start with...\n\n      copyNodes.forEach(function (node) {\n        if (!node.locked) {\n          node.autoPosition = true;\n        }\n\n        _this.addNode(node, false); // 'false' for add event trigger\n\n\n        node._dirty = true; // will force attr update\n      });\n      return this.commit();\n    }\n    /** enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html) */\n\n  }, {\n    key: \"_sortNodes\",\n\n    /** @internal */\n    value: function _sortNodes(dir) {\n      this.nodes = utils_1.Utils.sort(this.nodes, dir, this.column);\n      return this;\n    }\n    /** @internal called to top gravity pack the items back OR revert back to original Y positions when floating */\n\n  }, {\n    key: \"_packNodes\",\n    value: function _packNodes() {\n      var _this2 = this;\n\n      this._sortNodes(); // first to last\n\n\n      if (this.float) {\n        // restore original Y pos\n        this.nodes.forEach(function (n) {\n          if (n._updating || n._orig === undefined || n.y === n._orig.y) return;\n          var newY = n.y;\n\n          while (newY > n._orig.y) {\n            --newY;\n\n            var collide = _this2.collide(n, {\n              x: n.x,\n              y: newY,\n              w: n.w,\n              h: n.h\n            });\n\n            if (!collide) {\n              n._dirty = true;\n              n.y = newY;\n            }\n          }\n        });\n      } else {\n        // top gravity pack\n        this.nodes.forEach(function (n, i) {\n          if (n.locked) return;\n\n          while (n.y > 0) {\n            var newY = i === 0 ? 0 : n.y - 1;\n            var canBeMoved = i === 0 || !_this2.collide(n, {\n              x: n.x,\n              y: newY,\n              w: n.w,\n              h: n.h\n            });\n            if (!canBeMoved) break; // Note: must be dirty (from last position) for GridStack::OnChange CB to update positions\n            // and move items back. The user 'change' CB should detect changes from the original\n            // starting position instead.\n\n            n._dirty = n.y !== newY;\n            n.y = newY;\n          }\n        });\n      }\n\n      return this;\n    }\n    /**\r\n     * given a random node, makes sure it's coordinates/values are valid in the current grid\r\n     * @param node to adjust\r\n     * @param resizing if out of bound, resize down or move into the grid to fit ?\r\n     */\n\n  }, {\n    key: \"prepareNode\",\n    value: function prepareNode(node, resizing) {\n      node = node || {};\n      node._id = node._id || GridStackEngine._idSeq++; // if we're missing position, have the grid position us automatically (before we set them to 0,0)\n\n      if (node.x === undefined || node.y === undefined || node.x === null || node.y === null) {\n        node.autoPosition = true;\n      } // assign defaults for missing required fields\n\n\n      var defaults = {\n        x: 0,\n        y: 0,\n        w: 1,\n        h: 1\n      };\n      utils_1.Utils.defaults(node, defaults);\n\n      if (!node.autoPosition) {\n        delete node.autoPosition;\n      }\n\n      if (!node.noResize) {\n        delete node.noResize;\n      }\n\n      if (!node.noMove) {\n        delete node.noMove;\n      } // check for NaN (in case messed up strings were passed. can't do parseInt() || defaults.x above as 0 is valid #)\n\n\n      if (typeof node.x == 'string') {\n        node.x = Number(node.x);\n      }\n\n      if (typeof node.y == 'string') {\n        node.y = Number(node.y);\n      }\n\n      if (typeof node.w == 'string') {\n        node.w = Number(node.w);\n      }\n\n      if (typeof node.h == 'string') {\n        node.h = Number(node.h);\n      }\n\n      if (isNaN(node.x)) {\n        node.x = defaults.x;\n        node.autoPosition = true;\n      }\n\n      if (isNaN(node.y)) {\n        node.y = defaults.y;\n        node.autoPosition = true;\n      }\n\n      if (isNaN(node.w)) {\n        node.w = defaults.w;\n      }\n\n      if (isNaN(node.h)) {\n        node.h = defaults.h;\n      }\n\n      return this.nodeBoundFix(node, resizing);\n    }\n    /** part2 of preparing a node to fit inside our grid - checks  for x,y from grid dimensions */\n\n  }, {\n    key: \"nodeBoundFix\",\n    value: function nodeBoundFix(node, resizing) {\n      if (node.maxW) {\n        node.w = Math.min(node.w, node.maxW);\n      }\n\n      if (node.maxH) {\n        node.h = Math.min(node.h, node.maxH);\n      }\n\n      if (node.minW) {\n        node.w = Math.max(node.w, node.minW);\n      }\n\n      if (node.minH) {\n        node.h = Math.max(node.h, node.minH);\n      }\n\n      if (node.w > this.column) {\n        // if user loaded a larger than allowed widget for current # of columns,\n        // remember it's full width so we can restore back (1 -> 12 column) #1655\n        if (this.column < 12) {\n          node.w = Math.min(12, node.w);\n          this.cacheOneLayout(node, 12);\n        }\n\n        node.w = this.column;\n      } else if (node.w < 1) {\n        node.w = 1;\n      }\n\n      if (this.maxRow && node.h > this.maxRow) {\n        node.h = this.maxRow;\n      } else if (node.h < 1) {\n        node.h = 1;\n      }\n\n      if (node.x < 0) {\n        node.x = 0;\n      }\n\n      if (node.y < 0) {\n        node.y = 0;\n      }\n\n      if (node.x + node.w > this.column) {\n        if (resizing) {\n          node.w = this.column - node.x;\n        } else {\n          node.x = this.column - node.w;\n        }\n      }\n\n      if (this.maxRow && node.y + node.h > this.maxRow) {\n        if (resizing) {\n          node.h = this.maxRow - node.y;\n        } else {\n          node.y = this.maxRow - node.h;\n        }\n      }\n\n      return node;\n    }\n  }, {\n    key: \"getDirtyNodes\",\n    value: function getDirtyNodes(verify) {\n      // compare original x,y,w,h instead as _dirty can be a temporary state\n      if (verify) {\n        return this.nodes.filter(function (n) {\n          return n._dirty && !utils_1.Utils.samePos(n, n._orig);\n        });\n      }\n\n      return this.nodes.filter(function (n) {\n        return n._dirty;\n      });\n    }\n    /** @internal call this to call onChange CB with dirty nodes */\n\n  }, {\n    key: \"_notify\",\n    value: function _notify(nodes) {\n      var removeDOM = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      if (this.batchMode) return this;\n      nodes = nodes === undefined ? [] : Array.isArray(nodes) ? nodes : [nodes];\n      var dirtyNodes = nodes.concat(this.getDirtyNodes());\n      this.onChange && this.onChange(dirtyNodes, removeDOM);\n      return this;\n    }\n    /** @internal remove dirty and last tried info */\n\n  }, {\n    key: \"cleanNodes\",\n    value: function cleanNodes() {\n      if (this.batchMode) return this;\n      this.nodes.forEach(function (n) {\n        delete n._dirty;\n        delete n._lastTried;\n      });\n      return this;\n    }\n    /** @internal called to save initial position/size to track real dirty state.\r\n     * Note: should be called right after we call change event (so next API is can detect changes)\r\n     * as well as right before we start move/resize/enter (so we can restore items to prev values) */\n\n  }, {\n    key: \"saveInitial\",\n    value: function saveInitial() {\n      this.nodes.forEach(function (n) {\n        n._orig = utils_1.Utils.copyPos({}, n);\n        delete n._dirty;\n      });\n      this._hasLocked = this.nodes.some(function (n) {\n        return n.locked;\n      });\n      return this;\n    }\n    /** @internal restore all the nodes back to initial values (called when we leave) */\n\n  }, {\n    key: \"restoreInitial\",\n    value: function restoreInitial() {\n      this.nodes.forEach(function (n) {\n        if (utils_1.Utils.samePos(n, n._orig)) return;\n        utils_1.Utils.copyPos(n, n._orig);\n        n._dirty = true;\n      });\n\n      this._notify();\n\n      return this;\n    }\n    /** call to add the given node to our list, fixing collision and re-packing */\n\n  }, {\n    key: \"addNode\",\n    value: function addNode(node) {\n      var _this3 = this;\n\n      var triggerAddEvent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var dup;\n      if (dup = this.nodes.find(function (n) {\n        return n._id === node._id;\n      })) return dup; // prevent inserting twice! return it instead.\n\n      node = this.prepareNode(node);\n      delete node._temporaryRemoved;\n      delete node._removeDOM;\n\n      if (node.autoPosition) {\n        this._sortNodes();\n\n        var _loop = function _loop(i) {\n          var x = i % _this3.column;\n          var y = Math.floor(i / _this3.column);\n\n          if (x + node.w > _this3.column) {\n            return \"continue\";\n          }\n\n          var box = {\n            x: x,\n            y: y,\n            w: node.w,\n            h: node.h\n          };\n\n          if (!_this3.nodes.find(function (n) {\n            return utils_1.Utils.isIntercepted(box, n);\n          })) {\n            node.x = x;\n            node.y = y;\n            delete node.autoPosition; // found our slot\n\n            return \"break\";\n          }\n        };\n\n        for (var i = 0;; ++i) {\n          var _ret = _loop(i);\n\n          if (_ret === \"continue\") continue;\n          if (_ret === \"break\") break;\n        }\n      }\n\n      this.nodes.push(node);\n      triggerAddEvent && this.addedNodes.push(node);\n\n      this._fixCollisions(node);\n\n      this._packNodes()._notify();\n\n      return node;\n    }\n  }, {\n    key: \"removeNode\",\n    value: function removeNode(node) {\n      var removeDOM = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var triggerEvent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      if (!this.nodes.find(function (n) {\n        return n === node;\n      })) {\n        // TEST console.log(`Error: GridStackEngine.removeNode() node._id=${node._id} not found!`)\n        return this;\n      }\n\n      if (triggerEvent) {\n        // we wait until final drop to manually track removed items (rather than during drag)\n        this.removedNodes.push(node);\n      }\n\n      if (removeDOM) node._removeDOM = true; // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n      // don't use 'faster' .splice(findIndex(),1) in case node isn't in our list, or in multiple times.\n\n      this.nodes = this.nodes.filter(function (n) {\n        return n !== node;\n      });\n      return this._packNodes()._notify(node);\n    }\n  }, {\n    key: \"removeAll\",\n    value: function removeAll() {\n      var removeDOM = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      delete this._layouts;\n      if (this.nodes.length === 0) return this;\n      removeDOM && this.nodes.forEach(function (n) {\n        return n._removeDOM = true;\n      }); // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n\n      this.removedNodes = this.nodes;\n      this.nodes = [];\n      return this._notify(this.removedNodes);\n    }\n    /** checks if item can be moved (layout constrain) vs moveNode(), returning true if was able to move.\r\n     * In more complicated cases (maxRow) it will attempt at moving the item and fixing\r\n     * others in a clone first, then apply those changes if still within specs. */\n\n  }, {\n    key: \"moveNodeCheck\",\n    value: function moveNodeCheck(node, o) {\n      var _this4 = this;\n\n      // if (node.locked) return false;\n      if (!this.changedPosConstrain(node, o)) return false;\n      o.pack = true; // simpler case: move item directly...\n\n      if (!this.maxRow\n      /* && !this._hasLocked*/\n      ) {\n          return this.moveNode(node, o);\n        } // complex case: create a clone with NO maxRow (will check for out of bounds at the end)\n\n\n      var clonedNode;\n      var clone = new GridStackEngine({\n        column: this.column,\n        float: this.float,\n        nodes: this.nodes.map(function (n) {\n          if (n === node) {\n            clonedNode = Object.assign({}, n);\n            return clonedNode;\n          }\n\n          return Object.assign({}, n);\n        })\n      });\n      if (!clonedNode) return false;\n      var canMove = clone.moveNode(clonedNode, o); // if maxRow make sure we are still valid size\n\n      if (this.maxRow && canMove) {\n        canMove = clone.getRow() <= this.maxRow; // turns out we can't grow, then see if we can swap instead (ex: full grid)\n\n        if (!canMove) {\n          var collide = this.collide(node, o);\n\n          if (collide && this.swap(node, collide)) {\n            this._notify();\n\n            return true;\n          }\n        }\n      }\n\n      if (!canMove) return false; // if clone was able to move, copy those mods over to us now instead of caller trying to do this all over!\n      // Note: we can't use the list directly as elements and other parts point to actual node, so copy content\n\n      clone.nodes.filter(function (n) {\n        return n._dirty;\n      }).forEach(function (c) {\n        var n = _this4.nodes.find(function (a) {\n          return a._id === c._id;\n        });\n\n        if (!n) return;\n        utils_1.Utils.copyPos(n, c);\n        n._dirty = true;\n      });\n\n      this._notify();\n\n      return true;\n    }\n    /** return true if can fit in grid height constrain only (always true if no maxRow) */\n\n  }, {\n    key: \"willItFit\",\n    value: function willItFit(node) {\n      delete node._willFitPos;\n      if (!this.maxRow) return true; // create a clone with NO maxRow and check if still within size\n\n      var clone = new GridStackEngine({\n        column: this.column,\n        float: this.float,\n        nodes: this.nodes.map(function (n) {\n          return Object.assign({}, n);\n        })\n      });\n      var n = Object.assign({}, node); // clone node so we don't mod any settings on it but have full autoPosition and min/max as well! #1687\n\n      this.cleanupNode(n);\n      delete n.el;\n      delete n._id;\n      delete n.content;\n      delete n.grid;\n      clone.addNode(n);\n\n      if (clone.getRow() <= this.maxRow) {\n        node._willFitPos = utils_1.Utils.copyPos({}, n);\n        return true;\n      }\n\n      return false;\n    }\n    /** true if x,y or w,h are different after clamping to min/max */\n\n  }, {\n    key: \"changedPosConstrain\",\n    value: function changedPosConstrain(node, p) {\n      // make sure w,h are set\n      p.w = p.w || node.w;\n      p.h = p.h || node.h;\n      if (node.x !== p.x || node.y !== p.y) return true; // check constrained w,h\n\n      if (node.maxW) {\n        p.w = Math.min(p.w, node.maxW);\n      }\n\n      if (node.maxH) {\n        p.h = Math.min(p.h, node.maxH);\n      }\n\n      if (node.minW) {\n        p.w = Math.max(p.w, node.minW);\n      }\n\n      if (node.minH) {\n        p.h = Math.max(p.h, node.minH);\n      }\n\n      return node.w !== p.w || node.h !== p.h;\n    }\n    /** return true if the passed in node was actually moved (checks for no-op and locked) */\n\n  }, {\n    key: \"moveNode\",\n    value: function moveNode(node, o) {\n      if (!node ||\n      /*node.locked ||*/\n      !o) return false;\n      if (o.pack === undefined) o.pack = true; // constrain the passed in values and check if we're still changing our node\n\n      if (typeof o.x !== 'number') {\n        o.x = node.x;\n      }\n\n      if (typeof o.y !== 'number') {\n        o.y = node.y;\n      }\n\n      if (typeof o.w !== 'number') {\n        o.w = node.w;\n      }\n\n      if (typeof o.h !== 'number') {\n        o.h = node.h;\n      }\n\n      var resizing = node.w !== o.w || node.h !== o.h;\n      var nn = utils_1.Utils.copyPos({}, node, true); // get min/max out first, then opt positions next\n\n      utils_1.Utils.copyPos(nn, o);\n      nn = this.nodeBoundFix(nn, resizing);\n      utils_1.Utils.copyPos(o, nn);\n      if (utils_1.Utils.samePos(node, o)) return false;\n      var prevPos = utils_1.Utils.copyPos({}, node); // during while() collisions make sure to check entire row so larger items don't leap frog small ones (push them all down)\n\n      var area = nn; // if (this._useEntireRowArea(node, nn)) {\n      //   area = {x: 0, w: this.column, y: nn.y, h: nn.h};\n      // }\n      // check if we will need to fix collision at our new location\n\n      var collides = this.collideAll(node, area, o.skip);\n      var needToMove = true;\n\n      if (collides.length) {\n        // now check to make sure we actually collided over 50% surface area while dragging\n        var collide = node._moving && !o.nested ? this.collideCoverage(node, o, collides) : collides[0];\n\n        if (collide) {\n          needToMove = !this._fixCollisions(node, nn, collide, o); // check if already moved...\n        } else {\n          needToMove = false; // we didn't cover >50% for a move, skip...\n        }\n      } // now move (to the original ask vs the collision version which might differ) and repack things\n\n\n      if (needToMove) {\n        node._dirty = true;\n        utils_1.Utils.copyPos(node, nn);\n      }\n\n      if (o.pack) {\n        this._packNodes()._notify();\n      }\n\n      return !utils_1.Utils.samePos(node, prevPos); // pack might have moved things back\n    }\n  }, {\n    key: \"getRow\",\n    value: function getRow() {\n      return this.nodes.reduce(function (row, n) {\n        return Math.max(row, n.y + n.h);\n      }, 0);\n    }\n  }, {\n    key: \"beginUpdate\",\n    value: function beginUpdate(node) {\n      if (!node._updating) {\n        node._updating = true;\n        delete node._skipDown;\n        if (!this.batchMode) this.saveInitial();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"endUpdate\",\n    value: function endUpdate() {\n      var n = this.nodes.find(function (n) {\n        return n._updating;\n      });\n\n      if (n) {\n        delete n._updating;\n        delete n._skipDown;\n      }\n\n      return this;\n    }\n    /** saves a copy of the current layout returning a list of widgets for serialization */\n\n  }, {\n    key: \"save\",\n    value: function save() {\n      var saveElement = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var list = [];\n\n      this._sortNodes();\n\n      this.nodes.forEach(function (n) {\n        var w = {};\n\n        for (var key in n) {\n          if (key[0] !== '_' && n[key] !== null && n[key] !== undefined) w[key] = n[key];\n        } // delete other internals\n\n\n        delete w.grid;\n        if (!saveElement) delete w.el; // delete default values (will be re-created on read)\n\n        if (!w.autoPosition) delete w.autoPosition;\n        if (!w.noResize) delete w.noResize;\n        if (!w.noMove) delete w.noMove;\n        if (!w.locked) delete w.locked;\n        list.push(w);\n      });\n      return list;\n    }\n    /** @internal called whenever a node is added or moved - updates the cached layouts */\n\n  }, {\n    key: \"layoutsNodesChange\",\n    value: function layoutsNodesChange(nodes) {\n      var _this5 = this;\n\n      if (!this._layouts || this._ignoreLayoutsNodeChange) return this; // remove smaller layouts - we will re-generate those on the fly... larger ones need to update\n\n      this._layouts.forEach(function (layout, column) {\n        if (!layout || column === _this5.column) return _this5;\n\n        if (column < _this5.column) {\n          _this5._layouts[column] = undefined;\n        } else {\n          // we save the original x,y,w (h isn't cached) to see what actually changed to propagate better.\n          // Note: we don't need to check against out of bound scaling/moving as that will be done when using those cache values.\n          nodes.forEach(function (node) {\n            if (!node._orig) return; // didn't change (newly added ?)\n\n            var n = layout.find(function (l) {\n              return l._id === node._id;\n            });\n            if (!n) return; // no cache for new nodes. Will use those values.\n\n            var ratio = column / _this5.column; // Y changed, push down same amount\n            // TODO: detect doing item 'swaps' will help instead of move (especially in 1 column mode)\n\n            if (node.y !== node._orig.y) {\n              n.y += node.y - node._orig.y;\n            } // X changed, scale from new position\n\n\n            if (node.x !== node._orig.x) {\n              n.x = Math.round(node.x * ratio);\n            } // width changed, scale from new width\n\n\n            if (node.w !== node._orig.w) {\n              n.w = Math.round(node.w * ratio);\n            } // ...height always carries over from cache\n\n          });\n        }\n      });\n\n      return this;\n    }\n    /**\r\n     * @internal Called to scale the widget width & position up/down based on the column change.\r\n     * Note we store previous layouts (especially original ones) to make it possible to go\r\n     * from say 12 -> 1 -> 12 and get back to where we were.\r\n     *\r\n     * @param oldColumn previous number of columns\r\n     * @param column  new column number\r\n     * @param nodes different sorted list (ex: DOM order) instead of current list\r\n     * @param layout specify the type of re-layout that will happen (position, size, etc...).\r\n     * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\r\n     */\n\n  }, {\n    key: \"updateNodeWidths\",\n    value: function updateNodeWidths(oldColumn, column, nodes) {\n      var _this6 = this;\n\n      var layout = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'moveScale';\n      if (!this.nodes.length || oldColumn === column) return this; // cache the current layout in case they want to go back (like 12 -> 1 -> 12) as it requires original data\n\n      this.cacheLayout(this.nodes, oldColumn); // if we're going to 1 column and using DOM order rather than default sorting, then generate that layout\n\n      if (column === 1 && nodes && nodes.length) {\n        var top = 0;\n        nodes.forEach(function (n) {\n          n.x = 0;\n          n.w = 1;\n          n.y = Math.max(n.y, top);\n          top = n.y + n.h;\n        });\n      } else {\n        nodes = utils_1.Utils.sort(this.nodes, -1, oldColumn); // current column reverse sorting so we can insert last to front (limit collision)\n      } // see if we have cached previous layout.\n\n\n      var cacheNodes = this._layouts[column] || []; // if not AND we are going up in size start with the largest layout as down-scaling is more accurate\n\n      var lastIndex = this._layouts.length - 1;\n\n      if (cacheNodes.length === 0 && column > oldColumn && column < lastIndex) {\n        cacheNodes = this._layouts[lastIndex] || [];\n\n        if (cacheNodes.length) {\n          // pretend we came from that larger column by assigning those values as starting point\n          oldColumn = lastIndex;\n          cacheNodes.forEach(function (cacheNode) {\n            var j = nodes.findIndex(function (n) {\n              return n._id === cacheNode._id;\n            });\n\n            if (j !== -1) {\n              // still current, use cache info positions\n              nodes[j].x = cacheNode.x;\n              nodes[j].y = cacheNode.y;\n              nodes[j].w = cacheNode.w;\n            }\n          });\n          cacheNodes = []; // we still don't have new column cached data... will generate from larger one.\n        }\n      } // if we found cache re-use those nodes that are still current\n\n\n      var newNodes = [];\n      cacheNodes.forEach(function (cacheNode) {\n        var j = nodes.findIndex(function (n) {\n          return n._id === cacheNode._id;\n        });\n\n        if (j !== -1) {\n          // still current, use cache info positions\n          nodes[j].x = cacheNode.x;\n          nodes[j].y = cacheNode.y;\n          nodes[j].w = cacheNode.w;\n          newNodes.push(nodes[j]);\n          nodes.splice(j, 1);\n        }\n      }); // ...and add any extra non-cached ones\n\n      if (nodes.length) {\n        if (typeof layout === 'function') {\n          layout(column, oldColumn, newNodes, nodes);\n        } else {\n          var ratio = column / oldColumn;\n          var move = layout === 'move' || layout === 'moveScale';\n          var scale = layout === 'scale' || layout === 'moveScale';\n          nodes.forEach(function (node) {\n            node.x = column === 1 ? 0 : move ? Math.round(node.x * ratio) : Math.min(node.x, column - 1);\n            node.w = column === 1 || oldColumn === 1 ? 1 : scale ? Math.round(node.w * ratio) || 1 : Math.min(node.w, column);\n            newNodes.push(node);\n          });\n          nodes = [];\n        }\n      } // finally re-layout them in reverse order (to get correct placement)\n\n\n      newNodes = utils_1.Utils.sort(newNodes, -1, column);\n      this._ignoreLayoutsNodeChange = true;\n      this.batchUpdate();\n      this.nodes = []; // pretend we have no nodes to start with (we use same structures) to simplify layout\n\n      newNodes.forEach(function (node) {\n        _this6.addNode(node, false); // 'false' for add event trigger\n\n\n        node._dirty = true; // force attr update\n      }, this);\n      this.commit();\n      delete this._ignoreLayoutsNodeChange;\n      return this;\n    }\n    /**\r\n     * call to cache the given layout internally to the given location so we can restore back when column changes size\r\n     * @param nodes list of nodes\r\n     * @param column corresponding column index to save it under\r\n     * @param clear if true, will force other caches to be removed (default false)\r\n     */\n\n  }, {\n    key: \"cacheLayout\",\n    value: function cacheLayout(nodes, column) {\n      var clear = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var copy = [];\n      nodes.forEach(function (n, i) {\n        n._id = n._id || GridStackEngine._idSeq++; // make sure we have an id in case this is new layout, else re-use id already set\n\n        copy[i] = {\n          x: n.x,\n          y: n.y,\n          w: n.w,\n          _id: n._id\n        }; // only thing we change is x,y,w and id to find it back\n      });\n      this._layouts = clear ? [] : this._layouts || []; // use array to find larger quick\n\n      this._layouts[column] = copy;\n      return this;\n    }\n    /**\r\n     * call to cache the given node layout internally to the given location so we can restore back when column changes size\r\n     * @param node single node to cache\r\n     * @param column corresponding column index to save it under\r\n     */\n\n  }, {\n    key: \"cacheOneLayout\",\n    value: function cacheOneLayout(n, column) {\n      n._id = n._id || GridStackEngine._idSeq++;\n      var layout = {\n        x: n.x,\n        y: n.y,\n        w: n.w,\n        _id: n._id\n      };\n      this._layouts = this._layouts || [];\n      this._layouts[column] = this._layouts[column] || [];\n\n      var index = this._layouts[column].findIndex(function (l) {\n        return l._id === n._id;\n      });\n\n      index === -1 ? this._layouts[column].push(layout) : this._layouts[column][index] = layout;\n      return this;\n    }\n    /** called to remove all internal values but the _id */\n\n  }, {\n    key: \"cleanupNode\",\n    value: function cleanupNode(node) {\n      for (var prop in node) {\n        if (prop[0] === '_' && prop !== '_id') delete node[prop];\n      }\n\n      return this;\n    }\n  }, {\n    key: \"float\",\n    set: function set(val) {\n      if (this._float === val) return;\n      this._float = val || false;\n\n      if (!val) {\n        this._packNodes()._notify();\n      }\n    }\n    /** float getter method */\n    ,\n    get: function get() {\n      return this._float || false;\n    }\n  }]);\n\n  return GridStackEngine;\n}();\n\nexports.GridStackEngine = GridStackEngine;\n/** @internal unique global internal _id counter NOT starting at 0 */\n\nGridStackEngine._idSeq = 1;\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/gridstack/dist/gridstack-engine.js?");

/***/ }),

/***/ "./node_modules/gridstack/dist/gridstack.js":
/*!**************************************************!*\
  !*** ./node_modules/gridstack/dist/gridstack.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*!\r\n * GridStack 4.2.6\r\n * https://gridstackjs.com/\r\n *\r\n * Copyright (c) 2021 Alain Dumesny\r\n * see root license https://github.com/gridstack/gridstack.js/tree/master/LICENSE\r\n */\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __exportStar = this && this.__exportStar || function (m, exports) {\n  for (var p in m) {\n    if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GridStack = void 0;\n\nvar gridstack_engine_1 = __webpack_require__(/*! ./gridstack-engine */ \"./node_modules/gridstack/dist/gridstack-engine.js\");\n\nvar utils_1 = __webpack_require__(/*! ./utils */ \"./node_modules/gridstack/dist/utils.js\");\n\nvar gridstack_ddi_1 = __webpack_require__(/*! ./gridstack-ddi */ \"./node_modules/gridstack/dist/gridstack-ddi.js\"); // export all dependent file as well to make it easier for users to just import the main file\n\n\n__exportStar(__webpack_require__(/*! ./types */ \"./node_modules/gridstack/dist/types.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./utils */ \"./node_modules/gridstack/dist/utils.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./gridstack-engine */ \"./node_modules/gridstack/dist/gridstack-engine.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./gridstack-ddi */ \"./node_modules/gridstack/dist/gridstack-ddi.js\"), exports); // default values for grid options - used during init and when saving out\n\n\nvar GridDefaults = {\n  column: 12,\n  minRow: 0,\n  maxRow: 0,\n  itemClass: 'grid-stack-item',\n  placeholderClass: 'grid-stack-placeholder',\n  placeholderText: '',\n  handle: '.grid-stack-item-content',\n  handleClass: null,\n  styleInHead: false,\n  cellHeight: 'auto',\n  cellHeightThrottle: 100,\n  margin: 10,\n  auto: true,\n  minWidth: 768,\n  float: false,\n  staticGrid: false,\n  animate: true,\n  alwaysShowResizeHandle: false,\n  resizable: {\n    autoHide: true,\n    handles: 'se'\n  },\n  draggable: {\n    handle: '.grid-stack-item-content',\n    scroll: false,\n    appendTo: 'body'\n  },\n  disableDrag: false,\n  disableResize: false,\n  rtl: 'auto',\n  removable: false,\n  removableOptions: {\n    accept: '.grid-stack-item'\n  },\n  marginUnit: 'px',\n  cellHeightUnit: 'px',\n  disableOneColumnMode: false,\n  oneColumnModeDomSort: false\n};\n/**\r\n * Main gridstack class - you will need to call `GridStack.init()` first to initialize your grid.\r\n * Note: your grid elements MUST have the following classes for the CSS layout to work:\r\n * @example\r\n * <div class=\"grid-stack\">\r\n *   <div class=\"grid-stack-item\">\r\n *     <div class=\"grid-stack-item-content\">Item 1</div>\r\n *   </div>\r\n * </div>\r\n */\n\nvar GridStack = /*#__PURE__*/function () {\n  /**\r\n   * Construct a grid item from the given element and options\r\n   * @param el\r\n   * @param opts\r\n   */\n  function GridStack(el) {\n    var _this = this;\n\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, GridStack);\n\n    /** @internal */\n    this._gsEventHandler = {};\n    /** @internal extra row added when dragging at the bottom of the grid */\n\n    this._extraDragRow = 0;\n    this.el = el; // exposed HTML element to the user\n\n    opts = opts || {}; // handles null/undefined/0\n    // if row property exists, replace minRow and maxRow instead\n\n    if (opts.row) {\n      opts.minRow = opts.maxRow = opts.row;\n      delete opts.row;\n    }\n\n    var rowAttr = utils_1.Utils.toNumber(el.getAttribute('gs-row')); // elements attributes override any passed options (like CSS style) - merge the two together\n\n    var defaults = Object.assign(Object.assign({}, utils_1.Utils.cloneDeep(GridDefaults)), {\n      column: utils_1.Utils.toNumber(el.getAttribute('gs-column')) || 12,\n      minRow: rowAttr ? rowAttr : utils_1.Utils.toNumber(el.getAttribute('gs-min-row')) || 0,\n      maxRow: rowAttr ? rowAttr : utils_1.Utils.toNumber(el.getAttribute('gs-max-row')) || 0,\n      staticGrid: utils_1.Utils.toBool(el.getAttribute('gs-static')) || false,\n      _styleSheetClass: 'grid-stack-instance-' + (Math.random() * 10000).toFixed(0),\n      alwaysShowResizeHandle: opts.alwaysShowResizeHandle || false,\n      resizable: {\n        autoHide: !(opts.alwaysShowResizeHandle || false),\n        handles: 'se'\n      },\n      draggable: {\n        handle: (opts.handleClass ? '.' + opts.handleClass : opts.handle ? opts.handle : '') || '.grid-stack-item-content',\n        scroll: false,\n        appendTo: 'body'\n      },\n      removableOptions: {\n        accept: '.' + (opts.itemClass || 'grid-stack-item')\n      }\n    });\n\n    if (el.getAttribute('gs-animate')) {\n      // default to true, but if set to false use that instead\n      defaults.animate = utils_1.Utils.toBool(el.getAttribute('gs-animate'));\n    }\n\n    this.opts = utils_1.Utils.defaults(opts, defaults);\n    opts = null; // make sure we use this.opts instead\n\n    this.initMargin(); // part of settings defaults...\n    // Now check if we're loading into 1 column mode FIRST so we don't do un-necessary work (like cellHeight = width / 12 then go 1 column)\n\n    if (this.opts.column !== 1 && !this.opts.disableOneColumnMode && this._widthOrContainer() <= this.opts.minWidth) {\n      this._prevColumn = this.opts.column;\n      this.opts.column = 1;\n    }\n\n    if (this.opts.rtl === 'auto') {\n      this.opts.rtl = el.style.direction === 'rtl';\n    }\n\n    if (this.opts.rtl) {\n      this.el.classList.add('grid-stack-rtl');\n    } // check if we're been nested, and if so update our style and keep pointer around (used during save)\n\n\n    var parentGridItemEl = utils_1.Utils.closestByClass(this.el, GridDefaults.itemClass);\n\n    if (parentGridItemEl && parentGridItemEl.gridstackNode) {\n      this.opts._isNested = parentGridItemEl.gridstackNode;\n      this.opts._isNested.subGrid = this;\n      this.el.classList.add('grid-stack-nested');\n    }\n\n    this._isAutoCellHeight = this.opts.cellHeight === 'auto';\n\n    if (this._isAutoCellHeight || this.opts.cellHeight === 'initial') {\n      // make the cell content square initially (will use resize/column event to keep it square)\n      this.cellHeight(undefined, false);\n    } else {\n      this.cellHeight(this.opts.cellHeight, false);\n    }\n\n    this.el.classList.add(this.opts._styleSheetClass);\n\n    this._setStaticClass();\n\n    this.engine = new gridstack_engine_1.GridStackEngine({\n      column: this.opts.column,\n      float: this.opts.float,\n      maxRow: this.opts.maxRow,\n      onChange: function onChange(cbNodes) {\n        var maxH = 0;\n\n        _this.engine.nodes.forEach(function (n) {\n          maxH = Math.max(maxH, n.y + n.h);\n        });\n\n        cbNodes.forEach(function (n) {\n          var el = n.el;\n\n          if (n._removeDOM) {\n            if (el) el.remove();\n            delete n._removeDOM;\n          } else {\n            _this._writePosAttr(el, n);\n          }\n        });\n\n        _this._updateStyles(false, maxH); // false = don't recreate, just append if need be\n\n      }\n    });\n\n    if (this.opts.auto) {\n      this.batchUpdate(); // prevent in between re-layout #1535 TODO: this only set float=true, need to prevent collision check...\n\n      var elements = [];\n      this.getGridItems().forEach(function (el) {\n        var x = parseInt(el.getAttribute('gs-x'));\n        var y = parseInt(el.getAttribute('gs-y'));\n        elements.push({\n          el: el,\n          // if x,y are missing (autoPosition) add them to end of list - but keep their respective DOM order\n          i: (Number.isNaN(x) ? 1000 : x) + (Number.isNaN(y) ? 1000 : y) * _this.opts.column\n        });\n      });\n      elements.sort(function (a, b) {\n        return a.i - b.i;\n      }).forEach(function (e) {\n        return _this._prepareElement(e.el);\n      });\n      this.commit();\n    }\n\n    this.setAnimation(this.opts.animate);\n\n    this._updateStyles();\n\n    if (this.opts.column != 12) {\n      this.el.classList.add('grid-stack-' + this.opts.column);\n    } // legacy support to appear 'per grid` options when really global.\n\n\n    if (this.opts.dragIn) GridStack.setupDragIn(this.opts.dragIn, this.opts.dragInOptions);\n    delete this.opts.dragIn;\n    delete this.opts.dragInOptions;\n\n    this._setupRemoveDrop();\n\n    this._setupAcceptWidget();\n\n    this._updateWindowResizeEvent();\n  }\n  /**\r\n   * initializing the HTML element, or selector string, into a grid will return the grid. Calling it again will\r\n   * simply return the existing instance (ignore any passed options). There is also an initAll() version that support\r\n   * multiple grids initialization at once. Or you can use addGrid() to create the entire grid from JSON.\r\n   * @param options grid options (optional)\r\n   * @param elOrString element or CSS selector (first one used) to convert to a grid (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   *\r\n   * Note: the HTMLElement (of type GridHTMLElement) will store a `gridstack: GridStack` value that can be retrieve later\r\n   * let grid = document.querySelector('.grid-stack').gridstack;\r\n   */\n\n\n  _createClass(GridStack, [{\n    key: \"addWidget\",\n\n    /**\r\n     * add a new widget and returns it.\r\n     *\r\n     * Widget will be always placed even if result height is more than actual grid height.\r\n     * You need to use `willItFit()` before calling addWidget for additional check.\r\n     * See also `makeWidget()`.\r\n     *\r\n     * @example\r\n     * let grid = GridStack.init();\r\n     * grid.addWidget({w: 3, content: 'hello'});\r\n     * grid.addWidget('<div class=\"grid-stack-item\"><div class=\"grid-stack-item-content\">hello</div></div>', {w: 3});\r\n     *\r\n     * @param el  GridStackWidget (which can have content string as well), html element, or string definition to add\r\n     * @param options widget position/size options (optional, and ignore if first param is already option) - see GridStackWidget\r\n     */\n    value: function addWidget(els, options) {\n      // support legacy call for now ?\n      if (arguments.length > 2) {\n        console.warn('gridstack.ts: `addWidget(el, x, y, width...)` is deprecated. Use `addWidget({x, y, w, content, ...})`. It will be removed soon'); // eslint-disable-next-line prefer-rest-params\n\n        var a = arguments,\n            i = 1,\n            opt = {\n          x: a[i++],\n          y: a[i++],\n          w: a[i++],\n          h: a[i++],\n          autoPosition: a[i++],\n          minW: a[i++],\n          maxW: a[i++],\n          minH: a[i++],\n          maxH: a[i++],\n          id: a[i++]\n        };\n        return this.addWidget(els, opt);\n      }\n\n      function isGridStackWidget(w) {\n        return w.x !== undefined || w.y !== undefined || w.w !== undefined || w.h !== undefined || w.content !== undefined ? true : false;\n      }\n\n      var el;\n\n      if (typeof els === 'string') {\n        var doc = document.implementation.createHTMLDocument();\n        doc.body.innerHTML = els;\n        el = doc.body.children[0];\n      } else if (arguments.length === 0 || arguments.length === 1 && isGridStackWidget(els)) {\n        var content = els ? els.content || '' : '';\n        options = els;\n\n        var _doc = document.implementation.createHTMLDocument();\n\n        _doc.body.innerHTML = \"<div class=\\\"grid-stack-item \".concat(this.opts.itemClass || '', \"\\\"><div class=\\\"grid-stack-item-content\\\">\").concat(content, \"</div></div>\");\n        el = _doc.body.children[0];\n      } else {\n        el = els;\n      } // Tempting to initialize the passed in opt with default and valid values, but this break knockout demos\n      // as the actual value are filled in when _prepareElement() calls el.getAttribute('gs-xyz) before adding the node.\n      // So make sure we load any DOM attributes that are not specified in passed in options (which override)\n\n\n      var domAttr = this._readAttr(el);\n\n      options = utils_1.Utils.cloneDeep(options) || {}; // make a copy before we modify in case caller re-uses it\n\n      utils_1.Utils.defaults(options, domAttr);\n      var node = this.engine.prepareNode(options);\n\n      this._writeAttr(el, options);\n\n      if (this._insertNotAppend) {\n        this.el.prepend(el);\n      } else {\n        this.el.appendChild(el);\n      } // similar to makeWidget() that doesn't read attr again and worse re-create a new node and loose any _id\n\n\n      this._prepareElement(el, true, options);\n\n      this._updateContainerHeight(); // check if nested grid definition is present\n\n\n      if (node.subGrid && !node.subGrid.el) {\n        // see if there is a sub-grid to create too\n        var _content = node.el.querySelector('.grid-stack-item-content');\n\n        node.subGrid = GridStack.addGrid(_content, node.subGrid);\n      }\n\n      this._triggerAddEvent();\n\n      this._triggerChangeEvent();\n\n      return el;\n    }\n    /**\r\n    /**\r\n     * saves the current layout returning a list of widgets for serialization which might include any nested grids.\r\n     * @param saveContent if true (default) the latest html inside .grid-stack-content will be saved to GridStackWidget.content field, else it will\r\n     * be removed.\r\n     * @param saveGridOpt if true (default false), save the grid options itself, so you can call the new GridStack.addGrid()\r\n     * to recreate everything from scratch. GridStackOptions.children would then contain the widget list instead.\r\n     * @returns list of widgets or full grid option, including .children list of widgets\r\n     */\n\n  }, {\n    key: \"save\",\n    value: function save() {\n      var saveContent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var saveGridOpt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      // return copied nodes we can modify at will...\n      var list = this.engine.save(saveContent); // check for HTML content and nested grids\n\n      list.forEach(function (n) {\n        if (saveContent && n.el && !n.subGrid) {\n          // sub-grid are saved differently, not plain content\n          var sub = n.el.querySelector('.grid-stack-item-content');\n          n.content = sub ? sub.innerHTML : undefined;\n          if (!n.content) delete n.content;\n        } else {\n          if (!saveContent) {\n            delete n.content;\n          } // check for nested grid\n\n\n          if (n.subGrid) {\n            n.subGrid = n.subGrid.save(saveContent, true);\n          }\n        }\n\n        delete n.el;\n      }); // check if save entire grid options (needed for recursive) + children...\n\n      if (saveGridOpt) {\n        var o = utils_1.Utils.cloneDeep(this.opts); // delete default values that will be recreated on launch\n\n        if (o.marginBottom === o.marginTop && o.marginRight === o.marginLeft && o.marginTop === o.marginRight) {\n          o.margin = o.marginTop;\n          delete o.marginTop;\n          delete o.marginRight;\n          delete o.marginBottom;\n          delete o.marginLeft;\n        }\n\n        if (o.rtl === (this.el.style.direction === 'rtl')) {\n          o.rtl = 'auto';\n        }\n\n        if (this._isAutoCellHeight) {\n          o.cellHeight = 'auto';\n        }\n\n        utils_1.Utils.removeInternalAndSame(o, GridDefaults);\n        o.children = list;\n        return o;\n      }\n\n      return list;\n    }\n    /**\r\n     * load the widgets from a list. This will call update() on each (matching by id) or add/remove widgets that are not there.\r\n     *\r\n     * @param layout list of widgets definition to update/create\r\n     * @param addAndRemove boolean (default true) or callback method can be passed to control if and how missing widgets can be added/removed, giving\r\n     * the user control of insertion.\r\n     *\r\n     * @example\r\n     * see http://gridstackjs.com/demo/serialization.html\r\n     **/\n\n  }, {\n    key: \"load\",\n    value: function load(layout) {\n      var _this2 = this;\n\n      var addAndRemove = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var items = GridStack.Utils.sort(_toConsumableArray(layout), -1, this._prevColumn || this.opts.column); // make copy before we mod/sort\n\n      this._insertNotAppend = true; // since create in reverse order...\n      // if we're loading a layout into 1 column (_prevColumn is set only when going to 1) and items don't fit, make sure to save\n      // the original wanted layout so we can scale back up correctly #1471\n\n      if (this._prevColumn && this._prevColumn !== this.opts.column && items.some(function (n) {\n        return n.x + n.w > _this2.opts.column;\n      })) {\n        this._ignoreLayoutsNodeChange = true; // skip layout update\n\n        this.engine.cacheLayout(items, this._prevColumn, true);\n      }\n\n      var removed = [];\n      this.batchUpdate(); // see if any items are missing from new layout and need to be removed first\n\n      if (addAndRemove) {\n        var copyNodes = _toConsumableArray(this.engine.nodes); // don't loop through array you modify\n\n\n        copyNodes.forEach(function (n) {\n          var item = items.find(function (w) {\n            return n.id === w.id;\n          });\n\n          if (!item) {\n            if (typeof addAndRemove === 'function') {\n              addAndRemove(_this2, n, false);\n            } else {\n              removed.push(n); // batch keep track\n\n              _this2.removeWidget(n.el, true, false);\n            }\n          }\n        });\n      } // now add/update the widgets\n\n\n      items.forEach(function (w) {\n        var item = w.id || w.id === 0 ? _this2.engine.nodes.find(function (n) {\n          return n.id === w.id;\n        }) : undefined;\n\n        if (item) {\n          _this2.update(item.el, w);\n\n          if (w.subGrid && w.subGrid.children) {\n            // update any sub grid as well\n            var sub = item.el.querySelector('.grid-stack');\n\n            if (sub && sub.gridstack) {\n              sub.gridstack.load(w.subGrid.children); // TODO: support updating grid options ?\n\n              _this2._insertNotAppend = true; // got reset by above call\n            }\n          }\n        } else if (addAndRemove) {\n          if (typeof addAndRemove === 'function') {\n            w = addAndRemove(_this2, w, true).gridstackNode;\n          } else {\n            w = _this2.addWidget(w).gridstackNode;\n          }\n        }\n      });\n      this.engine.removedNodes = removed;\n      this.commit(); // after commit, clear that flag\n\n      delete this._ignoreLayoutsNodeChange;\n      delete this._insertNotAppend;\n      return this;\n    }\n    /**\r\n     * Initializes batch updates. You will see no changes until `commit()` method is called.\r\n     */\n\n  }, {\n    key: \"batchUpdate\",\n    value: function batchUpdate() {\n      this.engine.batchUpdate();\n      return this;\n    }\n    /**\r\n     * Gets current cell height.\r\n     */\n\n  }, {\n    key: \"getCellHeight\",\n    value: function getCellHeight() {\n      var forcePixel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (this.opts.cellHeight && this.opts.cellHeight !== 'auto' && (!forcePixel || !this.opts.cellHeightUnit || this.opts.cellHeightUnit === 'px')) {\n        return this.opts.cellHeight;\n      } // else do entire grid and # of rows\n      // or get first cell height ?\n      // let el = this.el.querySelector('.' + this.opts.itemClass) as HTMLElement;\n      // let height = Utils.toNumber(el.getAttribute('gs-h'));\n      // return Math.round(el.offsetHeight / height);\n\n\n      return Math.round(this.el.getBoundingClientRect().height) / parseInt(this.el.getAttribute('gs-current-row'));\n    }\n    /**\r\n     * Update current cell height - see `GridStackOptions.cellHeight` for format.\r\n     * This method rebuilds an internal CSS style sheet.\r\n     * Note: You can expect performance issues if call this method too often.\r\n     *\r\n     * @param val the cell height. If not passed (undefined), cells content will be made square (match width minus margin),\r\n     * if pass 0 the CSS will be generated by the application instead.\r\n     * @param update (Optional) if false, styles will not be updated\r\n     *\r\n     * @example\r\n     * grid.cellHeight(100); // same as 100px\r\n     * grid.cellHeight('70px');\r\n     * grid.cellHeight(grid.cellWidth() * 1.2);\r\n     */\n\n  }, {\n    key: \"cellHeight\",\n    value: function cellHeight(val) {\n      var update = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      // if not called internally, check if we're changing mode\n      if (update && val !== undefined) {\n        if (this._isAutoCellHeight !== (val === 'auto')) {\n          this._isAutoCellHeight = val === 'auto';\n\n          this._updateWindowResizeEvent();\n        }\n      }\n\n      if (val === 'initial' || val === 'auto') {\n        val = undefined;\n      } // make item content be square\n\n\n      if (val === undefined) {\n        var marginDiff = -this.opts.marginRight - this.opts.marginLeft + this.opts.marginTop + this.opts.marginBottom;\n        val = this.cellWidth() + marginDiff;\n      }\n\n      var data = utils_1.Utils.parseHeight(val);\n\n      if (this.opts.cellHeightUnit === data.unit && this.opts.cellHeight === data.h) {\n        return this;\n      }\n\n      this.opts.cellHeightUnit = data.unit;\n      this.opts.cellHeight = data.h;\n\n      if (update) {\n        this._updateStyles(true, this.getRow()); // true = force re-create, for that # of rows\n\n      }\n\n      return this;\n    }\n    /** Gets current cell width. */\n\n  }, {\n    key: \"cellWidth\",\n    value: function cellWidth() {\n      return this._widthOrContainer() / this.opts.column;\n    }\n    /** return our expected width (or parent) for 1 column check */\n\n  }, {\n    key: \"_widthOrContainer\",\n    value: function _widthOrContainer() {\n      // use `offsetWidth` or `clientWidth` (no scrollbar) ?\n      // https://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively\n      return this.el.clientWidth || this.el.parentElement.clientWidth || window.innerWidth;\n    }\n    /**\r\n     * Finishes batch updates. Updates DOM nodes. You must call it after batchUpdate.\r\n     */\n\n  }, {\n    key: \"commit\",\n    value: function commit() {\n      this.engine.commit();\n\n      this._triggerRemoveEvent();\n\n      this._triggerAddEvent();\n\n      this._triggerChangeEvent();\n\n      return this;\n    }\n    /** re-layout grid items to reclaim any empty space */\n\n  }, {\n    key: \"compact\",\n    value: function compact() {\n      this.engine.compact();\n\n      this._triggerChangeEvent();\n\n      return this;\n    }\n    /**\r\n     * set the number of columns in the grid. Will update existing widgets to conform to new number of columns,\r\n     * as well as cache the original layout so you can revert back to previous positions without loss.\r\n     * Requires `gridstack-extra.css` or `gridstack-extra.min.css` for [2-11],\r\n     * else you will need to generate correct CSS (see https://github.com/gridstack/gridstack.js#change-grid-columns)\r\n     * @param column - Integer > 0 (default 12).\r\n     * @param layout specify the type of re-layout that will happen (position, size, etc...).\r\n     * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\r\n     */\n\n  }, {\n    key: \"column\",\n    value: function column(_column) {\n      var layout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'moveScale';\n      if (this.opts.column === _column) return this;\n      var oldColumn = this.opts.column; // if we go into 1 column mode (which happens if we're sized less than minW unless disableOneColumnMode is on)\n      // then remember the original columns so we can restore.\n\n      if (_column === 1) {\n        this._prevColumn = oldColumn;\n      } else {\n        delete this._prevColumn;\n      }\n\n      this.el.classList.remove('grid-stack-' + oldColumn);\n      this.el.classList.add('grid-stack-' + _column);\n      this.opts.column = this.engine.column = _column; // update the items now - see if the dom order nodes should be passed instead (else default to current list)\n\n      var domNodes;\n\n      if (_column === 1 && this.opts.oneColumnModeDomSort) {\n        domNodes = [];\n        this.getGridItems().forEach(function (el) {\n          if (el.gridstackNode) {\n            domNodes.push(el.gridstackNode);\n          }\n        });\n\n        if (!domNodes.length) {\n          domNodes = undefined;\n        }\n      }\n\n      this.engine.updateNodeWidths(oldColumn, _column, domNodes, layout);\n      if (this._isAutoCellHeight) this.cellHeight(); // and trigger our event last...\n\n      this._ignoreLayoutsNodeChange = true; // skip layout update\n\n      this._triggerChangeEvent();\n\n      delete this._ignoreLayoutsNodeChange;\n      return this;\n    }\n    /**\r\n     * get the number of columns in the grid (default 12)\r\n     */\n\n  }, {\n    key: \"getColumn\",\n    value: function getColumn() {\n      return this.opts.column;\n    }\n    /** returns an array of grid HTML elements (no placeholder) - used to iterate through our children in DOM order */\n\n  }, {\n    key: \"getGridItems\",\n    value: function getGridItems() {\n      var _this3 = this;\n\n      return Array.from(this.el.children).filter(function (el) {\n        return el.matches('.' + _this3.opts.itemClass) && !el.matches('.' + _this3.opts.placeholderClass);\n      });\n    }\n    /**\r\n     * Destroys a grid instance. DO NOT CALL any methods or access any vars after this as it will free up members.\r\n     * @param removeDOM if `false` grid and items HTML elements will not be removed from the DOM (Optional. Default `true`).\r\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var removeDOM = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      if (!this.el) return; // prevent multiple calls\n\n      this._updateWindowResizeEvent(true);\n\n      this.setStatic(true, false); // permanently removes DD but don't set CSS class (we're going away)\n\n      this.setAnimation(false);\n\n      if (!removeDOM) {\n        this.removeAll(removeDOM);\n        this.el.classList.remove(this.opts._styleSheetClass);\n      } else {\n        this.el.parentNode.removeChild(this.el);\n      }\n\n      this._removeStylesheet();\n\n      this.el.removeAttribute('gs-current-row');\n      delete this.opts._isNested;\n      delete this.opts;\n      delete this._placeholder;\n      delete this.engine;\n      delete this.el.gridstack; // remove circular dependency that would prevent a freeing\n\n      delete this.el;\n      return this;\n    }\n    /**\r\n     * enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html)\r\n     */\n\n  }, {\n    key: \"float\",\n    value: function float(val) {\n      this.engine.float = val;\n\n      this._triggerChangeEvent();\n\n      return this;\n    }\n    /**\r\n     * get the current float mode\r\n     */\n\n  }, {\n    key: \"getFloat\",\n    value: function getFloat() {\n      return this.engine.float;\n    }\n    /**\r\n     * Get the position of the cell under a pixel on screen.\r\n     * @param position the position of the pixel to resolve in\r\n     * absolute coordinates, as an object with top and left properties\r\n     * @param useDocRelative if true, value will be based on document position vs parent position (Optional. Default false).\r\n     * Useful when grid is within `position: relative` element\r\n     *\r\n     * Returns an object with properties `x` and `y` i.e. the column and row in the grid.\r\n     */\n\n  }, {\n    key: \"getCellFromPixel\",\n    value: function getCellFromPixel(position) {\n      var useDocRelative = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var box = this.el.getBoundingClientRect(); // console.log(`getBoundingClientRect left: ${box.left} top: ${box.top} w: ${box.w} h: ${box.h}`)\n\n      var containerPos;\n\n      if (useDocRelative) {\n        containerPos = {\n          top: box.top + document.documentElement.scrollTop,\n          left: box.left\n        }; // console.log(`getCellFromPixel scrollTop: ${document.documentElement.scrollTop}`)\n      } else {\n        containerPos = {\n          top: this.el.offsetTop,\n          left: this.el.offsetLeft\n        }; // console.log(`getCellFromPixel offsetTop: ${containerPos.left} offsetLeft: ${containerPos.top}`)\n      }\n\n      var relativeLeft = position.left - containerPos.left;\n      var relativeTop = position.top - containerPos.top;\n      var columnWidth = box.width / this.opts.column;\n      var rowHeight = box.height / parseInt(this.el.getAttribute('gs-current-row'));\n      return {\n        x: Math.floor(relativeLeft / columnWidth),\n        y: Math.floor(relativeTop / rowHeight)\n      };\n    }\n    /** returns the current number of rows, which will be at least `minRow` if set */\n\n  }, {\n    key: \"getRow\",\n    value: function getRow() {\n      return Math.max(this.engine.getRow(), this.opts.minRow);\n    }\n    /**\r\n     * Checks if specified area is empty.\r\n     * @param x the position x.\r\n     * @param y the position y.\r\n     * @param w the width of to check\r\n     * @param h the height of to check\r\n     */\n\n  }, {\n    key: \"isAreaEmpty\",\n    value: function isAreaEmpty(x, y, w, h) {\n      return this.engine.isAreaEmpty(x, y, w, h);\n    }\n    /**\r\n     * If you add elements to your grid by hand, you have to tell gridstack afterwards to make them widgets.\r\n     * If you want gridstack to add the elements for you, use `addWidget()` instead.\r\n     * Makes the given element a widget and returns it.\r\n     * @param els widget or single selector to convert.\r\n     *\r\n     * @example\r\n     * let grid = GridStack.init();\r\n     * grid.el.appendChild('<div id=\"gsi-1\" gs-w=\"3\"></div>');\r\n     * grid.makeWidget('#gsi-1');\r\n     */\n\n  }, {\n    key: \"makeWidget\",\n    value: function makeWidget(els) {\n      var el = GridStack.getElement(els);\n\n      this._prepareElement(el, true);\n\n      this._updateContainerHeight();\n\n      this._triggerAddEvent();\n\n      this._triggerChangeEvent();\n\n      return el;\n    }\n    /**\r\n     * Event handler that extracts our CustomEvent data out automatically for receiving custom\r\n     * notifications (see doc for supported events)\r\n     * @param name of the event (see possible values) or list of names space separated\r\n     * @param callback function called with event and optional second/third param\r\n     * (see README documentation for each signature).\r\n     *\r\n     * @example\r\n     * grid.on('added', function(e, items) { log('added ', items)} );\r\n     * or\r\n     * grid.on('added removed change', function(e, items) { log(e.type, items)} );\r\n     *\r\n     * Note: in some cases it is the same as calling native handler and parsing the event.\r\n     * grid.el.addEventListener('added', function(event) { log('added ', event.detail)} );\r\n     *\r\n     */\n\n  }, {\n    key: \"on\",\n    value: function on(name, callback) {\n      var _this4 = this;\n\n      // check for array of names being passed instead\n      if (name.indexOf(' ') !== -1) {\n        var names = name.split(' ');\n        names.forEach(function (name) {\n          return _this4.on(name, callback);\n        });\n        return this;\n      }\n\n      if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\n        // native CustomEvent handlers - cash the generic handlers so we can easily remove\n        var noData = name === 'enable' || name === 'disable';\n\n        if (noData) {\n          this._gsEventHandler[name] = function (event) {\n            return callback(event);\n          };\n        } else {\n          this._gsEventHandler[name] = function (event) {\n            return callback(event, event.detail);\n          };\n        }\n\n        this.el.addEventListener(name, this._gsEventHandler[name]);\n      } else if (name === 'drag' || name === 'dragstart' || name === 'dragstop' || name === 'resizestart' || name === 'resize' || name === 'resizestop' || name === 'dropped') {\n        // drag&drop stop events NEED to be call them AFTER we update node attributes so handle them ourself.\n        // do same for start event to make it easier...\n        this._gsEventHandler[name] = callback;\n      } else {\n        console.log('GridStack.on(' + name + ') event not supported, but you can still use $(\".grid-stack\").on(...) while jquery-ui is still used internally.');\n      }\n\n      return this;\n    }\n    /**\r\n     * unsubscribe from the 'on' event below\r\n     * @param name of the event (see possible values)\r\n     */\n\n  }, {\n    key: \"off\",\n    value: function off(name) {\n      var _this5 = this;\n\n      // check for array of names being passed instead\n      if (name.indexOf(' ') !== -1) {\n        var names = name.split(' ');\n        names.forEach(function (name) {\n          return _this5.off(name);\n        });\n        return this;\n      }\n\n      if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\n        // remove native CustomEvent handlers\n        if (this._gsEventHandler[name]) {\n          this.el.removeEventListener(name, this._gsEventHandler[name]);\n        }\n      }\n\n      delete this._gsEventHandler[name];\n      return this;\n    }\n    /**\r\n     * Removes widget from the grid.\r\n     * @param el  widget or selector to modify\r\n     * @param removeDOM if `false` DOM element won't be removed from the tree (Default? true).\r\n     * @param triggerEvent if `false` (quiet mode) element will not be added to removed list and no 'removed' callbacks will be called (Default? true).\r\n     */\n\n  }, {\n    key: \"removeWidget\",\n    value: function removeWidget(els) {\n      var _this6 = this;\n\n      var removeDOM = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var triggerEvent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      GridStack.getElements(els).forEach(function (el) {\n        if (el.parentElement !== _this6.el) return; // not our child!\n\n        var node = el.gridstackNode; // For Meteor support: https://github.com/gridstack/gridstack.js/pull/272\n\n        if (!node) {\n          node = _this6.engine.nodes.find(function (n) {\n            return el === n.el;\n          });\n        }\n\n        if (!node) return; // remove our DOM data (circular link) and drag&drop permanently\n\n        delete el.gridstackNode;\n        gridstack_ddi_1.GridStackDDI.get().remove(el);\n\n        _this6.engine.removeNode(node, removeDOM, triggerEvent);\n\n        if (removeDOM && el.parentElement) {\n          el.remove(); // in batch mode engine.removeNode doesn't call back to remove DOM\n        }\n      });\n\n      if (triggerEvent) {\n        this._triggerRemoveEvent();\n\n        this._triggerChangeEvent();\n      }\n\n      return this;\n    }\n    /**\r\n     * Removes all widgets from the grid.\r\n     * @param removeDOM if `false` DOM elements won't be removed from the tree (Default? `true`).\r\n     */\n\n  }, {\n    key: \"removeAll\",\n    value: function removeAll() {\n      var removeDOM = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      // always remove our DOM data (circular link) before list gets emptied and drag&drop permanently\n      this.engine.nodes.forEach(function (n) {\n        delete n.el.gridstackNode;\n        gridstack_ddi_1.GridStackDDI.get().remove(n.el);\n      });\n      this.engine.removeAll(removeDOM);\n\n      this._triggerRemoveEvent();\n\n      return this;\n    }\n    /**\r\n     * Toggle the grid animation state.  Toggles the `grid-stack-animate` class.\r\n     * @param doAnimate if true the grid will animate.\r\n     */\n\n  }, {\n    key: \"setAnimation\",\n    value: function setAnimation(doAnimate) {\n      if (doAnimate) {\n        this.el.classList.add('grid-stack-animate');\n      } else {\n        this.el.classList.remove('grid-stack-animate');\n      }\n\n      return this;\n    }\n    /**\r\n     * Toggle the grid static state, which permanently removes/add Drag&Drop support, unlike disable()/enable() that just turns it off/on.\r\n     * Also toggle the grid-stack-static class.\r\n     * @param val if true the grid become static.\r\n     */\n\n  }, {\n    key: \"setStatic\",\n    value: function setStatic(val) {\n      var _this7 = this;\n\n      var updateClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      if (this.opts.staticGrid === val) return this;\n      this.opts.staticGrid = val;\n\n      this._setupRemoveDrop();\n\n      this._setupAcceptWidget();\n\n      this.engine.nodes.forEach(function (n) {\n        return _this7._prepareDragDropByNode(n);\n      }); // either delete or init Drag&drop\n\n      if (updateClass) {\n        this._setStaticClass();\n      }\n\n      return this;\n    }\n    /**\r\n     * Updates widget position/size and other info. Note: if you need to call this on all nodes, use load() instead which will update what changed.\r\n     * @param els  widget or selector of objects to modify (note: setting the same x,y for multiple items will be indeterministic and likely unwanted)\r\n     * @param opt new widget options (x,y,w,h, etc..). Only those set will be updated.\r\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(els, opt) {\n      var _this8 = this;\n\n      // support legacy call for now ?\n      if (arguments.length > 2) {\n        console.warn('gridstack.ts: `update(el, x, y, w, h)` is deprecated. Use `update({x, w, content, ...})`. It will be removed soon'); // eslint-disable-next-line prefer-rest-params\n\n        var a = arguments,\n            i = 1;\n        opt = {\n          x: a[i++],\n          y: a[i++],\n          w: a[i++],\n          h: a[i++]\n        };\n        return this.update(els, opt);\n      }\n\n      GridStack.getElements(els).forEach(function (el) {\n        if (!el || !el.gridstackNode) return;\n        var n = el.gridstackNode;\n        var w = utils_1.Utils.cloneDeep(opt); // make a copy we can modify in case they re-use it or multiple items\n\n        delete w.autoPosition; // move/resize widget if anything changed\n\n        var keys = ['x', 'y', 'w', 'h'];\n        var m;\n\n        if (keys.some(function (k) {\n          return w[k] !== undefined && w[k] !== n[k];\n        })) {\n          m = {};\n          keys.forEach(function (k) {\n            m[k] = w[k] !== undefined ? w[k] : n[k];\n            delete w[k];\n          });\n        } // for a move as well IFF there is any min/max fields set\n\n\n        if (!m && (w.minW || w.minH || w.maxW || w.maxH)) {\n          m = {}; // will use node position but validate values\n        } // check for content changing\n\n\n        if (w.content) {\n          var sub = el.querySelector('.grid-stack-item-content');\n\n          if (sub && sub.innerHTML !== w.content) {\n            sub.innerHTML = w.content;\n          }\n\n          delete w.content;\n        } // any remaining fields are assigned, but check for dragging changes, resize constrain\n\n\n        var changed = false;\n        var ddChanged = false;\n\n        for (var key in w) {\n          if (key[0] !== '_' && n[key] !== w[key]) {\n            n[key] = w[key];\n            changed = true;\n            ddChanged = ddChanged || !_this8.opts.staticGrid && (key === 'noResize' || key === 'noMove' || key === 'locked');\n          }\n        } // finally move the widget\n\n\n        if (m) {\n          _this8.engine.cleanNodes().beginUpdate(n).moveNode(n, m);\n\n          _this8._updateContainerHeight();\n\n          _this8._triggerChangeEvent();\n\n          _this8.engine.endUpdate();\n        }\n\n        if (changed) {\n          // move will only update x,y,w,h so update the rest too\n          _this8._writeAttr(el, n);\n        }\n\n        if (ddChanged) {\n          _this8._prepareDragDropByNode(n);\n        }\n      });\n      return this;\n    }\n    /**\r\n     * Updates the margins which will set all 4 sides at once - see `GridStackOptions.margin` for format options (CSS string format of 1,2,4 values or single number).\r\n     * @param value margin value\r\n     */\n\n  }, {\n    key: \"margin\",\n    value: function margin(value) {\n      var isMultiValue = typeof value === 'string' && value.split(' ').length > 1; // check if we can skip re-creating our CSS file... won't check if multi values (too much hassle)\n\n      if (!isMultiValue) {\n        var data = utils_1.Utils.parseHeight(value);\n        if (this.opts.marginUnit === data.unit && this.opts.margin === data.h) return;\n      } // re-use existing margin handling\n\n\n      this.opts.margin = value;\n      this.opts.marginTop = this.opts.marginBottom = this.opts.marginLeft = this.opts.marginRight = undefined;\n      this.initMargin();\n\n      this._updateStyles(true); // true = force re-create\n\n\n      return this;\n    }\n    /** returns current margin number value (undefined if 4 sides don't match) */\n\n  }, {\n    key: \"getMargin\",\n    value: function getMargin() {\n      return this.opts.margin;\n    }\n    /**\r\n     * Returns true if the height of the grid will be less than the vertical\r\n     * constraint. Always returns true if grid doesn't have height constraint.\r\n     * @param node contains x,y,w,h,auto-position options\r\n     *\r\n     * @example\r\n     * if (grid.willItFit(newWidget)) {\r\n     *   grid.addWidget(newWidget);\r\n     * } else {\r\n     *   alert('Not enough free space to place the widget');\r\n     * }\r\n     */\n\n  }, {\n    key: \"willItFit\",\n    value: function willItFit(node) {\n      // support legacy call for now\n      if (arguments.length > 1) {\n        console.warn('gridstack.ts: `willItFit(x,y,w,h,autoPosition)` is deprecated. Use `willItFit({x, y,...})`. It will be removed soon'); // eslint-disable-next-line prefer-rest-params\n\n        var a = arguments,\n            i = 0,\n            w = {\n          x: a[i++],\n          y: a[i++],\n          w: a[i++],\n          h: a[i++],\n          autoPosition: a[i++]\n        };\n        return this.willItFit(w);\n      }\n\n      return this.engine.willItFit(node);\n    }\n    /** @internal */\n\n  }, {\n    key: \"_triggerChangeEvent\",\n    value: function _triggerChangeEvent() {\n      if (this.engine.batchMode) return this;\n      var elements = this.engine.getDirtyNodes(true); // verify they really changed\n\n      if (elements && elements.length) {\n        if (!this._ignoreLayoutsNodeChange) {\n          this.engine.layoutsNodesChange(elements);\n        }\n\n        this._triggerEvent('change', elements);\n      }\n\n      this.engine.saveInitial(); // we called, now reset initial values & dirty flags\n\n      return this;\n    }\n    /** @internal */\n\n  }, {\n    key: \"_triggerAddEvent\",\n    value: function _triggerAddEvent() {\n      if (this.engine.batchMode) return this;\n\n      if (this.engine.addedNodes && this.engine.addedNodes.length > 0) {\n        if (!this._ignoreLayoutsNodeChange) {\n          this.engine.layoutsNodesChange(this.engine.addedNodes);\n        } // prevent added nodes from also triggering 'change' event (which is called next)\n\n\n        this.engine.addedNodes.forEach(function (n) {\n          delete n._dirty;\n        });\n\n        this._triggerEvent('added', this.engine.addedNodes);\n\n        this.engine.addedNodes = [];\n      }\n\n      return this;\n    }\n    /** @internal */\n\n  }, {\n    key: \"_triggerRemoveEvent\",\n    value: function _triggerRemoveEvent() {\n      if (this.engine.batchMode) return this;\n\n      if (this.engine.removedNodes && this.engine.removedNodes.length > 0) {\n        this._triggerEvent('removed', this.engine.removedNodes);\n\n        this.engine.removedNodes = [];\n      }\n\n      return this;\n    }\n    /** @internal */\n\n  }, {\n    key: \"_triggerEvent\",\n    value: function _triggerEvent(name, data) {\n      var event = data ? new CustomEvent(name, {\n        bubbles: false,\n        detail: data\n      }) : new Event(name);\n      this.el.dispatchEvent(event);\n      return this;\n    }\n    /** @internal called to delete the current dynamic style sheet used for our layout */\n\n  }, {\n    key: \"_removeStylesheet\",\n    value: function _removeStylesheet() {\n      if (this._styles) {\n        utils_1.Utils.removeStylesheet(this._styles._id);\n        delete this._styles;\n      }\n\n      return this;\n    }\n    /** @internal updated/create the CSS styles for row based layout and initial margin setting */\n\n  }, {\n    key: \"_updateStyles\",\n    value: function _updateStyles() {\n      var forceUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var maxH = arguments.length > 1 ? arguments[1] : undefined;\n\n      // call to delete existing one if we change cellHeight / margin\n      if (forceUpdate) {\n        this._removeStylesheet();\n      }\n\n      this._updateContainerHeight(); // if user is telling us they will handle the CSS themselves by setting heights to 0. Do we need this opts really ??\n\n\n      if (this.opts.cellHeight === 0) {\n        return this;\n      }\n\n      var cellHeight = this.opts.cellHeight;\n      var cellHeightUnit = this.opts.cellHeightUnit;\n      var prefix = \".\".concat(this.opts._styleSheetClass, \" > .\").concat(this.opts.itemClass); // create one as needed\n\n      if (!this._styles) {\n        var id = 'gridstack-style-' + (Math.random() * 100000).toFixed(); // insert style to parent (instead of 'head' by default) to support WebComponent\n\n        var styleLocation = this.opts.styleInHead ? undefined : this.el.parentNode;\n        this._styles = utils_1.Utils.createStylesheet(id, styleLocation);\n        if (!this._styles) return this;\n        this._styles._id = id;\n        this._styles._max = 0; // these are done once only\n\n        utils_1.Utils.addCSSRule(this._styles, prefix, \"min-height: \".concat(cellHeight).concat(cellHeightUnit)); // content margins\n\n        var top = this.opts.marginTop + this.opts.marginUnit;\n        var bottom = this.opts.marginBottom + this.opts.marginUnit;\n        var right = this.opts.marginRight + this.opts.marginUnit;\n        var left = this.opts.marginLeft + this.opts.marginUnit;\n        var content = \"\".concat(prefix, \" > .grid-stack-item-content\");\n        var placeholder = \".\".concat(this.opts._styleSheetClass, \" > .grid-stack-placeholder > .placeholder-content\");\n        utils_1.Utils.addCSSRule(this._styles, content, \"top: \".concat(top, \"; right: \").concat(right, \"; bottom: \").concat(bottom, \"; left: \").concat(left, \";\"));\n        utils_1.Utils.addCSSRule(this._styles, placeholder, \"top: \".concat(top, \"; right: \").concat(right, \"; bottom: \").concat(bottom, \"; left: \").concat(left, \";\")); // resize handles offset (to match margin)\n\n        utils_1.Utils.addCSSRule(this._styles, \"\".concat(prefix, \" > .ui-resizable-ne\"), \"right: \".concat(right));\n        utils_1.Utils.addCSSRule(this._styles, \"\".concat(prefix, \" > .ui-resizable-e\"), \"right: \".concat(right));\n        utils_1.Utils.addCSSRule(this._styles, \"\".concat(prefix, \" > .ui-resizable-se\"), \"right: \".concat(right, \"; bottom: \").concat(bottom));\n        utils_1.Utils.addCSSRule(this._styles, \"\".concat(prefix, \" > .ui-resizable-nw\"), \"left: \".concat(left));\n        utils_1.Utils.addCSSRule(this._styles, \"\".concat(prefix, \" > .ui-resizable-w\"), \"left: \".concat(left));\n        utils_1.Utils.addCSSRule(this._styles, \"\".concat(prefix, \" > .ui-resizable-sw\"), \"left: \".concat(left, \"; bottom: \").concat(bottom));\n      } // now update the height specific fields\n\n\n      maxH = maxH || this._styles._max;\n\n      if (maxH > this._styles._max) {\n        var getHeight = function getHeight(rows) {\n          return cellHeight * rows + cellHeightUnit;\n        };\n\n        for (var i = this._styles._max + 1; i <= maxH; i++) {\n          // start at 1\n          var h = getHeight(i);\n          utils_1.Utils.addCSSRule(this._styles, \"\".concat(prefix, \"[gs-y=\\\"\").concat(i - 1, \"\\\"]\"), \"top: \".concat(getHeight(i - 1))); // start at 0\n\n          utils_1.Utils.addCSSRule(this._styles, \"\".concat(prefix, \"[gs-h=\\\"\").concat(i, \"\\\"]\"), \"height: \".concat(h));\n          utils_1.Utils.addCSSRule(this._styles, \"\".concat(prefix, \"[gs-min-h=\\\"\").concat(i, \"\\\"]\"), \"min-height: \".concat(h));\n          utils_1.Utils.addCSSRule(this._styles, \"\".concat(prefix, \"[gs-max-h=\\\"\").concat(i, \"\\\"]\"), \"max-height: \".concat(h));\n        }\n\n        this._styles._max = maxH;\n      }\n\n      return this;\n    }\n    /** @internal */\n\n  }, {\n    key: \"_updateContainerHeight\",\n    value: function _updateContainerHeight() {\n      if (!this.engine || this.engine.batchMode) return this;\n\n      var row = this.getRow() + this._extraDragRow; // checks for minRow already\n      // check for css min height\n\n\n      var cssMinHeight = parseInt(getComputedStyle(this.el)['min-height']);\n\n      if (cssMinHeight > 0) {\n        var minRow = Math.round(cssMinHeight / this.getCellHeight(true));\n\n        if (row < minRow) {\n          row = minRow;\n        }\n      }\n\n      this.el.setAttribute('gs-current-row', String(row));\n\n      if (row === 0) {\n        this.el.style.removeProperty('height');\n        return this;\n      }\n\n      var cellHeight = this.opts.cellHeight;\n      var unit = this.opts.cellHeightUnit;\n      if (!cellHeight) return this;\n      this.el.style.height = row * cellHeight + unit;\n      return this;\n    }\n    /** @internal */\n\n  }, {\n    key: \"_prepareElement\",\n    value: function _prepareElement(el) {\n      var triggerAddEvent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var node = arguments.length > 2 ? arguments[2] : undefined;\n\n      if (!node) {\n        el.classList.add(this.opts.itemClass);\n        node = this._readAttr(el);\n      }\n\n      el.gridstackNode = node;\n      node.el = el;\n      node.grid = this;\n      var copy = Object.assign({}, node);\n      node = this.engine.addNode(node, triggerAddEvent); // write node attr back in case there was collision or we have to fix bad values during addNode()\n\n      if (!utils_1.Utils.same(node, copy)) {\n        this._writeAttr(el, node);\n      }\n\n      this._prepareDragDropByNode(node);\n\n      return this;\n    }\n    /** @internal call to write position x,y,w,h attributes back to element */\n\n  }, {\n    key: \"_writePosAttr\",\n    value: function _writePosAttr(el, n) {\n      if (n.x !== undefined && n.x !== null) {\n        el.setAttribute('gs-x', String(n.x));\n      }\n\n      if (n.y !== undefined && n.y !== null) {\n        el.setAttribute('gs-y', String(n.y));\n      }\n\n      if (n.w) {\n        el.setAttribute('gs-w', String(n.w));\n      }\n\n      if (n.h) {\n        el.setAttribute('gs-h', String(n.h));\n      }\n\n      return this;\n    }\n    /** @internal call to write any default attributes back to element */\n\n  }, {\n    key: \"_writeAttr\",\n    value: function _writeAttr(el, node) {\n      if (!node) return this;\n\n      this._writePosAttr(el, node);\n\n      var attrs\n      /*: GridStackWidget but strings */\n      = {\n        autoPosition: 'gs-auto-position',\n        minW: 'gs-min-w',\n        minH: 'gs-min-h',\n        maxW: 'gs-max-w',\n        maxH: 'gs-max-h',\n        noResize: 'gs-no-resize',\n        noMove: 'gs-no-move',\n        locked: 'gs-locked',\n        id: 'gs-id',\n        resizeHandles: 'gs-resize-handles'\n      };\n\n      for (var key in attrs) {\n        if (node[key]) {\n          // 0 is valid for x,y only but done above already and not in list anyway\n          el.setAttribute(attrs[key], String(node[key]));\n        } else {\n          el.removeAttribute(attrs[key]);\n        }\n      }\n\n      return this;\n    }\n    /** @internal call to read any default attributes from element */\n\n  }, {\n    key: \"_readAttr\",\n    value: function _readAttr(el) {\n      var node = {};\n      node.x = utils_1.Utils.toNumber(el.getAttribute('gs-x'));\n      node.y = utils_1.Utils.toNumber(el.getAttribute('gs-y'));\n      node.w = utils_1.Utils.toNumber(el.getAttribute('gs-w'));\n      node.h = utils_1.Utils.toNumber(el.getAttribute('gs-h'));\n      node.maxW = utils_1.Utils.toNumber(el.getAttribute('gs-max-w'));\n      node.minW = utils_1.Utils.toNumber(el.getAttribute('gs-min-w'));\n      node.maxH = utils_1.Utils.toNumber(el.getAttribute('gs-max-h'));\n      node.minH = utils_1.Utils.toNumber(el.getAttribute('gs-min-h'));\n      node.autoPosition = utils_1.Utils.toBool(el.getAttribute('gs-auto-position'));\n      node.noResize = utils_1.Utils.toBool(el.getAttribute('gs-no-resize'));\n      node.noMove = utils_1.Utils.toBool(el.getAttribute('gs-no-move'));\n      node.locked = utils_1.Utils.toBool(el.getAttribute('gs-locked'));\n      node.resizeHandles = el.getAttribute('gs-resize-handles');\n      node.id = el.getAttribute('gs-id'); // remove any key not found (null or false which is default)\n\n      for (var key in node) {\n        if (!node.hasOwnProperty(key)) return;\n\n        if (!node[key] && node[key] !== 0) {\n          // 0 can be valid value (x,y only really)\n          delete node[key];\n        }\n      }\n\n      return node;\n    }\n    /** @internal */\n\n  }, {\n    key: \"_setStaticClass\",\n    value: function _setStaticClass() {\n      var classes = ['grid-stack-static'];\n\n      if (this.opts.staticGrid) {\n        var _this$el$classList;\n\n        (_this$el$classList = this.el.classList).add.apply(_this$el$classList, classes);\n\n        this.el.setAttribute('gs-static', 'true');\n      } else {\n        var _this$el$classList2;\n\n        (_this$el$classList2 = this.el.classList).remove.apply(_this$el$classList2, classes);\n\n        this.el.removeAttribute('gs-static');\n      }\n\n      return this;\n    }\n    /**\r\n     * called when we are being resized by the window - check if the one Column Mode needs to be turned on/off\r\n     * and remember the prev columns we used, as well as check for auto cell height (square)\r\n     */\n\n  }, {\n    key: \"onParentResize\",\n    value: function onParentResize() {\n      var _this9 = this;\n\n      if (!this.el || !this.el.clientWidth) return; // return if we're gone or no size yet (will get called again)\n\n      var oneColumn = !this.opts.disableOneColumnMode && this.el.clientWidth <= this.opts.minWidth;\n      var changedOneColumn = false;\n\n      if (this.opts.column === 1 !== oneColumn) {\n        changedOneColumn = true;\n\n        if (this.opts.animate) {\n          this.setAnimation(false);\n        } // 1 <-> 12 is too radical, turn off animation\n\n\n        this.column(oneColumn ? 1 : this._prevColumn);\n\n        if (this.opts.animate) {\n          this.setAnimation(true);\n        }\n      } // make the cells content square again\n\n\n      if (this._isAutoCellHeight) {\n        if (!changedOneColumn && this.opts.cellHeightThrottle) {\n          if (!this._cellHeightThrottle) {\n            this._cellHeightThrottle = utils_1.Utils.throttle(function () {\n              return _this9.cellHeight();\n            }, this.opts.cellHeightThrottle);\n          }\n\n          this._cellHeightThrottle();\n        } else {\n          // immediate update if we've changed to/from oneColumn or have no threshold\n          this.cellHeight();\n        }\n      } // finally update any nested grids\n\n\n      this.engine.nodes.forEach(function (n) {\n        if (n.subGrid) {\n          n.subGrid.onParentResize();\n        }\n      });\n      return this;\n    }\n    /** add or remove the window size event handler */\n\n  }, {\n    key: \"_updateWindowResizeEvent\",\n    value: function _updateWindowResizeEvent() {\n      var forceRemove = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      // only add event if we're not nested (parent will call us) and we're auto sizing cells or supporting oneColumn (i.e. doing work)\n      var workTodo = (this._isAutoCellHeight || !this.opts.disableOneColumnMode) && !this.opts._isNested;\n\n      if (!forceRemove && workTodo && !this._windowResizeBind) {\n        this._windowResizeBind = this.onParentResize.bind(this); // so we can properly remove later\n\n        window.addEventListener('resize', this._windowResizeBind);\n      } else if ((forceRemove || !workTodo) && this._windowResizeBind) {\n        window.removeEventListener('resize', this._windowResizeBind);\n        delete this._windowResizeBind; // remove link to us so we can free\n      }\n\n      return this;\n    }\n    /** @internal convert a potential selector into actual element */\n\n  }, {\n    key: \"initMargin\",\n\n    /** @internal initialize margin top/bottom/left/right and units */\n    value: function initMargin() {\n      var data;\n      var margin = 0; // support passing multiple values like CSS (ex: '5px 10px 0 20px')\n\n      var margins = [];\n\n      if (typeof this.opts.margin === 'string') {\n        margins = this.opts.margin.split(' ');\n      }\n\n      if (margins.length === 2) {\n        // top/bot, left/right like CSS\n        this.opts.marginTop = this.opts.marginBottom = margins[0];\n        this.opts.marginLeft = this.opts.marginRight = margins[1];\n      } else if (margins.length === 4) {\n        // Clockwise like CSS\n        this.opts.marginTop = margins[0];\n        this.opts.marginRight = margins[1];\n        this.opts.marginBottom = margins[2];\n        this.opts.marginLeft = margins[3];\n      } else {\n        data = utils_1.Utils.parseHeight(this.opts.margin);\n        this.opts.marginUnit = data.unit;\n        margin = this.opts.margin = data.h;\n      } // see if top/bottom/left/right need to be set as well\n\n\n      if (this.opts.marginTop === undefined) {\n        this.opts.marginTop = margin;\n      } else {\n        data = utils_1.Utils.parseHeight(this.opts.marginTop);\n        this.opts.marginTop = data.h;\n        delete this.opts.margin;\n      }\n\n      if (this.opts.marginBottom === undefined) {\n        this.opts.marginBottom = margin;\n      } else {\n        data = utils_1.Utils.parseHeight(this.opts.marginBottom);\n        this.opts.marginBottom = data.h;\n        delete this.opts.margin;\n      }\n\n      if (this.opts.marginRight === undefined) {\n        this.opts.marginRight = margin;\n      } else {\n        data = utils_1.Utils.parseHeight(this.opts.marginRight);\n        this.opts.marginRight = data.h;\n        delete this.opts.margin;\n      }\n\n      if (this.opts.marginLeft === undefined) {\n        this.opts.marginLeft = margin;\n      } else {\n        data = utils_1.Utils.parseHeight(this.opts.marginLeft);\n        this.opts.marginLeft = data.h;\n        delete this.opts.margin;\n      }\n\n      this.opts.marginUnit = data.unit; // in case side were spelled out, use those units instead...\n\n      if (this.opts.marginTop === this.opts.marginBottom && this.opts.marginLeft === this.opts.marginRight && this.opts.marginTop === this.opts.marginRight) {\n        this.opts.margin = this.opts.marginTop; // makes it easier to check for no-ops in setMargin()\n      }\n\n      return this;\n    }\n    /*\r\n     * drag&drop empty stubs that will be implemented in gridstack-dd.ts for non static grid\r\n     * so we don't incur the load unless needed.\r\n     * NOTE: had to make those methods public in order to define them else as\r\n     *   GridStack.prototype._setupAcceptWidget = function()\r\n     * maybe there is a better way ????\r\n     */\n\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n\n    /**\r\n     * call to setup dragging in from the outside (say toolbar), by specifying the class selection and options.\r\n     * Called during GridStack.init() as options, but can also be called directly (last param are cached) in case the toolbar\r\n     * is dynamically create and needs to change later.\r\n     * @param dragIn string selector (ex: '.sidebar .grid-stack-item')\r\n     * @param dragInOptions options - see DDDragInOpt. (default: {revert: 'invalid', handle: '.grid-stack-item-content', scroll: false, appendTo: 'body'}\r\n     **/\n\n  }, {\n    key: \"movable\",\n\n    /**\r\n     * Enables/Disables dragging by the user of specific grid element. If you want all items, and have it affect future items, use enableMove() instead. No-op for static grids.\r\n     * IF you are looking to prevent an item from moving (due to being pushed around by another during collision) use locked property instead.\r\n     * @param els widget or selector to modify.\r\n     * @param val if true widget will be draggable.\r\n     */\n    value: function movable(els, val) {\n      return this;\n    }\n    /**\r\n     * Enables/Disables user resizing of specific grid element. If you want all items, and have it affect future items, use enableResize() instead. No-op for static grids.\r\n     * @param els  widget or selector to modify\r\n     * @param val  if true widget will be resizable.\r\n     */\n\n  }, {\n    key: \"resizable\",\n    value: function resizable(els, val) {\n      return this;\n    }\n    /**\r\n     * Temporarily disables widgets moving/resizing.\r\n     * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.\r\n     * Note: no-op for static grid\r\n     * This is a shortcut for:\r\n     * @example\r\n     *  grid.enableMove(false);\r\n     *  grid.enableResize(false);\r\n     */\n\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      return this;\n    }\n    /**\r\n     * Re-enables widgets moving/resizing - see disable().\r\n     * Note: no-op for static grid.\r\n     * This is a shortcut for:\r\n     * @example\r\n     *  grid.enableMove(true);\r\n     *  grid.enableResize(true);\r\n     */\n\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      return this;\n    }\n    /**\r\n     * Enables/disables widget moving. No-op for static grids.\r\n     */\n\n  }, {\n    key: \"enableMove\",\n    value: function enableMove(doEnable) {\n      return this;\n    }\n    /**\r\n     * Enables/disables widget resizing. No-op for static grids.\r\n     */\n\n  }, {\n    key: \"enableResize\",\n    value: function enableResize(doEnable) {\n      return this;\n    }\n    /** @internal called to add drag over support to support widgets */\n\n  }, {\n    key: \"_setupAcceptWidget\",\n    value: function _setupAcceptWidget() {\n      return this;\n    }\n    /** @internal called to setup a trash drop zone if the user specifies it */\n\n  }, {\n    key: \"_setupRemoveDrop\",\n    value: function _setupRemoveDrop() {\n      return this;\n    }\n    /** @internal prepares the element for drag&drop **/\n\n  }, {\n    key: \"_prepareDragDropByNode\",\n    value: function _prepareDragDropByNode(node) {\n      return this;\n    }\n    /** @internal handles actual drag/resize start **/\n\n  }, {\n    key: \"_onStartMoving\",\n    value: function _onStartMoving(el, event, ui, node, cellWidth, cellHeight) {\n      return;\n    }\n    /** @internal handles actual drag/resize **/\n\n  }, {\n    key: \"_dragOrResize\",\n    value: function _dragOrResize(el, event, ui, node, cellWidth, cellHeight) {\n      return;\n    }\n    /** @internal called when a node leaves our area (mouse out or shape outside) **/\n\n  }, {\n    key: \"_leave\",\n    value: function _leave(el, helper) {\n      return;\n    }\n  }, {\n    key: \"placeholder\",\n\n    /** @internal create placeholder DIV as needed */\n    get: function get() {\n      if (!this._placeholder) {\n        var placeholderChild = document.createElement('div'); // child so padding match item-content\n\n        placeholderChild.className = 'placeholder-content';\n\n        if (this.opts.placeholderText) {\n          placeholderChild.innerHTML = this.opts.placeholderText;\n        }\n\n        this._placeholder = document.createElement('div');\n\n        this._placeholder.classList.add(this.opts.placeholderClass, GridDefaults.itemClass, this.opts.itemClass);\n\n        this.placeholder.appendChild(placeholderChild);\n      }\n\n      return this._placeholder;\n    }\n  }], [{\n    key: \"init\",\n    value: function init() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var elOrString = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '.grid-stack';\n      var el = GridStack.getGridElement(elOrString);\n\n      if (!el) {\n        if (typeof elOrString === 'string') {\n          console.error('GridStack.initAll() no grid was found with selector \"' + elOrString + '\" - element missing or wrong selector ?' + '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\n        } else {\n          console.error('GridStack.init() no grid element was passed.');\n        }\n\n        return null;\n      }\n\n      if (!el.gridstack) {\n        el.gridstack = new GridStack(el, utils_1.Utils.cloneDeep(options));\n      }\n\n      return el.gridstack;\n    }\n    /**\r\n     * Will initialize a list of elements (given a selector) and return an array of grids.\r\n     * @param options grid options (optional)\r\n     * @param selector elements selector to convert to grids (default to '.grid-stack' class selector)\r\n     *\r\n     * @example\r\n     * let grids = GridStack.initAll();\r\n     * grids.forEach(...)\r\n     */\n\n  }, {\n    key: \"initAll\",\n    value: function initAll() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '.grid-stack';\n      var grids = [];\n      GridStack.getGridElements(selector).forEach(function (el) {\n        if (!el.gridstack) {\n          el.gridstack = new GridStack(el, utils_1.Utils.cloneDeep(options));\n          delete options.dragIn;\n          delete options.dragInOptions; // only need to be done once (really a static global thing, not per grid)\n        }\n\n        grids.push(el.gridstack);\n      });\n\n      if (grids.length === 0) {\n        console.error('GridStack.initAll() no grid was found with selector \"' + selector + '\" - element missing or wrong selector ?' + '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\n      }\n\n      return grids;\n    }\n    /**\r\n     * call to create a grid with the given options, including loading any children from JSON structure. This will call GridStack.init(), then\r\n     * grid.load() on any passed children (recursively). Great alternative to calling init() if you want entire grid to come from\r\n     * JSON serialized data, including options.\r\n     * @param parent HTML element parent to the grid\r\n     * @param opt grids options used to initialize the grid, and list of children\r\n     */\n\n  }, {\n    key: \"addGrid\",\n    value: function addGrid(parent) {\n      var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (!parent) return null; // create the grid element, but check if the passed 'parent' already has grid styling and should be used instead\n\n      var el = parent;\n\n      if (!parent.classList.contains('grid-stack')) {\n        var doc = document.implementation.createHTMLDocument();\n        doc.body.innerHTML = \"<div class=\\\"grid-stack \".concat(opt.class || '', \"\\\"></div>\");\n        el = doc.body.children[0];\n        parent.appendChild(el);\n      } // create grid class and load any children\n\n\n      var grid = GridStack.init(opt, el);\n\n      if (grid.opts.children) {\n        var children = grid.opts.children;\n        delete grid.opts.children;\n        grid.load(children);\n      }\n\n      return grid;\n    }\n  }, {\n    key: \"getElement\",\n    value: function getElement() {\n      var els = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '.grid-stack-item';\n      return utils_1.Utils.getElement(els);\n    }\n    /** @internal */\n\n  }, {\n    key: \"getElements\",\n    value: function getElements() {\n      var els = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '.grid-stack-item';\n      return utils_1.Utils.getElements(els);\n    }\n    /** @internal */\n\n  }, {\n    key: \"getGridElement\",\n    value: function getGridElement(els) {\n      return GridStack.getElement(els);\n    }\n    /** @internal */\n\n  }, {\n    key: \"getGridElements\",\n    value: function getGridElements(els) {\n      return utils_1.Utils.getElements(els);\n    }\n  }, {\n    key: \"setupDragIn\",\n    value: function setupDragIn(dragIn, dragInOptions) {}\n  }]);\n\n  return GridStack;\n}();\n\nexports.GridStack = GridStack;\n/** scoping so users can call GridStack.Utils.sort() for example */\n\nGridStack.Utils = utils_1.Utils;\n/** scoping so users can call new GridStack.Engine(12) for example */\n\nGridStack.Engine = gridstack_engine_1.GridStackEngine;\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/gridstack/dist/gridstack.js?");

/***/ }),

/***/ "./node_modules/gridstack/dist/types.js":
/*!**********************************************!*\
  !*** ./node_modules/gridstack/dist/types.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\r\n * types.ts 4.2.6\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/gridstack/dist/types.js?");

/***/ }),

/***/ "./node_modules/gridstack/dist/utils.js":
/*!**********************************************!*\
  !*** ./node_modules/gridstack/dist/utils.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\r\n * utils.ts 4.2.6\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Utils = exports.obsoleteAttr = exports.obsoleteOptsDel = exports.obsoleteOpts = exports.obsolete = void 0;\n/** checks for obsolete method names */\n// eslint-disable-next-line\n\nfunction obsolete(self, f, oldName, newName, rev) {\n  var wrapper = function wrapper() {\n    console.warn('gridstack.js: Function `' + oldName + '` is deprecated in ' + rev + ' and has been replaced ' + 'with `' + newName + '`. It will be **completely** removed in v1.0');\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return f.apply(self, args);\n  };\n\n  wrapper.prototype = f.prototype;\n  return wrapper;\n}\n\nexports.obsolete = obsolete;\n/** checks for obsolete grid options (can be used for any fields, but msg is about options) */\n\nfunction obsoleteOpts(opts, oldName, newName, rev) {\n  if (opts[oldName] !== undefined) {\n    opts[newName] = opts[oldName];\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + ' and has been replaced with `' + newName + '`. It will be **completely** removed in v1.0');\n  }\n}\n\nexports.obsoleteOpts = obsoleteOpts;\n/** checks for obsolete grid options which are gone */\n\nfunction obsoleteOptsDel(opts, oldName, rev, info) {\n  if (opts[oldName] !== undefined) {\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + info);\n  }\n}\n\nexports.obsoleteOptsDel = obsoleteOptsDel;\n/** checks for obsolete Jquery element attributes */\n\nfunction obsoleteAttr(el, oldName, newName, rev) {\n  var oldAttr = el.getAttribute(oldName);\n\n  if (oldAttr !== null) {\n    el.setAttribute(newName, oldAttr);\n    console.warn('gridstack.js: attribute `' + oldName + '`=' + oldAttr + ' is deprecated on this object in ' + rev + ' and has been replaced with `' + newName + '`. It will be **completely** removed in v1.0');\n  }\n}\n\nexports.obsoleteAttr = obsoleteAttr;\n/**\r\n * Utility methods\r\n */\n\nvar Utils = /*#__PURE__*/function () {\n  function Utils() {\n    _classCallCheck(this, Utils);\n  }\n\n  _createClass(Utils, null, [{\n    key: \"getElements\",\n\n    /** convert a potential selector into actual list of html elements */\n    value: function getElements(els) {\n      if (typeof els === 'string') {\n        var list = document.querySelectorAll(els);\n\n        if (!list.length && els[0] !== '.' && els[0] !== '#') {\n          list = document.querySelectorAll('.' + els);\n\n          if (!list.length) {\n            list = document.querySelectorAll('#' + els);\n          }\n        }\n\n        return Array.from(list);\n      }\n\n      return [els];\n    }\n    /** convert a potential selector into actual single element */\n\n  }, {\n    key: \"getElement\",\n    value: function getElement(els) {\n      if (typeof els === 'string') {\n        if (!els.length) return null;\n\n        if (els[0] === '#') {\n          return document.getElementById(els.substring(1));\n        }\n\n        if (els[0] === '.' || els[0] === '[') {\n          return document.querySelector(els);\n        } // if we start with a digit, assume it's an id (error calling querySelector('#1')) as class are not valid CSS\n\n\n        if (!isNaN(+els[0])) {\n          // start with digit\n          return document.getElementById(els);\n        } // finally try string, then id then class\n\n\n        var el = document.querySelector(els);\n\n        if (!el) {\n          el = document.getElementById(els);\n        }\n\n        if (!el) {\n          el = document.querySelector('.' + els);\n        }\n\n        return el;\n      }\n\n      return els;\n    }\n    /** returns true if a and b overlap */\n\n  }, {\n    key: \"isIntercepted\",\n    value: function isIntercepted(a, b) {\n      return !(a.y >= b.y + b.h || a.y + a.h <= b.y || a.x + a.w <= b.x || a.x >= b.x + b.w);\n    }\n    /** returns true if a and b touch edges or corners */\n\n  }, {\n    key: \"isTouching\",\n    value: function isTouching(a, b) {\n      return Utils.isIntercepted(a, {\n        x: b.x - 0.5,\n        y: b.y - 0.5,\n        w: b.w + 1,\n        h: b.h + 1\n      });\n    }\n    /**\r\n     * Sorts array of nodes\r\n     * @param nodes array to sort\r\n     * @param dir 1 for asc, -1 for desc (optional)\r\n     * @param width width of the grid. If undefined the width will be calculated automatically (optional).\r\n     **/\n\n  }, {\n    key: \"sort\",\n    value: function sort(nodes, dir, column) {\n      column = column || nodes.reduce(function (col, n) {\n        return Math.max(n.x + n.w, col);\n      }, 0) || 12;\n      if (dir === -1) return nodes.sort(function (a, b) {\n        return b.x + b.y * column - (a.x + a.y * column);\n      });else return nodes.sort(function (b, a) {\n        return b.x + b.y * column - (a.x + a.y * column);\n      });\n    }\n    /**\r\n     * creates a style sheet with style id under given parent\r\n     * @param id will set the 'gs-style-id' attribute to that id\r\n     * @param parent to insert the stylesheet as first child,\r\n     * if none supplied it will be appended to the document head instead.\r\n     */\n\n  }, {\n    key: \"createStylesheet\",\n    value: function createStylesheet(id, parent) {\n      var style = document.createElement('style');\n      style.setAttribute('type', 'text/css');\n      style.setAttribute('gs-style-id', id); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      if (style.styleSheet) {\n        // TODO: only CSSImportRule have that and different beast ??\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        style.styleSheet.cssText = '';\n      } else {\n        style.appendChild(document.createTextNode('')); // WebKit hack\n      }\n\n      if (!parent) {\n        // default to head\n        parent = document.getElementsByTagName('head')[0];\n        parent.appendChild(style);\n      } else {\n        parent.insertBefore(style, parent.firstChild);\n      }\n\n      return style.sheet;\n    }\n    /** removed the given stylesheet id */\n\n  }, {\n    key: \"removeStylesheet\",\n    value: function removeStylesheet(id) {\n      var el = document.querySelector('STYLE[gs-style-id=' + id + ']');\n      if (el && el.parentNode) el.remove();\n    }\n    /** inserts a CSS rule */\n\n  }, {\n    key: \"addCSSRule\",\n    value: function addCSSRule(sheet, selector, rules) {\n      if (typeof sheet.addRule === 'function') {\n        sheet.addRule(selector, rules);\n      } else if (typeof sheet.insertRule === 'function') {\n        sheet.insertRule(\"\".concat(selector, \"{\").concat(rules, \"}\"));\n      }\n    } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  }, {\n    key: \"toBool\",\n    value: function toBool(v) {\n      if (typeof v === 'boolean') {\n        return v;\n      }\n\n      if (typeof v === 'string') {\n        v = v.toLowerCase();\n        return !(v === '' || v === 'no' || v === 'false' || v === '0');\n      }\n\n      return Boolean(v);\n    }\n  }, {\n    key: \"toNumber\",\n    value: function toNumber(value) {\n      return value === null || value.length === 0 ? undefined : Number(value);\n    }\n  }, {\n    key: \"parseHeight\",\n    value: function parseHeight(val) {\n      var h;\n      var unit = 'px';\n\n      if (typeof val === 'string') {\n        var match = val.match(/^(-[0-9]+\\.[0-9]+|[0-9]*\\.[0-9]+|-[0-9]+|[0-9]+)(px|em|rem|vh|vw|%)?$/);\n\n        if (!match) {\n          throw new Error('Invalid height');\n        }\n\n        unit = match[2] || 'px';\n        h = parseFloat(match[1]);\n      } else {\n        h = val;\n      }\n\n      return {\n        h: h,\n        unit: unit\n      };\n    }\n    /** copies unset fields in target to use the given default sources values */\n    // eslint-disable-next-line\n\n  }, {\n    key: \"defaults\",\n    value: function defaults(target) {\n      var _this = this;\n\n      for (var _len2 = arguments.length, sources = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        sources[_key2 - 1] = arguments[_key2];\n      }\n\n      sources.forEach(function (source) {\n        for (var key in source) {\n          if (!source.hasOwnProperty(key)) return;\n\n          if (target[key] === null || target[key] === undefined) {\n            target[key] = source[key];\n          } else if (_typeof(source[key]) === 'object' && _typeof(target[key]) === 'object') {\n            // property is an object, recursively add it's field over... #1373\n            _this.defaults(target[key], source[key]);\n          }\n        }\n      });\n      return target;\n    }\n    /** given 2 objects return true if they have the same values. Checks for Object {} having same fields and values (just 1 level down) */\n\n  }, {\n    key: \"same\",\n    value: function same(a, b) {\n      if (_typeof(a) !== 'object') return a == b;\n      if (_typeof(a) !== _typeof(b)) return false; // else we have object, check just 1 level deep for being same things...\n\n      if (Object.keys(a).length !== Object.keys(b).length) return false;\n\n      for (var key in a) {\n        if (a[key] !== b[key]) return false;\n      }\n\n      return true;\n    }\n    /* copies over b size & position (GridStackPosition), and possibly min/max as well */\n\n  }, {\n    key: \"copyPos\",\n    value: function copyPos(a, b) {\n      var minMax = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      a.x = b.x;\n      a.y = b.y;\n      a.w = b.w;\n      a.h = b.h;\n      if (!minMax) return a;\n      if (b.minW) a.minW = b.minW;\n      if (b.minH) a.minH = b.minH;\n      if (b.maxW) a.maxW = b.maxW;\n      if (b.maxH) a.maxH = b.maxH;\n      return a;\n    }\n    /* true if a and b has same size & position */\n\n  }, {\n    key: \"samePos\",\n    value: function samePos(a, b) {\n      return a && b && a.x === b.x && a.y === b.y && a.w === b.w && a.h === b.h;\n    }\n    /** removes field from the first object if same as the second objects (like diffing) and internal '_' for saving */\n\n  }, {\n    key: \"removeInternalAndSame\",\n    value: function removeInternalAndSame(a, b) {\n      if (_typeof(a) !== 'object' || _typeof(b) !== 'object') return;\n\n      for (var key in a) {\n        var val = a[key];\n\n        if (key[0] === '_' || val === b[key]) {\n          delete a[key];\n        } else if (val && _typeof(val) === 'object' && b[key] !== undefined) {\n          for (var i in val) {\n            if (val[i] === b[key][i] || i[0] === '_') {\n              delete val[i];\n            }\n          }\n\n          if (!Object.keys(val).length) {\n            delete a[key];\n          }\n        }\n      }\n    }\n    /** return the closest parent matching the given class */\n\n  }, {\n    key: \"closestByClass\",\n    value: function closestByClass(el, name) {\n      while (el = el.parentElement) {\n        if (el.classList.contains(name)) return el;\n      }\n\n      return null;\n    }\n    /** delay calling the given function for given delay, preventing new calls from happening while waiting */\n\n  }, {\n    key: \"throttle\",\n    value: function throttle(func, delay) {\n      var isWaiting = false;\n      return function () {\n        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n\n        if (!isWaiting) {\n          isWaiting = true;\n          setTimeout(function () {\n            func.apply(void 0, args);\n            isWaiting = false;\n          }, delay);\n        }\n      };\n    }\n  }, {\n    key: \"removePositioningStyles\",\n    value: function removePositioningStyles(el) {\n      var style = el.style;\n\n      if (style.position) {\n        style.removeProperty('position');\n      }\n\n      if (style.left) {\n        style.removeProperty('left');\n      }\n\n      if (style.top) {\n        style.removeProperty('top');\n      }\n\n      if (style.width) {\n        style.removeProperty('width');\n      }\n\n      if (style.height) {\n        style.removeProperty('height');\n      }\n    }\n    /** @internal returns the passed element if scrollable, else the closest parent that will, up to the entire document scrolling element */\n\n  }, {\n    key: \"getScrollElement\",\n    value: function getScrollElement(el) {\n      if (!el) return document.scrollingElement;\n      var style = getComputedStyle(el);\n      var overflowRegex = /(auto|scroll)/;\n\n      if (overflowRegex.test(style.overflow + style.overflowY)) {\n        return el;\n      } else {\n        return this.getScrollElement(el.parentElement);\n      }\n    }\n    /** @internal */\n\n  }, {\n    key: \"updateScrollPosition\",\n    value: function updateScrollPosition(el, position, distance) {\n      // is widget in view?\n      var rect = el.getBoundingClientRect();\n      var innerHeightOrClientHeight = window.innerHeight || document.documentElement.clientHeight;\n\n      if (rect.top < 0 || rect.bottom > innerHeightOrClientHeight) {\n        // set scrollTop of first parent that scrolls\n        // if parent is larger than el, set as low as possible\n        // to get entire widget on screen\n        var offsetDiffDown = rect.bottom - innerHeightOrClientHeight;\n        var offsetDiffUp = rect.top;\n        var scrollEl = this.getScrollElement(el);\n\n        if (scrollEl !== null) {\n          var prevScroll = scrollEl.scrollTop;\n\n          if (rect.top < 0 && distance < 0) {\n            // moving up\n            if (el.offsetHeight > innerHeightOrClientHeight) {\n              scrollEl.scrollTop += distance;\n            } else {\n              scrollEl.scrollTop += Math.abs(offsetDiffUp) > Math.abs(distance) ? distance : offsetDiffUp;\n            }\n          } else if (distance > 0) {\n            // moving down\n            if (el.offsetHeight > innerHeightOrClientHeight) {\n              scrollEl.scrollTop += distance;\n            } else {\n              scrollEl.scrollTop += offsetDiffDown > distance ? distance : offsetDiffDown;\n            }\n          } // move widget y by amount scrolled\n\n\n          position.top += scrollEl.scrollTop - prevScroll;\n        }\n      }\n    }\n    /**\r\n     * @internal Function used to scroll the page.\r\n     *\r\n     * @param event `MouseEvent` that triggers the resize\r\n     * @param el `HTMLElement` that's being resized\r\n     * @param distance Distance from the V edges to start scrolling\r\n     */\n\n  }, {\n    key: \"updateScrollResize\",\n    value: function updateScrollResize(event, el, distance) {\n      var scrollEl = this.getScrollElement(el);\n      var height = scrollEl.clientHeight; // #1727 event.clientY is relative to viewport, so must compare this against position of scrollEl getBoundingClientRect().top\n      // #1745 Special situation if scrollEl is document 'html': here browser spec states that\n      // clientHeight is height of viewport, but getBoundingClientRect() is rectangle of html element;\n      // this discrepancy arises because in reality scrollbar is attached to viewport, not html element itself.\n\n      var offsetTop = scrollEl === this.getScrollElement() ? 0 : scrollEl.getBoundingClientRect().top;\n      var pointerPosY = event.clientY - offsetTop;\n      var top = pointerPosY < distance;\n      var bottom = pointerPosY > height - distance;\n\n      if (top) {\n        // This also can be done with a timeout to keep scrolling while the mouse is\n        // in the scrolling zone. (will have smoother behavior)\n        scrollEl.scrollBy({\n          behavior: 'smooth',\n          top: pointerPosY - distance\n        });\n      } else if (bottom) {\n        scrollEl.scrollBy({\n          behavior: 'smooth',\n          top: distance - (height - pointerPosY)\n        });\n      }\n    }\n    /** single level clone, returning a new object with same top fields. This will share sub objects and arrays */\n\n  }, {\n    key: \"clone\",\n    value: function clone(obj) {\n      if (obj === null || obj === undefined || _typeof(obj) !== 'object') {\n        return obj;\n      } // return Object.assign({}, obj);\n\n\n      if (obj instanceof Array) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return _toConsumableArray(obj);\n      }\n\n      return Object.assign({}, obj);\n    }\n    /**\r\n     * Recursive clone version that returns a full copy, checking for nested objects and arrays ONLY.\r\n     * Note: this will use as-is any key starting with double __ (and not copy inside) some lib have circular dependencies.\r\n     */\n\n  }, {\n    key: \"cloneDeep\",\n    value: function cloneDeep(obj) {\n      // return JSON.parse(JSON.stringify(obj)); // doesn't work with date format ?\n      var ret = Utils.clone(obj);\n\n      for (var key in ret) {\n        // NOTE: we don't support function/circular dependencies so skip those properties for now...\n        if (ret.hasOwnProperty(key) && _typeof(ret[key]) === 'object' && key.substring(0, 2) !== '__') {\n          ret[key] = Utils.cloneDeep(obj[key]);\n        }\n      }\n\n      return ret;\n    }\n  }]);\n\n  return Utils;\n}();\n\nexports.Utils = Utils;\n\n//# sourceURL=webpack://__ember_auto_import__/./node_modules/gridstack/dist/utils.js?");

/***/ })

}]);