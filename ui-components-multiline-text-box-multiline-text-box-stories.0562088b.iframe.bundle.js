"use strict";(globalThis.webpackChunkfreshservice=globalThis.webpackChunkfreshservice||[]).push([[5814],{"./node_modules/@storybook/addon-actions/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{XI:()=>action});var external_STORYBOOK_MODULE_PREVIEW_API_=__webpack_require__("storybook/internal/preview-api"),external_STORYBOOK_MODULE_CORE_EVENTS_PREVIEW_ERRORS_=__webpack_require__("storybook/internal/preview-errors"),external_STORYBOOK_MODULE_GLOBAL_=__webpack_require__("@storybook/global"),v4=__webpack_require__("./node_modules/@storybook/addon-actions/node_modules/uuid/dist/esm-browser/v4.js"),ADDON_ID="storybook/actions",EVENT_ID=`${ADDON_ID}/action-event`,config={depth:10,clearOnStoryChange:!0,limit:50},findProto=(obj,callback)=>{let proto=Object.getPrototypeOf(obj);return!proto||callback(proto)?proto:findProto(proto,callback)},serializeArg=a=>{if("object"==typeof(e=a)&&e&&findProto(e,(proto=>/^Synthetic(?:Base)?Event$/.test(proto.constructor.name)))&&"function"==typeof e.persist){let e=Object.create(a.constructor.prototype,Object.getOwnPropertyDescriptors(a));e.persist();let viewDescriptor=Object.getOwnPropertyDescriptor(e,"view"),view=viewDescriptor?.value;return"object"==typeof view&&"Window"===view?.constructor.name&&Object.defineProperty(e,"view",{...viewDescriptor,value:Object.create(view.constructor.prototype)}),e}var e;return a},generateId=()=>"object"==typeof crypto&&"function"==typeof crypto.getRandomValues?(0,v4.A)():Date.now().toString(36)+Math.random().toString(36).substring(2);function action(name,options={}){let actionOptions={...config,...options},handler=function(...args){if(options.implicit){let storyRenderer=("__STORYBOOK_PREVIEW__"in external_STORYBOOK_MODULE_GLOBAL_.global?external_STORYBOOK_MODULE_GLOBAL_.global.__STORYBOOK_PREVIEW__:void 0)?.storyRenders.find((render=>"playing"===render.phase||"rendering"===render.phase));if(storyRenderer){let deprecated=!window?.FEATURES?.disallowImplicitActionsInRenderV8,error=new external_STORYBOOK_MODULE_CORE_EVENTS_PREVIEW_ERRORS_.ImplicitActionsDuringRendering({phase:storyRenderer.phase,name,deprecated});if(!deprecated)throw error;console.warn(error)}}let channel=external_STORYBOOK_MODULE_PREVIEW_API_.addons.getChannel(),id=generateId(),serializedArgs=args.map(serializeArg),normalizedArgs=args.length>1?serializedArgs:serializedArgs[0],actionDisplayToEmit={id,count:0,data:{name,args:normalizedArgs},options:{...actionOptions,maxDepth:5+(actionOptions.depth||3),allowFunction:actionOptions.allowFunction||!1}};channel.emit(EVENT_ID,actionDisplayToEmit)};return handler.isAction=!0,handler.implicit=options.implicit,handler}},"./app/components/ui-components/multiline-text-box/multiline-text-box.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,WithIcons:()=>WithIcons,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _storybook_addon_actions__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@storybook/addon-actions/dist/index.mjs");const __WEBPACK_DEFAULT_EXPORT__={title:"ui-components/multiline-text-box",component:"UiComponentsMultilineTextBox"},Default={render:args=>({template:Ember.HTMLBars.template({id:"c5lFqqck",block:'[[[1,"\\n              "],[10,0],[14,5,"width: 300px;"],[12],[1,"\\n                "],[8,[39,0],null,[["@placeholder","@label","@buttonLabel","@searchCallback","@clearCallback","@minLength","@maxLength","@autoFocus","@searchOnEnter","@collapseOnFocusOut","@debounce","@debounceDelay","@icon","@buttonIcon"],[[30,0,["placeholder"]],[30,0,["label"]],[30,0,["buttonLabel"]],[30,0,["onSubmitCallback"]],[30,0,["onClearCallback"]],[30,0,["minLength"]],[30,0,["maxLength"]],[30,0,["autoFocus"]],[30,0,["searchOnEnter"]],[30,0,["collapseOnFocusOut"]],[30,0,["debounce"]],[30,0,["debounceDelay"]],[30,0,["icon"]],[30,0,["buttonIcon"]]]],null],[1,"\\n              "],[13],[1,"\\n            "]],[],false,["ui-components/multiline-text-box"]]',moduleName:"(unknown template module)",isStrictMode:!1}),context:{...args,onSubmitCallback:()=>(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_0__.XI)("search button clicked")(),onClearCallback:()=>(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_0__.XI)("clear button clicked")()}}),name:"Default",argTypes:{label:{description:"Label for the input",type:"string"},buttonLabel:{description:"Name for the search button",type:"string"},placeholder:{description:"Placeholder for the input",type:"string"},icon:{description:"svg file name of the icon which will be displayed on the left to label",type:"string"},buttonIcon:{description:"svg file name of the icon which will be displayed on the submit button. If buttonIcon is given buttonLabel will not be displayed",type:"string"},minLength:{description:"Minimum characters to be entered to submit and to show submit button. Default value is '1' ",type:"number",defaultValue:1},maxLength:{description:"Maximum characters that can be entered. Default value is '255'",type:"number",defaultValue:255},collapseOnFocusOut:{description:"Shows only the first line if the input is blurred. Defaults to 'true' ",type:"boolean",defaultValue:!0},searchOnEnter:{description:"Submits input when 'Enter' key is pressed. Defaults to 'true'",type:"boolean",defaultValue:!0},autoFocus:{description:"auto focus input on page load and re-render. Defaults to 'false'",type:"boolean",defaultValue:!1},debounce:{description:"If true invokes searchCallback with debounce delay. Submit button will not be displayed when this is true. Defaults to 'false'",type:"boolean",defaultValue:!1},debounceDelay:{description:"Delay in ms for debounce search. Defaults to 'false'",type:"number",defaultValue:350},searchCallback:{description:"Callback method to invoke on press Enter or on click of submit button",type:"function",control:!1},clearCallback:{description:"Callback method to invoke on clear input using the clear button",type:"function",control:!1}},args:{label:"Search label goes here",buttonLabel:"Go",placeholder:"Type something and Enter"}},WithIcons={render:args=>({template:Ember.HTMLBars.template({id:"c5lFqqck",block:'[[[1,"\\n              "],[10,0],[14,5,"width: 300px;"],[12],[1,"\\n                "],[8,[39,0],null,[["@placeholder","@label","@buttonLabel","@searchCallback","@clearCallback","@minLength","@maxLength","@autoFocus","@searchOnEnter","@collapseOnFocusOut","@debounce","@debounceDelay","@icon","@buttonIcon"],[[30,0,["placeholder"]],[30,0,["label"]],[30,0,["buttonLabel"]],[30,0,["onSubmitCallback"]],[30,0,["onClearCallback"]],[30,0,["minLength"]],[30,0,["maxLength"]],[30,0,["autoFocus"]],[30,0,["searchOnEnter"]],[30,0,["collapseOnFocusOut"]],[30,0,["debounce"]],[30,0,["debounceDelay"]],[30,0,["icon"]],[30,0,["buttonIcon"]]]],null],[1,"\\n              "],[13],[1,"\\n            "]],[],false,["ui-components/multiline-text-box"]]',moduleName:"(unknown template module)",isStrictMode:!1}),context:{...args,onSubmitCallback:()=>(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_0__.XI)("search button clicked")(),onClearCallback:()=>(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_0__.XI)("clear button clicked")()}}),name:"With icons",args:{label:"Search folder with",placeholder:"Type file name to search",icon:"folder",buttonIcon:"search"}},__namedExportsOrder=["Default","WithIcons"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  render: args => {\n    return {\n      template: hbs`\n              <div style='width: 300px;'>\n                <UiComponents::MultilineTextBox\n                  @placeholder = {{this.placeholder}}\n                  @label = {{this.label}}\n                  @buttonLabel = {{this.buttonLabel}}\n                  @searchCallback = {{this.onSubmitCallback}}\n                  @clearCallback = {{this.onClearCallback}}\n                  @minLength = {{this.minLength}}\n                  @maxLength = {{this.maxLength}}\n                  @autoFocus = {{this.autoFocus}}\n                  @searchOnEnter = {{this.searchOnEnter}}\n                  @collapseOnFocusOut = {{this.collapseOnFocusOut}}\n                  @debounce = {{this.debounce}}\n                  @debounceDelay = {{this.debounceDelay}}\n                  @icon = {{this.icon}}\n                  @buttonIcon = {{this.buttonIcon}}\n                />\n              </div>\n            `,\n      context: {\n        ...args,\n        onSubmitCallback: () => action('search button clicked')(),\n        onClearCallback: () => action('clear button clicked')()\n      }\n    };\n  },\n  name: 'Default',\n  argTypes: {\n    label: {\n      description: 'Label for the input',\n      type: 'string'\n    },\n    buttonLabel: {\n      description: 'Name for the search button',\n      type: 'string'\n    },\n    placeholder: {\n      description: 'Placeholder for the input',\n      type: 'string'\n    },\n    icon: {\n      description: 'svg file name of the icon which will be displayed on the left to label',\n      type: 'string'\n    },\n    buttonIcon: {\n      description: 'svg file name of the icon which will be displayed on the submit button. If buttonIcon is given buttonLabel will not be displayed',\n      type: 'string'\n    },\n    minLength: {\n      description: \"Minimum characters to be entered to submit and to show submit button. Default value is '1' \",\n      type: 'number',\n      defaultValue: 1\n    },\n    maxLength: {\n      description: \"Maximum characters that can be entered. Default value is '255'\",\n      type: 'number',\n      defaultValue: 255\n    },\n    collapseOnFocusOut: {\n      description: \"Shows only the first line if the input is blurred. Defaults to 'true' \",\n      type: 'boolean',\n      defaultValue: true\n    },\n    searchOnEnter: {\n      description: \"Submits input when 'Enter' key is pressed. Defaults to 'true'\",\n      type: 'boolean',\n      defaultValue: true\n    },\n    autoFocus: {\n      description: \"auto focus input on page load and re-render. Defaults to 'false'\",\n      type: 'boolean',\n      defaultValue: false\n    },\n    debounce: {\n      description: \"If true invokes searchCallback with debounce delay. Submit button will not be displayed when this is true. Defaults to 'false'\",\n      type: 'boolean',\n      defaultValue: false\n    },\n    debounceDelay: {\n      description: \"Delay in ms for debounce search. Defaults to 'false'\",\n      type: 'number',\n      defaultValue: 350\n    },\n    searchCallback: {\n      description: 'Callback method to invoke on press Enter or on click of submit button',\n      type: 'function',\n      control: false\n    },\n    clearCallback: {\n      description: 'Callback method to invoke on clear input using the clear button',\n      type: 'function',\n      control: false\n    }\n  },\n  args: {\n    label: 'Search label goes here',\n    buttonLabel: 'Go',\n    placeholder: 'Type something and Enter'\n  }\n}",...Default.parameters?.docs?.source}}},WithIcons.parameters={...WithIcons.parameters,docs:{...WithIcons.parameters?.docs,source:{originalSource:"{\n  render: args => {\n    return {\n      template: hbs`\n              <div style='width: 300px;'>\n                <UiComponents::MultilineTextBox\n                  @placeholder    = {{this.placeholder}}\n                  @label          = {{this.label}}\n                  @buttonLabel    = {{this.buttonLabel}}\n                  @searchCallback = {{this.onSubmitCallback}}\n                  @clearCallback  = {{this.onClearCallback}}\n                  @minLength  = {{this.minLength}}\n                  @maxLength  = {{this.maxLength}}\n                  @autoFocus = {{this.autoFocus}}\n                  @searchOnEnter = {{this.searchOnEnter}}\n                  @collapseOnFocusOut = {{this.collapseOnFocusOut}}\n                  @debounce = {{this.debounce}}\n                  @debounceDelay = {{this.debounceDelay}}\n                  @icon = {{this.icon}}\n                  @buttonIcon = {{this.buttonIcon}}\n                />\n              </div>\n            `,\n      context: {\n        ...args,\n        onSubmitCallback: () => action('search button clicked')(),\n        onClearCallback: () => action('clear button clicked')()\n      }\n    };\n  },\n  name: 'With icons',\n  args: {\n    label: 'Search folder with',\n    placeholder: 'Type file name to search',\n    icon: 'folder',\n    buttonIcon: 'search'\n  }\n}",...WithIcons.parameters?.docs?.source}}}}}]);