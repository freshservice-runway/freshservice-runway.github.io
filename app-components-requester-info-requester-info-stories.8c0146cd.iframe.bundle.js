"use strict";(globalThis.webpackChunkfreshservice=globalThis.webpackChunkfreshservice||[]).push([[7297],{"./app/components/app-components/requester-info/requester-info.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});const createStoreMock=()=>Ember.on("init",(async function(){const context=Ember.getOwner(this),store=context.lookup("service:store");store.createRecord("location",{id:1,name:"testloc",locationPath:"Path for Location"}),store.createRecord("user",{id:2,name:"Fs Agent 2",email:"fsAgent2@freshservice.com"});const nativeIntegration=context.lookup("service:nativeIntegration");return this.set("loaded",!1),await nativeIntegration.fetchInstalledApplications.perform("ticket"),this.set("loaded",!0),!0})),__WEBPACK_DEFAULT_EXPORT__={title:"app-components/requester-info",component:"AppComponentsRequesterInfo"},Default={render:(args,{globals:{loadTranslations}})=>({template:Ember.HTMLBars.template({id:"3y5Ydprg",block:'[[[1,"\\n                "],[10,0],[14,1,"ember-testing"],[12],[1,"\\n                    "],[10,0],[14,0,"tcpr-widgets"],[12],[1,"\\n"],[41,[33,1],[[[1,"                            "],[8,[39,2],null,[["@ticketModel","@moduleLocation","@listAppsFetched","@updateConversationList"],[[99,3,["@ticketModel"]],[99,4,["@moduleLocation"]],[99,5,["@listAppsFetched"]],[99,6,["@updateConversationList"]]]],null],[1,"\\n"]],[]],null],[1,"                    "],[13],[1,"\\n                "],[13],[1,"\\n            "]],[],false,["if","loaded","app-components/requester-info","ticketModel","moduleLocation","listAppsFetched","updateConversationList"]]',moduleName:"(unknown template module)",isStrictMode:!1}),context:{...args,createStoreMock:createStoreMock(),loadTranslations:loadTranslations()}}),name:"Default",argTypes:{ticketModel:{type:{name:"object",required:!0},description:"Ticket Model Instance"},moduleLocation:{control:{disable:!0},description:"Location of the module from where this app is loaded"},listAppsFetched:{type:"boolean",control:{disable:!0},description:"Shows the list of apps that are loaded once this flag is enabled"},updateConversationList:{type:"event",control:{disable:!0},description:"Callback function triggered to show recent conversations"}},args:{ticketModel:{requester:{id:1,locationId:1,displayName:"FS Agent",email:"fsagent@freshservice.com",phoneNumber:"9988324324",workPhoneNumber:"9988324324",reportingManagerId:2}},moduleLocation:"ticket_sidebar",listAppsFetched:!0}},__namedExportsOrder=["Default"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  // below we have added 'ember-testing' container as 'ember-modal-dialog' defaults to 'ember-testing' as root container if 'test:true' is passed.\n  render: (args, {\n    globals: {\n      loadTranslations\n    }\n  }) => {\n    return {\n      template: hbs`\n                <div id='ember-testing'>\n                    <div class='tcpr-widgets'>\n                        {{#if loaded}}\n                            <AppComponents::RequesterInfo\n                                @ticketModel = {{ticketModel}}\n                                @moduleLocation = {{moduleLocation}}\n                                @listAppsFetched = {{listAppsFetched}}\n                                @updateConversationList = {{updateConversationList}} />\n                        {{/if}}\n                    </div>\n                </div>\n            `,\n      context: {\n        ...args,\n        createStoreMock: createStoreMock(),\n        loadTranslations: loadTranslations()\n      }\n    };\n  },\n  name: 'Default',\n  argTypes: {\n    ticketModel: {\n      type: {\n        name: 'object',\n        required: true\n      },\n      description: 'Ticket Model Instance'\n    },\n    moduleLocation: {\n      control: {\n        disable: true\n      },\n      description: 'Location of the module from where this app is loaded'\n    },\n    listAppsFetched: {\n      type: 'boolean',\n      control: {\n        disable: true\n      },\n      description: 'Shows the list of apps that are loaded once this flag is enabled'\n    },\n    updateConversationList: {\n      type: 'event',\n      control: {\n        disable: true\n      },\n      description: 'Callback function triggered to show recent conversations'\n    }\n  },\n  args: {\n    ticketModel: {\n      requester: {\n        id: 1,\n        locationId: 1,\n        displayName: 'FS Agent',\n        email: 'fsagent@freshservice.com',\n        phoneNumber: '9988324324',\n        workPhoneNumber: '9988324324',\n        reportingManagerId: 2\n      }\n    },\n    moduleLocation: 'ticket_sidebar',\n    listAppsFetched: true\n  }\n}",...Default.parameters?.docs?.source}}}}}]);