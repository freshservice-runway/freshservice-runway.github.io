{"version":3,"file":"stories-validate-nested-field-mdx.1e10ab38.iframe.bundle.js","mappings":";;;;;;;;;;;;;;AA0CA","sources":["webpack://freshservice/./app/utils/stories/validate-nested-field.mdx"],"sourcesContent":["\nimport React from 'react';\n\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/runner/_work/itildesk/itildesk/frontend/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim.mjs\";\nimport {Meta, Source} from '@storybook/blocks';\nimport dedent from 'ts-dedent';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(Meta, {\n      title: \"Utils/validate-nested-field\"\n    }), \"\\n\", _jsx(\"div\", {\n      className: \"subheading\",\n      children: \"ValidateNestedField\"\n    }), \"\\n\", _jsxs(\"ol\", {\n      class: \"api-list\",\n      children: [_jsxs(\"li\", {\n        children: [_jsx(\"code\", {\n          children: \"modifyNestedFieldValidation\"\n        }), \" - This method used to add/reset validation to the nested field\"]\n      }), _jsx(\"br\", {}), _jsx(Source, {\n        language: \"js\",\n        dark: true,\n        format: false,\n        code: dedent`\n    import modifyNestedFieldValidation from 'freshservice/utils/validate-nested-field';\n    \n    modifyNestedFieldValidation(model, property, value, formSchema);\n    /**\n    * this method will add or reset validation in model based on the form fields choices and field should be nested field.\n    * \n    * model -- is the ember data model object\n    * property -- field which we are checking for validation\n    * value -- if the form field matches the choices with this value and if dependentIds choice has length \n    *            it will add the validation, if not, it will clear the validation\n    * formSchema -- it will do validation only if formSchema fields matches with property and \n    *                matched field should have dependentId choices\n    **/\n`\n      })]\n    })]\n  });\n}\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n"],"names":[],"sourceRoot":""}