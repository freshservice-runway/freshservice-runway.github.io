{"version":3,"file":"stories-dynamic-auto-imports-d3-mdx.1306f1d3.iframe.bundle.js","mappings":";;;;;;AAuCA","sources":["webpack://freshservice/./app/utils/stories/dynamic-auto-imports/d3.mdx"],"sourcesContent":["\nimport React from 'react';\n\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/runner/_work/itildesk/itildesk/frontend/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim.mjs\";\nimport {Meta, Source} from '@storybook/blocks';\nimport dedent from 'ts-dedent';\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(Meta, {\n      title: \"Utils/dynamic-auto-imports/d3\"\n    }), \"\\n\", _jsx(\"div\", {\n      className: \"subheading\",\n      children: \"D3\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"D3.js is a JavaScript library for manipulating documents based on data\"\n      })\n    }), \"\\n\", _jsxs(\"ol\", {\n      class: \"api-list\",\n      children: [_jsx(\"li\", {\n        children: \"This method fetches the required d3 plugins dynamically as lazily loaded chunks\"\n      }), _jsx(\"br\", {}), _jsx(Source, {\n        language: \"js\",\n        dark: true,\n        format: false,\n        code: dedent`\n    import { dynamicImportD3 } from 'freshservice/utils/dynamic-auto-imports/d3';\n    \n\tfetchD3Plugins(){\n\t\treturn dynamicImportD3('zoom', 'drag', 'selection', 'hierarchy', 'shape').then(d3 => this.d3=d3);\n\t}\n`\n      }), _jsx(_components.p, {\n        children: \"If we want to use any other d3 plugins apart from zoom, drag, selection, hierarchy, shape, need to add it to our npm dependencies and use it\"\n      })]\n    })]\n  });\n}\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n"],"names":[],"sourceRoot":""}