{"version":3,"file":"stories-po-utils-mdx.1803e74d.iframe.bundle.js","mappings":";;;;AA6BA;;;;;;;;;;;;AAiBA;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA;;;;AAaA;;;;;;;;;;;;AAiBA;;;;AAaA;;;;;;;;;;;;;;;AAuBA","sources":["webpack://freshservice/./app/utils/stories/po-utils.mdx"],"sourcesContent":["\nimport React from 'react';\n\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/runner/_work/itildesk/itildesk/frontend/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim.mjs\";\nimport {Meta, Source} from '@storybook/blocks';\nimport dedent from 'ts-dedent';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(Meta, {\n      title: \"Utils/po-utils\"\n    }), \"\\n\", _jsx(\"div\", {\n      className: \"subheading\",\n      children: \"poUtil\"\n    }), \"\\n\", _jsxs(\"ol\", {\n      class: \"api-list\",\n      children: [_jsxs(\"li\", {\n        children: [_jsx(\"code\", {\n          children: \"addAddressDetails\"\n        }), \" - This method returns the address in a string\"]\n      }), _jsx(\"br\", {}), _jsx(Source, {\n        language: \"js\",\n        dark: true,\n        format: false,\n        code: dedent`\n    import poUtil from 'freshservice/utils/po-utils';\n    \n    poUtil.addAddressDetails(input);\n`\n      }), _jsx(Source, {\n        language: \"js\",\n        light: true,\n        format: false,\n        code: dedent`\n    //sample input\n    {\n        \"No.\" : 9,\n        \"street\": \"test street\",\n        \"pincode\": 600119\n    }\n    \n    //sample output\n    \\`9\n    test street\n    600119\\`\n`\n      }), _jsxs(\"li\", {\n        children: [_jsx(\"code\", {\n          children: \"addContactDetails\"\n        }), \" - adding existing details with name, email, phone, mobile if presents\"]\n      }), _jsx(Source, {\n        language: \"js\",\n        dark: true,\n        format: false,\n        code: dedent`\n    import poUtil from 'freshservice/utils/po-utils';\n    \n    poUtil.addContactDetails(input, output, conditionCheck);\n    \n    //if conditionCheck is true, name, phone and email will be input.contactName, input.phone, input.email\n    //if conditionCheck is false, name, phone and email will be input.name, input.workPhoneNumber, input.primaryEmail\n`\n      }), _jsx(Source, {\n        language: \"js\",\n        light: true,\n        format: false,\n        code: dedent`\n    //sample input1\n    input = { name: 'test', contactName: 'test1', email: 'test1@gmail.com',primaryEmail: 'test@gmail.com', phone: 2332423, workPhoneNumber: 253242343},\n    output = \\`1 Infinite Loop\n            Cupertino\n            California\n            United States\n            95014\\`,\n    conditionCheck = false;\n \n    //sample output 1\n    \\`test\n    1 Infinite Loop\n    Cupertino\n    California\n    United States\n    95014\n    test@gmail.com\n    253242343\\`\n \n    //sample input2\n    input = { name: 'test', contactName: 'test1', email: 'test1@gmail.com',primaryEmail: 'test@gmail.com', phone: 2332423, workPhoneNumber: 253242343},\n    output = \\`1 Infinite Loop\n            Cupertino\n            California\n            United States\n            95014\\`,\n    conditionCheck = true;\n     \n    //sample output 2\n    \\`test1\n    1 Infinite Loop\n    Cupertino\n    California\n    United States\n    95014\n    test1@gmail.com\n    2332423\\`\n`\n      }), _jsxs(\"li\", {\n        children: [_jsx(\"code\", {\n          children: \"parseValue\"\n        }), \" - returns float value if value is present\"]\n      }), _jsx(Source, {\n        language: \"js\",\n        dark: true,\n        format: false,\n        code: dedent`\n    import poUtil from 'freshservice/utils/po-utils';\n    \n    poUtil.parseValue(input);\n`\n      }), _jsx(Source, {\n        language: \"js\",\n        light: true,\n        format: false,\n        code: dedent`\n    //sample input1\n    input = 35.50;\n    \n    //sample output1\n    35.50\n    \n    //sample input2\n    input = undefined;  \n    \n    //sample output2\n    0\n`\n      }), _jsxs(\"li\", {\n        children: [_jsx(\"code\", {\n          children: \"roundFloat\"\n        }), \" - returns rounded off float values\"]\n      }), _jsx(Source, {\n        language: \"js\",\n        dark: true,\n        format: false,\n        code: dedent`\n    import poUtil from 'freshservice/utils/po-utils';\n    \n    poUtil.roundFloat(input, 2);\n`\n      }), _jsx(Source, {\n        language: \"js\",\n        light: true,\n        format: false,\n        code: dedent`\n    //sample input1\n    input = 35.5233, 2\n    //sample output1\n    35.52\n    \n    //sample input2\n    input = 35.5233, 1\n    //sample output2\n    35.5\n    \n    //sample input3\n    input = 66.6698 1\n    //sample output3\n    66.7\n`\n      })]\n    })]\n  });\n}\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n"],"names":[],"sourceRoot":""}